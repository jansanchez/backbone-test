(function() {
    var e = function(e, t) {
            (function() {
                function n(e) {
                    function n() {
                        t.trigger("player:pauseSong"), t.trigger("lightbox:open", "login", {
                            premiumRequired: !0,
                            _canClose: !1,
                            message: _.getString("LB_SIGNUP_LOGIN_PREMIUM_REQUIRED")
                        })
                    }
                    t.ready.done(function() {
                        t.Services.API.reportUserChange(e);
                        if (t.getLoggedInUserID() !== e.id) return;
                        if (e.id > 0) {
                            var r = e.get("subscription");
                            !r.canUseDesktop() && t.External.AIRBridge && t.External.AIRBridge.isDesktop && _.defer(n, 100)
                        } else t.External.AIRBridge && t.External.AIRBridge.isDesktop && n()
                    })
                }
                function r(e, t) {
                    var n = e.get("oldUserClean"),
                        r = e.cleanUpOnLogout(!0);
                    n && n.state() == "pending" ? t.set("oldUserClean", $.after(n, r)) : t.set("oldUserClean", r)
                }
                function i(e, i, o, u) {
                    if (!u || u.userID === 0) {
                        s.call(this, e, i, u);
                        return
                    }
                    t.Models.AuthUser.uncacheID(u.UserID);
                    var a = this.get("user"),
                        f = new t.Models.AuthUser(u);
                    r(a, f), this.trigger("userChange:started", {
                        newUser: f,
                        oldUser: a,
                        destination: o
                    }), this.set({
                        user: f
                    }), n(f), this.trigger("userChange:finished", {
                        newUser: f,
                        oldUser: a,
                        destination: o
                    }), e.resolve(f)
                }
                function s(e, n, r) {
                    r || (r = {}), r.authType = n, t.trigger("guts:log", "loginFail", {
                        type: n
                    }), e.reject(r)
                }
                function o(e) {
                    t.Models.AuthUser.uncacheID(-1), e && t.Services.SWF.sendSelfMessage && t.Services.SWF.sendSelfMessage(null, "logout");
                    var i = this.get("user"),
                        s = new t.Models.AuthUser({
                            UserID: -1,
                            userTrackingID: i.get("userTrackingID")
                        });
                    r(i, s), this.trigger("userChange:started", {
                        newUser: s,
                        oldUser: i,
                        destination: ""
                    }), this.set("user", s), this.trigger("userChange:finished", {
                        newUser: s,
                        oldUser: i,
                        destination: ""
                    }), n(s)
                }
                function u(e) {
                    if (!e || !e.length) return;
                    var t = this.get("user");
                    t.get("library") && t.get("library").remove(e), t.get("favoriteSongs") && t.get("favoriteSongs").remove(e)
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Model = Backbone.Model.extend({
                    initialize: function() {
                        this.set({
                            user: new t.Models.AuthUser(_.extend({}, gsConfig.user)),
                            player: new t.Models.Player,
                            theme: new t.Models.Theme,
                            ad: new t.Models.Ad
                        }), n(this.get("user")), t.on("songs:deleted", u, this)
                    },
                    onSignup: function(e, i) {
                        t.Models.AuthUser.uncacheID(e.UserID);
                        var s = this.get("user"),
                            o = new t.Models.AuthUser(e);
                        r(s, o), i && t.router.setHash(i), this.set("user", o), n(o)
                    },
                    login: function(e, n, r, o) {
                        var u = new $.Deferred,
                            a;
                        switch (e) {
                        case "google":
                            a = t.Services.Google.login();
                            break;
                        case "twitter":
                            a = t.Services.Twitter.login();
                            break;
                        case "normal":
                        default:
                            e = "normal", a = t.Services.API.authenticateUser(n, r)
                        }
                        return a.done(_.bind(i, this, u, e, o)).fail(_.bind(s, this, u, e)), u.promise()
                    },
                    logout: function(e, n) {
                        if (e) return o.call(this, !1);
                        var r, i = this,
                            s = this.get("player").get("currentQueue");
                        return !n && s && s.get("isBroadcasting") ? (r = $.Deferred(), t.trigger("lightbox:open", {
                            _type: "logoutConfirm",
                            view: {
                                header: "LB_LOGOUT_CONFIRM_BROADCAST_TITLE",
                                message: "LB_LOGOUT_CONFIRM_BROADCAST_MSG",
                                buttonsLeft: [{
                                    label: "CANCEL",
                                    className: "close"
                                }],
                                buttonsRight: [{
                                    label: "SIGN_OUT",
                                    className: "btn-primary submit"
                                }]
                            },
                            callbacks: {
                                ".submit": function(e) {
                                    t.Services.SWF.endBroadcast(), i.logout(!1, !0).done(function() {
                                        r.resolve.apply(r, _.toArray(arguments))
                                    }).fail(function() {
                                        r.reject.apply(r, _.toArray(arguments))
                                    }).always(function() {
                                        t.trigger("lightbox:close", "logoutConfirm")
                                    })
                                }
                            },
                            onDestroy: function() {
                                r.state() == "pending" && r.reject()
                            }
                        })) : (r = t.Services.API.logoutUser(), r.done(_.bind(o, this, !0))), r.promise()
                    }
                }, {})
            })(), function() {
                function n(e, n, i) {
                    if (!i) return r(e, n);
                    i.Data ? this.set("pageNameData", i.Data) : this.set("pageNameData", {}), i.Name ? i.Name.indexOf("/") > -1 ? this.set("PathName", "") : this.set("PathName", i.Name) : this.set("PathName", ""), i.Data && i.Data.Tags ? this.set("Tags", new t.Models.Collections.Tags(i.Data.Tags)) : this.set("Tags", new t.Models.Collections.Tags([])), n === "data" ? e.resolve(this.get("pageNameData")) : e.resolve(this.get("PathName"))
                }
                function r(e, t) {
                    this.set({
                        PathName: "",
                        pageNameData: {}
                    }), e.resolve(null)
                }
                function i(e) {
                    return {
                        AlbumID: e.A,
                        AlbumName: e.B,
                        ArtistID: e.C,
                        ArtistName: e.D,
                        CoverArtFilename: e.E,
                        EstimateDuration: e.F,
                        Flags: e.G,
                        Popularity: e.H,
                        SongID: e.I,
                        SongName: e.J,
                        TSAdded: e.K,
                        TrackNum: e.L,
                        Year: _.defined(e.M) ? e.M : "0",
                        TSFavorited: e.O,
                        TagIDs: e.P
                    }
                }
                function s(e) {
                    return {
                        AlbumID: e.alID,
                        AlbumName: e.alN,
                        ArtistID: e.arID,
                        ArtistName: e.arN,
                        CoverArtFilename: e.art,
                        EstimateDuration: e.estD,
                        Flags: e.f,
                        SongID: e.sID,
                        SongName: e.sN,
                        TrackNum: e.t,
                        token: e.tk
                    }
                }
                function o(e) {
                    var n = this.attributes.Artists,
                        r = this.attributes.Albums;
                    e.ArtistID && !n.get(e.ArtistID) && n.add(new t.Models.Artist({
                        ArtistID: e.ArtistID,
                        ArtistName: e.ArtistName
                    }), {
                        silent: !0
                    }), e.AlbumID && !r.get(e.AlbumID) && r.add(new t.Models.Album({
                        ArtistID: e.AlbumArtistID || e.ArtistID,
                        ArtistName: e.AlbumArtistName || e.ArtistName,
                        AlbumID: e.AlbumID,
                        AlbumName: e.AlbumName,
                        Year: e.Year,
                        CoverArtFilename: e.CoverArtFilename,
                        IsVerifiedSongs: e.IsVerified
                    }), {
                        silent: !0
                    }), e.TrackNum && (this.attributes.TrackNumsByAlbumID[e.AlbumID] = e.TrackNum), _.toInt(e.IsVerified) && this.set("IsVerified", 1), e.TrackNum && this.set("TrackNum", _.toInt(e.TrackNum))
                }
                function u(e) {
                    return e.CalloutID || e.calloutID ? new t.Models.Callout(e) : new t.Models.Song(e)
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Song = Backbone.CachedModel.extend({
                    idAttribute: "SongID",
                    defaults: {
                        CoverArtFilename: "",
                        IsLowBitrateAvailable: 0,
                        IsVerified: 0,
                        token: null,
                        tokenFailed: !1
                    },
                    constructor: function(e) {
                        var n = _.toArray(arguments);
                        if (e.hasOwnProperty("A")) n[0] = e = i(e);
                        else if (e.hasOwnProperty("sID")) n[0] = e = s(e);
                        else {
                            e.SongID = _.orEqualEx(e.SongID, e.songID, 0), e.ArtistID = _.orEqualEx(e.ArtistID, e.artistID, 0), e.AlbumID = _.orEqualEx(e.AlbumID, e.albumID, 0), e.SongName = _.orEqualEx(e.SongName, e.songName, e.Name, "Unknown Title"), e.ArtistName = _.orEqualEx(e.ArtistName, e.artistName, "Unknown Artist"), e.AlbumName = _.orEqualEx(e.AlbumName, e.albumName, "Unknown Album"), e.CoverArtFilename = _.orEqualEx(e.CoverArtFilename, e.artFilename, ""), e.EstimateDuration = _.orEqualEx(e.EstimateDuration, e.estimateDuration, 0), e.Flags = _.orEqual(e.Flags, e.flags), e.TrackNum = _.orEqualEx(e.TrackNum, e.trackNum, 0), e.Year = _.orEqualEx(e.Year, e.year, "0"), e.Popularity = _.orEqualEx(e.Popularity, e.popularity, 0), e.IsVerified = _.orEqual(e.IsVerified, e.isVerified);
                            if (_.isArray(e.tagIDs) || _.isArray(e.TagIDs)) e.TagIDs = e.tagIDs || e.TagIDs;
                            _.isArray(e.Tags) && (e.Tags = new t.Models.Collections.Tags(e.Tags));
                            try {
                                delete e.songID, delete e.artistID, delete e.albumID, delete e.songName, delete e.artistName, delete e.albumName, delete e.artFilename, delete e.flags, delete e.trackNum, delete e.popularity, delete e.isVerified
                            } catch (r) {}
                            e.SongID = _.toInt(e.SongID), e.ArtistID = _.toInt(e.ArtistID), e.AlbumID = _.toInt(e.AlbumID), e.TrackNum = _.toInt(e.TrackNum), _.defined(e.Flags) && (e.Flags = _.toInt(e.Flags)), _.defined(e.Popularity) && (e.Popularity = _.toInt(e.Popularity)), e.IsVerified = parseFloat(e.IsVerified, 10), e.IsVerified = isNaN(e.IsVerified) ? 0 : e.IsVerified
                        }
                        return e.searchText = [e.SongName, e.ArtistName, e.AlbumName].join(" ").toLowerCase(), e.CoverArtFilename === "default.png" && (e.CoverArtFilename = ""), this._super.apply(this, ["constructor"].concat(n))
                    },
                    initialize: function(e, n) {
                        this.attributes.Artists || this.set("Artists", new t.Models.Collections.Artists([]), {
                            silent: !0
                        }), this.attributes.Albums || this.set("Albums", new t.Models.Collections.Albums([]), {
                            silent: !0
                        }), this.attributes.TrackNumsByAlbumID || this.set("TrackNumsByAlbumID", {}, {
                            silent: !0
                        }), o.call(this, e), this._super.apply(this, ["initialize"].concat(arguments))
                    },
                    updateFromNew: function(e) {
                        var t = _.defaults(this.attributes, e);
                        e.hasOwnProperty("ppVersion") && (t.ppVersion = e.ppVersion);
                        var n = _.toInt(e.Popularity);
                        n && (t.Popularity = n);
                        var r = _.toInt(e.TrackNum);
                        r && (t.TrackNum = r);
                        var i = _.toInt(e.Year);
                        i && (t.Year = i), this.set(t, {
                            silent: !0
                        }), o.call(this, e)
                    },
                    archiveAttr: function() {
                        var e = [],
                            t = this.attributes;
                        t.Tags && t.Tags.each(function(t) {
                            e.push(t.id)
                        }), !e.length && $.isArray(t.TagIDs) && (e = t.TagIDs);
                        var n = {
                            A: t.AlbumID,
                            B: t.AlbumName,
                            C: t.ArtistID,
                            D: t.ArtistName,
                            E: t.CoverArtFilename,
                            F: t.EstimateDuration,
                            H: t.Popularity,
                            I: t.SongID,
                            J: t.SongName,
                            K: t.TSAdded,
                            L: t.TrackNum,
                            M: t.Year,
                            N: 0,
                            O: t.TSFavorited,
                            P: e
                        };
                        return _.defined(t.Flags) && (n.G = t.Flags), n
                    },
                    get: function(e) {
                        switch (e) {
                        case "ArtistID":
                            return this.attributes.Artists && this.attributes.Artists.models && this.attributes.Artists.models.length ? this.attributes.Artists.models[0].attributes.ArtistID : 0;
                        case "ArtistName":
                            return this.attributes.Artists && this.attributes.Artists.models && this.attributes.Artists.models.length ? this.attributes.Artists.models[0].attributes.ArtistName : "";
                        case "AlbumID":
                            return this.attributes.Albums && this.attributes.Albums.models && this.attributes.Albums.models.length ? this.attributes.Albums.models[0].attributes.AlbumID : 0;
                        case "AlbumName":
                            return this.attributes.Albums && this.attributes.Albums.models && this.attributes.Albums.models.length ? this.attributes.Albums.models[0].attributes.AlbumName : "";
                        case "CoverArtFilename":
                            return this.attributes.Albums && this.attributes.Albums.models && this.attributes.Albums.models.length ? this.attributes.Albums.models[0].attributes.CoverArtFilename : "";
                        case "TrackNum":
                            return this.attributes.TrackNumsByAlbumID && this.get("AlbumID") ? this.attributes.TrackNumsByAlbumID[this.get("AlbumID")] : 0
                        }
                        return this.attributes[e]
                    },
                    setPreferredArtist: function(e) {
                        var t = this.get("Artists"),
                            n = t.get(e);
                        if (!n) return;
                        t.remove(n, {
                            silent: !0
                        }), t.unshift(n);
                        var r = this.get("Artists");
                        for (var i = 0; i < r.length; i++) {
                            var s = r.at(i);
                            if (s.get("ArtistID") == e) {
                                i !== 0 && (r.remove(s, {
                                    silent: !0
                                }), r.unshift(s));
                                break
                            }
                        }
                        this.set({
                            ArtistID: e,
                            ArtistName: n.get("ArtistName")
                        })
                    },
                    setPreferredAlbum: function(e) {
                        var t = this.get("Albums"),
                            n = t.get(e);
                        if (!n) return;
                        t.remove(n, {
                            silent: !0
                        }), t.unshift(n);
                        var r = n.get("ArtistID"),
                            i = this.get("Artists");
                        for (var s = 0; s < i.length; s++) {
                            var o = i.at(s);
                            if (r == o.id) {
                                s !== 0 && (i.remove(o, {
                                    silent: !0
                                }), i.unshift(o));
                                break
                            }
                        }
                        this.set({
                            AlbumID: e,
                            AlbumName: n.get("AlbumName")
                        })
                    },
                    toUrl: function(e) {
                        var t = this.getToken(!0);
                        return t ? _.cleanUrl(this.get("SongName"), this.get("SongID"), "s", t, e) : "#!/notFound"
                    },
                    toArtistUrl: function(e) {
                        return _.cleanUrl(this.get("ArtistName"), this.get("ArtistID"), "artist", null, e)
                    },
                    toAlbumUrl: function(e) {
                        return _.cleanUrl(this.get("AlbumName"), this.get("AlbumID"), "album", null, e)
                    },
                    getToken: function(e) {
                        e = _.orEqual(e, !1);
                        var n;
                        return !this.get("token") && !this.get("tokenFailed") ? n = t.Services.API.getTokenForSong(this.get("SongID"), _.bind(this._onGetToken, this), null, {
                            async: !e
                        }) : (n = new $.Deferred, n.resolve({
                            Token: this.get("token")
                        })), e ? this.get("token") : n.promise()
                    },
                    getPathName: function() {
                        var e = new $.Deferred;
                        return typeof this.get("PathName") != "undefined" ? e.resolve(this.get("PathName")) : t.Services.API.getPageInfoByIDType(this.get("SongID"), "song").done(_.bind(n, this, e, "name")).fail(_.bind(r, this, e)), e.promise()
                    },
                    getPageNameData: function() {
                        var e = new $.Deferred;
                        return typeof this.get("pageNameData") != "undefined" ? e.resolve(this.get("pageNameData")) : t.Services.API.getPageInfoByIDType(this.get("SongID"), "song").done(_.bind(n, this, e, "data")).fail(_.bind(r, this, e)), e.promise()
                    },
                    getTags: function() {
                        var e = new $.Deferred;
                        return typeof this.get("Tags") != "undefined" ? e.resolve(this.get("Tags")) : this.getPageNameData().done(_.bind(function() {
                            e.resolve(this.get("Tags"))
                        }, this)).fail(e.reject), e.promise()
                    },
                    _onGetToken: function(e) {
                        e.Token ? (this.set("token", e.Token), this.constructor.cacheToken(this)) : this.set("tokenFailed", !0)
                    },
                    getImageURL: function(e, n) {
                        return n = _.extend({
                            useDefault: !1
                        }, n), e = _.orEqual(e, 70), this.get("CoverArtFilename") && !n.useDefault ? t.Models.Song.artPath + e + "_" + this.get("CoverArtFilename") : t.Models.Song.artPath + e + "_album.png"
                    },
                    getDetailsForFeeds: function() {
                        return {
                            songID: this.get("SongID"),
                            songName: this.get("SongName"),
                            albumID: this.get("AlbumID"),
                            albumName: this.get("AlbumName"),
                            artistID: this.get("ArtistID"),
                            artistName: this.get("ArtistName"),
                            artFilename: this.get("CoverArtFilename"),
                            track: this.get("TrackNum"),
                            isVerified: this.get("IsVerified"),
                            token: this.get("token")
                        }
                    },
                    getDetailsForSwf: function() {
                        var e = /\u0000/g;
                        return {
                            SongID: this.get("SongID"),
                            SongName: this.get("SongName").replace(e, ""),
                            AlbumID: this.get("AlbumID"),
                            AlbumName: this.get("AlbumName").replace(e, ""),
                            ArtistID: this.get("ArtistID"),
                            ArtistName: this.get("ArtistName").replace(e, ""),
                            CoverArtFilename: this.get("CoverArtFilename").replace(e, ""),
                            TrackNum: this.get("TrackNum"),
                            Flags: this.get("Flags"),
                            EstimateDuration: this.get("EstimateDuration")
                        }
                    },
                    toProxyLabel: function() {
                        return _.getString("SELECTION_SONG_SINGLE", {
                            SongName: this.escape("SongName"),
                            ArtistName: this.escape("ArtistName")
                        })
                    },
                    getTitle: function(e) {
                        return e ? ['"', this.get("SongName"), '" by ', this.get("ArtistName"), ' on "', this.get("AlbumName"), '"'].join("") : ['"', this.escape("SongName"), '" by ', this.escape("ArtistName"), ' on "', this.escape("AlbumName"), '"'].join("")
                    },
                    getAnchorTag: function(e, t, n, r) {
                        var i = this.escape("SongName");
                        return "<a " + (this.get("token") ? ' href="' + this.toUrl(t) + '"' : "") + ' class="song-link ' + (n ? n : "") + (r ? ' use-title-for-tooltip" title="' + i : "") + '" data-song-id="' + this.get("SongID") + '">' + (e ? _.getString(e).toLocaleLowerCase() : i) + "</a>"
                    },
                    getArtistAnchorTag: function(e, t) {
                        return '<a href="' + _.cleanUrl(this.get("ArtistName"), this.get("ArtistID"), "artist", null, t) + '" class="artist-link">' + (e ? _.getString(e).toLocaleLowerCase() : _.escape(this.get("ArtistName"))) + "</a>"
                    },
                    getAlbumAnchorTag: function(e, t) {
                        return '<a href="' + _.cleanUrl(this.get("AlbumName"), this.get("AlbumID"), "album", null, t) + '" class="album-link">' + (e ? _.getString(e).toLocaleLowerCase() : _.escape(this.get("AlbumName"))) + "</a>"
                    },
                    getSingleItemContextMenu: function(e) {
                        e = _.orEqual(e, {});
                        var n = [],
                            r = t.Models.User.getCached(t.getLoggedInUserID()),
                            i = this.get("SongID"),
                            s = t.isBroadcastListener(),
                            o = t.isBroadcaster();
                        if (s || o) {
                            n.push({
                                title: _.getString("PREVIEW"),
                                customClass: "",
                                action: {
                                    type: "fn",
                                    callback: _.bind(function() {
                                        t.trigger("player:addSongs", [i], t.Services.SWF.playSpecialIndexes.DEFAULT, !0, e.playContext)
                                    }, this)
                                }
                            });
                            if (s && !e.activeSong) {
                                var u = t.getCurrentBroadcast();
                                n.push({
                                    title: _.getString("SUGGEST_SONG_FOR_BROADCAST"),
                                    customClass: "",
                                    action: {
                                        type: "fn",
                                        callback: _.bind(u.suggestSong, u, this)
                                    }
                                })
                            }
                            n.push({
                                customClass: "separator"
                            })
                        }!e.isQueue && !s && n.push({
                            title: _.getString("CONTEXT_PLAY_SONG_NOW"),
                            customClass: "jj_menu_item_play",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", [i], t.Services.SWF.playSpecialIndexes.DEFAULT, !0, e.playContext)
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextPlaySongNow", e.grid)
                                }
                            }
                        }, {
                            title: _.getString("CONTEXT_PLAY_SONG_NEXT"),
                            customClass: "jj_menu_item_play_next",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", [i], t.Services.SWF.playSpecialIndexes.NEXT, !1, e.playContext)
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextPlaySongNext", e.grid)
                                }
                            }
                        }, {
                            title: _.getString("CONTEXT_PLAY_SONG_LAST"),
                            customClass: "jj_menu_item_play_last",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", [i], t.Services.SWF.playSpecialIndexes.LAST, !1, e.playContext)
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextPlaySongLast", e.grid)
                                }
                            }
                        }, {
                            customClass: "separator"
                        }), r && r.get("library") && r.get("library").get(this) ? n.push({
                            title: _.getString("REMOVE_FROM_COLLECTION"),
                            customClass: "jj_menu_item_remove_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.removeSongsFromLibrary([i])
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextRemoveFromLibrary", e.grid)
                                }
                            }
                        }) : n.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            customClass: "jj_menu_item_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.addSongsToLibrary([i])
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextAddToLibrary", e.grid)
                                }
                            }
                        }), r.get("favoriteSongs") && r.get("favoriteSongs").get(this) ? n.push({
                            title: _.getString("CONTEXT_REMOVE_FROM_FAVORITES"),
                            customClass: "jj_menu_item_remove_favorite",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.unfavorite("Songs", i)
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextRemoveFromFavorites", e.grid)
                                }
                            }
                        }) : n.push({
                            title: _.getString("CONTEXT_ADD_TO_FAVORITES"),
                            customClass: "jj_menu_item_favorites",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.favorite("Songs", i)
                                },
                                log: function() {
                                    e.searchContext && t.trigger("guts:logsearch", "contextAddToFavorites", e.grid)
                                }
                            }
                        }), n.push({
                            customClass: "separator"
                        });
                        if (!r.get("playlists") || r.get("playlists").length === 0) n.push({
                            title: _.getString("CONTEXT_NEW_PLAYLIST"),
                            customClass: "jj_menu_item_new_playlist",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.id > 0 ? t.trigger("lightbox:open", "createPlaylist", {
                                        songs: [i]
                                    }) : t.trigger("lightbox:open", "login", {
                                        message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                                        onLogin: function(e) {
                                            t.trigger("lightbox:open", "createPlaylist", {
                                                songs: [i]
                                            })
                                        }
                                    })
                                }
                            }
                        });
                        else {
                            n.push({
                                title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                                type: "sub",
                                customClass: "jj_menu_item_playlists",
                                src: r.getPlaylistsMenu(!1, !0, {
                                    songs: [i]
                                }, function(e) {
                                    e.addSongs([i], null, !0)
                                })
                            });
                            if (e.playlist && e.playlist.isEditable()) {
                                var a = e.playlist,
                                    f = e.playlistSongID;
                                n.push({
                                    title: _.getString("CONTEXT_REMOVE_FROM_PLAYLIST"),
                                    customClass: "jj_menu_item_playlists",
                                    action: {
                                        type: "fn",
                                        callback: function() {
                                            var e = a.get("songs"),
                                                t = e.get(f);
                                            t && a.removeSongs([e.indexOf(t)])
                                        }
                                    }
                                })
                            }
                        }
                        e && e.deleteListens && n.push({
                            title: _.getString("REMOVE_LISTEN"),
                            customClass: "jj_menu_item_edit",
                            action: {
                                type: "fn",
                                callback: function() {
                                    _.isFunction(e.deleteListens) && e.deleteListens([i])
                                }
                            }
                        }), n.push({
                            customClass: "separator"
                        }), n = n.concat([{
                            title: _.getString("CONTEXT_SHARE_SONG"),
                            customClass: "jj_menu_item_share",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "share", {
                                        type: "song",
                                        id: i
                                    }), e.searchContext && t.trigger("guts:logsearch", "contextShareSong", e.grid)
                                }
                            }
                        }]);
                        var l = r.get("Context"),
                            c = l.type == "artist" ? l.artist.get("ArtistID") : null,
                            h = this.get("ArtistID");
                        return l.type == "artist" && c != h ? n.push({
                            title: _.getString("CLAIM_SONG"),
                            customClass: "jj_menu_item_plus",
                            action: {
                                type: "fn",
                                callback: _.bind(t.trigger, t, "lightbox:open", "claimSongs", {
                                    songIDs: [this.id]
                                })
                            }
                        }) : l.type == "artist" && c == h && n.push({
                            title: _.getString("EDIT_SONG"),
                            customClass: "jj_menu_item_edit",
                            action: {
                                type: "fn",
                                callback: _.bind(t.trigger, t, "lightbox:open", "editSongs", {
                                    songs: [this]
                                })
                            }
                        }), e.isQueue = _.orEqual(e.isQueue, !1), e.isQueue && (n.push({
                            customClass: "separator"
                        }, {
                            title: _.getString("CONTEXT_FLAG_SONG"),
                            customClass: "jj_menu_item_flag",
                            type: "sub",
                            src: [{
                                title: _.getString("CONTEXT_FLAG_BAD_SONG"),
                                customClass: "jj_menu_item_flag",
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        t.trigger("player:flagSong", e.queueSongClickedQueueSongID, 1)
                                    }
                                }
                            }, {
                                title: _.getString("CONTEXT_FLAG_BAD_METADATA"),
                                customClass: "jj_menu_item_flag",
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        t.trigger("player:flagSong", e.queueSongClickedQueueSongID, 4)
                                    }
                                }
                            }]
                        }), e.autoplayEnabled && (n.push({
                            customClass: "separator"
                        }, {
                            title: _.getString("QUEUE_ITEM_SMILE"),
                            customClass: "jj_menu_item_smile",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:voteSong", e.queueSongClickedQueueSongID, 1)
                                }
                            }
                        }, {
                            title: _.getString("QUEUE_ITEM_FROWN"),
                            customClass: "jj_menu_item_frown",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:voteSong", e.queueSongClickedQueueSongID, -1)
                                }
                            }
                        }), n = n.reverse())), n
                    },
                    getAddContextMenu: function(e) {
                        e = e || {};
                        var n = this.get("SongID"),
                            r = t.Models.User.getCached(t.getLoggedInUserID()),
                            i = [],
                            s = t.isBroadcastListener();
                        if (s) {
                            var o = t.getCurrentBroadcast();
                            i.push({
                                title: _.getString("SUGGEST_SONG_FOR_BROADCAST"),
                                customClass: "",
                                action: {
                                    type: "fn",
                                    callback: _.bind(o.suggestSong, o, this)
                                }
                            }, {
                                customClass: "separator"
                            })
                        }
                        return !e.fromQueue && !s && i.push({
                            title: _.getString("CONTEXT_ADD_TO_QUEUE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", [n], t.Services.SWF.playSpecialIndexes.LAST, !1, e.playContext)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_now_playing"
                        }), r.get("library") && r.get("library").get(n) ? i.push({
                            title: _.getString("REMOVE_FROM_COLLECTION"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.removeSongsFromLibrary([n])
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_music"
                        }) : i.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.addSongsToLibrary([n])
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_music"
                        }), this.get("isFavorite") ? i.push({
                            title: _.getString("CONTEXT_REMOVE_FROM_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.unfavorite("Songs", n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        }) : i.push({
                            title: _.getString("CONTEXT_ADD_TO_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.favorite("Songs", n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        }), t.isLoggedInUserOwnerOfArtist() && !t.isLoggedInUserOwnerOfArtist(this.get("ArtistID")) && i.push({
                            title: _.getString("CLAIM_SONG"),
                            customClass: "jj_menu_item_plus",
                            action: {
                                type: "fn",
                                callback: _.bind(t.trigger, t, "lightbox:open", "claimSongs", {
                                    songIDs: [this.id]
                                })
                            }
                        }), i.push({
                            title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                            type: "sub",
                            src: r.getPlaylistsMenu(!1, !0, {
                                songs: [n]
                            }, function(e) {
                                e.addSongs([n], null, !0)
                            }),
                            customClass: "jj_menu_item_add_playlist jj_menu_item_more"
                        }), i
                    },
                    getWidgetCode: function(e, t, n) {
                        n = _.orEqual(n, "metal");
                        var r = "gsSong" + this.get("SongID") + Math.floor(Math.random() * 101),
                            i = _.orEqual(e, 250),
                            s = _.orEqual(t, 40),
                            o = _.escape(this.get("SongName") + " by " + this.get("ArtistName") + " on Grooveshark"),
                            u = '<a href="http://grooveshark.com/search/song?q=' + encodeURIComponent(this.get("ArtistName") + " " + this.get("SongName")) + '" title="' + o + '">' + o + "</a>";
                        return '<object width="' + i + '" height="' + s + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="' + r + '" name="' + r + '">' + '<param name="movie" value="http://grooveshark.com/songWidget.swf" /><param name="wmode" value="window" /><param name="allowScriptAccess" value="always" />' + '<param name="flashvars" value="hostname=grooveshark.com&songID=' + this.get("SongID") + "&style=" + n + '&p=0" />' + '<object type="application/x-shockwave-flash" data="http://grooveshark.com/songWidget.swf" width="' + i + '" height="' + s + '"><param name="wmode" value="window" />' + '<param name="allowScriptAccess" value="always" /><param name="flashvars" value="hostname=grooveshark.com&songID=' + this.get("SongID") + "&style=" + n + '&p=0" />' + "<span>" + u + "</span></object></object>"
                    },
                    getWidgetType: function() {
                        return "single"
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/albums/",
                    cache: function(e) {
                        Backbone.CachedModel.cache.call(this, e), this.cacheToken(e)
                    },
                    cacheToken: function(e) {
                        var t = e.get("token");
                        if (t) {
                            var n = "t:" + t;
                            if (this._cache.hasOwnProperty(n)) {
                                if (this._cache[n].cid !== e.cid) throw ["Attempt to overwrite cached instance for ", n].join("");
                                return
                            }
                            this._cache[n] = e
                        }
                    },
                    popularSort: function(e, t) {
                        return t.get("Popularity") - e.get("Popularity")
                    },
                    trackSort: function(e, t) {
                        return _.toInt(e.get("TrackNum")) - _.toInt(t.get("TrackNum"))
                    },
                    trackAlphaSort: function(e, t) {
                        var n = _.toInt(e.get("TrackNum")),
                            r = _.toInt(t.get("TrackNum")),
                            i = n - r;
                        return n && r && i ? i : n ? -1 : r ? 1 : (n = e.get("SongName"), r = t.get("SongName"), n < r ? -1 : n === r ? 0 : 1)
                    },
                    nukeSong: function(e, n) {
                        if (!e) return;
                        e.get("Albums") && e.get("Albums").each(function(t) {
                            t.get("songs") && t.get("songs").remove(e), t.get("extraSongs") && t.get("extraSongs").remove(e)
                        }), e.get("Artists") && e.get("Artists").each(function(t) {
                            t.get("songs") && t.get("songs").remove(e)
                        });
                        if (n) {
                            var r = t.Models.AuthUser.getCached(t.getLoggedInUserID());
                            r && r.get("library") && r.get("library").remove(e), r && r.get("favoriteSongs") && r.get("favoriteSongs").remove(e), t.Models.Song.uncache(e)
                        }
                    },
                    get: function(e) {
                        var n = function(e) {
                                var n = new $.Deferred;
                                return t.Services.API.getQueueSongListFromSongIDs([e]).done(function(e) {
                                    n.resolve(e[0])
                                }).fail(function(e) {
                                    n.reject(e)
                                }), n.promise()
                            },
                            r = Backbone.CachedModel.genericGet.call(this, n, "SongID", e);
                        return r.promise()
                    },
                    getByToken: function(e) {
                        var n = function(n) {
                                var r = new $.Deferred;
                                return t.Services.API.getSongFromToken(e).done(function(t) {
                                    t.token = e, r.resolve(t)
                                }).fail(function(e) {
                                    r.reject(e)
                                }), r.promise()
                            },
                            r = "t:" + e,
                            i = Backbone.CachedModel.genericGet.call(this, n, "SongID", r);
                        return i.promise()
                    },
                    getMultiSongContextMenu: function(e, n) {
                        n = _.orEqual(n, {});
                        var r = t.Models.AuthUser.getCached(t.getLoggedInUserID()),
                            i = r.get("Context"),
                            s = t.isBroadcastListener(),
                            o = [],
                            u = [];
                        s || u.push({
                            title: _.getString("CONTEXT_PLAY_SONGS_NOW"),
                            customClass: "jj_menu_item_play",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, n.playContext)
                                },
                                log: function() {
                                    n.searchContext && t.trigger("guts:logsearch", "contextPlaySongsNow", n.grid)
                                }
                            }
                        }, {
                            title: _.getString("CONTEXT_PLAY_SONGS_NEXT"),
                            customClass: "jj_menu_item_play_next",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.NEXT, !1, n.playContext)
                                },
                                log: function() {
                                    n.searchContext && t.trigger("guts:logsearch", "contextPlaySongsNext", n.grid)
                                }
                            }
                        }, {
                            title: _.getString("CONTEXT_PLAY_SONGS_LAST"),
                            customClass: "jj_menu_item_play_last",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.LAST, !1, n.playContext)
                                },
                                log: function() {
                                    n.searchContext && t.trigger("guts:logsearch", "contextPlaySongsLast", n.grid)
                                }
                            }
                        }, {
                            customClass: "separator"
                        });
                        var a = !0;
                        if (r && r.get("library")) {
                            var f = r.get("library"),
                                l = 0;
                            f.each(function(t) {
                                _.indexOf(e, t.get("SongID")) != -1 && l++
                            }), l != e.length && (a = !1)
                        } else a = !1;
                        a ? u.push({
                            title: _.getString("REMOVE_FROM_COLLECTION"),
                            customClass: "jj_menu_item_remove_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.removeSongsFromLibrary(e)
                                },
                                log: function() {
                                    n.searchContext && t.trigger("guts:logsearch", "contextRemoveFromLibrary", n.grid)
                                }
                            }
                        }) : u.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            customClass: "jj_menu_item_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.addSongsToLibrary(e)
                                },
                                log: function() {
                                    n.searchContext && t.trigger("guts:logsearch", "contextAddToLibrary", n.grid)
                                }
                            }
                        }), u.push({
                            customClass: "separator"
                        }), r && r.get("playlists") && r.get("playlists").length === 0 ? u.push({
                            title: _.getString("CONTEXT_NEW_PLAYLIST"),
                            customClass: "jj_menu_item_new_playlist",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.id > 0 ? t.trigger("lightbox:open", "createPlaylist", {
                                        songs: e
                                    }) : t.trigger("lightbox:open", "login", {
                                        message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                                        onLogin: function(n) {
                                            t.trigger("lightbox:open", "createPlaylist", {
                                                songs: e
                                            })
                                        }
                                    })
                                }
                            }
                        }) : u.push({
                            title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                            type: "sub",
                            customClass: "jj_menu_item_playlists",
                            src: r.getPlaylistsMenu(!1, !0, {
                                songs: e
                            }, function(t) {
                                t.addSongs(e, null, !0)
                            })
                        });
                        if (n.playlist && n.playlist.isEditable()) {
                            var c = t.Models.Playlist.getCached(n.playContext.data.playlistID);
                            u.push({
                                title: _.getString("CONTEXT_REMOVE_FROM_PLAYLIST"),
                                customClass: "jj_menu_item_playlists",
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        var e = c.get("songs"),
                                            t = [];
                                        for (var r = 0, i = n.playlistSongIDS.length; r < i; r++) {
                                            var s = e.get(n.playlistSongIDS[r]);
                                            s && t.push(e.indexOf(s))
                                        }
                                        c.removeSongs(t)
                                    }
                                }
                            })
                        }
                        n && n.deleteListens && u.push({
                            title: _.getString("REMOVE_LISTEN"),
                            customClass: "jj_menu_item_edit",
                            action: {
                                type: "fn",
                                callback: function() {
                                    _.isFunction(n.deleteListens) && n.deleteListens(e)
                                }
                            }
                        });
                        var h = !1,
                            p = !1;
                        if (i.type == "artist") {
                            o = [], h = !0, p = !0;
                            var d = null,
                                v = i.artist.get("ArtistID"),
                                m, g;
                            for (var y = 0, b = e.length; y < b; y++) {
                                m = t.Models.Song.getCached(e[y]), g = m.get("ArtistID"), v != g ? p = !1 : h = !1;
                                if (d === null) d = g;
                                else if (d !== g) {
                                    p = !1;
                                    break
                                }
                                o.push(m)
                            }
                        }
                        return h ? u.push({
                            title: _.getString("CLAIM_SONGS"),
                            customClass: "jj_menu_item_plus",
                            action: {
                                type: "fn",
                                callback: _.bind(t.trigger, t, "lightbox:open", "claimSongs", {
                                    songIDs: e
                                })
                            }
                        }) : p && u.push({
                            title: _.getString("EDIT_SONGS"),
                            customClass: "jj_menu_item_edit",
                            action: {
                                type: "fn",
                                callback: _.bind(t.trigger, t, "lightbox:open", "editSongs", {
                                    songs: o
                                })
                            }
                        }), s || u.push({
                            customClass: "separator"
                        }, {
                            title: _.getString("CONTEXT_REPLACE_ALL_SONGS"),
                            customClass: "jj_menu_item_now_playing",
                            action: {
                                type: "fn",
                                callback: function() {
                                    var r = t.getCurrentPlayStatus() == 3 ? !0 : !1;
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.REPLACE, r, n.playContext)
                                },
                                log: function() {
                                    n.searchContext && t.trigger("guts:logsearch", "contextReplaceAllSongs", n.grid)
                                }
                            }
                        }), u
                    },
                    unarchiveSong: function(e) {
                        var n = t.Models.Song.getCached(e.I);
                        return n ? n : new t.Models.Song(i(e))
                    }
                }), t.Models.QueueSong = Backbone.MagicModelWrapper.extend({
                    idAttribute: "queueSongID",
                    myAttributes: ["queueSongID", "context", "paused", "playerDuration", "active", "smile", "frown", "suggestion", "songQueueHelper", "source", "parentQueueID", "autoplayVote", "artistIsClaimed", "reportedUpcomingInBroadcast", "isCallout", "broadcastPlayed"],
                    makeWrappedModel: u
                }), t.Models.PlaylistSong = Backbone.MagicModelWrapper.extend({
                    idAttribute: "playlistSongID",
                    myAttributes: ["playlistSongID"],
                    wrappedClass: t.Models.Song
                }), t.Models.BroadcastSong = Backbone.MagicModelWrapper.extend({
                    idAttribute: "broadcastSongID",
                    myAttributes: ["broadcastSongID", "broadcast", "upVotes", "downVotes", "userVote", "nowPlaying", "queueSongID", "noSkip", "isActiveSong", "listens", "listensCounted"],
                    wrappedClass: t.Models.Song,
                    constructor: function() {
                        var e = _.toArray(arguments),
                            t = e[0];
                        return t.downVotes ? !_.isArray(t.downVotes) && _.isObject(t.downVotes) && (t.downVotes = _.keys(t.downVotes)) : t.downVotes = [], t.upVotes ? !_.isArray(t.upVotes) && _.isObject(t.upVotes) && (t.upVotes = _.keys(t.upVotes)) : t.upVotes = [], t.userVote || (t.userVote = 0), this._super.apply(this, ["constructor"].concat(e))
                    }
                }), t.Models.BroadcastSuggestion = Backbone.MagicModelWrapper.extend({
                    idAttribute: "SongID",
                    myAttributes: ["broadcast", "upVotes", "userVote", "approvalStatus"],
                    wrappedClass: t.Models.Song,
                    constructor: function() {
                        var e = _.toArray(arguments),
                            t = e[0];
                        return t.songID && (t.SongID = t.songID, delete t.songID), t.upVotes ? _.isObject(t.upVotes) && (t.upVotes = _.keys(t.upVotes)) : t.upVotes = [], t.userVote || (t.userVote = 0), t.approvalStatus || (t.approvalStatus = 0), this._super.apply(this, ["constructor"].concat(e))
                    }
                });
                var a = ["toUrl", "toArtistUrl", "toAlbumUrl", "getToken", "getDetailsForFeeds", "getDetailsForSwf", "toProxyLabel", "getSingleItemContextMenu", "getPageNameData", "getAnchorTag", "getArtistAnchorTag"];
                Backbone.MagicModelWrapper.wrapMethods(t.Models.Song, t.Models.QueueSong, a), Backbone.MagicModelWrapper.wrapMethods(t.Models.Song, t.Models.BroadcastSong, a), Backbone.MagicModelWrapper.wrapMethods(t.Models.Song, t.Models.PlaylistSong, a.concat("getImageURL")), Backbone.MagicModelWrapper.wrapMethods(t.Models.Song, t.Models.BroadcastSuggestion, a.concat("getImageURL")), Backbone.MagicModelWrapper.createMyAttributesHash(t.Models.QueueSong), Backbone.MagicModelWrapper.createMyAttributesHash(t.Models.BroadcastSong), Backbone.MagicModelWrapper.createMyAttributesHash(t.Models.PlaylistSong), Backbone.MagicModelWrapper.createMyAttributesHash(t.Models.BroadcastSuggestion);
                var f = function(e, n) {
                        n = _.extend({
                            useDefault: !1
                        }, n), e = _.orEqual(e, 70);
                        var r;
                        if (this.attributes.context && this.attributes.context.type == "album" && this._wrapped.attributes.Albums) {
                            var i = this._wrapped.attributes.Albums.get(this.attributes.context.data.albumID);
                            i && (r = i.attributes.CoverArtFilename)
                        } else r = this.get("CoverArtFilename");
                        return r && !n.useDefault ? t.Models.Song.artPath + e + "_" + r : t.Models.Song.artPath + e + "_album.png"
                    };
                t.Models.QueueSong.prototype.getImageURL = f, t.Models.BroadcastSong.prototype.getImageURL = f
            }(), function() {
                function i(e, n, r) {
                    if (!r) return s(e, n);
                    var i = {
                        pageNameData: r.Data || {},
                        PathName: (r.Name && r.Name.indexOf("/") > -1 ? "" : r.Name) || "",
                        Tags: new t.Models.Collections.Tags(r.Data && r.Data.Tags || [])
                    };
                    this.set(i), n === "data" ? e.resolve(this.get("pageNameData")) : e.resolve(this.get("PathName"))
                }
                function s(e, t) {
                    this.set({
                        PathName: "",
                        pageNameData: {}
                    }), e.resolve(null)
                }
                function o(e, t, n) {
                    if (n) {
                        var r = {};
                        t.bio && (r.Bio = t.bio), t.bioAttribution && (r.BioAttribution = t.bioAttribution), t.urls && (this.get("pageNameData") && this.get("pageNameData").URLs ? r.URLs = $.extend({}, this.get("pageNameData").URLs, t.urls) : r.URLs = t.urls);
                        var i = $.extend({}, _.orEqual(this.get("pageNameData"), {}), r);
                        this.set("pageNameData", i), e.resolve(this.get("pageNameData"))
                    } else a(e, n)
                }
                function u(e, n, r) {
                    r ? (this.get("PathName") && t.router.uncachePageName(this.get("PathName")), n ? (this.set("PathName", n), t.router.cachePageName(n, "artist", this.id)) : this.set("PathName", ""), e.resolve(this.get("PathName"))) : a(e, r)
                }
                function a(e, t) {
                    e.reject(t)
                }
                function f(e) {
                    return function(t) {
                        return t.get("ArtistID") === e
                    }
                }
                function l(e, n, r, i) {
                    if (!i) return a(e, i);
                    var s = {
                        ArtistID: t.Models.Artist.UNKNOWN,
                        ArtistName: "Unknown",
                        AlbumID: t.Models.Album.UNKNOWN,
                        AlbumName: "Unknown"
                    },
                        o, u;
                    for (var l = 0; l < r.length; l++) o = r[l].get("Artists"), o.remove(o.filter(f(n))), u = r[l].get("Albums"), u.remove(u.filter(f(n))), r[l].set(s);
                    e.resolve(r)
                }
                function c(e, n, r) {
                    if (!r) return a(e, r);
                    for (var i = 0; i < n.length; i++) t.Models.Song.uncache(n[i]);
                    t.trigger("songs:deleted", n), e.resolve()
                }
                function h(e, n, r) {
                    if (!r || !r.events) {
                        e.reject();
                        return
                    }
                    n && this.attributes.feed ? this.attributes.feed.add(r.events) : this.set("feed", new t.Models.Collections.FeedEvents(r.events, {
                        feedType: "model",
                        model: this,
                        initialPageableItemLimit: 25,
                        pageableItemsPerLoad: 25
                    })), e.resolve(this.attributes.feed, r.events)
                }
                function p(e) {
                    var t = e.attributes.Flags || 0,
                        n = e.attributes.ReleaseType,
                        r = _.defined(e.attributes.IsVerified) ? e.attributes.IsVerified : e.attributes.IsVerifiedSongs;
                    return n == 1 && e.attributes.ReleaseStatus == 1 && r && (t >= 512 || t === 0) ? "fullAlbums" : (n == 2 || n == 3) && r && e.attributes.ReleaseStatus == 1 && (t >= 512 || t === 0) ? "singlesEPs" : "others"
                }
                function d() {
                    var e = this.attributes.albums ? this.attributes.albums.models : [],
                        n = {
                            fullAlbums: [],
                            singlesEPs: [],
                            others: []
                        },
                        r = 0,
                        i = e.length,
                        s, o, u = _.any(e, function(e) {
                            return e.attributes.ReleaseType > 0
                        });
                    if (u) {
                        for (; r < i; r++) s = e[r], o = p(s), o && n[o].push(s);
                        this.set({
                            hasReleaseTypes: !0,
                            fullAlbums: new t.Models.Collections.Albums(n.fullAlbums),
                            singlesEPs: new t.Models.Collections.Albums(n.singlesEPs),
                            others: new t.Models.Collections.Albums(n.others)
                        }), this.attributes.albums.on("add", _.bind(v, this, "add")), this.attributes.albums.on("remove", _.bind(v, this, "remove")), this.attributes.albums.on("change", _.bind(v, this, "change"))
                    } else this.set({
                        hasReleaseTypes: !1
                    })
                }
                function v(e, t) {
                    function a(e) {
                        r.attributes[e].indexOf(t) != -1 && r.attributes[e].remove(t)
                    }
                    if (e == "change") {
                        var n = t.changedAttributes();
                        if (!(n.hasOwnProperty("ReleaseType") || n.hasOwnProperty("ReleaseStatus") || n.hasOwnProperty("IsVerified") || n.hasOwnProperty("Flags"))) return
                    }
                    var r = this,
                        i = p(t),
                        s = ["fullAlbums", "singlesEPs", "others"],
                        o = 0,
                        u = s.length;
                    switch (e) {
                    case "add":
                        i && this.attributes[i].add(t);
                        break;
                    case "remove":
                        for (; o < u; o++) a(s[o]);
                        break;
                    case "change":
                        for (; o < u; o++) i && s[o] == i ? this.attributes[i].add(t) : a(s[o])
                    }
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = [{
                    type: "dailyStats",
                    call: "getArtistsDailyArtistStats"
                }],
                    r = [{
                        type: "dailySongsStats",
                        call: "getArtistDailySongsStats",
                        single: !0
                    }, {
                        type: "weeklyTopStats",
                        call: "getArtistWeeklyTopStats",
                        single: !0
                    }];
                t.Models.Artist = Backbone.CachedModel.extend({
                    idAttribute: "ArtistID",
                    constructor: function(e) {
                        var t = _.toArray(arguments);
                        e.CoverArtFilename = _.orEqualEx(e.ArtistCoverArtFilename, e.CoverArtFilename, e.artFilename), e.ArtistID = _.orEqual(e.ArtistID, e.artistID), e.ArtistName = _.orEqualEx(e.ArtistName, e.Name, e.artistName, "Unknown Artist");
                        try {
                            delete e.ArtistCoverArtFilename, delete e.artFilename, delete e.artistID, delete e.Name, delete e.artistName
                        } catch (n) {}
                        return e.ArtistID = _.toInt(e.ArtistID), e.searchText = (e.ArtistName + "").toLowerCase(), this._super.apply(this, ["constructor"].concat(t))
                    },
                    updateFromNew: function(e) {
                        var t = _.defaults(this.attributes, e);
                        e.pageNameData && (t.pageNameData = e.pageNameData), this.set(t)
                    },
                    getSongs: function() {
                        if (this.loadSongsDfd) return this.loadSongsDfd.promise();
                        var e = $.Deferred(),
                            n;
                        return t.isLoggedInUserOwnerOfArtist(this.id) ? n = t.Services.API.artistGetArtistSongs(this.id, 5e3) : n = t.Services.API.artistGetArtistSongs(this.id), n.done(_.bind(function(n) {
                            var r = new t.Models.Collections.Songs(n),
                                i = {},
                                s = this.id;
                            _.each(n, function(e) {
                                if (e.AlbumArtistID == s) {
                                    var t = e.AlbumID;
                                    i[t] ? i[t].IsVerifiedSongs != 1 && (i[t].IsVerifiedSongs = e.IsVerified) : i[t] = {
                                        AlbumID: t,
                                        AlbumName: e.AlbumName,
                                        ArtistID: e.AlbumArtistID,
                                        ArtistName: e.AlbumArtistName || e.ArtistName,
                                        CoverArtFilename: e.CoverArtFilename,
                                        IsVerifiedSongs: e.IsVerified,
                                        songsFromArtist: [],
                                        ReleaseType: e.ReleaseType,
                                        ReleaseStatus: e.ReleaseStatus,
                                        Year: e.Year
                                    }, i[t].songsFromArtist.push(e)
                                }
                            }), this.set("songs", r), this.attributes.albums ? this.attributes.albums.add(_.toArray(i)) : (this.set("albums", new t.Models.Collections.Albums(_.toArray(i))), d.call(this)), e.resolve(r)
                        }, this)), n.fail(function(t) {
                            e.reject(t)
                        }), this.loadSongsDfd = e, e.promise()
                    },
                    getTopSongs: function() {
                        if (this.loadTopSongsDfd) return this.loadTopSongsDfd.promise();
                        var e = $.Deferred();
                        return this.get("topSongs") ? e.resolve(this.get("topSongs")) : this.getSongs().done(_.bind(function(n) {
                            var r = this.get("songs").toArray();
                            r.sort(function(e, t) {
                                return _.toInt(t.Popularity) - _.toInt(e.Popularity)
                            });
                            var i = new t.Models.Collections.Songs(r.slice(0, 100));
                            this.set("topSongs", i), e.resolve(i)
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadTopSongsDfd = e, e.promise()
                    },
                    getAlbums: function() {
                        if (this.loadAlbumsDfd) return this.loadAlbumsDfd.promise();
                        var e = $.Deferred();
                        return this.get("albums") ? e.resolve(this.get("albums")) : (this.getSongs().done(_.bind(function() {
                            e.resolve(this.get("albums"))
                        }, this)).fail(_.bind(function() {
                            e.reject()
                        }, this)), this.loadAlbumsDfd = e), e.promise()
                    },
                    getAllAlbums: function() {
                        if (this.loadAllAlbumsDfd) return this.loadAllAlbumsDfd.promise();
                        var e = $.Deferred();
                        return t.Services.API.artistGetAllAlbums(this.id).done(_.bind(function(n) {
                            var r = [],
                                i = [],
                                s;
                            n && n.albums && (r = n.albums);
                            for (var o = 0, u = r.length; o < u; o++)(s = t.Models.Album.getCached(r[o].AlbumID)) ? s.updateLocalInfo(r[o]) : s = new t.Models.Album(r[o]), i.push(s);
                            this.attributes.albums ? this.attributes.albums.add(i) : (this.set("albums", new t.Models.Collections.Albums(i)), d.call(this)), e.resolve(this.attributes.albums)
                        }, this)).fail(_.bind(e.reject, e)), this.loadAllAlbumsDfd = e, e.promise()
                    },
                    getSimilarArtists: function() {
                        if (this.loadSimilarArtistsDfd) return this.loadSimilarArtistsDfd.promise();
                        var e = $.Deferred();
                        return this.get("similarArtists") ? e.resolve(this.get("similarArtists")) : (t.Services.API.artistGetSimilarArtists(this.id).done(_.bind(function(n) {
                            var r = new t.Models.Collections.Artists(n.SimilarArtists);
                            this.set("similarArtists", r), e.resolve(r)
                        }, this)), this.loadSimilarArtistsDfd = e), e.promise()
                    },
                    getFollowers: function() {
                        if (this.loadFollowers) return this.loadFollowersDfd.promise();
                        var e = $.Deferred();
                        return this.get("followers") ? e.resolve(this.get("followers")) : (t.Services.API.artistGetFans(this.id, 0).done(_.bind(function(n) {
                            var r = new t.Models.Collections.Users(n.Return.fans);
                            this.set("followers", r), e.resolve(r)
                        }, this)), this.loadFollowersDfd = e), e.promise()
                    },
                    toUrl: function(e) {
                        return this.get("PathName") ? _.makeUrlFromPathName(this.get("PathName"), e) : _.cleanUrl(this.get("ArtistName"), this.id, "artist", null, e)
                    },
                    getPathName: function() {
                        var e = new $.Deferred;
                        return typeof this.get("PathName") != "undefined" ? e.resolve(this.get("PathName")) : t.Services.API.getPageInfoByIDType(this.get("ArtistID"), "artist").done(_.bind(i, this, e, "name")).fail(_.bind(s, this, e)), e.promise()
                    },
                    getPageNameData: function() {
                        var e = new $.Deferred;
                        return typeof this.get("pageNameData") != "undefined" ? e.resolve(this.get("pageNameData")) : t.Services.API.getPageInfoByIDType(this.get("ArtistID"), "artist").done(_.bind(i, this, e, "data")).fail(_.bind(s, this, e)), e.promise()
                    },
                    getTags: function() {
                        var e = new $.Deferred;
                        return typeof this.get("Tags") != "undefined" ? e.resolve(this.get("Tags")) : this.getPageNameData().done(_.bind(function() {
                            e.resolve(this.get("Tags"))
                        }, this)).fail(e.reject), e.promise()
                    },
                    getSongkickEvents: function() {
                        if (this.songkickDfd) return this.songkickDfd.promise();
                        var e = $.Deferred();
                        return this.get("songkickEvents") ? e.resolve(this.get("songkickEvents")) : (t.Services.API.getSongkickEventsFromArtists([this.id], [this.get("ArtistName")]).done(_.bind(function(n) {
                            var r = new t.Models.Collections.Events(n);
                            r.comparator = _.getModelSort("StartTime", !0), r.sort(), this.set("songkickEvents", r), e.resolve(r)
                        }, this)), this.songkickDfd = e), e.promise()
                    },
                    getImageURL: function(e) {
                        e = _.orEqual(e, 70);
                        var n = t.Models.Artist.artPath + e + "_artist.png";
                        return this.get("CoverArtFilename") ? t.Models.Artist.artPath + e + "_" + this.get("CoverArtFilename") : n
                    },
                    getImageAttribution: function() {
                        if (this.loadAttribution) return this.loadAttribution.promise();
                        var e = $.Deferred();
                        return this.get("attribution") ? e.resolve(this.get("attribution")) : (t.Services.API.artistGetArtAttribution(this.id).done(_.bind(function(t) {
                            if (!t || !t.URL) t = {};
                            this.set("attribution", t), e.resolve(t)
                        }, this)), this.loadAttribution = e), e.promise()
                    },
                    getArtistDetails: function() {
                        if (this.loadDetailsDfd) return this.loadDetailsDfd.promise();
                        var e = $.Deferred();
                        return this._gotExtraDetails ? e.resolve(this) : (t.Services.API.getArtistByID(this.id).done(_.bind(function(t) {
                            this._gotExtraDetails = !0;
                            var n = {
                                CoverArtFilename: t.CoverArtFilename,
                                IsVerified: this.attributes.IsVerified || t.IsVerified
                            };
                            this.set(n), e.resolve(this)
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadDetailsDfd = e), e.promise()
                    },
                    toProxyLabel: function() {
                        return this.escape("ArtistName")
                    },
                    getTitle: function(e) {
                        return e ? this.get("ArtistName") : this.escape("ArtistName")
                    },
                    updateProfile: function(e) {
                        var n = !0,
                            r = this.get("pageNameData"),
                            i = new $.Deferred;
                        if (!r) n = !1;
                        else {
                            r = $.extend({}, r), r.Bio !== e.bio && ( !! r.Bio || !! e.bio) && (n = !1), r.BioAttribution !== e.bioAttribution && ( !! r.BioAttribution || !! e.bioAttribution) && (n = !1);
                            if (!r.URLs && e.urls) n = !1;
                            else if (e.urls) {
                                for (var s in e.urls) e.urls.hasOwnProperty(s) && (!r.URLs.hasOwnProperty(s) || e.urls[s] !== r.URLs[s]) && (n = !1);
                                for (s in r.URLs) r.URLs.hasOwnProperty(s) && !e.urls.hasOwnProperty(s) && (e.urls[s] = r.URLs[s])
                            }
                            e.ArtistName && this.get("ArtistName") !== e.ArtistName ? n = !1 : e.ArtistName && delete e.ArtistName, typeof r.Bio == "string" && (r.bio = r.Bio, delete r.Bio), typeof r.URLs == "object" && (r.urls = r.URLs, delete r.URLs), typeof r.BioAttribution == "string" && (r.bioAttribution = r.BioAttribution, delete r.BioAttribution)
                        }
                        return n ? i.resolve(this.get("pageNameData")) : t.Services.API.artistUpdateProfile(this.get("ArtistID"), e, r).done(_.bind(o, this, i, e)).fail(_.bind(a, this, i)), i.promise()
                    },
                    updatePageName: function(e) {
                        var n = $.Deferred();
                        return e === this.get("PathName") ? n.resolve(!0) : t.Models.AuthUser.checkEmailUsername(null, e, !0).done(_.bind(function(r) {
                            r.username === -1 ? n.resolve(-1) : t.Services.API.artistUpdatePageName(this.get("ArtistID"), e).done(_.bind(u, this, n, e)).fail(_.bind(a, this, n))
                        }, this)), n.promise()
                    },
                    disownSongs: function(e, n) {
                        var r = this.get("ArtistID"),
                            i = [],
                            s = [],
                            o = new $.Deferred,
                            u, f, h;
                        for (var p = 0; p < e.length; p++) {
                            u = t.Models.Song.getCached(e[p]);
                            if (u) {
                                i.push(u), f = u.get("Albums"), h = 0;
                                for (var d = 0; d < f.length; d++) f.at(d).get("ArtistID") === r && (h++, _.indexOf(s, f.at(d).get("AlbumID")) === -1 && s.push(f.at(d).get("AlbumID")));
                                if (!h) return o.reject(!1), o.promise()
                            }
                        }
                        return n ? t.Services.API.artistDeleteSongs(e, s, r).done(_.bind(c, this, o, r, i)).fail(_.bind(a, this, o)) : t.Services.API.artistDisownSongs(e, s, r).done(_.bind(l, this, o, r, i)).fail(_.bind(a, this, o)), o.promise()
                    },
                    getDetailsForFeeds: function() {
                        var e = {
                            artistID: this.get("ArtistID"),
                            artistName: this.get("ArtistName"),
                            artFilename: this.get("CoverArtFilename"),
                            isVerified: this.get("IsVerified")
                        };
                        return e
                    },
                    getAnchorTag: function(e, t) {
                        return ['<a href="', this.toUrl(t), '" class="artist-link">', e ? _.getString(e).toLocaleLowerCase() : _.escape(this.get("ArtistName")), "</a>"].join("")
                    },
                    getFeed: function(e) {
                        if (this.feedDfd && this.feedDfd.state() !== "rejected" && !e) return this.feedDfd.promise();
                        var n = $.Deferred();
                        if (this.get("feed") && !e) n.resolve(this.get("feed"), []);
                        else if (this.id <= 0) i = new t.Models.Collections.FeedEvents([]), this.set({
                            feed: i
                        }), n.resolve(i, []);
                        else {
                            var r = null;
                            if (e && this.get("feed") && this.get("feed").length) {
                                var i = this.get("feed");
                                i && i.length && (r = this.get("feed").last().get("timestamp"))
                            }
                            this.feedDfd = n, t.Services.API.getProfileFeedForItem(this.id, "artist", r).done(_.bind(h, this, n, e)).fail(_.bind(this.feedDfd.reject, this.feedDfd))
                        }
                        return n.promise()
                    },
                    getCurrentStatus: function() {
                        if (!this.currentStatusDfd || this.currentStatusDfd.state() !== "pending") {
                            this.currentStatusDfd = $.Deferred();
                            var e = setTimeout(_.bind(function() {
                                this.currentStatusDfd && this.currentStatusDfd.reject()
                            }, this), 3e3);
                            this.currentStatusDfd.always(_.bind(function() {
                                delete this.currentStatusDfd, clearTimeout(e)
                            }, this)), t.Services.SWF.ready.done(_.bind(function() {
                                t.Services.SWF.connectToChat(), t.Services.SWF.getArtistStatus(this.get("ArtistID"))
                            }, this))
                        }
                        return this.currentStatusDfd.promise()
                    },
                    storeCurrentBroadcast: function(e, n, r, i, s, o, u) {
                        var a = {};
                        a.statusFromSwf = !! u;
                        if (n) {
                            if (!u && n < this.attributes.currentBroadcastID) return {};
                            a.isOwnerOfCurrentBroadcast = e, a.currentBroadcastID = n, a.currentBroadcastName = r, a.currentBroadcastPicture = i, !e && s && s.u ? (s.u ? a.currentBroadcastOwner = new t.Models.User({
                                FName: s.n,
                                UserID: _.toInt(s.u),
                                Picture: s.p
                            }) : a.currentBroadcastOwner = new t.Models.Artist({
                                ArtistName: s.n,
                                ArtistID: _.toInt(s.u),
                                CoverArtFilename: s.p
                            }), a.currentBroadcastOwner.storeCurrentBroadcast(1, n, r, i, null)) : !e && s && (s instanceof t.Models.Artist && this !== s || s instanceof t.Models.User) ? (a.currentBroadcastOwner = s, s.storeCurrentBroadcast(1, n, r, i)) : a.currentBroadcastOwner = null
                        } else a.isOwnerOfCurrentBroadcast = 0, a.currentBroadcastID = null, a.currentBroadcastName = null, a.currentBroadcastPicture = null, a.currentBroadcastOwner = null;
                        return o || this.set(a), a
                    },
                    subscribeToStatus: function(e) {
                        this.statusSubLocks || (this.statusSubLocks = []);
                        if (!this.statusSubLocks.length) {
                            var n = this.id;
                            t.Services.SWF.ready.done(function() {
                                t.Services.SWF.connectToChat(), t.Services.SWF.subscribeToArtistsStatuses([n])
                            })
                        }
                        _.indexOf(this.statusSubLocks, e) === -1 && this.statusSubLocks.push(e)
                    },
                    unsubscribeFromStatus: function(e) {
                        if (!this.statusSubLocks) return;
                        var n = _.indexOf(this.statusSubLocks, e);
                        n > -1 && this.statusSubLocks.splice(n, 1);
                        if (!this.statusSubLocks.length) {
                            var r = this.id;
                            t.Services.SWF.ready.done(function() {
                                t.Services.SWF.unsubscribeFromArtistsStatuses([r])
                            })
                        }
                    },
                    unsubscribeAllFromStatus: function() {
                        if (this.statusSubLocks) {
                            this.statusSubLocks = [];
                            var e = this.id;
                            t.Services.SWF.ready.done(function() {
                                t.Services.SWF.unsubscribeFromArtistsStatuses([e])
                            })
                        }
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/artists/",
                    UNKNOWN: 5062,
                    tagIgnoredArtistIDs: {
                        5062: !0,
                        55: !0,
                        401329: !0,
                        1174303: !0,
                        1038545: !0
                    },
                    get: function(e) {
                        var n = Backbone.CachedModel.genericGet.call(this, t.Services.API.getArtistByID, "ArtistID", e);
                        return n.promise()
                    },
                    getCombinedArtistsStats: function(e, i, s, o) {
                        function S(n, r, i) {
                            if (!i) {
                                r.reject();
                                return
                            }
                            for (m = 0; m < p; m++) y = h[m], i[y] || (i[y] = {}), y == e ? (a[n] = i[e], v[n] = {
                                time: f,
                                data: i[y]
                            }, n === "dailyStats" && (v.statsDaysLoaded = s)) : (w = t.Models.Artist.getCached(y), w && (E = w.get("stats"), E || (E = {}, w.set("stats", E)), E[n] = {
                                time: f,
                                data: i[y]
                            }, n === "dailyStats" && (E.statsDaysLoaded = s)));
                            r.resolve(i)
                        }
                        function x(e, t, n) {
                            if (!n) {
                                t.reject();
                                return
                            }
                            v[e] = {
                                time: f,
                                data: n
                            }, e === "dailySongsStats" && (v.songStatsDaysLoaded = s), a[e] = n, t.resolve(n)
                        }
                        var u = _.chainLoading(),
                            a = {},
                            f = Math.floor($.now() / 1e3),
                            l = $.Deferred(),
                            c = {},
                            h = i.pluck("ArtistID"),
                            p = h.length,
                            d = t.Models.Artist.getCached(e),
                            v = {},
                            m, g, y, b, w, E;
                        d && (d.get("stats") ? v = d.get("stats") : d.set("stats", v)), s = _.orEqual(s, 30), a.days = s, o = _.orEqual(o, !0);
                        for (m = 0, g = n.length; m < g; m++) b = n[m].type, c[b] || (!v[b] || v[b].time < f - 3600 || v.statsDaysLoaded < s ? c[b] = !0 : a[b] = v[b].data);
                        if (o) for (m = 0, g = r.length; m < g; m++) b = r[m].type, c[b] || (!v[b] || v[b].time < f - 3600 || b == "dailySongsStats" && v.songStatsDaysLoaded < s ? c[b] = !0 : a[b] = v[b].data);
                        var T;
                        for (m = 0, g = n.length; m < g; m++) c[n[m].type] && (T = $.Deferred(), t.Services.API[n[m].call](h, s).done(_.bind(S, this, n[m].type, T)).fail(_.bind(T.reject, T)), u.push(T));
                        for (m = 0, g = r.length; m < g; m++) c[r[m].type] && (T = $.Deferred(), t.Services.API[r[m].call](e, s).done(_.bind(x, this, r[m].type, T)).fail(_.bind(T.reject, T)), u.push(T));
                        return u.done(_.bind(function() {
                            l.resolve(a, v)
                        }, this)), u.fail(_.bind(l.reject, l)), l.promise()
                    }
                })
            }(), function() {
                function n(e, n, i) {
                    if (!i) return r(e, n);
                    i.Data ? this.set("pageNameData", i.Data) : this.set("pageNameData", {}), i.Name ? i.Name.indexOf("/") > -1 ? this.set("PathName", "") : this.set("PathName", i.Name) : this.set("PathName", ""), i.Data && i.Data.Tags ? this.set("Tags", new t.Models.Collections.Tags(i.Data.Tags)) : this.set("Tags", new t.Models.Collections.Tags([])), n === "data" ? e.resolve(this.get("pageNameData")) : e.resolve(this.get("PathName"))
                }
                function r(e, t) {
                    this.set({
                        PathName: "",
                        pageNameData: {}
                    }), e.resolve(null)
                }
                function i(e, n) {
                    var r = o(n, this.attributes.ReleaseType);
                    this.set({
                        songs: new t.Models.Collections.Songs(r.songs),
                        extraSongs: new t.Models.Collections.Songs(r.extraSongs),
                        songsLoaded: !0
                    }), e && e.resolve(this.get("songs"))
                }
                function s(e, t) {
                    e.reject(t)
                }
                function o(e, n) {
                    var r, i, s, o, u, f, c, h, p, d = [],
                        v = [],
                        m = {},
                        g = [],
                        y = {},
                        b = {},
                        w = 0;
                    n = n || !1, _.isArray(e) || (e = [e]);
                    for (r = 0, i = e.length; r < i; r++) {
                        o = e[r], u = new t.Models.Song(o), f = u.attributes, d.push(u), h = _.toInt(f.TrackNum);
                        if (!n || n && f.IsVerified) w = Math.max(w, h);
                        y[u.id] = h, g[h] ? g[h].push(u) : g[h] = [u], c = a(u), m.hasOwnProperty(c) ? m[c].push(u) : m[c] = [u]
                    }
                    r = 1;
                    for (r; r <= w; r++) {
                        p = g[r];
                        if (!p || !p.length) continue;
                        u = l(p, b, !1);
                        if (!u) continue;
                        c = a(u);
                        if (b[c] && (!n || !u.attributes.IsVerified)) {
                            var E = b[c];
                            if (E.attributes.IsVerified || !u.attributes.IsVerified) {
                                u = l(p, b, !0);
                                if (!u) continue;
                                c = a(u)
                            } else {
                                s = _.indexOf(v, E), s != -1 && v.splice(s, 1);
                                var S = l(g[y[E.id]], b, !0);
                                S && (S.IsVerified = 1, b[a(S)] = S)
                            }
                        }
                        v.push(u), b[c] = u
                    }
                    var x;
                    return v.length ? x = _.difference(d, v) : (v = d, x = []), {
                        songs: v,
                        extraSongs: x
                    }
                }
                function a(e) {
                    var t = e.get("SongName");
                    t = t.toLowerCase();
                    var n = t.replace(e.get("ArtistName").toLowerCase(), "").replace(u, "");
                    return n.length ? t = n : t = t.replace(u, ""), t
                }
                function l(e, t, n) {
                    var r, i;
                    if (!$.isArray(e) || e.length === 0) return !1;
                    if (e.length === 1) return r = e[0], i = a(r), n && t[i] ? !1 : r;
                    e = e.sort(function(e, t) {
                        var n = e.attributes.IsVerified,
                            r = t.attributes.IsVerified;
                        if (n !== r) return r - n;
                        var i = f.test(e.SongName),
                            s = f.test(t.SongName);
                        return i === s ? 0 : i && !s ? 1 : -1
                    });
                    for (var s = 0; s < e.length; s++) {
                        r = e[s], i = a(r);
                        if (!t[i]) return r
                    }
                    return n ? !1 : e[0]
                }
                function c(e, t, n) {
                    if (!n) return h(e, n);
                    var r = !1;
                    t.Name && (t.AlbumName = t.Name, delete t.Name, r = t.AlbumName !== this.get("AlbumName")), this.set(t), r && this.get("songs") && _.invoke(this.get("songs").models, "set", {
                        AlbumName: this.get("AlbumName")
                    }), e.resolve(n)
                }
                function h(e, t) {
                    e.reject(t)
                }
                function p(e) {
                    typeof e.ReleaseType != "undefined" ? (e.ReleaseType = _.toInt(e.ReleaseType), e.ReleaseStatus = _.toInt(e.ReleaseStatus), typeof e.Flags != "undefined" && (e.Flags = _.toInt(e.Flags)), typeof e.Year != "undefined" && (e.Year = _.toInt(e.Year), e.Year || delete e.Year), typeof e.IsVerified != "undefined" && (e.IsVerified = parseFloat(e.IsVerified, 10), e.IsVerified = isNaN(e.IsVerified) ? 0 : e.IsVerified)) : (typeof e.Flags != "undefined" && delete e.Flags, typeof e.Year != "undefined" && delete e.Year, typeof e.IsVerified != "undefined" && delete e.IsVerified)
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var u = /\s|\-|\:|\(|\)|\[|\]/g,
                    f = /\(|\)|\[|\]|live|feat|\sft|remix|demo/i;
                t.Models.Album = Backbone.CachedModel.extend({
                    idAttribute: "AlbumID",
                    constructor: function(e) {
                        var n = _.toArray(arguments);
                        e.CoverArtFilename = _.orEqualEx(e.CoverArtFilename, e.ArtFilename, e.artFilename), e.AlbumID = _.orEqual(e.AlbumID, e.albumID), e.AlbumName = _.orEqualEx(e.AlbumName, e.albumName, e.Name, "Unknown Album"), e.ArtistID = _.orEqual(e.ArtistID, e.artistID);
                        if (typeof e.ArtistName != "undefined" || typeof e.artistName != "undefined") e.ArtistName = _.orEqualEx(e.ArtistName, e.artistName, "Unknown Artist");
                        e.IsVerified = _.orEqual(e.IsVerified, e.isVerified), e.AlbumName === "" && (e.AlbumName = "Unknown Album");
                        try {
                            delete e.ArtFilename, delete e.artFilename, delete e.albumID, delete e.Name, delete e.albumName, delete e.artistID, delete e.artistName, delete e.isVerified
                        } catch (r) {}
                        if (!e.CoverArtFilename || e.CoverArtFilename.indexOf("default") !== -1) e.CoverArtFilename = "";
                        e.ArtistID = _.toInt(e.ArtistID), e.AlbumID = _.toInt(e.AlbumID), p(e);
                        if (e.hasOwnProperty("songsFromArtist") && !e.songs) {
                            var i = o(e.songsFromArtist, e.ReleaseType);
                            e.songs = i.songs, e.extraSongs = i.extraSongs, delete e.songsFromArtist
                        }
                        return e.hasOwnProperty("songs") && !(e.songs instanceof Backbone.Collection) && (e.songs = new t.Models.Collections.Songs(e.songs)), e.hasOwnProperty("extraSongs") && !(e.extraSongs instanceof Backbone.Collection) && (e.extraSongs = new t.Models.Collections.Songs(e.extraSongs)), e.searchText = (e.AlbumName + "").toLowerCase(), this._super.apply(this, ["constructor"].concat(n))
                    },
                    updateFromNew: function(e) {
                        this.set(_.defaults(this.attributes, e)), _.toInt(e.IsVerified) && this.set("IsVerified", 1)
                    },
                    setSongsFromServer: function(e) {
                        if (this.get("songsLoaded")) return;
                        i.call(this, null, e)
                    },
                    getSongs: function() {
                        if (this.loadSongsDfd) return this.loadSongsDfd.promise();
                        var e = $.Deferred(),
                            n = this.get("songs");
                        return this.get("songsLoaded") ? e.resolve(n) : t.Services.API.albumGetAllSongs(this.id).done(_.bind(i, this, e)).fail(_.bind(s, this, e)), this.loadSongsDfd = e, e.promise()
                    },
                    getExtraSongs: function() {
                        var e = $.Deferred(),
                            t = this.get("extraSongs");
                        return t ? e.resolve(t) : this.getSongs().done(_.bind(function() {
                            e.resolve(this.get("extraSongs"))
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), e.promise()
                    },
                    getFans: function() {
                        if (this.loadFansDfd) return this.loadFansDfd.promise();
                        var e = $.Deferred(),
                            n = this.get("fans");
                        return n ? e.resolve(n) : (t.Services.API.albumGetFans(this.id).done(_.bind(function(r) {
                            n = new t.Models.Collections.Users(r.Return.fans), this.set("fans", n), e.resolve(n)
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadFansDfd = e), e.promise()
                    },
                    toUrl: function(e) {
                        return this.get("PathName") ? _.makeUrlFromPathName(this.get("PathName"), e) : _.cleanUrl(this.get("AlbumName"), this.id, "album", null, e)
                    },
                    getPathName: function() {
                        var e = new $.Deferred;
                        return typeof this.get("PathName") != "undefined" ? e.resolve(this.get("PathName")) : t.Services.API.getPageInfoByIDType(this.get("AlbumID"), "album").done(_.bind(n, this, e, "name")).fail(_.bind(r, this, e)), e.promise()
                    },
                    getPageNameData: function() {
                        var e = new $.Deferred;
                        return typeof this.get("pageNameData") != "undefined" ? e.resolve(this.get("pageNameData")) : t.Services.API.getPageInfoByIDType(this.get("AlbumID"), "album").done(_.bind(n, this, e, "data")).fail(_.bind(r, this, e)), e.promise()
                    },
                    getTags: function() {
                        var e = new $.Deferred;
                        return typeof this.get("Tags") != "undefined" ? e.resolve(this.get("Tags")) : this.getPageNameData().done(_.bind(function() {
                            e.resolve(this.get("Tags"))
                        }, this)).fail(e.reject), e.promise()
                    },
                    toArtistUrl: function(e) {
                        return _.cleanUrl(this.get("ArtistName"), this.get("ArtistID"), "artist", null, e)
                    },
                    getImageURL: function(e) {
                        e = _.orEqual(e, 70);
                        var n = t.Models.Album.artPath + e + "_album.png";
                        return this.get("CoverArtFilename") ? t.Models.Album.artPath + e + "_" + this.get("CoverArtFilename") : n
                    },
                    getTitle: function(e) {
                        return e ? ['"', this.get("AlbumName"), '" by ', this.get("ArtistName")].join("") : ['"', this.escape("AlbumName"), '" by ', this.escape("ArtistName")].join("")
                    },
                    toProxyLabel: function() {
                        var e = this.get("ArtistName") ? "SELECTION_ALBUM_SINGLE" : "SELECTION_ALBUM_SINGLE_NO_ARTIST";
                        return _.getString(e, {
                            AlbumName: this.escape("AlbumName"),
                            ArtistName: this.escape("ArtistName")
                        })
                    },
                    getAlbumDetails: function() {
                        if (this.loadDetailsDfd) return this.loadDetailsDfd.promise();
                        var e = $.Deferred();
                        return typeof this.get("ReleaseType") != "undefined" ? e.resolve(this) : (t.Services.API.getAlbumByID(this.id).done(_.bind(function(t) {
                            var n = {
                                IsVerified: t.IsVerified,
                                ReleaseStatus: t.ReleaseStatus,
                                ReleaseType: t.ReleaseType,
                                Year: t.Year
                            };
                            p(n), this.set(n), e.resolve(this)
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadDetailsDfd = e), e.promise()
                    },
                    updateLocalInfo: function(e) {
                        var t = {
                            Flags: e.Flags,
                            IsVerified: e.IsVerified,
                            ReleaseStatus: e.ReleaseStatus,
                            ReleaseType: e.ReleaseType,
                            Year: e.Year
                        };
                        p(t), this.set(t)
                    },
                    updateInfo: function(e) {
                        var n = new $.Deferred,
                            r = !1,
                            i = {
                                AlbumID: this.get("AlbumID"),
                                ArtistID: this.get("ArtistID"),
                                Name: this.get("AlbumName") + "",
                                Year: _.toInt(this.get("Year")),
                                IsVerified: _.toInt(this.get("IsVerified")),
                                ReleaseType: _.toInt(this.get("ReleaseType"))
                            };
                        i.Year || (i.Year = "");
                        for (var s in e) if (e.hasOwnProperty(s) && e[s] !== i[s]) {
                            r = !0;
                            break
                        }
                        return r ? (e = $.extend({}, i, e, {
                            ArtistID: this.get("ArtistID"),
                            AlbumID: this.get("AlbumID")
                        }), t.Services.API.artistEditAlbum(e, i).done(_.bind(c, this, n, e)).fail(_.bind(h, this, n))) : n.resolve(!0), n.promise()
                    },
                    getDetailsForFeeds: function() {
                        var e = {
                            artistID: this.get("ArtistID"),
                            artistName: this.get("ArtistName"),
                            artFilename: this.get("CoverArtFilename"),
                            isVerified: this.get("IsVerified"),
                            albumID: this.get("AlbumID"),
                            albumName: this.get("AlbumName")
                        };
                        return e
                    },
                    getAnchorTag: function(e, t) {
                        return '<a href="' + this.toUrl(t) + '" class="album-link">' + (e ? _.getString(e).toLocaleLowerCase() : this.escape("AlbumName")) + "</a>"
                    },
                    getArtistAnchorTag: function(e, t) {
                        return '<a href="' + this.toArtistUrl(t) + '" class="artist-link">' + (e ? _.getString(e).toLocaleLowerCase() : this.escape("ArtistName")) + "</a>"
                    },
                    getSingleItemContextMenu: function(e) {
                        function u(e, n) {
                            o.getSongs().done(function(r) {
                                t.trigger("player:addSongs", r.toArray(), e, n, s)
                            })
                        }
                        e = _.orEqual(e, {});
                        var n = [],
                            r = t.Models.User.getCached(t.getLoggedInUserID()),
                            i = this.get("AlbumID"),
                            s = new t.Models.PlayContext(this),
                            o = this;
                        return n.push({
                            title: _.getString("PLAY_ALBUM"),
                            customClass: "jj_menu_item_play",
                            action: {
                                type: "fn",
                                callback: function() {
                                    u(t.Services.SWF.playSpecialIndexes.DEFAULT, !0)
                                },
                                log: function() {}
                            }
                        }, {
                            title: _.getString("CONTEXT_PLAY_ALBUM_NEXT"),
                            customClass: "jj_menu_item_play_next",
                            action: {
                                type: "fn",
                                callback: function() {
                                    u(t.Services.SWF.playSpecialIndexes.NEXT, !1)
                                },
                                log: function() {}
                            }
                        }, {
                            title: _.getString("CONTEXT_PLAY_ALBUM_LAST"),
                            customClass: "jj_menu_item_play_last",
                            action: {
                                type: "fn",
                                callback: function() {
                                    u(t.Services.SWF.playSpecialIndexes.LAST, !1)
                                },
                                log: function() {}
                            }
                        }), n.push({
                            customClass: "separator"
                        }), n.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            customClass: "jj_menu_item_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    o.getSongs().done(function(e) {
                                        r.addSongsToLibrary(e.toArray())
                                    })
                                },
                                log: function() {}
                            }
                        }), n.push({
                            customClass: "separator"
                        }), !r.get("playlists") || r.get("playlists").length === 0 ? n.push({
                            title: _.getString("CONTEXT_NEW_PLAYLIST"),
                            customClass: "jj_menu_item_new_playlist",
                            action: {
                                type: "fn",
                                callback: function() {
                                    o.getSongs().done(function(e) {
                                        r.id > 0 ? t.trigger("lightbox:open", "createPlaylist", {
                                            songs: e.toArray()
                                        }) : t.trigger("lightbox:open", "login", {
                                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                                            onLogin: function(n) {
                                                t.trigger("lightbox:open", "createPlaylist", {
                                                    songs: e.toArray()
                                                })
                                            }
                                        })
                                    })
                                }
                            }
                        }) : n.push({
                            title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                            type: "sub",
                            customClass: "jj_menu_item_playlists",
                            src: r.getPlaylistsMenu(!1, !0, {
                                modelObj: o
                            }, function(e) {
                                o.getSongs().done(function(t) {
                                    e.addSongs(t.toArray(), null, !0)
                                })
                            })
                        }), n
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/albums/",
                    UNKNOWN: 92822,
                    get: function(e) {
                        var n = Backbone.CachedModel.genericGet.call(this, t.Services.API.getAlbumByID, "AlbumID", e);
                        return n.promise()
                    },
                    prettySort: function(e, t) {
                        return e.get("IsVerified") && e.get("CoverArtFilename") || e.get("IsVerified") && !t.get("CoverArtFilename") ? -1 : t.get("IsVerified") && t.get("CoverArtFilename") ? 1 : 0
                    },
                    popularSort: function(e, t) {
                        var n = 0,
                            r = 0,
                            i, s, o;
                        if (e.get("songs")) {
                            i = e.get("songs");
                            for (s = 0, o = i.length; s < o; s++) n += i.at(s).get("Popularity")
                        }
                        if (t.get("songs")) {
                            i = t.get("songs");
                            for (s = 0, o = i.length; s < o; s++) r += i.at(s).get("Popularity")
                        }
                        return r - n
                    },
                    experimentalNiftyComparator: function(e) {
                        var t = e.attributes.AlbumName || "",
                            n;
                        if (!t.length) n = -20;
                        else {
                            var r = t.toUpperCase().charCodeAt(0),
                                i = t.match(/[\[\]\(\)\{\}]|n\/a|\.(com|net|org|ro|de|ru|co|ws|info|pl|az|fm|vn|hu)|www\.|http\:\/\//ig),
                                s = t.match(/remix|unknown|top.?\d|unofficial|mtv|promo|grammy|no title|blog|album|bootleg|best of|presents|hits|mix|billboard|none|[\=\+]| \d{4}|((cd|vol|disc).{0,2}\d+)/ig);
                            n = (i ? i.length * -10 : 0) + (s ? s.length * -3 : 0) + (t.length < 3 ? -6 : 0) + (r < 65 || r > 90 ? -1 : 0) + r / -1e3
                        }
                        return n * -1
                    },
                    verifiedishFilter: function(e) {
                        var n = e.get("songs");
                        return e.attributes.IsVerified == 1 || e.attributes.IsVerifiedSongs == 1 || (n instanceof t.Models.Collections.Songs ? n.length >= 3 : !0)
                    },
                    hasSongsFilter: function(e) {
                        var t = e.get("songs");
                        return t && t.length >= 1
                    },
                    albumTypes: {
                        0: "ALBUM_TYPE_NONE",
                        1: "ALBUM_TYPE_LP",
                        2: "ALBUM_TYPE_SINGLE",
                        3: "ALBUM_TYPE_EP",
                        4: "ALBUM_TYPE_COMPILATION",
                        5: "ALBUM_TYPE_SOUNDTRACK",
                        6: "ALBUM_TYPE_SPOKENWORD",
                        7: "ALBUM_TYPE_INTERVIEW",
                        8: "ALBUM_TYPE_AUDIOBOOK",
                        9: "ALBUM_TYPE_LIVE",
                        10: "ALBUM_TYPE_REMIX",
                        11: "ALBUM_TYPE_OTHER"
                    }
                })
            }(), function() {
                function r(e, t, n) {
                    if (!n) return i(e, t);
                    n.Data ? this.set("pageNameData", n.Data) : this.set("pageNameData", {}), n.Name ? n.Name.indexOf("/") > -1 ? this.set("PathName", "") : this.set("PathName", n.Name) : this.set("PathName", ""), t === "data" ? e.resolve(this.get("pageNameData")) : e.resolve(this.get("PathName"))
                }
                function i(e, t) {
                    this.set({
                        PathName: "",
                        pageNameData: {}
                    }), e.resolve(null)
                }
                function s(e, t, r) {
                    var i = n.Models.Collections[e],
                        s = "favorite" + e;
                    if (!i) {
                        console.log("favorites returned but invalid collection class??", e), t.reject(r);
                        return
                    }
                    var o = new i(r);
                    n.getLoggedInUserID() == this.get("UserID") && o.each(function(t) {
                        t.set("isFavorite", !0), e === "Songs" && t.set("fromLibrary", !0)
                    }), this.set(s, o), e === "Songs" && g.call(this), t.resolve(o)
                }
                function o(e, t, n) {
                    t.reject(n)
                }
                function u(e, t, r, i) {
                    var s = this.get("library");
                    s instanceof n.Models.Collections.Songs ? e === 0 ? s.reset(i.Songs) : s.add(i.Songs) : (s = new n.Models.Collections.Songs(i.Songs), this.set("library", s)), i.hasOwnProperty("TSModified") && this.set("libraryTSModified", i.TSModified);
                    if (i.hasMore === !0) {
                        e++;
                        var o = n.Services.API.userGetSongsInLibrary(this.id, e, !r);
                        o.done(_.bind(u, this, e, t, !r)), o.fail(_.bind(a, this, e, t)), o.fail(_.bind(g, this))
                    } else this.getFavoritesByType("Songs").always(_.bind(function() {
                        n.getLoggedInUserID() == this.get("UserID") && (s = this.get("library"), s.each(function(e) {
                            e.set("fromLibrary", !0)
                        })), _.bind(g, this)(), t.resolve(s)
                    }, this))
                }
                function a(e, t, n) {
                    t.reject(n)
                }
                function f(e, t, r) {
                    var i = {
                        UserID: this.get("UserID"),
                        Username: this.get("Username"),
                        FName: this.get("FName"),
                        LName: this.get("LName")
                    };
                    if (r && r.Playlists && _.isArray(r.Playlists)) for (var s = 0; s < r.Playlists.length; s++) r.Playlists[s] = $.extend(r.Playlists[s], i);
                    var o = new n.Models.Collections.Playlists(r.Playlists),
                        u = !1;
                    t && r.Playlists.length === t && (u = !0), this.set({
                        playlists: o,
                        hasMorePlaylists: u
                    }), e.resolve(o)
                }
                function l(e, t) {
                    e.reject(t)
                }
                function c(e, t, r) {
                    var i = 100,
                        s = new n.Models.Collections.Broadcasts(r),
                        o = !1;
                    t && r.length === i && (o = !0), this.set({
                        broadcasts: s,
                        hasMoreBroadcasts: o
                    }), e.resolve(s)
                }
                function h(e, t) {
                    e.reject(t)
                }
                function p(e, t, r) {
                    r.Return.fans && n.getLoggedInUserID() == this.get("UserID") && r.Return.fans.each(function(e) {
                        e.isFollower = !0
                    });
                    var i = this.get("followers");
                    e !== 0 && i instanceof n.Models.Collections.Users ? i.add(r.Return.fans) : this.set("followers", new n.Models.Collections.Users(r.Return.fans)), r.Return.hasMore === !0 ? (e++, n.Services.API.userGetFans(this.id, e, _.bind(p, this, e, t), _.bind(d, this, e, t))) : this.getFavoritesByType("Users").always(_.bind(function() {
                        t.resolve(this.get("followers"))
                    }, this))
                }
                function d(e, t, n) {
                    t.reject(n)
                }
                function v(e, t) {
                    if (t) {
                        var r = new n.Models.Collections.Artists(t);
                        this.set("topArtists", r), e.resolve(r)
                    } else e.reject(t)
                }
                function m(e, t) {
                    e.reject(t)
                }
                function g() {
                    var e = this.get("favoriteSongs"),
                        t = this.get("library");
                    return e instanceof n.Models.Collections.Songs && t instanceof n.Models.Collections.Songs ? (t.add(e.models), !0) : !1
                }
                function y(e, t, r) {
                    if (!r || !r.events) {
                        e.reject();
                        return
                    }
                    t && this.attributes.feed ? this.attributes.feed.add(r.events) : this.set("feed", new n.Models.Collections.FeedEvents(r.events, {
                        feedType: "model",
                        model: this,
                        initialPageableItemLimit: 25,
                        pageableItemsPerLoad: 25
                    })), e.resolve(this.attributes.feed, r.events)
                }
                var n = e.GS = e.GS || {};
                n.Models = n.Models || {}, n.Models.User = Backbone.CachedModel.extend({
                    favoriteSongsDfd: null,
                    favoriteArtistsDfd: null,
                    libraryDfd: null,
                    playlistsDfd: null,
                    followersDfd: null,
                    topArtistsDfd: null,
                    feedDfd: null,
                    recentListensDfd: null,
                    idAttribute: "UserID",
                    defaults: {
                        isAuth: !1,
                        Username: "New User",
                        FName: "New User",
                        UserID: -1,
                        IsPremium: 0,
                        Flags: 0,
                        nowPlayingSong: null
                    },
                    constructor: function(e) {
                        var t = _.toArray(arguments).splice(1);
                        e.Username = _.orEqual(e.Username, e.username), e.Email = _.orEqual(e.Email, e.email), e.Sex = _.orEqual(e.Sex, e.sex), e.UserID = _.orEqual(e.UserID, e.userID), e.IsPremium = _.orEqual(e.IsPremium, e.isPremium), e.FName = _.orEqualEx(e.FName, e.fName, e.Name, e.userName, e.UserName, "New User"), e.LName = _.orEqual(e.LName, e.lName), e.TSDOB = _.orEqual(e.TSDOB, e.tsDOB), e.Flags = _.orEqual(e.Flags, e.flags);
                        try {
                            delete e.username, delete e.email, delete e.sex, delete e.userID, delete e.userName, delete e.isPremium, delete e.fName, delete e.lName, delete e.Name, delete e.flags
                        } catch (n) {}
                        e.UserID = _.toInt(e.UserID), e.IsPremium = _.toInt(e.IsPremium), e.Flags = _.toInt(e.Flags);
                        if (!e.UserID || e.UserID <= 0) e.UserID = -1;
                        e.searchText = e.FName ? e.FName.toLowerCase() : "", e.Name = _.defined(e.displayName) ? e.displayName : e.FName + (e.LName && e.LName.length ? " " + e.LName : ""), _.defined(e.Username) || (e.Username = e.UserID > 0 ? e.Name : "New User"), e.hasDefaultName = e.Name === "New User";
                        var r = _.orEqual(e.City, "");
                        return r += e.State && r.length ? ", " + e.State : _.orEqual(e.State, ""), r += e.Country && r.length ? ", " + e.Country : _.orEqual(e.Country, ""), r && (e.Location = r), t.unshift(e), this._super.apply(this, ["constructor"].concat(t))
                    },
                    updateFromNew: function(e) {
                        var t = _.defaults(this.attributes, e);
                        e.hasOwnProperty("friendsLinked") && (this.friendsLinked = e.friendsLinked), e.Name ? t.FName = t.Name = e.Name : e.FName && (t.FName = t.Name = e.FName), e.Picture && (t.Picture = e.Picture), e.pageNameData && (t.pageNameData = e.pageNameData), this.set(t)
                    },
                    toUrl: function(e) {
                        return this.get("PathName") ? _.makeUrlFromPathName(this.get("PathName"), e) : _.cleanUrl(this.id ? this.get("Username") : "New User", this.id, "user", null, e)
                    },
                    getPathName: function() {
                        var e = new $.Deferred;
                        return typeof this.get("PathName") != "undefined" ? e.resolve(this.get("PathName")) : n.Services.API.getPageInfoByIDType(this.get("UserID"), "user").done(_.bind(r, this, e, "name")).fail(_.bind(i, this, e)), e.promise()
                    },
                    getPageNameData: function() {
                        var e = new $.Deferred;
                        return typeof this.get("pageNameData") != "undefined" ? e.resolve(this.get("pageNameData")) : n.Services.API.getPageInfoByIDType(this.get("UserID"), "user").done(_.bind(r, this, e, "data")).fail(_.bind(i, this, e)), e.promise()
                    },
                    getImageURL: function(e, t) {
                        e = _.orEqual(e, 70);
                        var r = n.Models.User.artPath + e + "_user.png";
                        return this.get("Picture") && (!t || !t.defaultPicture) && (r = n.Models.User.artPath + e + "_" + this.get("Picture")), r
                    },
                    getTitle: function(e) {
                        return e ? this.get("FName") : this.escape("FName")
                    },
                    getShortName: function() {
                        var e = "",
                            t = this.get("Name");
                        if (t.length > 12) {
                            var n = t.split(" ");
                            for (var r = 0; r < n.length; r++) {
                                if (!(e.length === 0 || n[r].length < 10 && e.length < 12)) return e;
                                e.length && (e += " "), e += n[r]
                            }
                            return e > 12 ? e.substr(0, 12) + "&hellip;" : e
                        }
                        return t
                    },
                    getFavoritesByType: function(e) {
                        if (this["favorite" + e + "Dfd"]) return this["favorite" + e + "Dfd"].promise();
                        var t = $.Deferred(),
                            r = this.get("favorite" + e);
                        if (r) t.resolve(r);
                        else {
                            var i = function() {
                                    this.id <= 0 ? (r = new n.Models.Collections[e]([]), this.set("favorite" + e, r), t.resolve(r)) : (n.Services.API.getFavorites(this.id, e).done(_.bind(s, this, e, t)).fail(_.bind(o, this, e, t)), this["favorite" + e + "Dfd"] = t)
                                };
                            this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(i, this)) : i.call(this)
                        }
                        return t.promise()
                    },
                    getLibrary: function(e) {
                        e = _.orEqual(e, !1);
                        if (this.libraryDfd && this.libraryDfd.state() !== "rejected") return this.libraryDfd.promise();
                        var t = $.Deferred(),
                            r = this.get("library");
                        return r ? t.resolve(r) : this.id <= 0 ? (r = new n.Models.Collections.Songs([]), this.set({
                            library: r,
                            libraryTSModified: 0
                        }), t.resolve(r)) : (n.Services.API.userGetSongsInLibrary(this.id, 0, !e).done(_.bind(u, this, 0, t, e)).fail(_.bind(a, this, 0, t)), this.libraryDfd = t), t.promise()
                    },
                    getPlaylists: function(e, t) {
                        if (this.playlistsDfd && this.playlistsDfd.state() !== "rejected" && this.playlistsDfd._limitSpecified >= t) return this.playlistsDfd.promise();
                        var r = $.Deferred(),
                            i = this.get("playlists");
                        return !e && i && (!this.get("hasMorePlaylists") || t < i.length) ? r.resolve(i) : this.id <= 0 ? (i = new n.Models.Collections.Playlists([]), this.set({
                            playlists: i
                        }), r.resolve(i)) : (n.Services.API.userGetPlaylists(this.id, t, !e).done(_.bind(f, this, r, t)).fail(_.bind(l, this, r)), this.playlistsDfd = r, this.playlistsDfd._limitSpecified = t), r.promise()
                    },
                    getBroadcasts: function(e, t) {
                        t = Math.min(1, _.toInt(t));
                        var r = 100,
                            i = (t - 1) * r;
                        if (this.broadcastsDfd && this.broadcastsDfd.state() !== "rejected" && this.broadcastsDfd._limitSpecified >= i) return this.broadcastsDfd.promise();
                        var s = $.Deferred(),
                            o = this.get("broadcasts");
                        return !e && o && (!this.get("hasMoreBroadcasts") || i < o.length) ? s.resolve(o) : this.id <= 0 ? (o = new n.Models.Collections.Broadcasts([]), this.set({
                            broadcasts: o
                        }), s.resolve(o)) : (n.Services.API.getUserBroadcasts(this.id, t, !e).done(_.bind(c, this, s, t)).fail(_.bind(h, this, s)), this.broadcastsDfd = s, this.broadcastsDfd._limitSpecified = i), s.promise()
                    },
                    getFollowers: function() {
                        if (this.followersDfd && this.followersDfd.state() !== "rejected") return this.followersDfd.promise();
                        var e = $.Deferred(),
                            t = this.get("followers");
                        if (t) e.resolve(t);
                        else {
                            var r = function() {
                                    this.id <= 0 ? (t = new n.Models.Collections.Users([]), this.set({
                                        followers: t
                                    }), e.resolve(t)) : (n.Services.API.userGetFans(this.id, 0).done(_.bind(p, this, 0, e)).fail(_.bind(d, this, 0, e)), this.followersDfd = e)
                                };
                            this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(r, this)) : r.call(this)
                        }
                        return e.promise()
                    },
                    getDetailsForFeeds: function() {
                        return {
                            userID: this.get("UserID"),
                            userName: this.get("FName"),
                            isPremium: this.get("IsPremium"),
                            location: this.get("Location"),
                            userPicture: this.get("Picture")
                        }
                    },
                    getAnchorTag: function(e, t) {
                        return '<a href="' + this.toUrl(t) + '" class="user-link">' + (e ? _.getString(e).toLocaleLowerCase() : _.escape(this.get("Name"))) + "</a>"
                    },
                    getTopArtists: function() {
                        if (this.topArtistsDfd && this.topArtistsDfd.state() !== "rejected") return this.topArtistsDfd.promise();
                        var e = $.Deferred(),
                            t = this.get("topArtists");
                        return t ? e.resolve(t) : this.id <= 0 ? (t = new n.Models.Collections.Artists([]), this.set({
                            topArtists: t
                        }), e.resolve(t)) : (n.Services.API.getUserTopArtists(this.get("UserID")).done(_.bind(v, this, e)).fail(_.bind(m, this, e)), this.topArtistsDfd = e), e.promise()
                    },
                    getFeed: function(e) {
                        if (this.feedDfd && this.feedDfd.state() !== "rejected" && !e) return this.feedDfd.promise();
                        var t = $.Deferred();
                        if (this.get("feed") && !e) t.resolve(this.get("feed"), []);
                        else if (this.id <= 0) i = new n.Models.Collections.FeedEvents([]), this.set({
                            feed: i
                        }), t.resolve(i, []);
                        else {
                            var r = null;
                            if (e) {
                                var i = this.get("feed");
                                i && i.length && (r = i.last().get("timestamp"))
                            }
                            this.feedDfd = t, n.Services.API.getProfileFeedForItem(this.id, "user", r).done(_.bind(y, this, t, e)).fail(_.bind(this.feedDfd.reject, this.feedDfd))
                        }
                        return t.promise()
                    },
                    getRecentListens: function() {
                        if (this.recentListensDfd && this.recentListensDfd.state() !== "rejected") return this.recentListensDfd.promise();
                        var e = $.Deferred(),
                            t = this.get("recentListens");
                        return t ? e.resolve(t) : this.id <= 0 ? (t = new n.Models.Collections.Songs([]), this.set({
                            recentListens: t
                        }), e.resolve(t)) : (this.getListens().done(_.bind(function(t) {
                            t = t || [];
                            var r = this.get("settings");
                            if (r && r.local && _.isArray(r.local.recentListens) && this.saveLocalSettings) {
                                var i = {};
                                r.local.recentListens = [];
                                var s = t.length,
                                    o, u;
                                while (s--) o = t[s].songID, u = t[s].listenTime, this.addLocalSongListen(new n.Models.Song(_.clone(t[s])), u, !1);
                                i.recentListens = _.sortBy(r.local.recentListens, function(e) {
                                    return e.t[0] * -1
                                }), this.saveLocalSettings(i)
                            }
                            var a = new n.Models.Collections.Songs(t);
                            e.resolve(a)
                        }, this)).fail(_.bind(e.reject, e)), this.recentListensDfd = e), e.promise()
                    },
                    getListens: function() {
                        if (this.listensDfd && this.listensDfd.state() !== "rejected") return this.listensDfd.promise();
                        this.listensDfd = new $.Deferred;
                        if (this.get("listens")) this.listensDfd.resolve(this.get("listens"));
                        else {
                            var e = this.listensDfd;
                            n.Services.API.getUserRecentListens(this.get("UserID")).done(_.bind(function(t) {
                                var n = [];
                                for (var r = 0, i = t.length, s; r < i; r++) s = t[r], n[r] = {
                                    AlbumName: s.al,
                                    AlbumID: s.alid,
                                    ArtistName: s.ar,
                                    ArtistID: s.arid,
                                    listenDataKey: s.dk,
                                    SongName: s.s,
                                    SongID: s.sid,
                                    TagIDs: s.tids,
                                    listenTime: s.ts,
                                    client: s.c,
                                    CoverArtFilename: s.i
                                };
                                this.set("listens", n), e.resolve(n)
                            }, this)).fail(function() {
                                e.reject()
                            })
                        }
                        return this.listensDfd.promise()
                    },
                    getLocalFeed: function() {
                        var e = this.get("settings"),
                            t = 0,
                            r = 0,
                            i = $.now() / 1e3,
                            s = [],
                            o = new Backbone.Collection,
                            u = new Backbone.Collection,
                            a = function() {
                                return this.attributes.songs
                            },
                            f;
                        if (e && e.local && _.isArray(e.local.recentListens) && e.local.recentListens.length) {
                            var l = e.local.recentListens.length,
                                c = e.local.recentListens[0].t[0];
                            o.mostRecentListen || (o.mostRecentListen = c, o.mostRecentListenElapsed = i - c), _.each(e.local.recentListens, function(e, h) {
                                r || (r = e.t[0], t = e.t[0]), t && t - e.t[0] < 14400 ? (f = n.Models.Song.unarchiveSong(e.s), f && s.push({
                                    SongID: f.attributes.SongID,
                                    ArtistID: f.attributes.ArtistID,
                                    timestamp: e.t
                                })) : f = null, t = e.t[0];
                                if (f && h < l - 1) return;
                                var p = new Backbone.Model({
                                    songs: s,
                                    timestamp: r
                                });
                                p.getSongsPlayed = a, i - c < 259200 ? o.push(p) : u.push(p), s = [], r = 0
                            })
                        }
                        return o.backupFeed = u, o
                    },
                    getLocalRecentListens: function(e, t, r) {
                        r = _.isUndefined(r) ? !0 : r;
                        var i = e || this.getLocalFeed(),
                            s = [],
                            o = new n.Models.Collections.Songs([]);
                        !i.length && r && (i = i.backupFeed);
                        for (var u = 0, a = i.length; u < a; u++) s.push.apply(s, i.models[u].getSongsPlayed());
                        return t ? s : (o.add(s), o)
                    },
                    getPersonalizedTags: function(e) {
                        function m(e, t) {
                            var r, i;
                            for (r = 0, i = e.length; r < i; r++) {
                                p = _.toInt(e[r] instanceof n.Models.Tag ? e[r].id : e[r]);
                                if (!p || _.indexOf(a, p) !== -1) continue;
                                s[p] ? s[p][1].push(t) : s[p] = [p, [t]]
                            }
                        }
                        var r = $.Deferred(),
                            i = this.getLocalRecentListens(t, !0, !0) || [],
                            s = {},
                            o = {},
                            u = e.defaultTags || [],
                            a = e.blacklist || [],
                            f = u.slice(0),
                            l, c, h, p, d, v;
                        for (d = 0, v = i.length; d < v; d++) {
                            c = n.Models.Song.getCached(i[d].SongID), l = i[d].timestamp;
                            if (o[i[d].SongID] || !c || l && l.length && l[0] < 1349917200) continue;
                            o[i[d].SongID] = !0, h = c.get("Tags"), h && h.length ? h = h.models : h = c.get("TagIDs"), h && h.length && m(h, c)
                        }
                        console.log("tags used for home", s);
                        var g = {},
                            y = n.Views.Pages.Tags.lowIDFs;
                        for (d = 0, v = n.Models.Tag.topGenres.length; d < v; d++) g[n.Models.Tag.topGenres[d].tagID] = 1;
                        var b = _.sortBy(s, function(e, t) {
                            var n = 1;
                            if (g[t]) n = .3;
                            else {
                                var r = _.indexOf(y, t);
                                r !== -1 && (n = Math.min(.6, Math.max(.3, r / y.length)))
                            }
                            var i = _.indexOf(f, t);
                            return i != -1 && f.splice(i, 1), e[1].length > 1 ? (Math.pow(Math.random() * e[1].length, 1.2) + 10) * -1 * n : -1 * n
                        });
                        return r.resolve(b), r
                    },
                    getPersonalizedSongs: function(e) {
                        e = _.orEqual(e, !1);
                        var t = _.chainLoading(),
                            r = [],
                            i = $.Deferred(),
                            s = !1;
                        t.push(this.getFavoritesByType("Songs")), t.push(this.getLibrary()), this.id <= 0 && (e = !0), e ? (s = this.getLocalFeed(), s.length && (!this.id || s.mostRecentListenElapsed < 14400) && (r = this.getLocalRecentListens(s).models)) : t.push(this.getTopArtists()), r.length || t.push(this.getRecentListens().done(t.bind(function(t) {
                            r = t.models, e && !r.length ? s.backupFeed && s.backupFeed.length ? (r = this.getLocalRecentListens(s.backupFeed).models, s = s.backupFeed) : s = !1 : s = this.getLocalFeed()
                        }, this)));
                        var o = function(e) {
                                var t = 100,
                                    n = 20,
                                    r = .25,
                                    i = n * (1 + r),
                                    s = Math.E,
                                    o = Math.pow;
                                return parseInt(1 + (t - 1) / o(1 + n * o(s, -r * e + t * n / e), 1 / i), 10)
                            };
                        return t.done(_.bind(function() {
                            var e = s || new n.Models.Collections.FeedEvents([]),
                                t = this.get("library"),
                                u = this.get("favoriteSongs"),
                                a = this.get("topArtists") || new n.Models.Collections.Artists,
                                f = {},
                                l = 0,
                                c = {},
                                h = 0,
                                p = 0,
                                d = 0,
                                v = 1209600,
                                m = 0,
                                g = [],
                                y, b, w, E, S, x;
                            e.each(function(e) {
                                var t = e.getSongsPlayed(),
                                    r = e.get("timestamp"),
                                    i = {},
                                    s = 3,
                                    u;
                                m = Math.max(m, r), u = m - r;
                                for (y = 0, b = t.length; y < b; y++) E = t[y].SongID, S = t[y].ArtistID, w = n.Models.Song.getCached(E), x = t[y].timestamp && t[y].timestamp.length, (!i[S] || i[S] < s) && u < v && (c[S] || (c[S] = []), c[S].push(w), i[S] ? i[S]++ : i[S] = 1), f[E] ? f[E] += o(Math.max(.1, Math.min(20, 345600 / u)) * x) : f[E] = o(Math.max(.1, Math.min(20, 345600 / u)) * x), l += x
                            });
                            var T = [];
                            _.each(c, function(e, t) {
                                p = Math.max(p, e.length), d = e.length, h++, T.push([t, e.length])
                            }), T = _.sortBy(T, 1).reverse(), d /= h;
                            var N = new n.Models.Collections.Songs(r.concat(t.models)),
                                C = 0,
                                k = 1,
                                L = [],
                                A = 20,
                                O = Math.random() * 20 + A,
                                M = 27,
                                D = Math.random() * 27 + M,
                                P = a.length ? a.length : 1,
                                H;
                            for (y = 0, b = N.length; y < b; y++) w = N.models[y], S = w.attributes.ArtistID, E = w.attributes.SongID, C = Math.random() * 20, k = 1, f[E] && (C += f[E] / 100 * D, k > M / 4 && (k -= .3)), c[S] && p > 1 ? (C += c[S].length / d / p * O * k, k -= .3) : c[S] && (C += Math.random() * A * k, k -= .2), P && (H = a.indexOf(S)) != -1 && (C += Math.max(0, (P - H) / P * 20) * k), u.indexOf(w) !== -1 ? C += Math.random() * 20 * k : t.indexOf(w) !== -1 && (C += Math.random() * 15 * k), C = o(C / 7), L.push([w, C]);
                            L = _.sortBy(L, function(e) {
                                return e[1] = Math.floor(Math.random() * e[1] + Math.random() * 10), e[1] * -1
                            }), _.each(L, function(e) {
                                g.push(e[0])
                            }), g = new n.Models.Collections.Songs(g), this.set({
                                dominateRecentArtists: c,
                                dominateRecentArtistsSorted: T
                            }), i.resolve(g), this instanceof n.Models.AuthUser && n.trigger("authUser:personalizedSongsLoaded")
                        }, this)).fail(function() {
                            i.reject()
                        }), i
                    },
                    getBroadcastOptionMenu: function(e, t) {
                        var r = this,
                            i = e.get("invitedBroadcasters"),
                            s = this.get("UserID"),
                            o = e.get("bannedUserIDs"),
                            u = o && o[s],
                            a = [];
                        return u ? a.push({
                            title: _.getString("UNBLOCK"),
                            action: {
                                type: "fn",
                                callback: _.bind(e.unBanListener, e, r)
                            }
                        }) : a.push({
                            title: _.getString("BLOCK"),
                            action: {
                                type: "fn",
                                callback: _.bind(e.banListener, e, r)
                            }
                        }), a
                    },
                    getCurrentStatus: function() {
                        if (!this.currentStatusDfd || this.currentStatusDfd.state() !== "pending") {
                            this.currentStatusDfd = $.Deferred();
                            var e = setTimeout(_.bind(function() {
                                this.currentStatusDfd && this.currentStatusDfd.reject()
                            }, this), 3e3);
                            this.currentStatusDfd.always(_.bind(function() {
                                delete this.currentStatusDfd, clearTimeout(e)
                            }, this));
                            var t = this.get("UserID");
                            n.Services.SWF.ready.done(function() {
                                n.Services.SWF.connectToChat(), n.Services.SWF.chatReady.done(function() {
                                    n.Services.SWF.getUserStatus(t)
                                })
                            })
                        }
                        return this.currentStatusDfd.promise()
                    },
                    storeCurrentBroadcast: function(e, t, r, i, s, o, u) {
                        var a = {};
                        a.statusFromSwf = !! u;
                        if (t) {
                            if (!u && t < this.attributes.currentBroadcastID) return {};
                            a.onlineStatus = !0, a.isOwnerOfCurrentBroadcast = e, a.currentBroadcastID = t, a.currentBroadcastName = r, a.currentBroadcastPicture = i, !e && s && s.i ? (s.u ? a.currentBroadcastOwner = new n.Models.User({
                                FName: s.n,
                                UserID: _.toInt(s.i),
                                Picture: s.p
                            }) : a.currentBroadcastOwner = new n.Models.Artist({
                                ArtistName: s.n,
                                ArtistID: _.toInt(s.i),
                                CoverArtFilename: s.p
                            }), a.currentBroadcastOwner.storeCurrentBroadcast(1, t, r, i, null)) : !e && s && (s instanceof n.Models.User && this !== s || s instanceof n.Models.Artist) ? (a.currentBroadcastOwner = s, s.storeCurrentBroadcast(1, t, r, i)) : a.currentBroadcastOwner = null
                        } else a.isOwnerOfCurrentBroadcast = 0, a.currentBroadcastID = null, a.currentBroadcastName = null, a.currentBroadcastPicture = null, a.currentBroadcastOwner = null;
                        if (o) return a;
                        this.set(a)
                    },
                    addStatusLock: function(e) {
                        this.statusSubLocks || (this.statusSubLocks = []), _.indexOf(this.statusSubLocks, e) === -1 && this.statusSubLocks.push(e)
                    },
                    subscribeToStatus: function(e) {
                        this.statusSubLocks || (this.statusSubLocks = []);
                        if (!this.statusSubLocks.length) {
                            var t = this.id;
                            n.Services.SWF.ready.done(function() {
                                n.Services.SWF.connectToChat(), n.Services.SWF.chatReady.done(function() {
                                    n.Services.SWF.subscribeToUsersStatuses([t])
                                })
                            })
                        }
                        _.indexOf(this.statusSubLocks, e) === -1 && this.statusSubLocks.push(e)
                    },
                    unsubscribeFromStatus: function(e) {
                        if (!this.statusSubLocks) return;
                        var t = _.indexOf(this.statusSubLocks, e);
                        t > -1 && this.statusSubLocks.splice(t, 1);
                        if (!this.statusSubLocks.length && !this.get("isFavorite")) {
                            var r = this.id;
                            n.Services.SWF.chatReady.done(function() {
                                n.Services.SWF.unsubscribeFromUsersStatuses([r])
                            })
                        }
                    },
                    unsubscribeAllFromStatus: function() {
                        if (this.statusSubLocks) {
                            this.statusSubLocks = [];
                            if (this.get("isFavorite")) return;
                            var e = this.id;
                            n.Services.SWF.chatReady.done(function() {
                                n.Services.SWF.unsubscribeFromUsersStatuses([e])
                            })
                        }
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/users/",
                    get: function(e) {
                        var t, r;
                        if (e == n.getLoggedInUserID() && (r = n.Models.AuthUser.getCached(e))) t = new $.Deferred, t.resolve(r);
                        else {
                            var i = function(e) {
                                    var t = new $.Deferred;
                                    return n.Services.API.getUserByID(e).done(function(e) {
                                        e = e.User || {}, t.resolve(e)
                                    }).fail(_.bind(t.reject, t)), t.promise()
                                };
                            t = Backbone.CachedModel.genericGet.call(this, i, "UserID", e)
                        }
                        return t.promise()
                    },
                    getCached: function(e) {
                        var t;
                        return e == n.getLoggedInUserID() && this !== n.Models.AuthUser ? t = n.Models.AuthUser.getCached(e) : t = Backbone.CachedModel.getCached.call(this, e), t
                    },
                    pictureNameSort: function(e, t) {
                        if (e.attributes.Picture && !t.attributes.Picture) return -1;
                        if (t.attributes.Picture && !e.attributes.Picture) return 1;
                        var n = e.attributes.Name,
                            r = t.attributes.Name;
                        return n && r ? (n = n.toLowerCase(), r = r.toLowerCase(), n < r ? -1 : n === r ? 0 : 1) : n ? -1 : r ? 1 : 0
                    },
                    niftyFriendSort: function(e, t) {
                        var r = e.get("isFavorite"),
                            i = t.get("isFavorite");
                        if (r && i) {
                            var s = e.get("isFollower"),
                                o = t.get("isFollower");
                            if (s && !o) return -1;
                            if (o && !s) return 1
                        } else {
                            if (r) return -1;
                            if (i) return 1
                        }
                        return n.Models.User.pictureNameSort(e, t)
                    },
                    FLAG_PLUS: 1,
                    FLAG_LASTFM: 2,
                    FLAG_FACEBOOK: 4,
                    FLAG_FACEBOOKUSER: 16,
                    FLAG_GOOGLEUSER: 32,
                    FLAG_GOOGLE: 64,
                    FLAG_ANYWHERE: 128,
                    FLAG_ISARTIST: 256,
                    FLAG_MUSIC_BUSINESS: 1024,
                    FLAG_TWITTER: 4096,
                    FLAG_TWITTERUSER: 8192,
                    FLAG_LITE: 32768,
                    FLAG_KINESIS: 16384,
                    FLAG_OWNS_ARTIST: 65536,
                    FLAG_FLATTR: 131072,
                    FLAG_VERIFIED_EMAIL: 524288,
                    FLAG_HAS_NEW_SUB: 1048576,
                    FLAG_HAS_SPECIAL_PRICE: 2097152
                })
            }(), function() {
                function s(e, t) {
                    if (!t) this.set("artistsOwned", t), e.reject();
                    else {
                        var n = new r.Models.Collections.Artists(t);
                        n.comparator = _.getModelSort("ArtistName", !0), this.set("artistsOwned", n), e.resolve(n)
                    }
                    delete this.loadOwnedArtistsDfd
                }
                function o(e, t) {
                    this.set("extraData", t), t ? e.resolve(t) : e.reject(), delete this.loadExtraDataDfd
                }
                function u(t, n) {
                    if (!n) t.reject();
                    else {
                        if (n.Data) {
                            this.set("pageNameData", n.Data);
                            if (_.defined(n.Data.PendingNotification)) {
                                var i = function() {
                                        r.Services.API.userSawPendingNotification(n.Data.PendingNotification)
                                    };
                                switch (n.Data.PendingNotification) {
                                case "canceledCard1119":
                                    e.location.hash == "#!/upgrade" || e.location.hash == "#!/settings/subscription" || this.get("subscription").get("apiVersion") > 1 ? i() : setTimeout(function() {
                                        r.trigger("notification:add", {
                                            description: _.getString("ERROR_NOTIF_SUB_EXPIRED"),
                                            type: "error",
                                            click: function() {
                                                r.router.setHash("/settings/subscription")
                                            },
                                            duration: 0,
                                            closeAction: i
                                        })
                                    }, 1e3);
                                    break;
                                case "incorrectEmail1212":
                                    setTimeout(function() {
                                        r.trigger("notification:add", {
                                            description: _.getString("ERROR_NOTIF_INCORRECT_EMAIL"),
                                            type: "error",
                                            click: function() {
                                                r.router.setHash("/settings/account")
                                            },
                                            duration: 0,
                                            closeAction: i
                                        })
                                    }, 1e3)
                                }
                            }
                        } else this.set("pageNameData", {});
                        n.Name ? n.Name.indexOf("/") > -1 ? this.set("PathName", "") : this.set("PathName", n.Name) : this.set("PathName", ""), t.resolve(n.Data)
                    }
                }
                function a(e, t) {
                    this._super.apply(this, ["getLibrary", e]).done(_.bind(function(e) {
                        t.resolve(e), this.storeLibrary()
                    }, this)).fail(function(e) {
                        t.reject(e)
                    })
                }
                function f(e, t) {
                    this.set("userSettings", t), t ? e.resolve(t) : e.reject(), delete this.loadUserSettingsDfd
                }
                function l(e, t, n) {
                    if (!n || n.statusCode !== 1 && n.statusCode !== -6) {
                        n && t.PageName && (n.statusCode === -17 || n.statusCode === -4 || n.statusCode === -8 || n.statusCode === -9) && this.set("PathName", t.PageName), e.reject(n);
                        return
                    }
                    if (n.statusCode === -6) {
                        e.resolve(n);
                        return
                    }
                    t.hasOwnProperty("PageName") && (t.PathName = t.PageName, delete t.PageName), t.hasOwnProperty("FName") && (t.Name = t.FName, t.hasDefaultName = !1), this.set(t), r.Services.API.reportUserChange(this);
                    var i = this.get("currentBroadcastID");
                    i ? r.Services.API.storeChatIdentity("bcast:" + i) : r.Services.API.storeChatIdentity(), e.resolve(n)
                }
                function c(e, t, n) {
                    var i = _.toInt(n.Timestamps.newTSModified),
                        s = (new Date(i * 1e3)).format("Y-m-d G:i:s"),
                        o = [];
                    for (var u = 0; u < t.length; u++) t[u].set({
                        TSAdded: s,
                        fromLibrary: !0
                    }), o.push(t[u].get("SongID"));
                    this.get("library").add(t), e.resolve(t), _.toInt(n.Timestamps.oldTSModified) > this.get("libraryTSModified") ? this.refreshLibrary() : this.set("libraryTSModified", i), t.length > 1 ? r.trigger("notification:add", {
                        title: _.getString("POPUP_SONGS_ADDED", {
                            songCount: t.length
                        }),
                        type: "success",
                        url: this.toUrl("collection")
                    }) : t[0].get("isFavorite") || r.trigger("notification:add", {
                        title: _.getString("POPUP_SONG_ADDED"),
                        type: "success",
                        url: this.toUrl("collection")
                    }), r.trigger("guts:log", "songAddedToLibrary", {
                        ids: o
                    })
                }
                function h(e, t, n) {
                    e.reject(n), t.length > 1 ? r.trigger("notification:add", {
                        title: _.getString("POPUP_SONGS_ADD_FAILED", {
                            songCount: t.length
                        }),
                        type: "error"
                    }) : r.trigger("notification:add", {
                        title: _.getString("POPUP_SONG_ADD_FAILED"),
                        type: "error"
                    })
                }
                function p(e, t, n) {
                    var i = _.toInt(n.Timestamps.newTSModified),
                        s = [];
                    for (var o = 0; o < t.length; o++) t[o].set({
                        TSAdded: "",
                        TSFavorite: "",
                        fromLibrary: !1,
                        isFavorite: !1
                    }), s.push(t[o].get("SongID"));
                    this.get("library").remove(t), e.resolve(t), _.toInt(n.Timestamps.oldTSModified) > this.get("libraryTSModified") ? this.refreshLibrary() : this.set("libraryTSModified", i), t.length > 1 ? r.trigger("notification:add", {
                        title: _.getString("POPUP_SONGS_REMOVED", {
                            songCount: t.length
                        }),
                        type: "success"
                    }) : r.trigger("notification:add", {
                        title: _.getString("POPUP_SONG_REMOVED"),
                        type: "success"
                    }), r.trigger("guts:log", "songRemovedFromLibrary", {
                        ids: s
                    })
                }
                function d(e, t, n) {
                    e.reject(n), t.length > 1 ? r.trigger("notification:add", {
                        title: _.getString("POPUP_SONGS_REMOVE_FAILED", {
                            songCount: t.length
                        }),
                        type: "error"
                    }) : r.trigger("notification:add", {
                        title: _.getString("POPUP_SONG_REMOVE_FAILED"),
                        type: "error"
                    })
                }
                function v(e, t, n, i) {
                    var s = r.Models.Collections[t],
                        o = "favorite" + t,
                        u = this.get(o),
                        a = t.toLowerCase().substr(0, t.length - 1);
                    n.set({
                        isFavorite: !0,
                        TSFavorited: (new Date).format("Y-m-d G:i:s")
                    }), u && u instanceof s && u.add(n), t == "Songs" && !n.get("fromLibrary") && this.addSongsToLibrary([n.get("SongID")]), t == "Songs" && r.trigger("notification:add", {
                        title: _.getString("POPUP_SONG_ADDED"),
                        type: "success",
                        url: this.toUrl("collection/favorites")
                    }), e.resolve(n), r.trigger("guts:gatrack", "user", "objectFavorited", a), r.trigger("guts:log", "objectFavorited", {
                        type: a,
                        id: n.id
                    })
                }
                function m(e, t, n, i) {
                    var s = t.toLowerCase().substr(0, t.length - 1);
                    r.trigger("guts:gatrack", "user", "objectFavoritedFailed", s), r.trigger("guts:log", "objectFavoritedFailed", {
                        type: s,
                        id: n.id
                    }), e.reject(i)
                }
                function g(e, t, n, i) {
                    var s = r.Models.Collections[t],
                        o = "favorite" + t,
                        u = this.get(o),
                        a = t.toLowerCase().substr(0, t.length - 1);
                    n.set({
                        isFavorite: !1,
                        TSFavorited: ""
                    }), u && u instanceof s && u.remove(n);
                    if (t == "Songs" && !n.get("TSAdded")) {
                        n.set("fromLibrary", !1);
                        var f = this.get("library");
                        f && f.remove(n)
                    }
                    t == "Songs" && r.trigger("notification:add", {
                        title: _.getString("POPUP_SONG_REMOVED"),
                        type: "success"
                    }), e.resolve(n), r.trigger("guts:gatrack", "user", "objectFavorited", a), r.trigger("guts:log", "objectUnfavorited", {
                        type: a,
                        id: n.id
                    })
                }
                function y(e, t, n, i) {
                    var s = t.toLowerCase().substr(0, t.length - 1);
                    r.trigger("guts:gatrack", "user", "objectUnfavoritedFailed", s), r.trigger("guts:log", "objectUnfavoritedFailed", {
                        type: s,
                        id: n.id
                    }), e.reject(i)
                }
                function b(e, t) {
                    if (!e.loadSubscriptionDfd || e.loadSubscriptionDfd.state() === "rejected" || t) e.loadSubscriptionDfd = $.Deferred(), W.get("isLoaded") && !t ? W.loadSpecialPricing().done(function() {
                        e.loadSubscriptionDfd.resolve(W)
                    }) : r.Models.Subscription.get(e).done(function(t) {
                        W = t, e.loadSubscriptionDfd.resolve(t)
                    });
                    return e.loadSubscriptionDfd.promise()
                }
                function w(e, t, n, r) {
                    switch (e) {
                    case "remove":
                        this.get("friends").remove(t);
                        break;
                    case "add":
                        n === this.get("favoriteUsers") ? (this.get("followers").get(t.id) && this.get("friends").add(t), t.set("isFavorite", !0)) : n === this.get("followers") ? (this.get("favoriteUsers").get(t.id) && this.get("friends").add(t), t.set("isFollower", !0)) : console.warn("_onFavoriteUsersFollowersChanged fired on unknown collection: ", n);
                        break;
                    case "reset":
                        this.get("friends").reset(_.intersection(this.get("favoriteUsers").models, this.get("followers").models))
                    }
                }
                function E(e, t, n) {
                    if (!n) e.reject(n);
                    else {
                        var i = new r.Models.Collections.Users(n.Followers),
                            s = i.pluck("UserID"),
                            o = new r.Models.Collections.Users(n.Following),
                            u = o.pluck("UserID"),
                            a = new r.Models.Collections.Users([]),
                            f = _.intersection(s, u);
                        a.add(_.filter(o.models, function(e) {
                            return _.indexOf(f, e.get("UserID")) > -1
                        })), o.each(function(e) {
                            e.set("isFavorite", !0)
                        }), i.each(function(e) {
                            e.set("isFollower", !0)
                        }), this.set({
                            followers: i,
                            favoriteUsers: o,
                            friends: a
                        }), i.on("all", w, this), o.on("all", w, this), t === "Followers" ? e.resolve(i) : t === "Following" ? e.resolve(o) : e.resolve(a)
                    }
                }
                function S(e, t) {
                    if (!t || !t.playlists) e.reject(t);
                    else {
                        var n = new r.Models.Collections.Playlists(t.playlists),
                            i = new r.Models.Collections.Broadcasts(t.broadcasts);
                        n.each(function(e) {
                            e.set("isFavorite", !0)
                        }), i.each(function(e) {
                            e.set("isFavorite", !0)
                        }), this.set({
                            favoritePlaylists: n,
                            favoriteBroadcasts: i
                        }), e.resolve()
                    }
                }
                function x(e, t, n, i, s) {
                    var o = (new Date).valueOf(),
                        u = new r.Models.Playlist({
                            PlaylistID: s,
                            PlaylistName: t,
                            Description: i,
                            Username: this.get("Username"),
                            UserID: this.get("UserID"),
                            FName: this.get("FName"),
                            LName: this.get("LName"),
                            initialSongs: n,
                            TSAdded: o,
                            TSModified: o
                        });
                    this.getPlaylists().done(function(e) {
                        e.add(u)
                    }), r.trigger("notification:add", {
                        title: _.getString("POPUP_PLAYLIST_CREATE_TITLE"),
                        description: _.getString("POPUP_PLAYLIST_CREATE_DESCRIPTION"),
                        url: u.toUrl(),
                        type: "success"
                    }), r.trigger("guts:gatrack", "user", "playlistCreated"), r.trigger("guts:forcelog", "playlistCreated", {
                        playlistID: s
                    }), e.resolve(u)
                }
                function T(e, t) {
                    e.reject(t)
                }
                function N(e, t, n, i) {
                    if (!i) {
                        C(e, t, n);
                        return
                    }
                    e.set("isDeleted", !0), this.get("playlists") && this.get("playlists").remove(e), n && r.trigger("notification:add", {
                        title: _.getString("POPUP_PLAYLIST_DELETE_TITLE", {
                            playlist: e.get("PlaylistName")
                        }),
                        description: _.getString("POPUP_PLAYLIST_DELETE_DESCRIPTION"),
                        url: this.toUrl("music/playlists"),
                        type: "success"
                    }), r.trigger("guts:gatrack", "user", "playlistDeleted"), r.trigger("guts:forcelog", "playlistDeleted", {
                        playlistID: e.get("PlaylistID")
                    }), t.resolve()
                }
                function C(e, t, n) {
                    n && r.trigger("notification:add", {
                        description: _.getString("POPUP_FAIL_DELETE_PLAYLIST_MSG", {
                            playlist: e.PlaylistName
                        }),
                        type: "error"
                    }), r.trigger("guts:gatrack", "user", "deletePlaylistFailed"), r.trigger("guts:log", "deletePlaylistFailed", {
                        playlistID: e.get("PlaylistID")
                    }), t.reject()
                }
                function k(e, t, n, i) {
                    if (!i) {
                        L(e, t, n);
                        return
                    }
                    e.set("isDeleted", !1), this.get("playlists").add(e), n && r.trigger("notification:add", {
                        title: "",
                        description: _.getString("POPUP_PLAYLIST_RESTORED"),
                        url: e.toUrl(),
                        type: "success"
                    }), r.trigger("guts:gatrack", "user", "restorePlaylist"), r.trigger("guts:log", "restorePlaylist", {
                        playlistID: e.get("PlaylistID")
                    }), t.resolve()
                }
                function L(e, t, n) {
                    n && r.trigger("notification:add", {
                        title: "",
                        description: _.getString("POPUP_PLAYLIST_RESTORE_FAIL"),
                        type: "error"
                    }), r.trigger("guts:gatrack", "user", "restorePlaylistFailed"), r.trigger("guts:log", "restorePlaylistFailed", {
                        playlistID: e.get("PlaylistID")
                    }), t.reject()
                }
                function A(e, t, n, i) {
                    if (!i) {
                        O(e, t, n);
                        return
                    }
                    e.set("isDeleted", !0), this.get("broadcasts") && this.get("broadcasts").remove(e), n && r.trigger("notification:add", {
                        title: _.getString("POPUP_BROADCAST_DELETE_TITLE", {
                            broadcast: e.get("Name")
                        }),
                        description: _.getString("POPUP_BROADCAST_DELETE_DESCRIPTION"),
                        url: e.toUrl(),
                        type: "success"
                    }), r.trigger("guts:gatrack", "user", "broadcastDeleted"), r.trigger("guts:forcelog", "broadcastDeleted", {
                        broadcastID: e.get("BroadcastID")
                    }), t.resolve()
                }
                function O(e, t, n) {
                    n && r.trigger("notification:add", {
                        description: _.getString("POPUP_FAIL_DELETE_BROADCAST_MSG", {
                            broadcast: e.get("Name")
                        }),
                        type: "error"
                    }), r.trigger("guts:gatrack", "user", "deleteBroadcastFailed"), r.trigger("guts:log", "deleteBroadcastFailed", {
                        broadcastID: e.get("BroadcastID")
                    }), t.reject()
                }
                function M(e, t, n, i) {
                    if (!i) {
                        D(e, t, n);
                        return
                    }
                    e.set("isDeleted", !1), this.get("broadcasts") && this.get("broadcasts").add(e), n && r.trigger("notification:add", {
                        title: "",
                        description: _.getString("POPUP_BROADCAST_RESTORED"),
                        url: e.toUrl(),
                        type: "success"
                    }), r.trigger("guts:gatrack", "user", "restoreBroadcast"), r.trigger("guts:log", "restoreBroadcast", {
                        broadcastID: e.get("BroadcastID")
                    }), t.resolve()
                }
                function D(e, t, n) {
                    n && r.trigger("notification:add", {
                        title: "",
                        description: _.getString("POPUP_BROADCAST_RESTORE_FAIL"),
                        type: "error"
                    }), r.trigger("guts:gatrack", "user", "restoreBroadcastFailed"), r.trigger("guts:log", "restoreBroadcastFailed", {
                        broadcastID: e.id
                    }), t && t.reject()
                }
                function P(e, t) {
                    t && t.events ? (e && this.get("communityFeed") ? (this.get("communityFeed").add(t.events), this.trigger("change:communityFeed", this.get("communityFeed"))) : this.set("communityFeed", new r.Models.Collections.FeedEvents(t.events)), this.communityFeedDfd.resolve(this.get("communityFeed"), t.events)) : this.communityFeedDfd.reject()
                }
                function H(e) {
                    e ? (this.set("recommendedUsers", new r.Models.Collections.Users(e)), this.recommendedUsersDfd.resolve(this.get("recommendedUsers"))) : this.recommendedUsersDfd.reject()
                }
                function B(e, t) {
                    t ? (this.set("claimHistory", t), e.resolve(t)) : e.reject()
                }
                function j(e) {
                    var t = {
                        local: {}
                    };
                    return t.local.restoreQueue = _.orEqual(r.Services.Local.get("player.restoreQueue"), 0), t.local.lowerQuality = _.orEqual(r.Services.Local.get("player.lowerQuality" + e), 0), t.local.noPrefetch = _.orEqual(r.Services.Local.get("player.noPrefetch" + e), 0), t.local.playPauseFade = _.orEqual(r.Services.Local.get("player.playPauseFade" + e), 0), t.local.crossfadeAmount = _.orEqual(r.Services.Local.get("player.crossfadeAmount" + e), 5e3), t.local.crossfadeEnabled = _.orEqual(r.Services.Local.get("player.crossfadeEnabled" + e), 0), t.local.lastShuffle = _.orEqual(r.Services.Local.get("player.lastShuffle" + e), 0), t.local.persistShuffle = _.orEqual(r.Services.Local.get("player.persistShuffle" + e), 1), t.local.tooltips = _.orEqual(r.Services.Local.get("user.tooltips" + e), 0), t.local.themeFlags = _.orEqual(r.Services.Local.get("user.themeFlags" + e), 0), t.local.persistPinboard = _.orEqual(r.Services.Local.get("user.persistPinboard" + e), 0), t.local.disablePlayerShortcuts = _.orEqual(r.Services.Local.get("user.disablePlayerShortcuts" + e), 0), t.local.civicScienceOptOut = _.orEqual(r.Services.Local.get("civicscience.optOut"), 0), t.local.artistsPlayed = _.orEqual(r.Services.Local.get("artistsPlayed" + e), []), t.local.recentListens = _.orEqual(r.Services.Local.get("recentListens" + e), []), t.local.joinLeftDisabled = _.orEqual(r.Services.Local.get("broadcast.chat.joinLeftDisabled" + e), !1), t.local.nowPlayingDisabled = _.orEqual(r.Services.Local.get("broadcast.chat.nowPlayingDisabled" + e), !1), t.local.suggestionsDisabled = _.orEqual(r.Services.Local.get("broadcast.chat.suggestionsDisabled" + e), !1), _.isArray(t.local.artistsPlayed) || (t.local.artistsPlayed = []), t
                }
                function F(e, t) {
                    if (!t) {
                        e.reject();
                        return
                    }
                    t = new r.Models.Collections.Tacos(t), this.set("notifications", t), e.resolve(t)
                }
                function I() {
                    var e = this.id,
                        t = this.get("Email"),
                        n = Date.now(),
                        i = r.Services.Local.get("lastLiveRampEx" + e);
                    if (e > 0 && t && (!i || n - i > 1296e6)) {
                        var s = hex_sha1($.trim(t.toLowerCase()));
                        _.delay(function() {
                            r.Services.Local.set("lastLiveRampEx" + e, Date.now()), $("iframe#liveRamp").remove();
                            var t = $('<iframe id="liveRamp" name="_rlcdn" width=0 height=0 frameborder=0></iframe>'),
                                n = "http://ei.rlcdn.com/44054.html?s=" + s;
                            t.css("visibility", "hidden"), t.attr("src", n), $("body").append(t)
                        }, 3e4)
                    }
                }
                function q() {
                    var e = this.id,
                        t = new Date,
                        n = r.Services.Local.get("lastExcelateEx" + e),
                        i = this.get("Sex"),
                        s = this.get("TSDOB") ? this.get("TSDOB").split("-") : !1;
                    (!n || t.valueOf() - n > 1296e6) && _.delay(function() {
                        r.Services.Local.set("lastExcelateEx" + e, Date.now()), $("iframe#excelate").remove();
                        var n = $('<iframe id="excelate" width=0 height=0 frameborder=0></iframe>'),
                            o = ["http://loadus.exelator.com/load/?p=259&g=001&c=285367&j=w"];
                        i && e > 0 && (o.push("&ge="), o.push(i.toLowerCase() == "m" ? "0" : "1"));
                        if (s && s.length == 3 && e > 0) {
                            var u = t.getFullYear() - _.toInt(s[0]);
                            _.toInt(s[1]) > t.month ? u -= 1 : _.toInt(s[1]) == t.month && _.toInt(s[2]) > t.date && (u -= 1), o.push("&ae="), o.push(r.Models.Ad.encodeInteger(u))
                        }
                        n.css("visibility", "hidden"), n.attr("src", o.join("")), $("body").append(n)
                    }, 31e3)
                }
                function R(e, t) {
                    t && (t = new r.Models.Broadcast(t)), e.resolve(t)
                }
                function U(e, t) {
                    if (!_.isArray(t) || !t.length || !t[0].hasOwnProperty("CalloutID")) t = [];
                    var n = new r.Models.Collections.Callouts(t);
                    this.set("callouts", n), e.resolve(n)
                }
                function z(e, t) {
                    e.reject(t)
                }
                var r = e.GS = e.GS || {};
                r.Models = r.Models || {};
                var i = e.clientTimeDivergence || 0,
                    W, X = /^(?!.*\.@)(?!.*\.{2})[A-z0-9\._+-]+@[A-z0-9][A-z0-9-]*(\.[A-z0-9_-]+)*\.([A-z]{2,6})$/,
                    V = /^([a-zA-Z0-9]+[\.\-_]?)+[a-zA-Z0-9]+$/;
                r.Models.AuthUser = r.Models.User.extend({
                    defaults: {
                        isLoggedIn: !1,
                        isAuth: !0
                    },
                    constructor: function(e) {
                        var t = _.toArray(arguments).splice(1);
                        e.Privacy = _.orEqual(e.Privacy, e.privacy), e.Privacy = _.toInt(e.Privacy);
                        try {
                            delete e.privacy
                        } catch (n) {}
                        e.sessionPrivacy = e.Privacy, e.NotificationEmailPrefs = _.toInt(e.NotificationEmailPrefs), e.Context = {
                            type: "user",
                            artist: {}
                        }, e._noCache = !0, t.unshift(e), this._super.apply(this, ["constructor"].concat(t))
                    },
                    initialize: function() {
                        r.Models.User.prototype.initialize.apply(this, _.toArray(arguments)), this.set("_noCache", !1), r.Models.AuthUser.cache(this);
                        var e = this.get("UserID") > 0;
                        this.set("isLoggedIn", e);
                        if (e) {
                            _.defer(_.bind(this.loadUserInfo, this));
                            var t = 0,
                                n = !1,
                                i = !1;
                            this.get("Flags") & r.Models.User.FLAG_ANYWHERE ? t = 8 : this.get("Flags") & r.Models.User.FLAG_PLUS && this.get("IsPremium") ? t = 6 : this.get("Flags") & r.Models.User.FLAG_LITE ? t = 21 : this.get("IsPremium") ? t = 8 : n = !0, this.get("Flags") & r.Models.User.FLAG_HAS_SPECIAL_PRICE && (i = !0), W = new r.Models.Subscription({
                                SubscriptionTypeID: t,
                                isLoaded: n,
                                hasSpecialPricing: i,
                                user: this
                            })
                        } else W = new r.Models.Subscription({
                            isLoaded: !0,
                            user: this
                        });
                        this.defineProperty("subscription", {
                            get: function() {
                                return W
                            },
                            configurable: !1
                        }), this.set("settings", j(this.get("UserID")));
                        var s = r.Services.Twitter.SERVICE_ID | r.Services.Twitter.TWITTER_ONLY_SERVICE_ID | r.Services.Google.SERVICE_ID | r.Services.Google.GOOGLE_ONLY_SERVICE_ID | r.Services.Facebook.SERVICE_ID | r.Services.Facebook.FACEBOOK_ONLY_SERVICE_ID | r.Services.Flattr.SERVICE_ID | r.Services.Lastfm.SERVICE_ID,
                            o = !1;
                        this.get("isLoggedIn") && (this.get("Flags") & s) > 0 && (o = !0), this.set("hasExtraData", o), this.get("IsPremium") || (I.call(this), q.call(this))
                    },
                    loadUserInfo: function() {
                        this.getPageNameData(), this.getLibrary(), this.getFavoritesByType("Songs"), this.getFavoritesByType("Playlists"), this.getFavoritesByType("Artists"), this.getFavoritesByType("Users");
                        var e = this.getOwnedArtists();
                        _.delay(_.bind(this.getExtraData, this), 5e3);
                        var t = [r.Services.SWF.chatReady, r.ready];
                        $.after(t).done(_.bind(function() {
                            var t = this.getBroadcastingLocally();
                            if (t && t.broadcastID) {
                                var i = _.bind(function() {
                                    if (t && t.context && t.context.type == "artist") {
                                        var e = r.Models.Artist.getCached(t.context.artistID);
                                        if (!e) {
                                            D({
                                                id: t.broadcastID
                                            }, null, !0);
                                            return
                                        }
                                        this.setContext({
                                            type: t.context.type,
                                            artist: e
                                        })
                                    }
                                    n.page.currentPageView instanceof r.Views.Pages.User && n.page.currentPageView.broadcastView && n.page.currentPageView.model.get("user") === this ? r.Models.Broadcast.fetchRealtimeBroadcast(t.broadcastID).done(_.bind(this.resumeBroadcast, this)).fail(function() {
                                        t.alreadyTried = !0, r.trigger("lightbox:open", "broadcastResume", t)
                                    }) : r.trigger("lightbox:open", "broadcastResume", t)
                                }, this);
                                e.done(i)
                            }
                        }, this))
                    },
                    getOwnedArtists: function(e) {
                        if (!e && this.loadOwnedArtistsDfd && this.loadOwnedArtistsDfd.state() !== "rejected") return this.loadOwnedArtistsDfd.promise();
                        var t = $.Deferred();
                        return !e && typeof this.get("artistsOwned") != "undefined" ? t.resolve(this.get("artistsOwned")) : this.get("isLoggedIn") && this.get("Flags") & r.Models.User.FLAG_OWNS_ARTIST ? (r.Services.API.userGetArtistsOwned(_.bind(s, this, t), _.bind(s, this, t, null)), this.loadOwnedArtistsDfd = t) : s.call(this, t, []), t.promise()
                    },
                    getClaimHistory: function(e) {
                        if (!e && this.loadClaimHistoryDfd && this.loadClaimHistoryDfd.state() !== "rejected") return this.loadClaimHistoryDfd.promise();
                        var t = $.Deferred();
                        return !e && typeof this.get("claimHistory") != "undefined" ? t.resolve(this.get("claimHistory")) : this.get("isLoggedIn") ? (r.Services.API.getClaimHistory().done(_.bind(B, this, t)).fail(_.bind(B, this, t, [])), this.loadClaimHistoryDfd = t) : B.call(this, t, []), t.promise()
                    },
                    getExtraData: function() {
                        if (this.loadExtraDataDfd && this.loadExtraDataDfd.state() !== "rejected") return this.loadExtraDataDfd.promise();
                        var e = $.Deferred();
                        return typeof this.get("extraData") != "undefined" ? e.resolve(this.get("extraData")) : this.get("hasExtraData") ? (r.Services.API.userGetExtraData(_.bind(o, this, e), _.bind(o, this, e, null)), this.loadExtraDataDfd = e) : o.call(this, e, null), e.promise()
                    },
                    getPageNameData: function() {
                        if (this.loadUserPageNameDataDfd && this.loadUserPageNameDataDfd.state() === "pending") return this.loadUserPageNameDataDfd.promise();
                        var e = $.Deferred();
                        return typeof this.get("pageNameData") != "undefined" ? e.resolve(this.get("pageNameData")) : this.get("isLoggedIn") ? (r.Services.API.getPageInfoByIDType(this.get("UserID"), "user").done(_.bind(u, this, e)).fail(_.bind(u, this, e, null)), this.loadUserPageNameDataDfd = e) : u.call(this, e, null), e.promise()
                    },
                    getUserSettings: function() {
                        if (this.loadUserSettingsDfd && this.loadUserSettingsDfd.state() === "pending") return this.loadUserSettingsDfd.promise();
                        var e = $.Deferred();
                        return typeof this.get("userSettings") != "undefined" ? e.resolve(this.get("userSettings")) : this.get("isLoggedIn") ? (r.Services.API.getUserSettings(_.bind(f, this, e), _.bind(f, this, e, null)), this.loadUserSettingsDfd = e) : f.call(this, e, null), e.promise()
                    },
                    changeUserInfo: function(e, t, n) {
                        var i = $.Deferred(),
                            s = {},
                            o = {},
                            u = !1,
                            a;
                        for (var f in e) if (e.hasOwnProperty(f)) {
                            a = this.get(f);
                            if (!e[f] && !a) continue;
                            !e[f] && f !== "PathName" && (e[f] = null), e[f] !== a && (s[f] = e[f], o[f] = a, u = !0)
                        }
                        if (!u) i.resolve({
                            statusCode: 1
                        });
                        else {
                            var c = $.extend({}, s);
                            c.FName && this.get("LName").length && (c.LName = ""), c.hasOwnProperty("PathName") && (c.PageName = c.PathName, delete c.PathName);
                            if (c.PageName || c.Email) {
                                var h = this.get("Flags");
                                if (!t && !n && ((h & r.Models.User.FLAG_GOOGLEUSER) > 0 || (h & r.Models.User.FLAG_TWITTERUSER) > 0)) {
                                    n = {};
                                    var p = this;
                                    return h & r.Models.User.FLAG_GOOGLEUSER ? r.Services.Google.login().done(function(e) {
                                        n.type = "google", n.googleEmailAddress = r.Services.Google.profile.email, n.googleUID = r.Services.Google.profile.id, n.accessToken = e.accessToken, r.Services.API.changeUserInfoEx(c, t, n, o, _.bind(l, p, i, s), function(e) {
                                            i.reject(e)
                                        })
                                    }).fail(function() {
                                        i.reject({
                                            statusCode: -14
                                        })
                                    }) : r.Services.Twitter.login().done(function(e) {
                                        n.type = "twitter", n.twitterUserID = r.Services.Twitter.profile.id_str, n.oauthToken = e.oauthToken, n.oauthSecret = e.oauthSecret, r.Services.API.changeUserInfoEx(c, t, n, o, _.bind(l, p, i, s), function(e) {
                                            i.reject(e)
                                        })
                                    }).fail(function() {
                                        i.reject({
                                            statusCode: -14
                                        })
                                    }), i.promise()
                                }!t && !n && i.reject({
                                    statusCode: -7
                                })
                            }
                            r.Services.API.changeUserInfoEx(c, t, n, o, _.bind(l, this, i, s), function(e) {
                                i.reject(e)
                            })
                        }
                        return i.promise()
                    },
                    getLibrary: function(e) {
                        e = _.orEqual(e, !1);
                        if (this.loadAuthLibraryDfd && this.loadAuthLibraryDfd.state() !== "rejected") return this.loadAuthLibraryDfd.promise();
                        var t = new $.Deferred,
                            n = this.get("library");
                        if (n) t.resolve(n);
                        else {
                            var i = function() {
                                    var i = r.Services.Local.get("library" + this.id);
                                    i ? r.Services.API.userGetLibraryTSModified(this.id).done(_.bind(function(s) {
                                        s.TSModified > i.lastModified ? a.call(this, e, t) : (n = new r.Models.Collections.Songs(_.toArray(i.songs)), this.set({
                                            libraryTSModified: i.lastModified,
                                            library: n
                                        }), n.each(function(e) {
                                            var t = !1;
                                            e.get("TSFavorited") && (t = !0), e.set({
                                                fromLibrary: !0,
                                                isFavorite: t
                                            })
                                        }), t.resolve(n))
                                    }, this)).fail(_.bind(function() {
                                        a.call(this, e, t)
                                    }, this)) : a.call(this, e, t)
                                };
                            this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(i, this)) : i.call(this), this.loadAuthLibraryDfd = t
                        }
                        return t.promise()
                    },
                    storeLibrary: function() {
                        var e = this.get("library");
                        if (!e || !e.length) return;
                        var t = {
                            lastModified: this.get("libraryTSModified"),
                            songs: {}
                        };
                        e.each(function(e) {
                            t.songs[e.id] = e.archiveAttr()
                        }), r.Services.Local.set("library" + this.id, t)
                    },
                    refreshLibrary: function() {
                        var e = this.get("libraryTSModified"),
                            t = this.get("library");
                        this.unset("libraryTSModified", {
                            silent: !0
                        }), this.unset("library", {
                            silent: !0
                        }), this.hasOwnProperty("loadAuthLibraryDfd") && delete this.loadAuthLibraryDfd, this.hasOwnProperty("libraryDfd") && delete this.libraryDfd, this.getLibrary(!0).fail(_.bind(function() {
                            this.set({
                                libraryTSModified: e,
                                library: t
                            }, {
                                silent: !0
                            })
                        }, this))
                    },
                    getCallouts: function() {
                        if (this.loadCalloutsDfd) return this.loadCalloutsDfd.promise();
                        var e = $.Deferred(),
                            t = this.get("callouts");
                        return t ? e.resolve(t) : r.Services.API.getUserCallouts(this.id).done(_.bind(U, this, e)).fail(_.bind(z, this, e)), this.loadCalloutsDfd = e, e.promise()
                    },
                    gotNewSubscription: function(e) {
                        if (!e) {
                            var t = this.get("Flags");
                            t |= r.Models.User.FLAG_HAS_NEW_SUB, this.set("Flags", t)
                        }
                        return this.loadSubscription(!0)
                    },
                    loadSubscription: function(e) {
                        return b(this, e)
                    },
                    getIsPremium: function() {
                        return this.get("subscription").isPremium()
                    },
                    createPlaylist: function(e, t, n) {
                        var i = new $.Deferred,
                            s = [],
                            o = [];
                        if (t && t.length) for (var u = 0; u < t.length; u++) {
                            var a = t[u];
                            a instanceof Backbone.Model && !isNaN(a.get("SongID")) && (a = a.get("SongID"));
                            var f = r.Models.Song.getCached(a);
                            if (!f) {
                                gsConfig.runMode != "production" && console.warn("Tried to add song to playlist that wasn't cached!", a);
                                continue
                            }
                            s.push(f.toJSON()), o.push(a)
                        }
                        return this.get("isLoggedIn") ? r.Services.API.createPlaylist(e, o, n).done(_.bind(x, this, i, e, s, n)).fail(_.bind(T, this, i)) : i.reject({
                            error: "Not logged in"
                        }), i.promise()
                    },
                    addSongsToLibrary: function(e) {
                        var t = new $.Deferred,
                            n = [],
                            i = [];
                        for (var s = 0; s < e.length; s++) {
                            var o = e[s];
                            o instanceof Backbone.Model && !isNaN(o.get("SongID")) && (o = o.get("SongID"));
                            if (o === 0) continue;
                            var u = r.Models.Song.getCached(o);
                            if (!u) {
                                gsConfig.runMode != "production" && console.warn("Tried to add song to library that wasn't cached!", o);
                                continue
                            }
                            u.get("fromLibrary") || (n.push(u), i.push(u.getDetailsForFeeds()))
                        }
                        return n.length || t.resolve([]), this.get("isLoggedIn") ? r.Services.API.userAddSongsToLibrary(i).done(_.bind(c, this, t, n)).fail(_.bind(h, this, t, n)) : r.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_ADD_LIBRARY"),
                            onLogin: function(e) {
                                e.getLibrary().done(function() {
                                    r.Services.API.userAddSongsToLibrary(i).done(_.bind(c, e, t, n)).fail(_.bind(h, e, t, n))
                                })
                            }
                        }), t.promise()
                    },
                    removeSongsFromLibrary: function(e) {
                        var t = new $.Deferred,
                            n, i = [],
                            s = [],
                            o = [],
                            u = [],
                            a = [];
                        for (n = 0; n < e.length; n++) {
                            var f = e[n],
                                l = r.Models.Song.getCached(f);
                            if (!l) {
                                gsConfig.runMode != "production" && console.warn("Tried to add song to library that wasn't cached!", f);
                                continue
                            }
                            l.get("fromLibrary") && (i.push(l), o.push(f), u.push(l.get("AlbumID")), a.push(l.get("ArtistID"))), l.get("isFavorite") && s.push(l)
                        }
                        for (n = 0; n < s.length; n++) r.Services.API.unfavorite("Song", s[n].id);
                        return i.length || t.resolve([]), this.get("isLoggedIn") ? r.Services.API.userRemoveSongsFromLibrary(this.id, o, u, a).done(_.bind(p, this, t, i)).fail(_.bind(d, this, t, i)) : t.reject(), t.promise()
                    },
                    favorite: function(e, t) {
                        var n = new $.Deferred,
                            i = e.substr(0, e.length - 1),
                            s = r.Models[i],
                            o = s ? s.getCached(t) : null;
                        t === 0 && n.reject("Invalid item"), s || n.reject("Invalid type"), o || n.reject("Model not cached");
                        if (this.get("isLoggedIn")) if (e === "Broadcasts") {
                            if (!o || !o.get("Name") || !o.get("UserID") && !o.get("ArtistID")) return n.reject(), n.promise();
                            r.Services.API.favoriteBroadcast(t, o.get("Name"), o.get("UserID"), o.get("ArtistID")).done(_.bind(v, this, n, e, o)).fail(_.bind(m, this, n, e, o))
                        } else r.Services.API.favorite(i, t, o.getDetailsForFeeds()).done(_.bind(v, this, n, e, o)).fail(_.bind(m, this, n, e, o));
                        else {
                            var u;
                            switch (e) {
                            case "Users":
                                u = "LB_LOGIN_MUST_LOGIN_TO_FOLLOW_USER";
                                break;
                            case "Songs":
                                u = "LB_LOGIN_MUST_LOGIN_TO_FAV_SONG";
                                break;
                            case "Playlists":
                                u = "LB_LOGIN_MUST_LOGIN_TO_SUBSCRIBE_PLAYLIST";
                                break;
                            case "Artists":
                                u = "LB_LOGIN_MUST_LOGIN_TO_FOLLOW_ARTIST";
                                break;
                            case "Broadcasts":
                                u = "LB_LOGIN_MUST_LOGIN_TO_FAV_BROADCAST"
                            }
                            r.trigger("lightbox:open", "login", {
                                message: _.getString(u),
                                onLogin: function(s) {
                                    s.getFavoritesByType(e).done(function() {
                                        r.Services.API.favorite(i, t, o.getDetailsForFeeds()).done(_.bind(v, s, n, e, o)).fail(_.bind(m, s, n, e, o))
                                    })
                                }
                            })
                        }
                        return n.promise()
                    },
                    unfavorite: function(e, t) {
                        var n = new $.Deferred,
                            i = r.Models[e.substr(0, e.length - 1)],
                            s = i ? i.getCached(t) : null,
                            o = e.substr(0, e.length - 1);
                        return t === 0 && n.reject("Invalid item"), i || n.reject("Invalid type"), s || n.reject("Model not cached"), this.get("isLoggedIn") ? (o || "").toLowerCase() === "broadcast" ? r.Services.API.unfavoriteBroadcast(t).done(_.bind(g, this, n, e, s)).fail(_.bind(y, this, n, e, s)) : r.Services.API.unfavorite(o, t).done(_.bind(g, this, n, e, s)).fail(_.bind(y, this, n, e, s)) : n.reject("log in plz"), n.promise()
                    },
                    getLastBroadcast: function() {
                        if (this.lastBroadcastDfd && this.lastBroadcastDfd.state() !== "rejected") return this.lastBroadcastDfd.promise();
                        var e = $.Deferred();
                        this.lastBroadcastDfd = e;
                        if (this.get("isLoggedIn")) {
                            var t = this.get("Context");
                            t.type === "artist" ? r.Services.API.getArtistLastBroadcast(t.artist.get("ArtistID")).done(_.bind(R, this, e)).fail(_.bind(e.reject, e)) : r.Services.API.getUserLastBroadcast().done(_.bind(R, this, e)).fail(_.bind(e.reject, e))
                        } else e.resolve(null);
                        return e.promise()
                    },
                    clearLastBroadcast: function() {
                        this.lastBroadcastDfd && delete this.lastBroadcastDfd
                    },
                    storeBroadcastingLocally: function() {
                        var e = this.get("currentBroadcastID"),
                            t = this.get("Context");
                        e && this.get("isOwnerOfCurrentBroadcast") ? (t = {
                            type: t.type,
                            artistID: t.artist && t.artist.id
                        }, r.Services.Local.set("lastBroadcasting" + this.id, {
                            broadcastID: e,
                            broadcastName: this.get("currentBroadcastName"),
                            context: t,
                            time: Date.now()
                        })) : r.Services.Local.remove("lastBroadcasting" + this.id)
                    },
                    getBroadcastingLocally: function() {
                        var e = r.Services.Local.get("lastBroadcasting" + this.id);
                        return e && e.time && e.time + 72e5 < Date.now() && (e = null), r.Services.Local.remove("lastBroadcasting" + this.id), e
                    },
                    createBroadcast: function(e, i, s, o, u) {
                        if (this.creatingBroadcast) return;
                        u = _.orEqual(u, {}), o = _.orEqual(o, !1);
                        if (!this.get("isLoggedIn")) {
                            var a = _.toArray(arguments);
                            r.trigger("lightbox:open", "login", {
                                message: _.getString("LB_LOGIN_MUST_LOGIN_TO_BROADCAST"),
                                onLogin: function(e) {
                                    e.createBroadcast.apply(e, a)
                                }
                            });
                            return
                        }
                        r.trigger("player:radio", !1);
                        var f = this,
                            l = function() {
                                f.creatingBroadcast && (clearTimeout(f.creatingBroadcast), f.creatingBroadcast = null)
                            };
                        this.creatingBroadcast = setTimeout(l, 5e3), this.getLastBroadcast().always(_.bind(function(a) {
                            var f = !1,
                                c;
                            a instanceof r.Models.Broadcast || (a = null), e = _.orEqual(e, a && !a.get("IsRandomName") ? a.get("Name") : "") + "";
                            if (!e) {
                                var h = ["Street", "Pizza", "Trap", "Crystal", "Beat", "Moon", "Night", "Summer", "Dance", "Lazer", "Ice", "Gold", "Red", "Blue", "Hot", "Orange", "Turquoise", "Pretty", "Sapphire", "Naughty", "Weird", "Cute", "Feisty", "Purple", "Neon", "Groovy", "Funky", "Tangerine", "Awesome", "Sparkle"],
                                    p = ["Weasel", "Meow", "Wave", "Bop", "Pudding", "Panda", "Wolf", "Buggy", "Cake", "Beach", "Berry", "Otter", "Sloth", "Donkey", "Llama", "Manatee", "Bat", "Hippo", "Dog", "Giraffe", "Mouse", "Cat", "Ant", "Lion", "Elephant", "Zebra", "Rhino", "Tiger", "Flamingo", "Candles", "Soap", "Balloons", "Lake", "Statues", "Path", "Hats", "Party", "Zoo"],
                                    d = ["FM", "Mixtape", "Radio", "Mix", "Music"];
                                e = [h[Math.floor(Math.random() * h.length)], p[Math.floor(Math.random() * p.length)], d[Math.floor(Math.random() * d.length)]].join(" "), f = !0
                            }
                            i = u.ignoreLast ? null : _.orEqual(i, a ? a.get("Tag") : null), s = _.orEqual(s, a ? a.get("Description") : "");
                            if (o) {
                                var v = a ? a.get("Image") || "" : t,
                                    m = a ? a.get("Privacy") || 0 : t,
                                    g = v ? v.indexOf("?") : -1;
                                g > -1 && (v = v.substring(0, g));

                                function y(e) {
                                    (!e || !e.success) && r.router.setHash("broadcasts?down"), l(), n.model.get("player").set("isCreatingBroadcast", !1), r.off("manatee:startBroadcast", y)
                                }
                                var b = [e, f, i, s, v, m];
                                n.model.get("player").set({
                                    isCreatingBroadcast: b,
                                    isJoiningBroadcast: !1
                                }), r.on("manatee:startBroadcast", y), r.Services.SWF.ready.done(function() {
                                    r.Services.SWF.connectToChat(), r.Services.SWF.chatReady.done(function() {
                                        r.Services.SWF.startBroadcast.apply(r.Services.SWF, b)
                                    })
                                })
                            } else r.trigger("lightbox:open", "createBroadcast", {
                                name: e,
                                tag: i,
                                description: s
                            }), l()
                        }, this)), this.invitesDfd = r.Services.API.getPastBroadcastInvites(), this.followersDfd.done(_.bind(function() {
                            this.invitesDfd.done(_.bind(this.updateBroadcastInviteableUsers, this))
                        }, this))
                    },
                    joinBroadcast: function(e, t) {
                        var i = r.Models.Broadcast.getCached(e),
                            s = this.get("Context"),
                            o = $.Deferred(),
                            u = o.promise();
                        if (!i && !t) return o.reject(1), u;
                        if (s.type === "artist") return o.reject(2), u;
                        var a = t || i.getOwner(),
                            f = a instanceof r.Models.User;
                        if (!a || this === a) return o.reject(3), u;
                        var l = function() {
                                n.model.get("player").set({
                                    isCreatingBroadcast: !1,
                                    isJoiningBroadcast: e
                                }), r.Services.SWF.ready.done(function() {
                                    r.Services.SWF.connectToChat(), r.Services.SWF.chatReady.done(function() {
                                        r.Services.SWF.joinBroadcast(e, a.id, a.get("Name"), a.get("Picture"), f), o.resolve()
                                    })
                                })
                            },
                            c = function() {
                                i.set({
                                    capacityLimitReached: !0
                                });
                                var e = i.getOwner();
                                e && e.storeCurrentBroadcast && e.storeCurrentBroadcast(!0, i.get("BroadcastID"), i.get("Name"), i.get("Picture"), e.attributes, !1, !1), r.router.setHash(i.toUrl())
                            },
                            h = i && i.get("UserID") || t && t.get("UserID"),
                            p = i && i.get("ArtistID") || t && t.get("ArtistID"),
                            d = h && gsConfig.specialBroadcastUserID && h == gsConfig.specialBroadcastUserID,
                            v = p && gsConfig.specialBroadcastArtistID && p == gsConfig.specialBroadcastArtistID;
                        if (i && (d || v)) {
                            var m = i.getUpdatedListenersCount();
                            return m.done(function(e) {
                                !gsConfig.specialBroadcastCap || e < gsConfig.specialBroadcastCap ? l() : c()
                            }), m.fail(c), u
                        }
                        return l(), u
                    },
                    leaveBroadcast: function() {
                        r.Services.SWF.endBroadcast()
                    },
                    resumeBroadcast: function(n) {
                        r.Services.SWF.chatReady.done(_.bind(function() {
                            if (n) {
                                var i = n.get("activeSong"),
                                    s = n.get("nextSong"),
                                    o = n.get("activeSongStatus") || 0,
                                    u = n.get("activeSongPosition") || 0,
                                    a = n.get("lastHeartbeatTime"),
                                    f = a ? Date.now() - a + e.clientTimeDivergence : t,
                                    l = _.keys(n.get("bannedUserIDs"));
                                i = i ? i.getDetailsForSwf() : null, s = s ? s.getDetailsForSwf() : null, r.Services.SWF.resumeBroadcast(n.get("BroadcastID"), i, s, o, u, f, l)
                            } else this.createBroadcast(t, t, t, !0);
                            this.invitesDfd = r.Services.API.getPastBroadcastInvites(), this.followersDfd.done(_.bind(function() {
                                this.invitesDfd.done(_.bind(this.updateBroadcastInviteableUsers, this))
                            }, this))
                        }, this))
                    },
                    cleanUpOnLogout: function(e) {
                        var t = new $.Deferred;
                        this.id > 0 && this.storeLibrary(), this.setContext({
                            type: "user",
                            artist: {}
                        }, e), r.Models.AuthUser.uncache(this);
                        var n = function(e, t) {
                                var i = e.splice(0, 1e3),
                                    s = i.length,
                                    o;
                                for (var u = 0; u < s; u++) o = i[u], o instanceof r.Models.Song ? o.set({
                                    isFavorite: !1,
                                    fromLibrary: !1
                                }) : o instanceof r.Models.User ? o.set({
                                    isFavorite: !1,
                                    isFollower: !1
                                }) : o.set({
                                    isFavorite: !1
                                });
                                e.length ? _.defer(n, e, t) : t.resolve()
                            },
                            i = this.get("library") ? this.get("library").models : [],
                            s = this.get("favoriteUsers") ? this.get("favoriteUsers").models : [],
                            o = this.get("favoriteArtists") ? this.get("favoriteArtists").models : [],
                            u = this.get("favoritePlaylists") ? this.get("favoritePlaylists").models : [],
                            a = this.get("followers") ? this.get("followers").models : [],
                            f = this.get("favoriteBroadcasts") ? this.get("favoriteBroadcasts").models : [];
                        return _.defer(n, i.concat(s, o, u, a, f), t), t.promise()
                    },
                    getFollowers: function() {
                        if (this.followersDfd && this.followersDfd.state() !== "rejected") return this.followersDfd.promise();
                        var e = $.Deferred(),
                            t = this.get("followers");
                        if (t) e.resolve(t);
                        else {
                            if ( !! this.get("favoriteUsers")) return this._super("getFollowers");
                            var n = function() {
                                    if (this.id <= 0) t = new r.Models.Collections.Users([]), this.set({
                                        followers: t
                                    }), e.resolve(t);
                                    else if (!this.get("favoriteUsers")) {
                                        r.Services.API.userGetFollowersFollowing().done(_.bind(E, this, e, "Followers")).fail(_.bind(E, this, e, "Followers")), this.followersDfd = e;
                                        var n = $.Deferred(),
                                            i = this;
                                        this.favoriteUsersDfd = n, e.done(_.debounce(function() {
                                            n.resolve(i.get("favoriteUsers"))
                                        }, 0)).fail(function(e) {
                                            n.reject(e)
                                        });
                                        var s = $.Deferred();
                                        this.friendsDfd = s, e.done(_.debounce(function() {
                                            s.resolve(i.get("friends"))
                                        }, 0)).fail(function(e) {
                                            s.reject(e)
                                        })
                                    }
                                };
                            this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(n, this)) : n.call(this)
                        }
                        return e.promise()
                    },
                    getFavoritesByType: function(e, t) {
                        if (e !== "Users" && e !== "Playlists" && e !== "Broadcasts") return this._super("getFavoritesByType", e);
                        var n = e;
                        t && (n = e += "Metadata");
                        if (this["favorite" + n + "Dfd"] && this["favorite" + n + "Dfd"].state() !== "rejected") return this["favorite" + n + "Dfd"].promise();
                        var i = $.Deferred(),
                            s = this.get("favorite" + e),
                            o, u;
                        if (s) i.resolve(s);
                        else if (e === "Users" && !this.get("favoriteUsers")) u = function() {
                            if (this.id <= 0) s = new r.Models.Collections[e]([]), this.set("favorite" + e, s), i.resolve(s);
                            else {
                                r.Services.API.userGetFollowersFollowing().done(_.bind(E, this, i, "Following")).fail(_.bind(E, this, i, "Following")), this["favorite" + n + "Dfd"] = i;
                                var t = $.Deferred(),
                                    o = this;
                                this.followersDfd = t, i.done(_.debounce(function() {
                                    t.resolve(o.get("followers"))
                                }, 0)).fail(function(e) {
                                    t.reject(e)
                                });
                                var u = $.Deferred();
                                this.friendsDfd = u, i.done(_.debounce(function() {
                                    u.resolve(o.get("friends"))
                                }, 0)).fail(function(e) {
                                    u.reject(e)
                                })
                            }
                        }, this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(u, this)) : u.call(this);
                        else if (e === "Playlists") o = this.get("favoritePlaylists"), o ? i.resolve(o) : this.getFavoritePlaylistsBroadcasts().always(_.bind(function() {
                            var e = this.get("favoritePlaylists");
                            e ? i.resolve(e) : i.reject()
                        }, this)), this["favorite" + n + "Dfd"] = i;
                        else if (e === "Broadcasts" && !t) o = this.get("favoriteBroadcasts"), o ? i.resolve(o) : this.getFavoritePlaylistsBroadcasts().always(_.bind(function() {
                            var e = this.get("favoriteBroadcasts");
                            e ? i.resolve(e) : i.reject()
                        }, this)), this["favorite" + n + "Dfd"] = i;
                        else {
                            if (e !== "Broadcasts" || !t) return this._super("getFavoritesByType", e);
                            o = this.get("favoriteBroadcasts"), o && o.includedMetadata ? i.resolve(o) : (u = function() {
                                this.id <= 0 ? (s = new r.Models.Collections.Broadcasts([]), this.set("favoriteBroadcasts", s), s.includeMetadata = !0, i.resolve(s)) : r.Services.API.getFavoriteBroadcasts().always(_.bind(function(e) {
                                    if (!e) {
                                        i.reject();
                                        return
                                    }
                                    s = new r.Models.Collections.Broadcasts(e), s.includeMetadata = !0, s.each(function(e) {
                                        e.set("isFavorite", !0)
                                    }), this.set("favoriteBroadcasts", s), i.resolve(s)
                                }, this))
                            }, this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(u, this)) : u.call(this), this["favorite" + n + "Dfd"] = i), this["favorite" + n + "Dfd"] = i
                        }
                        return i.promise()
                    },
                    getFavoritePlaylistsBroadcasts: function() {
                        if (this.getFavoritePlaylistsBroadcastsDfd) return this.getFavoritePlaylistsBroadcastsDfd.promise();
                        var e = $.Deferred(),
                            t = this.get("favoritePlaylists"),
                            n = this.get("favoriteBroadcasts");
                        if (t && n) e.resolve();
                        else {
                            var i = _.bind(function() {
                                this.id <= 0 ? (t = new r.Models.Collections.Playlists([]), n = new r.Models.Collections.Broadcasts([]), n.includeMetadata = !0, this.set({
                                    favoritePlaylists: t,
                                    favoriteBroadcasts: n
                                }), e.resolve()) : (r.Services.API.getSubscribedPlaylistsBroadcasts().always(_.bind(S, this, e)), this.getFavoritePlaylistsBroadcastsDfd = e)
                            }, this);
                            this.get("oldUserClean") ? this.get("oldUserClean").done(i) : i()
                        }
                        return e.promise()
                    },
                    getFriends: function() {
                        if (this.friendsDfd && this.friendsDfd.state() !== "rejected") return this.friendsDfd.promise();
                        var e = $.Deferred(),
                            t = new r.Models.Collections.Users([]);
                        this.get("followers") && this.get("favoriteUsers") && t.reset(_.intersection(this.get("followers").models, this.get("favoriteUsers").models));
                        if (t.length) e.resolve(t);
                        else {
                            var n = function() {
                                    if (this.id <= 0) t = new r.Models.Collections.Users([]), this.set("friends", t), e.resolve(t), this.friendsDfd = e;
                                    else {
                                        r.Services.API.userGetFollowersFollowing().done(_.bind(E, this, e, "Friends")).fail(_.bind(E, this, e, "Friends")), this.friendsDfd = e;
                                        var n = $.Deferred(),
                                            i = this;
                                        this.followersDfd = n, e.done(_.debounce(function() {
                                            n.resolve(i.get("followers"))
                                        }, 0)).fail(function(e) {
                                            n.reject(e)
                                        });
                                        var s = $.Deferred();
                                        this.favoriteUsersDfd = s, e.done(_.debounce(function() {
                                            s.resolve(i.get("favoriteUsers"))
                                        }, 0)).fail(function(e) {
                                            s.reject(e)
                                        })
                                    }
                                };
                            this.get("oldUserClean") ? this.get("oldUserClean").done(_.bind(n, this)) : n.call(this)
                        }
                        return e.promise()
                    },
                    getRecommendedUsers: function() {
                        return this.recommendedUsersDfd && this.recommendedUsersDfd.state() !== "rejected" ? this.recommendedUsersDfd.promise() : (this.recommendedUsersDfd = new $.Deferred, this.get("recommendedUsers") ? this.recommendedUsersDfd.resolve(this.get("recommendedUsers")) : this.get("isLoggedIn") ? r.Services.API.userGetRecommendedUsers().done(_.bind(H, this)) : this.recommendedUsersDfd.reject(), this.recommendedUsersDfd.promise())
                    },
                    getPlaylistsMenu: function(e, t, n, i) {
                        function a(e) {
                            o.id > 0 ? r.trigger("lightbox:open", "createPlaylist", {
                                songs: e
                            }) : r.trigger("lightbox:open", "login", {
                                message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                                onLogin: function(t) {
                                    r.trigger("lightbox:open", "createPlaylist", {
                                        songs: e
                                    })
                                }
                            })
                        }
                        e = _.orEqual(e, !1), t = _.orEqual(t, !0);
                        var s = [],
                            o = this,
                            u = new r.Models.Collections.Playlists(this.get("playlists") ? this.get("playlists").models : []);
                        t && (s.push({
                            title: _.getString("CONTEXT_NEW_PLAYLIST"),
                            customClass: "jj_menu_item_new_playlist",
                            action: {
                                type: "fn",
                                callback: function() {
                                    n.hasOwnProperty("songs") ? a(n.songs) : n.modelObj && _.isFunction(n.modelObj.getSongs) && n.modelObj.getSongs().done(function(e) {
                                        a(e.toArray())
                                    })
                                },
                                log: function() {}
                            }
                        }), u && u.length !== 0 && s.push({
                            customClass: "separator"
                        }));
                        var f = !1;
                        u.comparator = function(e) {
                            return e.get("PlaylistName").toLowerCase()
                        }, u.sort(), u.each(function(e) {
                            s.push({
                                title: e.escape("PlaylistName"),
                                customClass: "jj_menu_item_playlist",
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        return i(e), !0
                                    },
                                    log: function() {}
                                }
                            }), f = !0
                        });
                        var l = this.get("collabPlaylists") ? new r.Models.Collections.Playlists(this.get("collabPlaylists").models) : [];
                        f && l.length && u.push({
                            customClass: "separator"
                        }), l.length && (l.comparator = function(e) {
                            return e.get("PlaylistName").toLowerCase()
                        }, l.sort(), l.each(function(e) {
                            s.push({
                                title: e.escape("PlaylistName"),
                                customClass: "jj_menu_item_playlist",
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        return i(e), !0
                                    },
                                    log: function() {}
                                }
                            })
                        }));
                        if (e) {
                            var c = this.get("favoritePlaylists") ? new r.Models.Collections.Playlists(this.get("favoritePlaylists").models) : [];
                            c.length && (c.comparator = function(e) {
                                return e.get("PlaylistName").toLowerCase()
                            }, c.sort(), c.each(function(e) {
                                s.push({
                                    title: e.escape("PlaylistName"),
                                    customClass: "jj_menu_item_playlist",
                                    action: {
                                        type: "fn",
                                        callback: function() {
                                            return i(e), !0
                                        },
                                        log: function() {}
                                    }
                                })
                            }))
                        }
                        return s
                    },
                    addLocalSongListen: function(e, t, n) {
                        var r = Math.floor(($.now() + i) / 1e3),
                            s = {},
                            o = this.get("settings"),
                            u = -1;
                        if (e && t && o && o.local && _.isArray(o.local.recentListens)) {
                            var a = {
                                s: e.archiveAttr(),
                                t: [t]
                            };
                            s.recentListens = o.local.recentListens, _.each(s.recentListens, function(t, n) {
                                return r - t.t[0] > 86400 ? !1 : t.s.I == e.get("SongID") ? (u = n, !1) : !0
                            }), u !== -1 && (a.t = a.t.concat(s.recentListens[u].t).slice(0, 10), s.recentListens.splice(u, 1)), s.recentListens.unshift(a), s.recentListens.splice(200, 1)
                        }
                        n && this.saveLocalSettings(s)
                    },
                    saveLocalSettings: function(e) {
                        if (!e) return;
                        var t = this.get("UserID");
                        typeof e.restoreQueue != "undefined" && r.Services.Local.set("player.restoreQueue", e.restoreQueue), typeof e.artistsPlayed != "undefined" && r.Services.Local.set("artistsPlayed" + t, e.artistsPlayed), typeof e.recentListens != "undefined" && r.Services.Local.set("recentListens" + t, e.recentListens);
                        var n = ["lowerQuality", "noPrefetch", "playPauseFade", "crossfadeAmount", "crossfadeEnabled", "lastShuffle", "persistShuffle"];
                        for (var i = 0; i < n.length; i++) typeof e[n[i]] != "undefined" && r.Services.Local.set("player." + n[i] + t, e[n[i]]);
                        var s = ["disablePlayerShortcuts", "persistSidebar", "themeFlags", "tooltips"];
                        for (var i = 0; i < s.length; i++) typeof e[s[i]] != "undefined" && r.Services.Local.set("user." + s[i] + t, e[s[i]]);
                        var o = {
                            local: e
                        },
                            u = this.get("settings");
                        u = $.extend(!0, {}, u, o), this.set("settings", u)
                    },
                    savePrivacySettings: function(e, t) {
                        var n = new $.Deferred,
                            i = !1,
                            s = this.get("Privacy"),
                            o = this.get("Privacy");
                        if (_.defined(e)) switch (e) {
                        case 1:
                            this.get("Privacy") & 1 || (s = s & -3 | 1, i = !0);
                            break;
                        case 0:
                            (this.get("Privacy") & 3) > 0 ? (s &= -4, i = !0) : (this.get("sessionPrivacy") & 1) > 0 && (o &= -2);
                            break;
                        case 2:
                            this.get("Privacy") & 2 || (s = s & -2 | 2, i = !0);
                            break;
                        case -1:
                            if (!(this.get("Privacy") & 1) || !(this.get("sessionPrivacy") & 1)) o |= 1
                        }
                        if (_.defined(t)) switch (t) {
                        case 4:
                            this.get("Privacy") & 4 || (s = s & -9 | 4, i = !0);
                            break;
                        case 0:
                            (this.get("Privacy") & 12) > 0 ? (s &= -13, i = !0) : (this.get("sessionPrivacy") & 4) > 0 && (o &= -5);
                            break;
                        case 8:
                            this.get("Privacy") & 8 || (s = s & -5 | 8, i = !0);
                            break;
                        case -4:
                            if (!(this.get("Privacy") & 4) || !(this.get("sessionPrivacy") & 4)) o |= 4
                        }
                        return i ? r.Services.API.changePrivacySettings(s).done(_.bind(function(e) {
                            if (!e || e.statusCode !== 1) {
                                n.reject();
                                return
                            }
                            this.set({
                                sessionPrivacy: s,
                                Privacy: s
                            }), n.resolve(s)
                        }, this)).fail(_.bind(n.reject, n)) : o !== this.get("sessionPrivacy") ? (this.set("sessionPrivacy", o), n.resolve(o)) : n.resolve(s), n.promise()
                    },
                    saveLocalChatSettings: function(e) {
                        var t = this.get("UserID");
                        e.hasOwnProperty("joinLeftDisabled") && r.Services.Local.set("broadcast.chat.joinLeftDisabled" + t, !! e.joinLeftDisabled), e.hasOwnProperty("nowPlayingDisabled") && r.Services.Local.set("broadcast.chat.nowPlayingDisabled" + t, !! e.nowPlayingDisabled), e.hasOwnProperty("suggestionsDisabled") && r.Services.Local.set("broadcast.chat.suggestionsDisabled" + t, !! e.suggestionsDisabled), this.set("settings", j(t))
                    },
                    deletePlaylist: function(e, t) {
                        t = _.orEqual(t, !0);
                        var n = $.Deferred(),
                            i = r.Models.Playlist.getCached(e);
                        return i && i.get("UserID") === this.get("UserID") ? r.Services.API.deletePlaylist(i.get("PlaylistID"), i.get("PlaylistName")).done(_.bind(N, this, i, n, t)).fail(_.bind(C, this, i, n, t)) : n.reject(), n.promise()
                    },
                    restorePlaylist: function(e, t) {
                        t = _.orEqual(t, !0);
                        var n = $.Deferred(),
                            i = r.Models.Playlist.getCached(e);
                        return r.Services.API.playlistUndelete(i.get("PlaylistID")).done(_.bind(k, this, i, n, t)).fail(_.bind(L, this, i, n, t)), n.promise()
                    },
                    deleteBroadcast: function(e, t) {
                        t = _.orEqual(t, !0);
                        var n = $.Deferred(),
                            i = r.Models.Broadcast.getCached(e);
                        if (i) {
                            var s = this.get("artistsOwned"),
                                o = i.get("ArtistID"),
                                u = i.get("UserID");
                            !o && u !== this.get("UserID") || o && (!s || !s.get(o)) ? n.reject() : r.Services.API.deleteBroadcast(i.get("BroadcastID"), o).done(_.bind(A, this, i, n, t)).fail(_.bind(O, this, i, n, t))
                        } else n.reject();
                        return n.promise()
                    },
                    restoreBroadcast: function(e, t) {
                        t = _.orEqual(t, !0);
                        var n = $.Deferred(),
                            i = r.Models.Broadcast.getCached(e);
                        if (i) {
                            var s = this.get("artistsOwned"),
                                o = i.get("ArtistID"),
                                u = i.get("UserID");
                            !o && u !== this.get("UserID") || o && (!s || !s.get(o)) ? n.reject() : r.Services.API.undeleteBroadcast(i.get("BroadcastID"), o).done(_.bind(M, this, i, n, t)).fail(_.bind(D, this, i, n, t))
                        } else n.reject();
                        return n.promise()
                    },
                    loadCommunityFeed: function(e) {
                        if (this.communityFeedDfd && this.communityFeedDfd.state() !== "rejected" && !e) return this.communityFeedDfd.promise();
                        this.communityFeedDfd = new $.Deferred;
                        if (!e && this.get("communityFeed")) this.communityFeedDfd.resolve(this.get("communityFeed"));
                        else if (this.get("isLoggedIn")) {
                            var t = null;
                            if (e) {
                                var n = this.get("communityFeed");
                                n && n.length && (t = this.get("communityFeed").last().get("timestamp"))
                            }
                            r.Services.API.getUserCombinedFeedEx(this.id, [], t).done(_.bind(P, this, e)).fail(_.bind(this.communityFeedDfd.reject, this.communityFeedDfd))
                        } else this.communityFeedDfd.reject();
                        return this.communityFeedDfd.promise()
                    },
                    getNotifications: function() {
                        if (this.userNotificationsDfd && this.userNotificationsDfd.state() !== "rejected") return this.userNotificationsDfd.promise();
                        this.userNotificationsDfd = new $.Deferred;
                        if (this.get("notifications")) this.userNotificationsDfd.resolve(this.get("notifications"));
                        else if (this.get("isLoggedIn")) {
                            var e = t;
                            if ((this.get("Flags") & r.Models.User.FLAG_OWNS_ARTIST) > 0) {
                                var n = this.get("artistsOwned");
                                n && n.length > 2 ? e = 200 : e = 100
                            }
                            r.Services.API.getUserNotifications(e).done(_.bind(F, this, this.userNotificationsDfd)).fail(_.bind(this.userNotificationsDfd.reject, this.userNotificationsDfd))
                        } else this.userNotificationsDfd.reject();
                        return this.userNotificationsDfd.promise()
                    },
                    onNewNotification: function(e) {
                        if (!e) return;
                        if (this.get("notifications")) {
                            e.timestamp || (e.timestamp = (new Date).getTime()), e.isNew = !0, e = new r.Models.Taco(e), this.get("notifications").unshift(e);
                            var n = e.get("data");
                            if (e.get("genericType") === 5 && n && n.claimStatus === 9) {
                                (this.get("Flags") & r.Models.User.FLAG_OWNS_ARTIST) === 0 && this.set("Flags", this.get("Flags") | r.Models.User.FLAG_OWNS_ARTIST);
                                var i = n.artistName,
                                    s = n.artistID;
                                this.getOwnedArtists(!0).done(function() {
                                    r.trigger("notification:add", {
                                        title: _.getString("NOTIF_EVENT_ARTIST_APPROVED", {
                                            name: _.escape(i)
                                        }),
                                        url: _.cleanUrl(i, s, "artist"),
                                        type: "success"
                                    })
                                })
                            } else {
                                var o = e.getNormalizedObject(this);
                                if (!o) return;
                                var u = this.get("Context"),
                                    a = e.get("forArtistID");
                                if (!a && u.type != "artist" || u.type == "artist" && a == u.artist.get("ArtistID")) r.trigger("notification:add", {
                                    title: o.text,
                                    url: o.link ? o.link : t,
                                    type: o.icon ? o.icon : t,
                                    duration: 1e4
                                });
                                else {
                                    var f, l, c;
                                    a ? (c = r.Models.Artist.getCached(a), c && (f = c.escape("ArtistName"), l = "artist")) : (f = this.escape("Name"), l = "user");
                                    if (f && l) {
                                        var h = this;
                                        r.trigger("notification:add", {
                                            title: _.getString("NOTIF_NEW_TACO", {
                                                name: f
                                            }),
                                            description: _.getString("NOTIF_NEW_TACO_DESC"),
                                            click: function() {
                                                h.setContext({
                                                    type: l,
                                                    artist: c
                                                })
                                            },
                                            duration: 1e4
                                        })
                                    }
                                }
                            }
                        }
                    },
                    onNewFeedEvent: function(e) {
                        if (!e) return;
                        var t = this.get("communityFeed");
                        e.timestamp || (e.timestamp = Math.floor((new Date).getTime() / 1e3)), e.activityName === "artistBroadcastFeed" ? e.type = "artist" : e.type = "user";
                        if (r.Models.FeedEvent.getCached(e.eventID)) {
                            var n = r.Models.FeedEvent.getCached(e.eventID);
                            t && t.remove(n), n.updateSelf(e), e = n
                        } else e = new r.Models.FeedEvent(e), (e.get("activityName") === "broadcast" || e.get("activityName") === "artistBroadcastFeed") && e.get("UserID") == this.id && e.set("forceDisplay", !0);
                        t && t.unshift(e);
                        if (e.get("feedType") === "artist" && e.get("ArtistID")) {
                            var i = r.Models.Artist.getCached(e.get("ArtistID"));
                            i && i.get("feed") && i.get("feed").unshift(e)
                        }
                        r.trigger("authUser:newFeedEvent", e)
                    },
                    claimArtist: function(e) {
                        this.id > 0 ? this.getClaimHistory().done(function(t) {
                            r.trigger("lightbox:open", "claimArtist", {
                                artist: e
                            })
                        }) : r.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CLAIM_ARTIST"),
                            onLogin: function(t) {
                                t.claimArtist(e)
                            }
                        })
                    },
                    getUserAge: function() {
                        var e = this.get("TSDOB"),
                            t = "";
                        return e ? (t = e.match(/(\d+)/g), _.dobToAge(Number(t[0]), Number(t[1]) - 1, Number(t[2]))) : !1
                    },
                    getUserStringForAnalytics: function() {
                        var e, t, n, i, s, o = "";
                        e = this.get("isLoggedIn") ? "Y" : "N", t = _.orEqual(this.get("Sex"), "U"), n = this.getUserAge();
                        switch (!0) {
                        case n >= 13 && n <= 17:
                            i = "A";
                            break;
                        case n >= 18 && n <= 23:
                            i = "B";
                            break;
                        case n >= 24 && n <= 29:
                            i = "C";
                            break;
                        case n >= 30 && n < 40:
                            i = "D";
                            break;
                        case n >= 40 && n < 50:
                            i = "E";
                            break;
                        case n >= 50 && n < 60:
                            i = "F";
                            break;
                        case n >= 60 && n < 70:
                            i = "G";
                            break;
                        case n >= 70 && n < 80:
                            i = "H";
                            break;
                        case n >= 80 && n < 90:
                            i = "I";
                            break;
                        case n >= 90:
                            i = "J";
                            break;
                        default:
                            i = "U"
                        }
                        return s = (this.get("Flags") & r.Models.User.FLAG_OWNS_ARTIST) > 0 ? "Y" : "N", o += "L:" + e, o += ",S:" + t, o += ",A:" + i, o += ",C:" + s, o
                    },
                    getImageURL: function(e) {
                        var t = this.get("Context"),
                            n = t.artist;
                        if (t.type === "artist" && n.getImageURL) return n.getImageURL(e);
                        var r = _.toArray(arguments);
                        return this._super.apply(this, ["getImageURL"].concat(r))
                    },
                    saveNotificationSettings: function(e) {
                        e = _.toInt(e);
                        var t = $.Deferred();
                        return e !== this.get("NotificationEmailPrefs") ? r.Services.API.changeNotificationSettings(e).done(_.bind(function(n) {
                            n && n.statusCode ? (this.set("NotificationEmailPrefs", e), t.resolve(e)) : t.reject()
                        }, this)).fail(_.bind(t.reject, t)) : t.resolve(e), t.promise()
                    },
                    setContext: function(t, i) {
                        if (r.isBroadcaster()) {
                            var s = n.model.get("player"),
                                o = s.get("currentQueue"),
                                u = o && o.get("currentBroadcast");
                            if (u) {
                                var a = _.toArray(arguments);
                                r.trigger("lightbox:open", "broadcastListeners", {
                                    broadcast: u,
                                    endBroadcast: !0,
                                    onBroadcastEnded: _.bind(function() {
                                        var e = _.bind(function() {
                                            r.off("manatee:broadcastEnded", e), this.setContext.apply(this, a)
                                        }, this);
                                        r.isBroadcaster() ? r.on("manatee:broadcastEnded", e) : e()
                                    }, this)
                                });
                                return
                            }
                        }
                        t.type === "artist" ? (r.trigger("guts:log", "userChangedContext", {
                            toContextType: t.type,
                            toContextID: t.artist.get("ArtistID")
                        }), r.trigger("guts:gatrack", "user", "changedContext", t.type + "_" + t.artist.get("ArtistID"))) : (r.trigger("guts:log", "userChangedContext", {
                            toContextType: t.type
                        }), r.trigger("guts:gatrack", "user", "changedContext", t.type)), r.trigger("guts:endcontext", "userContext"), r.trigger("guts:endcontext", "userContextID"), t.type === "artist" && (r.trigger("guts:begincontext", {
                            userContext: t.type
                        }), r.trigger("guts:begincontext", {
                            userContextID: t.artist.get("ArtistID")
                        })), this.set("Context", t), this.clearLastBroadcast(), r.Services.API.reportUserChange(this), i || (r.router.setHash("/#!/"), $(e).trigger("hashchange"))
                    },
                    updateBroadcastInviteableUsers: function(t) {
                        t && (this.broadcastInviteData = t);
                        var n = (Date.now() + e.clientTimeDivergence) / 1e3 >> 0,
                            i = Infinity,
                            s;
                        this.broadcastInviteData.InvitedUsers && _.forEach(this.broadcastInviteData.InvitedUsers, function(e, t) {
                            var s = r.Models.User.getCached(t);
                            n - e[1] < 14400 ? s && (s.set("canBroadcastInvite", {
                                val: !1,
                                timeInvited: e[1]
                            }), i = Math.min(e[1], i)) : s && s.set("canBroadcastInvite", {
                                val: !0,
                                timeInvited: e[1]
                            })
                        }), s = i === Infinity ? 0 : i + 14400, this.set("checkBroadcastInvitesTime", s)
                    }
                }, {
                    checkEmailUsername: function(e, t, n) {
                        var i = $.Deferred(),
                            s = {
                                username: -1,
                                email: -1
                            };
                        if (!t || t.length >= 5 && t.length <= 32 && t.match(V)) s.username = t;
                        if (!e || e.match(X)) s.email = e;
                        return n || (!s.email || s.email === -1) && (!s.username || s.username === -1) ? i.resolve(s) : (typeof t == "undefined" && (t = ""), r.Services.API.getIsUsernameEmailAvailable(t, e, function(n) {
                            n.email && (n.email = e), n.username && (n.username = t), i.resolve(n)
                        }, function() {
                            i.reject()
                        })), i.promise()
                    }
                })
            }(), function() {
                function n(e) {
                    var n = [],
                        r = {};
                    _.each(e, _.bind(function(e) {
                        e.playlistSongID = [this.id, ":", this.lastPlaylistSongID++].join(""), n.push(e);
                        var t = e.AlbumID;
                        t && (r[t] ? r[t].IsVerified != 1 && (r[t].IsVerified = e.IsVerified) : r[t] = {
                            AlbumID: t,
                            AlbumName: e.AlbumName,
                            ArtistID: e.ArtistID,
                            ArtistName: e.ArtistName,
                            CoverArtFilename: e.CoverArtFilename,
                            IsVerified: e.IsVerified
                        })
                    }, this));
                    var i = new t.Models.Collections.PlaylistSongs(n);
                    this.set({
                        songs: i,
                        albums: new t.Models.Collections.Albums(_.toArray(r))
                    })
                }
                function r(e) {
                    if (e.get("SongID") <= 0) return;
                    var n = t.getLoggedInUserID(),
                        r = $.Deferred();
                    t.Services.API.playlistAddSongToExisting(this.get("PlaylistID"), e.get("SongID"), e.getDetailsForFeeds()).done(_.bind(a, this, r, e, !0)).fail(_.bind(l, this, r))
                }
                function i(e, n, r) {
                    var i = $.Deferred(),
                        s = [],
                        o = [];
                    for (var a = 0; a < e.length; a++) s.push(e[a].get("SongID")), o.push(e[a].getDetailsForFeeds());
                    return n = _.orEqual(n, !0), r ? saveSuccess = _.bind(f, this, i, e, n, !0) : saveSuccess = _.bind(u, this, i, e, n, !0), t.Services.API.overwritePlaylist(this.get("PlaylistID"), this.get("PlaylistName"), s, o).done(saveSuccess).fail(_.bind(l, this, i)), t.trigger("guts:log", "savePlaylist", {
                        playlistID: this.get("PlaylistID")
                    }), i.promise()
                }
                function s(e) {
                    var t = this.get("changeLog");
                    t.push(e), t.length > 10 && t.shift()
                }
                function o(e) {
                    var n = e.get("PlaylistName");
                    n && n.length > 18 && (n = n.substr(0, 15) + "..."), t.trigger("notification:add", {
                        title: _.getString("POPUP_PLAYLIST_SAVE_TITLE", {
                            playlist: "<i>" + _.escape(n) + "</i>"
                        }),
                        description: _.getString("POPUP_PLAYLIST_SAVE_DESCRIPTION"),
                        url: e.toUrl(),
                        type: "success"
                    })
                }
                function u(e, n, r, i, u) {
                    if (!u) return !1;
                    if (this.get("songs")) {
                        r = _.orEqual(r, !0);
                        if (r) {
                            var a = this.get("songs").toArray();
                            s.call(this, a)
                        }
                        this.get("songs").reset(n), this.set("TSModified", (new Date).getTime()), o(this)
                    }
                    t.trigger("guts:gatrack", "playlist", "savePlaylist"), i, e.resolve()
                }
                function a(e, t, n) {
                    this.get("songs") && this.get("songs").add(t), o(this), n, e.resolve()
                }
                function f() {
                    var e = this.get("changeLog");
                    e.pop()
                }
                function l(e) {
                    e.reject()
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Playlist = Backbone.CachedModel.extend({
                    idAttribute: "PlaylistID",
                    constructor: function(e) {
                        var t = _.toArray(arguments).splice(1);
                        e.PlaylistName = _.orEqualEx(e.PlaylistName, e.Name, "") + "", e.Description = _.orEqualEx(e.Description, e.About, ""), e.Username = _.orEqual(e.Username, "Unknown User"), e.UserName = $.trim($.trim(e.FName) + " " + $.trim(e.LName)) || e.Username, e.Collaborative = _.orEqual(e.Collaborative, !1), e.TSAdded = _.orEqual(e.TSAdded, 0), e.TSModified = _.orEqual(e.TSModified, 0), e.attributor && (e.UserName = e.attributor);
                        try {
                            delete e.Name, delete e.About, delete e.FName, delete e.LName
                        } catch (n) {}
                        return e.PlaylistID = _.toInt(e.PlaylistID), e.UserID = _.toInt(e.UserID), e.TSAdded = (new Date(e.TSAdded)).getTime(), e.TSModified = _.toInt(e.TSModified), e.searchText = e.PlaylistName.toLowerCase(), t.unshift(e), this._super.apply(this, ["constructor"].concat(t))
                    },
                    initialize: function() {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments)));
                        var e = this.get("Collaborators");
                        e || (e = []), e instanceof t.Models.Collections.Users || this.set("Collaborators", new t.Models.Collections.Users(e)), this.lastPlaylistSongID = 0, this.get("initialSongs") && (n.call(this, this.get("initialSongs")), this.unset("initialSongs", {
                            silent: !0
                        })), this.set("changeLog", [])
                    },
                    getSongs: function() {
                        if (this.loadSongsDfd) return this.loadSongsDfd.promise();
                        var e = $.Deferred();
                        return this.get("songs") ? e.resolve(this.get("songs")) : (t.Services.API.playlistGetSongs(this.id).done(_.bind(function(t) {
                            n.call(this, t.Songs), e.resolve(this.get("songs"))
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadSongsDfd = e), e.promise()
                    },
                    getUnwrappedSongs: function() {
                        var e = this.getSongs(),
                            n = $.Deferred();
                        return e.done(function(e) {
                            e = e.models;
                            var r = [];
                            for (var i = 0, s = e.length; i < s; i++) r.push(e[i]._wrapped);
                            n.resolve(new t.Models.Collections.Songs(r))
                        }).fail(function() {
                            n.reject.apply(n, arguments)
                        }), n
                    },
                    getAlbums: function() {
                        if (this.loadAlbumsDdf) return this.loadAlbumsDdf.promise();
                        var e = new $.Deferred;
                        return this.get("albums") ? e.resolve(this.get("albums")) : (this.getSongs().done(_.bind(function() {
                            e.resolve(this.get("albums"))
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadAlbumsDdf = e), e.promise()
                    },
                    getFans: function() {
                        if (this.loadFansDfd) return this.loadFansDfd.promise();
                        var e = $.Deferred();
                        return this.get("fans") ? e.resolve(this.get("fans")) : (t.Services.API.playlistGetFans(this.id).done(_.bind(function(n) {
                            if (n.Users) {
                                var r = new t.Models.Collections.Users(n.Users);
                                this.set({
                                    fans: r
                                }), e.resolve(r)
                            } else e.reject(n)
                        }, this)).fail(function(t) {
                            e.reject(t)
                        }), this.loadFansDfd = e), e.promise()
                    },
                    getImageURL: function(e) {
                        e = _.orEqual(e, 200);
                        var n = this.get("Picture");
                        return this.attributes.hasCustomImage ? (e == 200 && (e = 120), t.Models.Playlist.featuredArtPath + e + "_" + this.get("Picture")) : n ? t.Models.Playlist.artPath + e + "_" + this.get("Picture") : t.Models.Playlist.artPath + e + "_playlist.png"
                    },
                    getPlaylistArt: function(e) {
                        e = _.orEqual(e, 200);
                        var n = this.get("Picture");
                        if (n) return [t.Models.Playlist.artPath + e + "_" + n];
                        var r = [],
                            i = {},
                            s = [];
                        this.get("songs") && (this.get("songs").each(function(e) {
                            e.get("CoverArtFilename") && (i.hasOwnProperty(e.get("AlbumID")) ? i[e.AlbumID].weight++ : i[e.AlbumID] = {
                                CoverArtFilename: e.get("CoverArtFilename"),
                                weight: 1
                            })
                        }), s = _.toArray(i), s = s.sort(function(e, t) {
                            return t.weight - e.weight
                        }).slice(0, 4)), s.length == 4 && (e = 70);
                        for (var o = 0; o < s.length; o++) r.push(t.Models.Album.artPath + e + "_" + s[o].CoverArtFilename);
                        return r.length ? r : [t.Models.Playlist.artPath + e + "_playlist.png"]
                    },
                    addSongs: function(e, n) {
                        if (!this.isEditable()) return;
                        var s = !1;
                        if (e[0] instanceof t.Models.PlaylistSong || e[0] instanceof t.Models.Song || e[0] instanceof t.Models.QueueSong || e[0] instanceof t.Models.BroadcastSuggestion) s = !0;
                        var o = [];
                        for (var u = 0; u < e.length; u++) {
                            var a = [this.id, ":", this.lastPlaylistSongID++].join(""),
                                f = s ? e[u].get("SongID") : e[u],
                                l = t.Models.Song.getCached(f);
                            l && f !== 0 && o.push(new t.Models.PlaylistSong($.extend(l.toJSON(), {
                                playlistSongID: a
                            })))
                        }
                        if (o.length === 0) return;
                        e = o;
                        var c = this.get("songs");
                        if (e.length == 1 && (c && n == c.length || n === -1)) {
                            r.call(this, e[0]);
                            return
                        }
                        this.getSongs().done(_.bind(function(r) {
                            n = _.orEqual(n, -1);
                            if (e.length + r.length > 2500) {
                                t.trigger("notification:add", {
                                    description: _.getString("POPUP_FAIL_ADD_PLAYLIST_TOO_MANY_MSG", {
                                        playlist: this.escape("PlaylistName"),
                                        numSongs: r.length
                                    }),
                                    type: "error"
                                });
                                return
                            }
                            var s = r.toArray();
                            n == -1 || n >= r.length ? s.push.apply(s, e) : s.splice.apply(s, [n, 0].concat(e)), i.call(this, s, !0, !1).done(_.bind(function() {
                                var n = [];
                                for (var r = 0; r < e.length; r++) n.push(e[r].get("SongID"));
                                t.trigger("guts:gatrack", "playlist", "songsAddedToPlaylist", "count", n.length), t.trigger("guts:forcelog", "songsAddedToPlaylist", {
                                    playlistID: this.get("PlaylistID"),
                                    ids: n
                                })
                            }, this))
                        }, this)).fail(function() {})
                    },
                    moveSongsTo: function(e, t) {
                        if (!this.isEditable()) return !1;
                        var n, r, s = [],
                            o = this.get("songs").toArray();
                        for (n = 0; n < e.length; n++) s.push(o[e[n]]);
                        for (n = 0; n < s.length; n++) r = _.indexOf(o, s[n]), o.splice(r, 1), r < t && t--;
                        o.splice.apply(o, [t, 0].concat(s)), i.call(this, o, !0, !1)
                    },
                    undo: function() {
                        var e = this.get("changeLog");
                        i.call(this, e[e.length - 1], !1, !0)
                    },
                    removeSongs: function(e) {
                        if (!this.isEditable()) return !1;
                        e.sort(function(e, t) {
                            return t - e
                        });
                        var n = this.get("songs").toArray(),
                            r = [];
                        for (var s = 0; s < e.length; s++) r.push(n.splice(e[s], 1)[0].get("SongID"));
                        i.call(this, n, !0, !1).done(_.bind(function() {
                            t.trigger("guts:gatrack", "playlist", "songsRemovedFromPlaylist", "count", r.length), t.trigger("guts:forcelog", "songsRemovedFromPlaylist", {
                                playlistID: this.get("PlaylistID"),
                                ids: r
                            })
                        }, this))
                    },
                    overwriteWithSongs: function(e) {
                        var n = $.Deferred();
                        if (!this.isEditable()) return !1;
                        var r = !1;
                        if (e[0] instanceof t.Models.PlaylistSong || e[0] instanceof t.Models.Song || e[0] instanceof t.Models.QueueSong) r = !0;
                        var s = [],
                            o = [];
                        for (var u = 0; u < e.length; u++) {
                            var a = [this.id, ":", this.lastPlaylistSongID++].join(""),
                                f = r ? t.Models.Song.getCached(e[u].get("SongID")) : t.Models.Song.getCached(e[u]);
                            s.push(new t.Models.PlaylistSong($.extend(f.toJSON(), {
                                playlistSongID: a
                            }))), o.push(f.get("SongID"))
                        }
                        return e = s, i.call(this, e, !0, !1).done(_.bind(function() {
                            t.trigger("guts:gatrack", "playlist", "overwritePlaylist", "count", o), t.trigger("guts:forcelog", "overwritePlaylist", {
                                playlistID: this.get("PlaylistID"),
                                replacementSongIDs: o
                            }), n.resolve()
                        }, this)).fail(function() {
                            n.reject()
                        }), n.promise()
                    },
                    toProxyLabel: function() {
                        return _.getString("SELECTION_PLAYLIST_SINGLE", {
                            PlaylistName: this.escape("PlaylistName"),
                            Username: this.escape("UserName")
                        })
                    },
                    getTitle: function(e) {
                        return e ? ['"', this.get("PlaylistName"), '" by ', this.get("UserName")].join("") : ['"', this.escape("PlaylistName"), '" by ', this.escape("UserName")].join("")
                    },
                    isEditable: function() {
                        return this.get("UserID") === t.getLoggedInUserID()
                    },
                    toUrl: function(e) {
                        return _.cleanUrl(this.get("PlaylistName"), this.get("PlaylistID"), "playlist", null, e)
                    },
                    toUserUrl: function(e) {
                        return _.cleanUrl(this.get("UserName"), this.get("UserID"), "user", null, e)
                    },
                    rename: function(e) {
                        var n = {
                            messageType: "playlist",
                            action: "rename",
                            time: Math.floor(+(new Date) / 1024),
                            data: {
                                userID: this.get("UserID"),
                                name: e,
                                playlistID: this.get("PlaylistID"),
                                uuid: gsConfig.uuid
                            }
                        },
                            r = {
                                publishers: [this.get("UserID") + ""]
                            },
                            i = $.Deferred();
                        return t.Services.API.renamePlaylist(this.get("PlaylistID"), e, !1).done(_.bind(function(t) {
                            this.set("PlaylistName", e), i.resolve()
                        }, this)).fail(function(e) {
                            i.reject()
                        }), i.promise()
                    },
                    changeDescription: function(e) {
                        var n = {
                            messageType: "playlist",
                            action: "description",
                            time: Math.floor(+(new Date) / 1024),
                            data: {
                                userID: this.get("UserID"),
                                name: e,
                                playlistID: this.get("PlaylistID"),
                                uuid: gsConfig.uuid
                            }
                        },
                            r = $.Deferred();
                        return t.Services.API.setPlaylistAbout(this.get("PlaylistID"), e, !1).done(_.bind(function(t) {
                            this.set("Description", e), r.resolve()
                        }, this)).fail(function(e) {
                            r.reject()
                        }), r.promise()
                    },
                    getDetailsForFeeds: function() {
                        var e = {
                            playlistID: this.get("PlaylistID"),
                            playlistName: this.get("PlaylistName"),
                            artFilename: this.get("Picture"),
                            userID: this.get("UserID"),
                            userName: this.get("UserName")
                        };
                        if (!this.get("UserName")) {
                            var n = t.Models.User.getCached(this.get("UserID"));
                            n && (e.userName = n.get("FName"))
                        }
                        return this.get("songs") && (e.songs = [], e.numSongs = this.get("songs").length), e
                    },
                    getAnchorTag: function(e, t) {
                        return '<a href="' + this.toUrl(t) + '" class="playlist-link">' + (e ? _.getString(e).toLocaleLowerCase() : _.escape(this.get("PlaylistName"))) + "</a>"
                    },
                    getAuthorAnchorTag: function(e, t) {
                        return '<a href="' + this.toUserUrl(t) + '" class="user-link">' + (e ? _.getString(e).toLocaleLowerCase() : _.escape(this.get("UserName"))) + "</a>"
                    },
                    getWidgetCode: function(e, t, n) {
                        var r = ["bbg", "bth", "pfg", "lfg"],
                            i = ["bt", "pbg", "pfgh", "si", "lbg", "lfgh", "sb"],
                            s = ["bfg", "pbgh", "lbgh", "sbh"],
                            o = "gsPlaylist" + this.get("PlaylistID") + Math.floor(Math.random() * 101),
                            u = _.orEqual(e, 250),
                            a = _.orEqual(t, 40),
                            f = _.escape(this.get("PlaylistName") + " by " + this.get("UserName") + " on Grooveshark"),
                            l = '<a href="http://grooveshark.com/search/playlist?q=' + encodeURIComponent(this.get("PlaylistName") + " " + this.get("UserName")) + '" title="' + f + '">' + f + "</a>",
                            c = [],
                            h, p;
                        for (h = 0, p = r.length; h < p; h++) c.push(r[h] + "=" + n.base);
                        for (h = 0, p = i.length; h < p; h++) c.push(i[h] + "=" + n.primary);
                        for (h = 0, p = s.length; h < p; h++) c.push(s[h] + "=" + n.secondary);
                        return '<object width="' + u + '" height="' + a + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="' + o + '" name="' + o + '">' + '<param name="movie" value="http://grooveshark.com/widget.swf" /><param name="wmode" value="window" /><param name="allowScriptAccess" value="always" />' + '<param name="flashvars" value="hostname=grooveshark.com&playlistID=' + this.get("PlaylistID") + "&p=0&" + c.join("&") + '" />' + '<object type="application/x-shockwave-flash" data="http://grooveshark.com/widget.swf" width="' + u + '" height="' + a + '"><param name="wmode" value="window" />' + '<param name="allowScriptAccess" value="always" /><param name="flashvars" value="hostname=grooveshark.com&playlistID=' + this.get("PlaylistID") + "&p=0&" + c.join("&") + '" />' + "<span>" + l + "</span></object></object>"
                    },
                    getWidgetType: function() {
                        return "multi"
                    },
                    getSingleItemContextMenu: function(e) {
                        e = _.orEqual(e, {});
                        var n = [],
                            r = new t.Models.PlayContext(this);
                        return r.addStreamType(t.Models.PlayContext.TYPE_PLAYLIST), n.push({
                            title: _.getString("PLAY_NOW"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.getSongs().done(function(e) {
                                        t.trigger("player:addSongs", e.models, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, r)
                                    })
                                }, this)
                            }
                        }, {
                            title: _.getString("PLAY_NEXT"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.getSongs().done(function(e) {
                                        t.trigger("player:addSongs", e.models, t.Services.SWF.playSpecialIndexes.NEXT, !1, r)
                                    })
                                }, this)
                            }
                        }, {
                            title: _.getString("PLAY_LAST"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.getSongs().done(function(e) {
                                        t.trigger("player:addSongs", e.models, t.Services.SWF.playSpecialIndexes.LAST, !1, r)
                                    })
                                }, this)
                            }
                        }, {
                            customClass: "separator"
                        }, {
                            title: _.getString("CONTEXT_GO_TO_PLAYLIST"),
                            action: {
                                type: "gourl",
                                url: this.toUrl()
                            }
                        }, {
                            customClass: "separator"
                        }), this.isEditable() && n.push({
                            title: _.getString("RENAME"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.isEditable() && t.trigger("lightbox:open", "rename", {
                                        playlist: this
                                    })
                                }, this)
                            }
                        }), n.push({
                            title: _.getString("SHARE"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    t.trigger("lightbox:open", "share", {
                                        type: "playlist",
                                        id: this.id
                                    })
                                }, this)
                            }
                        }), n
                    }
                }, {
                    featuredArtPath: "http://images.gs-cdn.net/static/featured/",
                    artPath: "http://images.gs-cdn.net/static/playlists/",
                    get: function(e) {
                        var n = Backbone.CachedModel.genericGet.call(this, t.Services.API.getPlaylistByID, "PlaylistID", e);
                        return n.promise()
                    },
                    wrapFeedData: function(e) {
                        var n = {
                            PlaylistID: _.orEqual(e.playlistID, e.PlaylistID),
                            PlaylistName: $.trim(_.orEqualEx(e.playlistName, e.PlaylistName, e.Name)),
                            Username: $.trim(_.orEqualEx(e.owningName, e.userName, e.UserName)),
                            UserID: _.orEqualEx(e.owningUserID, e.userID, e.UserID),
                            Picture: e.artFilename,
                            _noCache: !0
                        };
                        return !n.Username && e.subscribingName && (n.Username = e.subscribingName), new t.Models.Playlist(n)
                    },
                    createdSort: function(e, t) {
                        return _.orEqual(t.get("TSAdded"), 0) - _.orEqual(e.get("TSAdded"), 0)
                    },
                    modifiedSort: function(e, t) {
                        return _.orEqual(t.get("TSModified"), 0) - _.orEqual(e.get("TSModified"), 0)
                    },
                    acceptDrop: function(e, t, n, r) {
                        function l(e) {
                            a = a.concat(e.toArray())
                        }
                        n = _.orEqual(n, -1), r = _.orEqual(r, !1);
                        if (r) {
                            var i = [];
                            return _.forEach(t.draggedItems, function(t) {
                                var n = e.get("songs").indexOf(t);
                                n != -1 && i.push(n)
                            }), i.length ? (e.moveSongsTo(i, n), !0) : !1
                        }
                        var s, o, u, a = [],
                            f = [];
                        switch (t.draggedItemsType) {
                        case "song":
                            return e.addSongs(t.draggedItems, n), !0;
                        case "album":
                        case "artist":
                        case "playlist":
                            for (s = 0; s < t.draggedItems.length; s++) o = t.draggedItems[s], _.isFunction(o.getSongs) && (u = o.getSongs().done(l), f.push(u));
                            break;
                        case "user":
                            for (s = 0; s < t.draggedItems.length; s++) o = t.draggedItems[s], _.isFunction(o.getFavorites) && (u = o.getFavorites("Songs").done(l), f.push(u))
                        }
                        return f.length && $.when.apply($, f).always(function() {
                            a.length && e.addSongs(a, n)
                        }), !0
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Video = Backbone.Model.extend({
                    idAttribute: "UniqueVideoID",
                    defaults: {
                        title: "",
                        author: "",
                        type: "iframe",
                        swf: "/webincludes/flash/videoplayer.swf",
                        src: "",
                        VideoID: "",
                        VimeoID: ""
                    },
                    flashvars: {
                        version: gsConfig.snapVersion
                    },
                    params: {
                        allowscriptaccess: "always",
                        allowfullscreen: !0
                    },
                    attributes: {
                        name: "videoPlayer"
                    },
                    constructor: function(e) {
                        e.type = _.orEqual(e.embedType, e.type), e.VideoID = _.orEqualEx(e.vimeoID, e.VimeoID, e.videoID, e.VideoID), e.title = _.orEqualEx(e.Title, e.title, e.Video), e.ArtistID = e.ArtistID || e.artistID, e.ArtistName = e.ArtistName || e.artistName;
                        if (!e.type || e.type == "iframe" && (e.vimeoID || e.VimeoID)) e.type = "vimeo";
                        e.thumbnail || (e.thumbnail = e.Thumbnails && e.Thumbnails.length && e.Thumbnails[0] ? e.Thumbnails[0].url : ""), e.duration = _.millisToMinutesSeconds(_.orEqual(e.duration, e.Duration) * 1e3), e.durationSecs = _.orEqual(e.duration, e.Duration), e.width = _.orEqualEx(e.Width, e.width, 640), e.height = _.orEqualEx(e.Height, e.height, 360), e.author = _.orEqualEx(e.Author, e.author, ""), e.UniqueVideoID = e.type + e.VideoID.toString(), Backbone.Model.prototype.constructor.apply(this, _.toArray(arguments))
                    },
                    getImageURL: function(e) {
                        return e = _.orEqual(e, 120), this.get("Picture") ? t.Models.Video.artPath + e + "_" + this.get("Picture") : ""
                    },
                    toArtistUrl: function(e) {
                        return _.cleanUrl(this.get("ArtistName"), this.get("ArtistID"), "artist", null, e)
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/featured/"
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Event = Backbone.Model.extend({
                    idAttribute: "EventID",
                    constructor: function(e) {
                        var t = _.toArray(arguments);
                        e.EventName = e.EventName.replace(/\s\((.*?)\)$/, "");
                        if (!(e.StartTime instanceof Date)) {
                            var n = e.StartTime.split(" ");
                            if (n.length > 1) {
                                var r = n[1] ? n[1].split(":") : "00:00:00";
                                n = n[0].split("-"), e.StartTime = new Date(parseInt(n[0], 10), parseInt(n[1], 10) - 1, parseInt(n[2], 10), parseInt(r[0], 10), parseInt(r[1], 10), parseInt(r[2], 10))
                            } else e.StartTime = new Date(_.toInt(e.StartTime) * 1e3)
                        }
                        return e.searchText = [e.EventName, e.ArtistName, e.City].join(" ").toLowerCase(), this._super.apply(this, ["constructor"].concat(t))
                    }
                }, {})
            }(), function() {
                function r(e) {
                    var r = {},
                        i = 0,
                        s = n.length,
                        o, u, a;
                    for (; i < s; i++) {
                        o = n[i], u = this.attributes[o], a = e && $.isArray(e[o]) ? e[o] : !1;
                        if (a) {
                            if (u instanceof Backbone.Collection) {
                                a.length > u.length && u.reset(a);
                                continue
                            }
                            if (!$.isArray(u) || a.length > u.length) u = a
                        }
                        u && $.isArray(u) && (r[o] = new t.Models.Collections[o == "RelatedTags" ? "Tags" : o](u))
                    }
                    this.set(r, {
                        silent: !0
                    })
                }
                function i(e) {
                    var n = new $.Deferred;
                    return t.Services.API.getPageInfoByIDType(e, "tag").done(function(t) {
                        var r = t.Data;
                        r && r.Tag ? (r.TagID = e, r.Albums = _.orEqual(r.Albums, []), r.Artists = _.orEqual(r.Artists, []), r.RelatedTags = _.orEqual(r.RelatedTags, []), r.Songs = _.orEqual(r.Songs, []), r.pageInfoLoaded = !0, n.resolve(r)) : n.reject(t)
                    }).fail(function(e) {
                        n.reject(e)
                    }), n.promise()
                }
                function s(e, n) {
                    if (!this.updateSelfDfd || this.updateSelfDfd.state() != "pending") this.updateSelfDfd = i(this.id);
                    this.updateSelfDfd.done(_.bind(function(r) {
                        var i = new t.Models.Tag(r);
                        e.resolve(this.get(n))
                    }, this)).fail(function() {
                        e.reject()
                    })
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = ["RelatedTags", "Songs", "Albums", "Artists"];
                t.Models.Tag = Backbone.CachedModel.extend({
                    idAttribute: "TagID",
                    defaults: {
                        pageInfoLoaded: !1
                    },
                    constructor: function(e) {
                        var t = _.toArray(arguments);
                        e.TagID = _.orEqualEx(e.TagID, e.tid), e.Tag = _.orEqualEx(e.Tag, e.TagName, e.tag, "");
                        try {
                            delete e.tid, delete e.TagName, delete e.tag
                        } catch (n) {}
                        return e.DisplayName = _.ucwords(e.Tag, !0), e.searchText = e.Tag.toLowerCase(), this._super.apply(this, ["constructor"].concat(t))
                    },
                    initialize: function(e, t) {
                        r.call(this), this._super.apply(this, ["initialize"].concat(arguments))
                    },
                    updateFromNew: function(e) {
                        this.set(_.defaults(this.attributes, e), {
                            silent: !0
                        }), r.call(this, e), e.pageInfoLoaded && this.set("pageInfoLoaded", e.pageInfoLoaded, {
                            silent: !0
                        })
                    },
                    getSongs: function() {
                        var e = $.Deferred();
                        return !this.attributes.pageInfoLoaded || !this.attributes.Songs || !this.attributes.Songs instanceof t.Models.Collections.Songs ? s.call(this, e, "Songs") : e.resolve(this.attributes.Songs), e
                    },
                    getArtists: function() {
                        var e = $.Deferred();
                        return !this.attributes.pageInfoLoaded || !this.attributes.Artists || !this.attributes.Artists instanceof t.Models.Collections.Artists ? s.call(this, e, "Artists") : e.resolve(this.attributes.Artists), e
                    },
                    getAlbums: function() {
                        var e = $.Deferred();
                        return !this.attributes.pageInfoLoaded || !this.attributes.Albums || !this.attributes.Albums instanceof t.Models.Collections.Albums ? s.call(this, e, "Albums") : e.resolve(this.attributes.Albums), e
                    },
                    getRelatedTags: function() {
                        var e = $.Deferred();
                        return !this.attributes.pageInfoLoaded || !this.attributes.RelatedTags || !this.attributes.RelatedTags instanceof t.Models.Collections.Tags ? s.call(this, e, "RelatedTags") : e.resolve(this.attributes.RelatedTags), e
                    },
                    toUrl: function(e) {
                        return _.cleanUrl(this.get("DisplayName"), this.id, "tag", null, e)
                    },
                    getImageURL: function(e) {
                        e = _.orEqual(e, 80);
                        var n = t.Models.Tag.artPath + e + "_" + this.get("TagID") + ".jpg";
                        return this.get("CoverArtFilename") ? t.Models.Tag.artPath + e + "_" + this.get("CoverArtFilename") : n
                    },
                    getRandomArtists: function(e) {
                        var t = this.get("Artists");
                        if (!t || t.length === 0) return [];
                        var n = [],
                            r = Math.min(e, t.length),
                            i, s = [];
                        while (n.length < r) i = Math.floor(Math.random() * t.length), _.indexOf(n, i) == -1 && n.push(i);
                        for (i = 0; i < r; i++) s.push(t.at(n[i]));
                        return s
                    },
                    toProxyLabel: function() {
                        return this.get("DisplayName") + " - " + _.getString("STATION")
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/genres/",
                    topGenres: [{
                        title: "Ambient",
                        tag: "ambient",
                        artists: "",
                        tagID: 75
                    }, {
                        title: "Electronic",
                        tag: "electronic",
                        artists: "",
                        tagID: 156,
                        important: 1
                    }, {
                        title: "Dance",
                        tag: "dance",
                        artists: "",
                        tagID: 814
                    }, {
                        title: "Indie Rock",
                        tag: "indie rock",
                        artists: "",
                        tagID: 3773,
                        important: 1
                    }, {
                        title: "Folk Music",
                        tag: "folk music",
                        artists: "",
                        tagID: 7120
                    }, {
                        title: "Reggae",
                        tag: "reggae",
                        artists: "",
                        tagID: 160
                    }, {
                        title: "Ska",
                        tag: "ska",
                        artists: "",
                        tagID: 100
                    }, {
                        title: "Pop Punk",
                        tag: "pop punk",
                        artists: "",
                        tagID: 7227
                    }, {
                        title: "Rock",
                        tag: "rock",
                        artists: "",
                        tagID: 2856,
                        important: 1
                    }, {
                        title: "Country",
                        tag: "country",
                        artists: "",
                        tagID: 1933
                    }, {
                        title: "Rap",
                        tag: "rap",
                        artists: "",
                        tagID: 1748,
                        important: 1
                    }, {
                        title: "R&B",
                        tag: "r&b",
                        artists: "",
                        tagID: 7614
                    }, {
                        title: "Jazz",
                        tag: "jazz",
                        artists: "",
                        tagID: 1749
                    }, {
                        title: "Classical",
                        tag: "classical",
                        artists: "",
                        tagID: 750
                    }, {
                        title: "World",
                        tag: "world",
                        artists: "",
                        tagID: 313
                    }, {
                        title: "90's",
                        tag: "90s",
                        artists: "",
                        tagID: 10,
                        important: 1
                    }, {
                        title: "80's",
                        tag: "80s",
                        artists: "",
                        tagID: 424
                    }, {
                        title: "70's",
                        tag: "70s",
                        artists: "",
                        tagID: 2360
                    }, {
                        title: "60's",
                        tag: "60s",
                        artists: "",
                        tagID: 7512
                    }],
                    get: function(e) {
                        var t = Backbone.CachedModel.genericGet.call(this, i, "TagID", e);
                        return t.promise()
                    },
                    getMulti: function(e) {
                        var n = $.Deferred(),
                            r = [],
                            i = [],
                            s;
                        for (var o = 0, u = e.length; o < u; o++) s = this.getCached(e[o]), s && s.attributes.pageMetaInfoLoaded ? r.push(s) : i.push(e[o]);
                        return i.length ? t.Services.API.getPageInfoByIDsType(i, "tag").done(function(e) {
                            r = r.concat(t.Models.Tag.convertPageNamesToTags(e)), n.resolve(r)
                        }).fail(function() {
                            r.length ? n.resolve(r) : n.reject()
                        }) : n.resolve(r), n.promise()
                    },
                    getMetaMulti: function(e) {
                        var n = $.Deferred(),
                            r = [],
                            i = [],
                            s;
                        for (var o = 0, u = e.length; o < u; o++) s = this.getCached(e[o]), s && s.attributes.pageMetaInfoLoaded ? r.push(s) : i.push(e[o]);
                        return i.length ? t.Services.API.getPageMetaInfoByIDsType(i, "tag").done(function(e) {
                            r = r.concat(t.Models.Tag.convertPageNamesToTags(e)), n.resolve(r)
                        }).fail(function() {
                            r.length ? n.resolve(r) : n.reject()
                        }) : n.resolve(r), n.promise()
                    },
                    convertPageNamesToTags: function(e) {
                        var n = [],
                            r, i, s, o, u, a;
                        if (e.length) for (r = 0, i = e.length; r < i; r++) {
                            o = e[r].ItemID;
                            if (!o) continue;
                            s = e[r].Data || {}, s.TagID = o, s.pageMetaInfoLoaded = !0, s.Tag ? (s.Albums = _.orEqual(s.Albums, []), s.Artists = _.orEqual(s.Artists, []), s.RelatedTags = _.orEqual(s.RelatedTags, []), s.Songs = _.orEqual(s.Songs, []), s.pageInfoLoaded = !0) : e[r].NameFormatted && (a = e[r].NameFormatted.split("/"), s.TagName = a[1].replace(/\+/g, " ").replace(/(\d+) s$/i, "$1s"), s.TagName == "R B" && (s.TagName = "R&B")), u = new t.Models.Tag(s), n.push(u)
                        }
                        return n
                    },
                    getTopLevelTags: function() {
                        var e = $.Deferred();
                        if (this.topLevel) e.resolve(this.topLevel);
                        else {
                            if (this.topLevelDfd && this.topLevelDfd.state() == "pending") return this.topLevelDfd.promise();
                            this.topLevelDfd = e, t.Services.API.getTopLevelTags().done(_.bind(function(n) {
                                $.isArray(n) ? (this.topLevel = new t.Models.Collections.Tags(n), e.resolve(this.topLevel)) : e.reject(n)
                            }, this)).fail(function(t) {
                                e.reject(t)
                            })
                        }
                        return e.promise()
                    },
                    getTagList: function() {
                        var e = $.Deferred();
                        if (this.tagsList) e.resolve(this.tagsList);
                        else {
                            if (this.tagsListDfd && this.tagsListDfd.state() == "pending") return this.tagsListDfd.promise();
                            this.tagsListDfd = e, t.Services.API.getTagList().done(_.bind(function(t) {
                                if (t) {
                                    var n, r;
                                    for (n in t) t.hasOwnProperty(n) && (r = t[n], this.fixNameLookup.hasOwnProperty(r) && this.fixNameLookup[r] !== n && (delete t[n], t[this.fixNameLookup[r]] = r));
                                    this.tagsList = t, e.resolve(t)
                                } else e.reject(t)
                            }, this)).fail(function(t) {
                                e.reject(t)
                            })
                        }
                        return e.promise()
                    },
                    fixNameLookup: {
                        10: "90's",
                        44: "fusion",
                        75: "ambient",
                        84: "merengue",
                        85: "flamenco",
                        89: "vallenato",
                        100: "ska",
                        102: "oldies",
                        104: "instrumental",
                        130: "bhangra",
                        131: "emo",
                        134: "grunge",
                        153: "downtempo",
                        156: "electronic",
                        160: "reggae",
                        162: "electro",
                        164: "gothic",
                        191: "experimental",
                        230: "blues",
                        245: "hardcore",
                        248: "jungle",
                        267: "comedy",
                        268: "grime",
                        269: "dancehall",
                        270: "breakbeat",
                        275: "industrial",
                        283: "trance",
                        313: "world",
                        424: "80s",
                        443: "musicals",
                        506: "bollywood",
                        510: "synthpop",
                        534: "britpop",
                        625: "romantic",
                        652: "broadway",
                        678: "chillout",
                        748: "crunk",
                        750: "classical",
                        787: "salsa",
                        790: "latin",
                        795: "crossover",
                        807: "nerdcore",
                        814: "dance",
                        820: "baroque",
                        893: "electropop",
                        898: "house",
                        901: "disco",
                        919: "urban",
                        922: "americana",
                        940: "reggaeton",
                        957: "celtic",
                        963: "traditional",
                        975: "mambo",
                        1032: "swing",
                        1086: "rockabilly",
                        1102: "shoegaze",
                        1140: "cabaret",
                        1168: "psychedelic",
                        1210: "mashup",
                        1304: "anime",
                        1332: "post-hardcore",
                        1407: "mariachi",
                        1408: "surf",
                        1411: "metal",
                        1416: "bolero",
                        1430: "string",
                        1489: "gospel",
                        1535: "opera",
                        1599: "jpop",
                        1717: "symphonic",
                        1747: "funk",
                        1748: "rap",
                        1749: "jazz",
                        1750: "soul",
                        1933: "country",
                        1947: "bluegrass",
                        1965: "screamo",
                        2086: "trova",
                        2177: "minimal",
                        2195: "cuarteto",
                        2260: "contemporary",
                        2360: "70s",
                        2412: "techno",
                        2482: "piano",
                        2536: "bebop",
                        2563: "dubstep",
                        2649: "spiritual",
                        2760: "orchestra",
                        2764: "boogie",
                        2856: "rock",
                        2868: "tango",
                        3124: "thrash",
                        3162: "schlager",
                        3454: "rumba",
                        3489: "pop rock",
                        3502: "hip hop",
                        3518: "nu jazz",
                        3519: "acid jazz",
                        3529: "classic rock",
                        3598: "singer-songwriter",
                        3606: "pagode",
                        3625: "hymn",
                        3664: "new age",
                        3692: "chanson",
                        3698: "avant-garde",
                        3773: "indie rock",
                        3855: "smooth jazz",
                        3856: "hard rock",
                        3907: "oldskool",
                        3922: "trip hop",
                        3975: "show tunes",
                        3984: "heavy metal",
                        4009: "soft rock",
                        4028: "eurodance",
                        4063: "power metal",
                        4137: "progressive rock",
                        4171: "nu metal",
                        4271: "cumbia",
                        4274: "hardstyle",
                        4278: "motown",
                        4281: "ragga",
                        4283: "rocksteady",
                        4285: "samba",
                        4286: "sertanejo",
                        5805: "afrobeat",
                        6310: "bachata",
                        6367: "chillwave",
                        6369: "chiptune",
                        6437: "electronic rock",
                        6439: "electroswing",
                        6462: "freestyle",
                        6484: "glitch",
                        6539: "jota",
                        6550: "klasik",
                        6635: "parranda",
                        6680: "ranchera",
                        6719: "soca",
                        6771: "turntablism",
                        6794: "zouk",
                        6799: "blues rock",
                        6834: "big band",
                        6850: "jazz fusion",
                        6869: "cool jazz",
                        6873: "latin jazz",
                        6875: "brazilian music",
                        6878: "soul jazz",
                        6879: "jazz funk",
                        6893: "roots reggae",
                        6897: "post punk",
                        6903: "reggae dub",
                        6928: "punk",
                        6938: "folk rock",
                        6939: "indie folk",
                        6980: "breakbeat hardcore",
                        6994: "pop music",
                        7e3: "goa trance",
                        7004: "psychedelic trance",
                        7008: "vocal trance",
                        7025: "tech house",
                        7027: "happy hardcore",
                        7030: "drum & bass",
                        7036: "progressive house",
                        7038: "electro house",
                        7060: "deep house",
                        7061: "funky house",
                        7063: "neo soul",
                        7066: "rave music",
                        7071: "french music",
                        7075: "edm",
                        7077: "alt country",
                        7085: "southern rock",
                        7090: "old-time music",
                        7091: "country rock",
                        7096: "alternative rock",
                        7109: "new country",
                        7120: "folk music",
                        7121: "garage rock",
                        7126: "uk garage",
                        7127: "intelligent dance music",
                        7139: "electronic body music",
                        7147: "minimal techno",
                        7162: "post-dubstep",
                        7167: "dance pop",
                        7176: "new wave",
                        7200: "indie electronic",
                        7214: "bubblegum pop",
                        7216: "indie pop",
                        7226: "boy bands",
                        7227: "pop punk",
                        7248: "post rock",
                        7252: "black metal",
                        7253: "death metal",
                        7273: "metal core",
                        7319: "christian rock",
                        7324: "doo-wop",
                        7333: "ska punk",
                        7393: "old school hip hop",
                        7399: "gangsta rap",
                        7409: "dirty south",
                        7413: "witch house",
                        7420: "christian music",
                        7463: "british invasion",
                        7469: "medieval music",
                        7490: "dark wave",
                        7512: "60s",
                        7514: "children's music",
                        7515: "classic country",
                        7518: "easy listening",
                        7520: "latin pop",
                        7524: "90's alternative rock",
                        7575: "video game music",
                        7579: "contemporary christian",
                        7588: "k-pop",
                        7607: "italy",
                        7614: "r&b",
                        7623: "vocal music",
                        7626: "film score",
                        7647: "modern rock",
                        7651: "beach music",
                        7656: "underground hip hop",
                        7675: "oi!",
                        7699: "bossa nova",
                        7711: "quiet storm",
                        7756: "music of japan",
                        7792: "nu-folk",
                        7824: "asian music",
                        7830: "sacred music",
                        7862: "spanish rock",
                        7864: "worship music",
                        7873: "string quartet",
                        7877: "banda music",
                        7890: "chicano rap",
                        7894: "rock n roll",
                        7909: "dirty blues",
                        7970: "acoustic guitar",
                        7974: "jesus music",
                        8024: "jazz guitar",
                        8141: "pachanga",
                        8143: "salsa romantica",
                        8183: "slow jam",
                        8191: "turkish music",
                        8488: "christmas music"
                    }
                })
            }(), function() {
                var n = e.GS = e.GS || {};
                n.Models = n.Models || {}, n.Models.Queue = Backbone.Model.extend({
                    constructor: function(e) {
                        var r = _.toArray(arguments);
                        e.songs = new n.Models.Collections.QueueSongs(e.songs), e.cachedSongs = new n.Models.Collections.QueueSongs(e.songs.models);
                        var i = new n.Models.Collections.Songs(e.clientRadioSongs || []),
                            s = this;
                        e.clientRadioSongs !== t && delete e.clientRadioSongs, i.defaultOptions = {
                            disperseAlbums: !0,
                            disperseArtists: !0,
                            recentArtistsSize: 5,
                            recentAlbumsSize: 5
                        }, i._options = _.clone(i.defaultOptions), i._enabled = i.length, e.clientRadioEnabled = i._enabled, i.frowns = new n.Models.Collections.QueueSongs([]), i.extraStreamFlags = 0, i.setOptions = function(e) {
                            this._options = _.extend(this._options, e)
                        }, i.enable = function(e) {
                            if (s.get("currentBroadcast")) {
                                console.log("no radio in broadcast!");
                                return
                            }
                            return this._enabled = !0, this._options = _.defaults(e || {}, this.defaultOptions), s.set("clientRadioEnabled", !0), this
                        }, i.disable = function() {
                            this._options = _.clone(i.defaultOptions), this._enabled = !1, this.extraStreamFlags = 0, s.set("clientRadioEnabled", !1), this.off("needSongs"), this.reset([]), this.frowns = new n.Models.Collections.QueueSongs([]);
                            var e = s.get("songs"),
                                t = e.models[e.length - 1];
                            return t && t.get("suggestion") && n.trigger("player:removeSpecific", t.get("queueSongID"), s.get("queueID")), this
                        }, i.voteSong = function(e, t) {
                            var n = s.get("songs").get(e);
                            n && (n.set({
                                autoplayVote: t,
                                smile: t === 1,
                                frown: t === -1
                            }), t < 0 ? this.frowns.add(n) : this.frowns.indexOf(n) != -1 && this.frowns.remove(n))
                        }, i.chooseNextSong = function(e) {
                            e = _.defaults(e || {}, {
                                playOnAdd: !1
                            });
                            var r = s,
                                i = r.get("activeSong"),
                                o = r.get("songs");
                            if (!this._enabled || r.get("autoplayEnabled")) return;
                            var u = o.length ? o.at(o.length - 1) : !1;
                            if (u && i && u.get("context").type == "clientRadio" && u != i) return;
                            var a = this.frowns.pluck("ArtistID"),
                                f = this._options,
                                l, c, h, p = function(e) {
                                    return _.indexOf(a, e.get("ArtistID")) === -1
                                };
                            l = new n.Models.Collections.Songs(_.filter(this.models, p)), console.log(a, l);
                            if (l.length) {
                                var d = new n.Models.PlayContext,
                                    v = function(e, t) {
                                        return _.map(this.last(t), function(t) {
                                            return t.get(e)
                                        })
                                    };
                                if (f.disperseArtists || f.disperseAlbums) {
                                    var m = v.apply(o, ["ArtistID", f.recentArtistsSize]),
                                        g = v.apply(o, ["AlbumID", f.recentAlbumsSize]),
                                        y = f.disperseArtists - 0 + (f.disperseAlbums - 0),
                                        b;
                                    for (var w = 0, E = Math.min(30, l.length); w < E; w++) {
                                        b = 0, f.disperseArtists && _.indexOf(m, l.models[w].get("ArtistID")) == -1 && b++, f.disperseAlbums && _.indexOf(g, l.models[w].get("AlbumID")) == -1 && b++;
                                        if (b >= y) {
                                            h = l.models[w];
                                            break
                                        }
                                        b && !h && (h = l.models[w])
                                    }
                                }
                                h || (h = l.models[0]), c = h, this.remove(h), d.type = "clientRadio", d.addStreamType(n.Models.PlayContext.TYPE_STATION), d.addStreamType(this.extraStreamFlags), n.trigger("player:addSongs", [c], t, e.playOnAdd, d), n.trigger("guts:forcelog", "autoplayRecommendedSongToQueue", {
                                    songID: c.get("SongID")
                                })
                            } else this.lastNeedSongs = +(new Date), this.trigger("needSongs", this, r)
                        }, this.on("change:autoplayEnabled", function(e, t) {
                            t && this.disable()
                        }, i), i.on("add", function() {
                            var e = this.lastNeedSongs && +(new Date) - this.lastNeedSongs;
                            e && e < 5e3 && (this.lastNeedSongs = null, setTimeout(function() {
                                i.chooseNextSong({})
                            }, 0))
                        }), i.onActiveSongChange = function(e, t, n) {
                            return this.chooseNextSong(n), this
                        }, i.onQueueContentChange = function() {
                            return this.chooseNextSong({}), this
                        }, i.setTypeTypeID = function(e, t) {
                            this.type = e, this.typeID = t
                        }, i.switchToAutoplay = function(e) {
                            var t = i.frowns,
                                r = s.get("songs"),
                                o = r.pluck("ArtistID"),
                                u = t.pluck("ArtistID");
                            o = _.difference(o, u), e = _.extend({}, {
                                secondaryArtistWeightModifier: 1.3,
                                seedArtistWeightRange: [80, 90],
                                weightModifierRange: [-9, 9],
                                seeds: o,
                                frowns: u
                            }, e), n.trigger("guts:gatrack", "player", "clientRadioFallbackToServer", "fallbackSeedArtistIDs:" + o.length + ",fallbackSeedFrownArtistIDs:" + u.length), n.trigger("guts:forcelog", "clientRadioFallbackToServer", {
                                fallbackSeedArtistIDs: o.toString(),
                                fallbackSeedFrownArtistIDs: u.toString()
                            }), n.trigger("guts:begincontext", {
                                fallbackSeedArtistIDs: o.toString(),
                                fallbackSeedFrownArtistIDs: u.toString()
                            }), n.Services.SWF.setAutoplay(!0, 0, e, "autoplayGetSongEx")
                        }, this.on("change:activeSong", i.onActiveSongChange, i), e.songs.on("remove reset", i.onQueueContentChange, i), e.clientRadio = i, this._super.apply(this, ["constructor"].concat(r))
                    },
                    radioEnabled: function() {
                        return this.get("autoplayEnabled") || this.get("clientRadioEnabled")
                    }
                }, {
                    shuffleSongsForRadio: function(e) {
                        var t = _.shuffle(e.first(Math.floor(e.length * .5))),
                            r = _.shuffle(e.rest(Math.ceil(e.length * .5)));
                        return new n.Models.Collections.Songs(t.concat(r))
                    },
                    sortSongsForRadio: function(e, t) {
                        t = _.defaults(t || {}, {
                            disperseArtists: !0,
                            disperseAlbums: !0,
                            shuffle: !0
                        });
                        var r = [],
                            i = [],
                            s = Math.floor(e.length * .5),
                            o = e.first(s),
                            u = e.rest(s),
                            a = [],
                            f = [],
                            l, c, h, p, d, v, m, g, y, b, w, E, S, x, T;
                        t.shuffle ? (o = _.shuffle(o), u = _.shuffle(u), l = o.concat(u)) : l = e.models, l = new n.Models.Collections.Songs(l);
                        if (t.disperseArtists || t.disperseAlbums) for (c = 0, h = l.length; c < h; c++) {
                            b = l.models[c], g = b.get("ArtistID"), y = b.get("AlbumID"), v = _.lastIndexOf(r, g), m = _.lastIndexOf(r, g);
                            if (t.disperseArtists && v !== -1 && v < r.length - 5 || t.disperseAlbums && m !== -1 && m < i.length - 5) w = b;
                            if (!w) {
                                x = b, E = r.slice(-5), S = i.slice(-5);
                                for (p = 0, d = f.length; p < d; p++) {
                                    b = f[p], g = b.get("ArtistID"), y = b.get("AlbumID"), T = t.disperseArtists && _.indexOf(E, g) == -1 || !t.disperseArtists, T = t.disperseAlbums && _.indexOf(S, y) == -1 || !t.disperseAlbums;
                                    if (T) {
                                        w = b;
                                        break
                                    }
                                }
                                f.push(x)
                            }
                            w && (a.push(w), r.push(g), i.push(y), w = null)
                        }
                        return f.length && (t.shuffle && (f = _.shuffle(f)), a.push.apply(a, f)), a.length && l.reset(a), l
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Player = Backbone.Model.extend({
                    defaults: {
                        volume: 100,
                        isMuted: !1,
                        crossfadeAmount: 0,
                        crossfadeEnabled: !1,
                        playPauseFade: !1,
                        position: 0,
                        duration: 0,
                        bytesLoaded: 0,
                        bytesTotal: 0,
                        playStatus: 0,
                        currentStreamServer: "",
                        currentQueue: null,
                        previousQueue: !1,
                        expectManualSongChange: !1,
                        isJoiningBroadcast: !1
                    },
                    playStatusIsPlaying: function() {
                        switch (this.get("playStatus")) {
                        case t.Models.Player.playStatuses.INITIALIZING:
                        case t.Models.Player.playStatuses.LOADING:
                        case t.Models.Player.playStatuses.PLAYING:
                        case t.Models.Player.playStatuses.BUFFERING:
                            return !0;
                        default:
                            return !1
                        }
                    }
                }, {
                    playStatuses: {
                        NONE: 0,
                        INITIALIZING: 1,
                        LOADING: 2,
                        PLAYING: 3,
                        PAUSED: 4,
                        BUFFERING: 5,
                        FAILED: 6,
                        COMPLETED: 7
                    },
                    repeatModes: {
                        NONE: 0,
                        ALL: 1,
                        ONE: 2
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Station = Backbone.Model.extend({
                    idAttribute: "TagID",
                    defaults: {
                        TagID: 0,
                        StationTitle: ""
                    },
                    toProxyLabel: function() {
                        return _.escape(_.getString(this.get("StationTitle")))
                    }
                }, {
                    getStations: function() {
                        var e = [{
                            StationTitle: "STATION_INDIE",
                            TagID: 136
                        }, {
                            StationTitle: "STATION_ELECTRONICA",
                            TagID: 67
                        }, {
                            StationTitle: "STATION_CLASSICAL",
                            TagID: 750
                        }, {
                            StationTitle: "STATION_POP",
                            TagID: 56
                        }, {
                            StationTitle: "STATION_RAP",
                            TagID: 3
                        }, {
                            StationTitle: "STATION_COUNTRY",
                            TagID: 80
                        }, {
                            StationTitle: "STATION_ALTERNATIVE",
                            TagID: 13
                        }, {
                            StationTitle: "STATION_HIP_HOP",
                            TagID: 29
                        }, {
                            StationTitle: "STATION_CLASSIC_ROCK",
                            TagID: 3529
                        }, {
                            StationTitle: "STATION_AMBIENT",
                            TagID: 75
                        }, {
                            StationTitle: "STATION_PUNK",
                            TagID: 111
                        }, {
                            StationTitle: "STATION_90S_ALT_ROCK",
                            TagID: 9
                        }, {
                            StationTitle: "STATION_BLUES",
                            TagID: 230
                        }, {
                            StationTitle: "STATION_ROCK",
                            TagID: 12
                        }, {
                            StationTitle: "STATION_JAZZ",
                            TagID: 43
                        }, {
                            StationTitle: "STATION_RNB",
                            TagID: 4
                        }, {
                            StationTitle: "STATION_FOLK",
                            TagID: 122
                        }, {
                            StationTitle: "STATION_DUBSTEP",
                            TagID: 2563
                        }, {
                            StationTitle: "STATION_80s",
                            TagID: 55
                        }, {
                            StationTitle: "STATION_TRANCE",
                            TagID: 69
                        }, {
                            StationTitle: "STATION_BLUEGRASS",
                            TagID: 96
                        }, {
                            StationTitle: "STATION_REGGAE",
                            TagID: 160
                        }, {
                            StationTitle: "STATION_METAL",
                            TagID: 17
                        }, {
                            StationTitle: "STATION_OLDIES",
                            TagID: 102
                        }, {
                            StationTitle: "STATION_EXPERIMENTAL",
                            TagID: 191
                        }, {
                            StationTitle: "STATION_LATIN",
                            TagID: 528
                        }];
                        return new t.Models.Collections.Stations(e)
                    },
                    getStationsStartMenu: function() {
                        var e = t.Models.Station.getStations(),
                            n = [],
                            r = function(e) {
                                return function() {
                                    t.trigger("player:radio", !0, e), t.trigger("guts:log", "autoplayOn", {
                                        stationType: "tag",
                                        tagID: e
                                    })
                                }
                            };
                        return e.comparator = function(e) {
                            return _.getString(e.get("StationTitle"))
                        }, e.sort(), e.each(function(e) {
                            n.push({
                                title: _.getString(e.get("StationTitle")),
                                customClass: "jj_menu_item_hasIcon jj_menu_item_station",
                                action: {
                                    type: "fn",
                                    callback: r(e.get("TagID"))
                                }
                            })
                        }), n
                    }
                })
            }(), function() {
                function n(e, n, r, i, s, o) {
                    (!o || !o.comments) && e.reject();
                    var u = o.users,
                        a = o.artists,
                        f;
                    t.Models.Comment.handleUsersArtistsInResult(o.comments, u, a);
                    if (s) {
                        var l = s.getCached(n);
                        l && (i === 0 ? (f = new t.Models.Collections.Comments(o.comments), l.set("comments", f, {
                            silent: !0
                        })) : l.get("comments") && (f = l.get("comments"), f.add(o.comments)))
                    }
                    f || (f = new t.Models.Collections.Comments(o.comments)), f.lastLoaded = $.now(), f.loadedPages = Math.max(_.toInt(f.loadedPages), i), f.loadedTypeID = r, f.loadedItemID = n, e.resolve(f, n, r)
                }
                function r(e, r, i, s, o) {
                    s || (s = 0);
                    var u = _.toInt(r);
                    u && (r = u);
                    if (o) {
                        var a = o.getCached(r);
                        if (a) {
                            var f = a.get("comments"),
                                l = $.now();
                            if (f && f.lastLoaded && f.lastLoaded > l - 3e5 && f.loadedPages >= s) {
                                e.resolve(f, r, i);
                                return
                            }
                        }
                    }
                    t.Services.API.getCommentsForItem(r, i, s).done(_.bind(n, this, e, r, i, s, o)).fail(_.bind(e.reject, e))
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Comment = Backbone.CachedModel.extend({
                    idAttribute: "CommentID",
                    constructor: function() {
                        var e = arguments[0],
                            n = _.toArray(arguments).splice(1);
                        e.OriginalItem && (e.ItemID = e.OriginalItem, delete e.OriginalItem), e.OriginalType && (e.TypeID = e.OriginalType, delete e.OriginalType);
                        if (e.user || e.artist) e.author = _.getNormalizedAuthorForCommentResponse(e, e.ItemID, e.TypeID);
                        var r = [],
                            i = this;
                        return _.each(e.Responses, function(t) {
                            t.comment = i, t.ItemID = e.ItemID, t.TypeID = e.TypeID, r.push(t)
                        }), e.Responses = new t.Models.Collections.CommentResponses(r), r.length ? (e.ResponsesCount = e.Responses.length, e.ResponsesLoaded = !0) : (e.ResponsesCount = _.toInt(e.ResponsesCount), e.ResponsesLoaded = e.ResponsesCount <= 0), n.unshift(e), this._super.apply(this, ["constructor"].concat(n))
                    },
                    get: function(e) {
                        switch (e) {
                        case "time":
                            return _.getFormattedDate(this.attributes.Timestamp)
                        }
                        return this.attributes[e]
                    },
                    loadResponses: function() {
                        var e = $.Deferred();
                        if (this.get("ResponsesLoaded")) e.resolve(this.get("Responses"));
                        else {
                            var n = function() {
                                    t.trigger("notification:add", {
                                        description: _.getString("POPUP_FAILED_LOAD_RESPONSES"),
                                        type: "error",
                                        url: ""
                                    }), e.reject()
                                };
                            t.Services.API.getCommentByID(this.id).done(_.bind(function(r) {
                                if (!r || !r.comment) return n();
                                var i = [];
                                if (r.comment.Responses) {
                                    var s = this;
                                    t.Models.Comment.handleUsersArtistsInResult(r.comment, r.users, r.artists), _.each(r.comment.Responses, function(e) {
                                        e.comment = s, e.ItemID = s.get("ItemID"), e.TypeID = s.get("TypeID"), i.push(e)
                                    }), this.get("Responses").add(i)
                                }
                                this.set({
                                    ResponsesLoaded: !0,
                                    ResponsesCount: i.length
                                }), e.resolve(this.get("Responses"))
                            }, this)).fail(n)
                        }
                        return e.promise()
                    },
                    reportComment: function() {
                        if (t.getLoggedInUserID() > 0) return t.Services.API.reportComment(this.get("CommentID"));
                        var e = new $.Deferred,
                            n = this.get("CommentID");
                        return t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_REPORT_COMMENT"),
                            onLogin: function(r) {
                                t.Services.API.reportComment(n).done(function(t) {
                                    e.resolve(t)
                                }).fail(function(t) {
                                    e.reject(t)
                                })
                            },
                            onClose: function() {
                                e.state() == "pending" && d.reject()
                            }
                        }), e.promise()
                    },
                    deleteComment: function() {
                        var e = new $.Deferred;
                        return this.get("UserID") === t.getLoggedInUserID() ? t.Services.API.deleteComment(this.get("CommentID"), this.get("AuthorArtistID")).done(_.bind(function(t) {
                            t ? (this.destroy(), e.resolve(t)) : e.reject(t)
                        }, this)).fail(_.bind(e.reject, e)) : this.canDelete() ? t.Services.API.deleteCommentFromMyPage(this.get("CommentID"), this.get("ItemID"), this.get("TypeID")).done(_.bind(function(t) {
                            t ? (this.destroy(), e.resolve(t)) : e.reject(t)
                        }, this)).fail(_.bind(e.reject, e)) : e.reject(), e.promise()
                    },
                    canDelete: function() {
                        if (t.isLoggedInUserOwnerOfArtist(this.get("AuthorArtistID"))) return !0;
                        if (this.get("UserID") === t.getLoggedInUserID()) return !0;
                        if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.USER && this.get("ItemID") === t.getLoggedInUserID()) return !0;
                        if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST) {
                            var e = t.Models.Playlist.getCached(this.get("ItemID"));
                            if (e && e.get("UserID") === t.getLoggedInUserID()) return !0
                        } else if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM) {
                            var n = t.Models.Album.getCached(this.get("ItemID"));
                            if (n && t.isLoggedInUserOwnerOfArtist(n.get("ArtistID"))) return !0
                        } else if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.SONG) {
                            var r = t.Models.Song.getCached(this.get("ItemID"));
                            if (r && t.isLoggedInUserOwnerOfArtist(r.get("ArtistID"))) return !0
                        } else if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST && t.isLoggedInUserOwnerOfArtist(this.get("ItemID"))) return !0;
                        return t.Models.Comment.ADMINS[t.getLoggedInUserID()] ? !0 : !1
                    },
                    canEdit: function() {
                        var e = this.get("AuthorArtistID");
                        return e ? t.isLoggedInUserOwnerOfArtist(e) : this.get("UserID") === t.getLoggedInUserID()
                    },
                    storeResponse: function(e, n) {
                        function i() {
                            t.Services.API.storeResponseToComment(this.get("CommentID"), this.get("ItemID"), this.get("TypeID"), e, n).done(_.bind(function(e) {
                                if (e && e.ResponseID) {
                                    var i = {};
                                    n ? e.artist = t.Models.Artist.getCached(n) : e.user = t.Models.User.getCached(t.getLoggedInUserID()), this.addResponse(e), r.resolve(e)
                                } else t.trigger("notification:add", {
                                    description: _.getString("POPUP_FAILED_COMMENT"),
                                    type: "error",
                                    url: ""
                                }), r.reject()
                            }, this)).fail(_.bind(r.reject, r))
                        }
                        var r = $.Deferred();
                        return t.getLoggedInUserID() > 0 ? i.call(this) : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_REPORT_COMMENT"),
                            onLogin: _.bind(i, this),
                            onClose: function() {
                                r.state() == "pending" && r.reject()
                            }
                        }), r.promise()
                    },
                    getMessage: function() {
                        if (this.get("linkedMessage")) return this.get("linkedMessage");
                        var e = this.get("Message");
                        return e = _.makeSafeLinks(e), this.set("linkedMessage", e), e
                    },
                    getResponsesCount: function() {
                        return this.get("MoreResponses") ? "30+" : this.get("ResponsesCount")
                    },
                    addResponse: function(e) {
                        e instanceof t.Models.CommentResponse || (e.comment = this, e = new t.Models.CommentResponse(e)), this.get("Responses").push(e), this.set("ResponsesCount", this.get("Responses").length)
                    },
                    toUrl: function() {
                        var e = this.get("ItemID"),
                            n = "",
                            r;
                        switch (this.get("TypeID")) {
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST:
                            r = t.Models.Artist, n = "artist";
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM:
                            r = t.Models.Album, n = "album";
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST:
                            r = t.Models.Playlist, n = "playlist";
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.USER:
                            r = t.Models.User, n = "user";
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.SONG:
                            r = t.Models.Song, n = "song";
                            break;
                        default:
                            return ""
                        }
                        var i = "",
                            s = r.getCached(e);
                        return this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.SONG && (!s || !s.get("token")) ? i = "" : s ? i = s.toUrl("comment/" + this.id) : i = _.cleanUrl(null, e, n, null, "comment/" + this.id), i
                    },
                    getAnchorTag: function(e) {
                        if (!e) switch (this.get("TypeID")) {
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST:
                            e = _.getString("ARTIST").toLocaleLowerCase();
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM:
                            e = _.getString("ALBUM").toLocaleLowerCase();
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST:
                            e = _.getString("PLAYLIST").toLocaleLowerCase();
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.USER:
                            e = _.getString("USER").toLocaleLowerCase();
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.SONG:
                            e = _.getString("SONG").toLocaleLowerCase();
                            break;
                        default:
                            return ""
                        }
                        return '<a href="' + this.toUrl() + '" class="comment-link" data-comment-id="' + this.escape("CommentID") + '">' + e + "</a>"
                    },
                    getChildMetadata: function() {
                        var e = t.Models.Comment.getModelForType(this.get("TypeID"));
                        if (!e) return null;
                        var n = e.getCached(this.get("ItemID"));
                        return n ? _.getString("COMMENTED_ON", {
                            item: n.getAnchorTag()
                        }) : null
                    }
                }, {
                    COMMENT_PAGE_TYPES: {
                        USER: 1,
                        ARTIST: 2,
                        ALBUM: 3,
                        PLAYLIST: 4,
                        SONG: 5
                    },
                    ADMINS: {
                        3879: 1,
                        42: 1,
                        3327599: 1,
                        6576669: 1,
                        9976522: 1
                    },
                    getModelForType: function(e) {
                        var n;
                        switch (e) {
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST:
                            n = t.Models.Artist;
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM:
                            n = t.Models.Album;
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST:
                            n = t.Models.Playlist;
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.USER:
                            n = t.Models.User;
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.SONG:
                            n = t.Models.Song;
                            break;
                        case 9:
                            n = null
                        }
                        return n
                    },
                    loadCommentsItemType: function(e, n, i) {
                        var s = new $.Deferred,
                            o = t.Models.Comment.getModelForType(n);
                        return r(s, e, n, i, o), s.promise()
                    },
                    loadComments: function(e, n, i) {
                        var s = new $.Deferred,
                            o, u;
                        switch (e) {
                        case "artist":
                            o = t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST, u = t.Models.Artist;
                            break;
                        case "album":
                            o = t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM, u = t.Models.Album;
                            break;
                        case "playlist":
                            o = t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST, u = t.Models.Playlist;
                            break;
                        case "user":
                            o = t.Models.Comment.COMMENT_PAGE_TYPES.USER, u = t.Models.User;
                            break;
                        case "song":
                            o = t.Models.Comment.COMMENT_PAGE_TYPES.SONG, u = t.Models.Song;
                            break;
                        case "other":
                            o = 9, u = null;
                            break;
                        default:
                            return s.reject(), s.promise()
                        }
                        return r(s, n, o, i, u), s.promise()
                    },
                    storeComment: function(e, n, r, i) {
                        var s = $.Deferred(),
                            o = t.getLoggedInUserID(),
                            u, a, f, l;
                        switch (e) {
                        case "artist":
                            a = t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST, l = t.Models.Artist;
                            break;
                        case "album":
                            a = t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM, l = t.Models.Album;
                            break;
                        case "playlist":
                            a = t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST, l = t.Models.Playlist;
                            break;
                        case "user":
                            a = t.Models.Comment.COMMENT_PAGE_TYPES.USER, l = t.Models.User;
                            break;
                        case "song":
                            a = t.Models.Comment.COMMENT_PAGE_TYPES.SONG, l = t.Models.Song;
                            break;
                        case "other":
                            a = 9, l = null;
                            break;
                        default:
                            return s.reject(), s.promise()
                        }
                        return u = l ? l.getCached(n) : null, f = u ? u.getDetailsForFeeds() : null, t.Services.API.storeCommentForItem(n, a, r, f, i).done(_.bind(function(e) {
                            if (e && e.CommentID) {
                                i ? e.artist = t.Models.Artist.getCached(i) : e.user = t.Models.User.getCached(o);
                                var n = u ? u.get("comments") : null;
                                n && n.unshift(e), s.resolve()
                            } else t.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_COMMENT_FAILED"),
                                type: "error",
                                duration: 5e3
                            }), s.reject()
                        }, this)).fail(_.bind(function() {
                            t.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_COMMENT_FAILED"),
                                type: "error",
                                duration: 5e3
                            }), s.reject()
                        }, this)), s.promise()
                    },
                    handleUsersArtistsInResult: function(e, n, r) {
                        var i = e;
                        _.isArray(i) || (i = [e]);
                        if (n) for (var s in n) n.hasOwnProperty(s) && n[s].UserID && (n[s] = new t.Models.User(n[s]));
                        else n = {};
                        if (r) for (var o in r) r.hasOwnProperty(o) && r[o].ArtistID && (r[o] = new t.Models.Artist(r[o]));
                        else r = {};
                        _.each(i, function(e) {
                            e.AuthorArtistID ? e.artist = r[e.AuthorArtistID] : e.user = n[e.UserID], e.Responses && _.each(e.Responses, function(e) {
                                e.AuthorArtistID ? e.artist = r[e.AuthorArtistID] : e.user = n[e.UserID]
                            })
                        })
                    },
                    get: function(e) {
                        var n = function(e) {
                                var n = new $.Deferred;
                                return t.Services.API.getCommentByID(e).done(function(e) {
                                    if (e && e.comment && e.users) {
                                        var r = e.comment;
                                        t.Models.Comment.handleUsersArtistsInResult(r, e.users, e.artists), n.resolve(r)
                                    } else n.reject(e)
                                }).fail(_.bind(n.reject, n)), n.promise()
                            },
                            r = Backbone.CachedModel.genericGet.call(this, n, "CommentID", e);
                        return r.promise()
                    }
                })
            }(), function() {
                function n(e, n) {
                    n ? (this.destroy(), e.resolve(!0)) : (e.reject(), t.trigger("notification:add", {
                        description: _.getString("POPUP_ERROR_COMMENT_DELETE_FAILED"),
                        type: "error",
                        duration: 5e3
                    }))
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.CommentResponse = Backbone.CachedModel.extend({
                    idAttribute: "ResponseID",
                    constructor: function() {
                        var e = arguments[0],
                            t = _.toArray(arguments).splice(1);
                        return e.author = _.getNormalizedAuthorForCommentResponse(e, e.ItemID, e.TypeID), e.time = _.getFormattedDate(e.Timestamp), t.unshift(e), this._super.apply(this, ["constructor"].concat(t))
                    },
                    deleteResponse: function() {
                        var e = new $.Deferred;
                        return t.isLoggedInUserOwnerOfArtist(this.get("AuthorArtistID")) || this.get("UserID") === t.getLoggedInUserID() ? t.Services.API.deleteResponseToComment(this.get("comment").get("CommentID"), this.get("ResponseID"), this.get("AuthorArtistID")).always(_.bind(n, this, e)) : this.canDelete() ? t.Services.API.deleteResponseToCommentFromMyPage(this.get("comment").get("CommentID"), this.get("ResponseID"), this.get("ItemID"), this.get("TypeID")).always(_.bind(n, this, e)) : e.reject(), e.promise()
                    },
                    canDelete: function() {
                        if (t.isLoggedInUserOwnerOfArtist(this.get("AuthorArtistID"))) return !0;
                        if (this.get("UserID") === t.getLoggedInUserID()) return !0;
                        if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.USER && this.get("ItemID") === t.getLoggedInUserID()) return !0;
                        if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST) {
                            var e = t.Models.Playlist.getCached(this.get("ItemID"));
                            if (e && e.get("UserID") === t.getLoggedInUserID()) return !0
                        } else if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM) {
                            var n = t.Models.Album.getCached(this.get("ItemID"));
                            if (n && t.isLoggedInUserOwnerOfArtist(n.get("ArtistID"))) return !0
                        } else if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.SONG) {
                            var r = t.Models.Song.getCached(this.get("ItemID"));
                            if (r && t.isLoggedInUserOwnerOfArtist(r.get("ArtistID"))) return !0
                        } else if (this.get("TypeID") === t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST && t.isLoggedInUserOwnerOfArtist(this.get("ItemID"))) return !0;
                        return t.Models.Comment.ADMINS[t.getLoggedInUserID()] ? !0 : !1
                    },
                    reportResponse: function() {
                        var e = this.get("comment").get("CommentID");
                        if (t.getLoggedInUserID() > 0) return t.Services.API.reportResponseToComment(e, this.get("ResponseID"));
                        var n = new $.Deferred;
                        return t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_REPORT_COMMENT"),
                            onLogin: function(r) {
                                t.Services.API.reportResponseToComment(e).done(function(e) {
                                    n.resolve(e)
                                }).fail(function(e) {
                                    n.reject(e)
                                })
                            },
                            onClose: function() {
                                n.state() == "pending" && d.reject()
                            }
                        }), n.promise()
                    },
                    getMessage: function() {
                        if (this.get("linkedMessage")) return this.get("linkedMessage");
                        var e = this.get("Message");
                        return e = _.makeSafeLinks(e), this.set("linkedMessage", e), e
                    }
                })
            }(), function() {
                function i(e, t) {
                    var n = e.get("data");
                    if (n.users && n.users.length) {
                        var i = new r.Models.Collections.Users(n.users);
                        t.user && i.remove(t.user.get("UserID")), t.localeVariables.numOthers = i.length, i.at(0) && (t.localeVariables.userTwo = i.at(0).getAnchorTag())
                    }
                }
                var r = e.GS = e.GS || {};
                r.Models = r.Models || {};
                var s = {
                    handlePlaylist: function(e, t) {
                        var n = new $.Deferred,
                            i = e.get("data");
                        t.icon = _.orEqual(t.icon, "playlist");
                        var s = r.Models.Playlist.wrapFeedData(i.playlists[0] || i.playlist);
                        t.item = {
                            id: s.get("PlaylistID"),
                            image: s.getImageURL(200),
                            title: s.get("PlaylistName"),
                            subTitle: s.get("UserName"),
                            subURL: s.toUserUrl(),
                            url: s.toUrl(),
                            model: s
                        };
                        var o = !1;
                        return s.get("UserID") === r.getLoggedInUserID() ? (t.localeVariables.objectArticle = s.getAnchorTag("YOUR_PLAYLIST"), o = !0) : t.user && t.user.get("UserID") === s.get("UserID") ? (t.localeVariables.objectArticle = _.getString(t.localeVariables.possessiveKey + "_OWNER") + " " + s.getAnchorTag("PLAYLIST"), o = !0) : t.localeVariables.objectArticle = s.getAnchorTag("PLAYLIST_ARTICLE"), t.localeVariables.objectNamed = s.getAnchorTag(), !o && t.groupBy && s.get("UserName") && (t.localeKey += "_BY", t.localeVariables.grouping = s.getAuthorAnchorTag()), n.resolve(), n.promise()
                    },
                    playlistPlayed: function(e, t) {
                        t.itemType = "playlist", t.localeKey = "FEED2_USER_LISTENED", t.groupBy = "user"
                    },
                    createPlaylist: function(e, t) {
                        t.itemType = "playlist", t.localeKey = "FEED2_USER_CREATED"
                    },
                    subscribePlaylist: function(e, t) {
                        t.itemType = "playlist", t.localeKey = "FEED2_USER_SUBSCRIBED", t.groupBy = "user"
                    },
                    overwritePlaylist: function(e, t) {
                        t.itemType = "playlist", t.localeKey = "FEED2_USER_EDITED", t.groupBy = "user"
                    },
                    handleSong: function(e, t) {
                        var n = new $.Deferred,
                            i = e.get("data");
                        t.icon = _.orEqual(t.icon, "song");
                        var s = new r.Models.Collections.Songs(i.songs || [i.song]),
                            o = s.at(0);
                        if (s.length > 1) e.get("activityType") !== "broadcast" && e.get("activityType") !== "share" && (t.localeKey += "_MANY"), t.items = [], s.each(function(n) {
                            t.items.push({
                                id: n.get("SongID"),
                                image: n.getImageURL(40),
                                title: n.get("SongName"),
                                subTitle: n.get("ArtistName"),
                                subURL: n.toArtistUrl(),
                                url: null
                            }), n.client && !e.attributes.client && e.set("client", n.client)
                        }), t.localeVariables.objectTwo = s.at(1).getAlbumAnchorTag(), t.localeVariables.objectCount = s.length;
                        else {
                            if (!s.length) return n.reject(), n.promise();
                            t.item = {
                                id: o.get("SongID"),
                                image: o.getImageURL(80),
                                title: o.get("SongName"),
                                subTitle: o.get("ArtistName"),
                                subURL: o.toArtistUrl(),
                                url: null
                            }, o.client && !e.attributes.client && e.set("client", o.client)
                        }
                        return t.localeVariables.objectNamed = o.getAnchorTag(), t.localeVariables.objectArticle = o.getAnchorTag("SONG_ARTICLE"), t.groupBy === "artist" ? (t.localeKey += "_BY", t.localeVariables.grouping = o.getArtistAnchorTag()) : t.groupBy === "album" && (t.localeKey += "_FROM", t.localeVariables.grouping = o.getAlbumAnchorTag()), n.resolve(), n.promise()
                    },
                    songPlayed: function(e, t) {
                        var n = e.get("data");
                        t.itemType = "song", n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_LISTENED" : t.localeKey = "FEED2_USER_LISTENED"
                    },
                    favoriteSong: function(e, t) {
                        var n = e.get("data");
                        t.icon = "favorite", t.itemType = "song", n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_FAVORITED" : t.localeKey = "FEED2_USER_FAVORITED"
                    },
                    addSongsToLibrary: function(e, t) {
                        var n = e.get("data");
                        t.icon = "collection", t.itemType = "song", t.localeVariables.destinations = _.getString("COLLECTIONS"), t.localeVariables.destination = _.getString(t.localeVariables.possessiveKey) + " " + _.getString("COLLECTION").toLocaleLowerCase(), t.user && (t.localeVariables.destination = '<a href="' + t.user.toUrl("collection") + '" class="user-collection-link">' + t.localeVariables.destination + "</a>"), n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_ADDED" : t.localeKey = "FEED2_USER_ADDED"
                    },
                    obsession: function(e, t) {
                        var n = e.get("data");
                        !n.songs && n.song && (n.songs = [n.song]), t.itemType = "song", t.localeKey = "FEED2_USER_OBSESSION";
                        if (n.songs && n.songs.length === 1) {
                            var r = 1;
                            typeof n.songs[0].timestamp == "object" && (r = n.songs[0].timestamp.length), r > 7 ? t.localeKey = "FEED2_USER_BLEEDING" : r > 5 && (t.localeKey = "FEED2_USER_ADDICTED")
                        }
                    },
                    handleArtist: function(e, t) {
                        var n = new $.Deferred,
                            i = e.get("data");
                        t.icon = _.orEqual(t.icon, "artist");
                        var s = new r.Models.Collections.Artists(i.artists || [i.artist]),
                            o = s.at(0);
                        if (s.length > 1) e.get("activityType") !== "broadcast" && e.get("activityType") !== "share" && (t.localeKey += "_MANY"), t.items = [], s.each(function(e) {
                            t.items.push({
                                id: e.get("ArtistID"),
                                image: e.getImageURL(40),
                                title: e.get("ArtistName"),
                                url: e.toUrl()
                            })
                        }), t.localeVariables.objectTwo = s.at(1).getAnchorTag(), t.localeVariables.objectCount = s.length;
                        else {
                            if (!s.length) return n.reject(), n.promise();
                            t.item = {
                                id: o.get("ArtistID"),
                                image: o.getImageURL(80),
                                title: o.get("ArtistName"),
                                url: o.toUrl()
                            }
                        }
                        return t.localeVariables.objectNamed = o.getAnchorTag(), t.localeVariables.objectArticle = o.getAnchorTag("ARTIST_ARTICLE"), n.promise()
                    },
                    favoriteArtist: function(e, t) {
                        var n = e.get("data");
                        t.icon = "favorite", t.itemType = "artist";
                        if (!n.artists && e.get("feedType") === "artist") {
                            var i = r.Models.Artist.getCached(e.get("ArtistID"));
                            i && (n.artists = [i])
                        }
                        n.users && n.users.length > 2 ? t.localeKey = "FEED2_USER_MANY_FOLLOWING" : n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_TWO_FOLLOWING" : t.localeKey = "FEED2_USER_FOLLOWING"
                    },
                    usersFavoriteArtist: function(e, t) {
                        return this.favoriteArtist(e, t)
                    },
                    addArtistToLibrary: function(e, t) {
                        var n = e.get("data");
                        t.icon = "collection", t.localeVariables.destinations = _.getString("COLLECTIONS"), t.localeVariables.destination = _.getString(t.localeVariables.possessiveKey) + " " + _.getString("COLLECTION").toLocaleLowerCase(), t.user && (t.localeVariables.destination = '<a href="' + t.user.toUrl("collection") + '" class="user-collection-link">' + t.localeVariables.destination + "</a>"), !n.songs && n.artists ? t.itemType = "artist" : (t.itemType = "song", t.groupBy = "artist"), n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_ADDED" : t.localeKey = "FEED2_USER_ADDED"
                    },
                    usersAddArtistToLibrary: function(e, t) {
                        this.addArtistToLibrary(e, t)
                    },
                    artistPlayed: function(e, t) {
                        var n = e.get("data");
                        if (!n.artists && n.songs) {
                            var r = n.songs[0],
                                i = {
                                    ArtistName: _.orEqual(r.artistName, r.ArtistName),
                                    ArtistID: _.orEqual(r.artistID, r.ArtistID)
                                };
                            n.artists = [i]
                        }
                        t.itemType = "artist", n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_LISTENED" : t.localeKey = "FEED2_USER_LISTENED"
                    },
                    handleAlbum: function(e, t) {
                        var n = new $.Deferred,
                            i = e.get("data");
                        t.icon = _.orEqual(t.icon, "song");
                        var s = new r.Models.Collections.Albums(i.albums || [i.album]),
                            o = s.at(0);
                        if (s.length > 1) e.get("activityType") !== "broadcast" && e.get("activityType") !== "share" && (t.localeKey += "_MANY"), t.items = [], s.each(function(e) {
                            t.items.push({
                                id: e.get("AlbumID"),
                                image: e.getImageURL(40),
                                title: e.get("AlbumName"),
                                subTitle: e.get("ArtistName"),
                                subURL: e.toArtistUrl(),
                                url: e.toUrl()
                            })
                        }), t.localeVariables.objectTwo = s.at(1).getAnchorTag(), t.localeVariables.objectCount = s.length;
                        else {
                            if (!s.length) return n.reject(), n.promise();
                            t.item = {
                                id: o.get("AlbumID"),
                                image: o.getImageURL(80),
                                title: o.get("AlbumName"),
                                subTitle: o.get("ArtistName"),
                                subURL: o.toArtistUrl(),
                                url: o.toUrl()
                            }
                        }
                        return t.localeVariables.objectNamed = o.getAnchorTag(), t.localeVariables.objectArticle = o.getAnchorTag("ALBUM_ARTICLE"), n.promise()
                    },
                    albumPlayed: function(e, t) {
                        var n = e.get("data");
                        if (!n.albums && n.songs) {
                            var r = n.songs[0],
                                i = {
                                    ArtistName: _.orEqual(r.artistName, r.ArtistName),
                                    ArtistID: _.orEqual(r.artistID, r.ArtistID),
                                    AlbumName: _.orEqual(r.albumName, r.AlbumName),
                                    AlbumID: _.orEqual(r.albumID, r.AlbumID)
                                };
                            n.albums = [i]
                        }
                        t.itemType = "album", n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_LISTENED" : t.localeKey = "FEED2_USER_LISTENED"
                    },
                    usersAddAlbumToLibrary: function(e, t) {
                        var n = e.get("data");
                        t.icon = "collection", t.localeVariables.destinations = _.getString("COLLECTIONS"), t.localeVariables.destination = _.getString(t.localeVariables.possessiveKey) + " " + _.getString("COLLECTION").toLocaleLowerCase(), t.user && (t.localeVariables.destination = '<a href="' + t.user.toUrl("collection") + '" class="user-collection-link">' + t.localeVariables.destination + "</a>"), !n.songs && n.albums ? t.itemType = "album" : (t.itemType = "song", t.groupBy = "album"), n.users && n.users.length > 1 ? t.localeKey = "FEED2_USER_MANY_ADDED" : t.localeKey = "FEED2_USER_ADDED"
                    },
                    addAlbumToLibrary: function(e, t) {
                        return this.usersAddAlbumToLibrary(e, t)
                    },
                    share: function(e, t) {
                        var n = e.get("broadcastType"),
                            i = e.get("data");
                        e.get("broadcastType") === void 0 && (i.songs && i.songs.length ? (e.set("broadcastType", r.Models.FeedEvent.BROADCAST_TYPES.SONG), n = r.Models.FeedEvent.BROADCAST_TYPES.SONG) : i.artists && i.artists.length ? (e.set("broadcastType", r.Models.FeedEvent.BROADCAST_TYPES.ARTIST), n = r.Models.FeedEvent.BROADCAST_TYPES.ARTIST) : i.albums && i.albums.length ? (e.set("broadcastType", r.Models.FeedEvent.BROADCAST_TYPES.ALBUM), n = r.Models.FeedEvent.BROADCAST_TYPES.ALBUM) : i.playlists && i.playlists.length && (e.set("broadcastType", r.Models.FeedEvent.BROADCAST_TYPES.PLAYLIST), n = r.Models.FeedEvent.BROADCAST_TYPES.PLAYLIST)), t.icon = "share";
                        var s = [],
                            o = 0;
                        if (i.users || i.people) s = new r.Models.Collections.Users(i.users || i.people), o = s.length, o && (s.get(r.getLoggedInUserID()) ? (t.localeVariables.destination = _.getString("SELF_THIRD_PERSON"), s.remove(r.getLoggedInUserID())) : t.localeVariables.destination = s.at(0).getAnchorTag());
                        o > 2 ? (t.localeKey = "FEED2_USER_SHARED_WITH_MANY", t.localeVariables.destinationCountMinusOne = o - 1) : o > 1 ? (t.localeKey = "FEED2_USER_SHARED_WITH_TWO", t.localeVariables.destinationTwo = s.at(1).getAnchorTag()) : s.length ? t.localeKey = "FEED2_USER_SHARED_WITH" : t.localeKey = "FEED2_USER_SHARED", n === r.Models.FeedEvent.BROADCAST_TYPES.SONG ? t.itemType = "song" : n === r.Models.FeedEvent.BROADCAST_TYPES.PLAYLIST ? t.itemType = "playlist" : n === r.Models.FeedEvent.BROADCAST_TYPES.ARTIST ? t.itemType = "artist" : n === r.Models.FeedEvent.BROADCAST_TYPES.ALBUM && (t.itemType = "album")
                    },
                    artistBroadcastFeed: function(e, t) {
                        var n = e.get("broadcastType"),
                            i = e.get("data"),
                            s = _.orEqualEx(i.message, e.get("message"), null);
                        t.icon = "star", s ? t.localeKey = "FEED2_USER_POSTED_UPDATE" : t.localeKey = "FEED2_USER_SHARED";
                        switch (n) {
                        case r.Models.FeedEvent.BROADCAST_TYPES.SONG:
                            t.itemType = "song";
                            break;
                        case r.Models.FeedEvent.BROADCAST_TYPES.PLAYLIST:
                            t.itemType = "playlist";
                            break;
                        case r.Models.FeedEvent.BROADCAST_TYPES.ARTIST:
                            t.itemType = "artist";
                            break;
                        case r.Models.FeedEvent.BROADCAST_TYPES.ALBUM:
                            t.itemType = "album"
                        }
                    },
                    broadcast: function(e, t) {
                        return this.share(e, t)
                    },
                    handleUser: function(e, t) {
                        var n = new $.Deferred,
                            i = e.get("data"),
                            s = !1;
                        t.icon = _.orEqual(t.icon, "user");
                        var o = new r.Models.Collections.Users(i.users || [i.user]),
                            u = o.length,
                            a;
                        u && (o.get(r.getLoggedInUserID()) && (s = !0, o.remove(r.getLoggedInUserID())), a = o.at(0));
                        if (u > 1) e.get("activityName") === "favoriteUser" ? (u === 2 ? t.localeKey += "_TWO" : t.localeKey += "_AND", t.localeVariables.objects = _.getString("OBJECT_OTHERS")) : t.localeKey += "_MANY", t.items = [], o.each(function(e) {
                            t.items.push({
                                id: e.get("UserID"),
                                image: e.getImageURL(40),
                                title: e.get("Name"),
                                url: e.toUrl()
                            })
                        }), t.localeVariables.objectTwo = o.at(1).getAnchorTag(), t.localeVariables.objectCount = u, t.localeVariables.objectCountMinusOne = u - 1;
                        else {
                            if (!u) return n.reject(), n.promise();
                            s ? (t.item = {
                                id: t.user.get("UserID"),
                                image: t.user.getImageURL(80),
                                title: t.user.get("Name"),
                                url: t.user.toUrl()
                            }, s = !0) : t.item = {
                                id: a.get("UserID"),
                                image: a.getImageURL(80),
                                title: a.get("Name"),
                                url: a.toUrl()
                            }
                        }
                        return s ? (t.localeVariables.objectArticle = _.getString("SELF_THIRD_PERSON"), t.localeVariables.objectNamed = _.getString("SELF_THIRD_PERSON")) : (t.localeVariables.objectNamed = a.getAnchorTag(), e.get("activityName") === "favoriteUser" && u > 1 ? t.localeVariables.objectArticle = t.localeVariables.objectNamed : e.get("activityName") === "favoriteUser" ? t.localeVariables.objectArticle = "" : t.localeVariables.objectArticle = _.getString("USER_SOMEONE")), n.promise()
                    },
                    favoriteUser: function(e, t) {
                        t.itemType = "user", t.localeKey = "FEED2_USER_FOLLOWING"
                    },
                    handleComment: function(e, t) {
                        var n = $.Deferred(),
                            i = e.get("data");
                        t.icon = _.orEqual(t.icon, "comment");
                        var s = [],
                            o = 0,
                            u, a, f, l;
                        switch (t.commentType) {
                        case "song":
                            var c;
                            u = new r.Models.Collections.Songs([]), _.each(i.comments, function(e) {
                                f = e.comment = new r.Models.Comment(e.comment);
                                if (!e.comment) return;
                                o++, c = new r.Models.Song({
                                    AlbumID: e.albumID,
                                    AlbumName: e.albumName,
                                    ArtistID: e.artistID,
                                    ArtistName: e.artistName,
                                    SongID: e.songID,
                                    SongName: e.songName,
                                    artFilename: e.artFilename,
                                    token: e.token
                                }), u.add(c, {
                                    silent: !0
                                }), a = c.escape("SongName"), s.push({
                                    id: f.get("CommentID"),
                                    image: c.getImageURL(40),
                                    medimage: c.getImageURL(80),
                                    title: c.get("SongName"),
                                    comment: f.get("Message"),
                                    url: f.toUrl()
                                })
                            }), t.localeVariables.objectArticle = f.getAnchorTag(_.getString("SONG_ARTICLE", {
                                otherUser: a
                            }));
                            break;
                        case "artist":
                            var h;
                            u = new r.Models.Collections.Artists([]), _.each(i.comments, function(e) {
                                f = e.comment = new r.Models.Comment(e.comment);
                                if (!e.comment) return;
                                o++, h = new r.Models.Artist({
                                    ArtistID: e.artistID,
                                    ArtistName: e.artistName,
                                    artFilename: e.artFilename
                                }), u.add(h, {
                                    silent: !0
                                }), a = h.escape("ArtistName"), s.push({
                                    id: f.get("CommentID"),
                                    image: h.getImageURL(40),
                                    medimage: h.getImageURL(80),
                                    title: h.get("ArtistName"),
                                    comment: f.get("Message"),
                                    url: f.toUrl()
                                })
                            }), t.localeVariables.objectArticle = f.getAnchorTag(_.getString("ARTIST_ARTICLE", {
                                otherUser: a
                            }));
                            break;
                        case "album":
                            var p;
                            u = new r.Models.Collections.Albums([]), _.each(i.comments, function(e) {
                                f = e.comment = new r.Models.Comment(e.comment);
                                if (!e.comment) return;
                                o++, p = new r.Models.Album({
                                    AlbumID: e.albumID,
                                    AlbumName: e.albumName,
                                    ArtistID: e.artistID,
                                    ArtistName: e.artistName,
                                    artFilename: e.artFilename
                                }), u.add(p, {
                                    silent: !0
                                }), a = p.escape("AlbumName"), s.push({
                                    id: f.get("CommentID"),
                                    image: p.getImageURL(40),
                                    medimage: p.getImageURL(80),
                                    title: p.get("AlbumName"),
                                    comment: f.get("Message"),
                                    url: f.toUrl()
                                })
                            }), t.localeVariables.objectArticle = f.getAnchorTag(_.getString("ALBUM_ARTICLE", {
                                otherUser: a
                            }));
                            break;
                        case "user":
                            var d;
                            u = new r.Models.Collections.Users([]), _.each(i.comments, function(e) {
                                f = e.comment = new r.Models.Comment(e.comment);
                                if (!e.comment) return;
                                o++, d = new r.Models.User({
                                    UserID: e.userID,
                                    FName: _.orEqual(e.userName, e.displayName),
                                    IsPremium: e.isPremium,
                                    Picture: _.orEqual(e.picture, e.artFilename)
                                }), u.add(d, {
                                    silent: !0
                                }), a = d.escape("Name"), s.push({
                                    id: f.get("CommentID"),
                                    image: d.getImageURL(40),
                                    medimage: d.getImageURL(80),
                                    title: d.get("Name"),
                                    comment: f.get("Message"),
                                    url: f.toUrl()
                                })
                            }), u.length === 1 && d.get("UserID") === t.user.get("UserID") ? (l = _.getString(t.localeVariables.possessiveKey + "_OWNER") + " " + _.getString("PROFILE").toLocaleLowerCase(), t.localeVariables.objectArticle = t.localeVariables.objectNamed = f.getAnchorTag(l)) : u.length === 1 && d.get("UserID") === r.getLoggedInUserID() ? t.localeVariables.objectArticle = t.localeVariables.objectNamed = f.getAnchorTag(_.getString("YOUR_PROFILE")) : t.localeVariables.objectArticle = t.localeVariables.objectNamed = f.getAnchorTag(_.getString("OTHER_USER_PROFILE", {
                                otherUser: a
                            }));
                            break;
                        case "playlist":
                            var v;
                            u = new r.Models.Collections.Playlists([]), _.each(i.comments, function(e) {
                                f = e.comment = new r.Models.Comment(e.comment);
                                if (!e.comment) return;
                                o++, v = new r.Models.Playlist({
                                    UserID: e.userID,
                                    UserName: e.userName,
                                    PlaylistID: e.playlistID,
                                    PlaylistName: e.playlistName,
                                    Picture: _.orEqual(e.picture, e.artFilename)
                                }), u.add(v, {
                                    silent: !0
                                }), a = v.escape("PlaylistName"), s.push({
                                    id: f.get("CommentID"),
                                    image: v.getImageURL(70),
                                    medimage: v.getImageURL(200),
                                    title: v.get("PlaylistName"),
                                    comment: f.get("Message"),
                                    url: f.toUrl()
                                })
                            }), u.length === 1 && v.get("UserID") === t.user.get("UserID") ? (l = _.getString(t.localeVariables.possessiveKey + "_OWNER") + " " + _.getString("PLAYLIST").toLocaleLowerCase(), t.localeVariables.objectArticle = t.localeVariables.objectNamed = f.getAnchorTag(l)) : u.length === 1 && v.get("UserID") === r.getLoggedInUserID() && (t.localeVariables.objectArticle = t.localeVariables.objectNamed = f.getAnchorTag(_.getString("YOUR_PLAYLIST"))), t.localeVariables.objectArticle = f.getAnchorTag(_.getString("PLAYLIST_ARTICLE").toLocaleLowerCase())
                        }
                        return u > 1 ? (t.localeKey += "_MANY", t.items = s) : s.length > 1 ? t.items = s : f && (t.item = s[0], t.items = null), !t.localeVariables.objectNamed && f && (t.localeVariables.objectNamed = f.getAnchorTag(a)), n.promise()
                    },
                    commentedOnArtist: function(e, t) {
                        t.itemType = "comment", t.localeKey = "FEED2_USER_COMMENTED", t.commentType = "artist"
                    },
                    commentedOnSong: function(e, t) {
                        t.itemType = "comment", t.localeKey = "FEED2_USER_COMMENTED", t.commentType = "song"
                    },
                    commentedOnAlbum: function(e, t) {
                        t.itemType = "comment", t.localeKey = "FEED2_USER_COMMENTED", t.commentType = "album"
                    },
                    commentedOnUser: function(e, t) {
                        t.itemType = "comment", t.localeKey = "FEED2_USER_COMMENTED", t.commentType = "user"
                    },
                    commentedOnPlaylist: function(e, t) {
                        t.itemType = "comment", t.localeKey = "FEED2_USER_COMMENTED", t.commentType = "playlist"
                    },
                    getEventComments: function(e) {
                        var t = $.Deferred(),
                            n = [];
                        if (!e.get("comments") || !e.get("comments").length) t.resolve(n);
                        else {
                            n = e.get("comments").slice(0);
                            var i = [];
                            _.each(n, function(e) {
                                if (!e.userID && !e.fromArtistID) return;
                                if (e.fromArtistID) i.push(r.Models.Artist.get(e.fromArtistID).always(function(t) {
                                    e.user = t, e.authorName = t.get("ArtistName")
                                }));
                                else if (!e.userPicture) i.push(r.Models.User.get(e.userID).always(function(t) {
                                    e.user = t, e.authorName = t.get("Name")
                                }));
                                else {
                                    var t = {
                                        UserID: e.userID,
                                        FName: e.username,
                                        Picture: e.userPicture,
                                        _noCache: !0
                                    };
                                    e.user = new r.Models.User(t), e.authorName = e.username
                                }
                                e.time = _.getFormattedDate(e.timestamp), e.comment = _.makeSafeLinks(e.comment)
                            }), $.after(i).done(function() {
                                t.resolve(n)
                            })
                        }
                        return t.promise()
                    },
                    handleMessage: function() {}
                };
                r.Models.FeedEvent = Backbone.CachedModel.extend({
                    idAttribute: "EventID",
                    constructor: function(e) {
                        var n = _.toArray(arguments).splice(1);
                        e.EventID = _.orEqual(e.eventID, e.EventID), delete e.eventID, e.client = _.orEqual(e.client, null), e.feedType = e.type, e.UserID = _.orEqualEx(e.userIDFrom, e.userID, e.UserID), e.UserID && (e.UserID = _.toInt(e.UserID), e.UserPicture = _.orEqual(e.userPicture, e.UserPicture), e.UserName = _.orEqualEx(e.displayName, e.UserName, e.Username, e.username, e.FName)), e.ArtistID = e.artistID, e.people && (e.data.users = e.people), e.bt !== t && (e.broadcastType = e.bt, delete e.bt);
                        try {
                            delete e.userID, delete e.userPicture, delete e.displayName, delete e.Username, delete e.username, delete e.people
                        } catch (r) {}
                        return n.unshift(e), this._super.apply(this, ["constructor"].concat(n))
                    },
                    getPrimaryUser: function() {
                        var e = {
                            UserID: this.get("UserID"),
                            Picture: this.get("UserPicture"),
                            FName: this.get("UserName")
                        },
                            t = $.Deferred(),
                            n;
                        return this.get("activityName") === "artistBroadcastFeed" ? (n = r.Models.Artist.getCached(this.get("ArtistID")), n ? t.resolve(n) : t.resolve(new r.Models.Artist({
                            ArtistID: this.get("ArtistID"),
                            Name: this.get("artistName"),
                            ArtFilename: this.get("artFilename")
                        })), t.resolve(n), t.promise()) : e.UserID ? (n = r.Models.User.getCached(e.UserID), n ? t.resolve(n) : e.FName ? t.resolve(new r.Models.User(e)) : t.reject(), t.promise()) : (this.get("data").users && this.get("data").users.length ? (e = this.get("data").users[0], n = r.Models.User.getCached(_.orEqual(e.UserID, e.userID)), n ? t.resolve(n) : t.resolve(new r.Models.User(e))) : t.reject(), t.promise())
                    },
                    getIsUserOnEvent: function(e) {
                        if (this.get("UserID") === e) return !0;
                        if (this.get("data").users) {
                            var t = this.get("data").users;
                            for (var n = 0, r = t.length; n < r; n++) if (t[n] && _.orEqual(t[n].userID, t[n].UserID) == e) return !0;
                            return !1
                        }
                        return this.get("UserID") == e
                    },
                    canComment: function() {
                        var e = n.model.get("user");
                        return this.get("activityName") === "artistBroadcastFeed" ? !0 : this.get("feedType") !== "user" || e.get("UserID") != this.get("UserID") && !e.get("followers").get(this.get("UserID")) ? !1 : !0
                    },
                    storeComment: function(e, t) {
                        var n = $.Deferred(),
                            i;
                        if (this.get("feedType") === "artist") this.get("ArtistID") ? i = r.Services.API.addArtistFeedComment(this.get("EventID"), e, t, this.get("ArtistID")) : i = r.Services.API.addArtistFeedComment(this.get("EventID"), e, t);
                        else {
                            var s = "",
                                o = r.Models.User.getCached(this.get("UserID"));
                            o && (s = o.get("Name")), i = r.Services.API.addEventComment(this.get("EventID"), e, s)
                        }
                        return i.done(_.bind(function(e) {
                            e && e._id ? (this.unset("normalizedObject"), this.get("comments") ? (this.get("comments").push(e), this.trigger("change:comments", this.get("comments"))) : this.set("comments", [e]), this.trigger("newComment", e), n.resolve(e)) : (n.reject(e), r.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_COMMENT_FAILED"),
                                type: "error",
                                duration: 5e3
                            }))
                        }, this)).fail(_.bind(n.reject, n)), n.promise()
                    },
                    hideEvent: function() {
                        var e = $.Deferred(),
                            t;
                        if (this.get("feedType") === "artist") t = r.Services.API.hideArtistEvent(this.get("ArtistID"), this.get("EventID"));
                        else {
                            var n = r.getLoggedInUserID() === this.get("UserID");
                            t = r.Services.API.hideUserEvent(this.get("EventID"), n)
                        }
                        return t.done(_.bind(function(t) {
                            t && t.success ? (this.destroy(), e.resolve(t)) : (e.reject(t), r.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_FEED_DELETE_FAILED"),
                                type: "error",
                                duration: 5e3
                            }))
                        }, this)), e.promise()
                    },
                    hideComment: function(e) {
                        var t = $.Deferred(),
                            n;
                        return this.get("feedType") === "artist" ? n = r.Services.API.hideArtistFeedComment(this.get("EventID"), e) : n = r.Services.API.hideEventComment(this.get("EventID"), e), n.done(_.bind(function(n) {
                            if (n && n.success) {
                                this.unset("normalizedObject");
                                var i = this.get("comments").concat([]);
                                for (var s = 0, o = i.length; s < o; s++) if (i[s]._id === e) {
                                    i.splice(s, 1);
                                    break
                                }
                                this.set("comments", i), this.trigger("removedComment"), t.resolve(n)
                            } else t.reject(n), r.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_COMMENT_DELETE_FAILED"),
                                type: "error",
                                duration: 5e3
                            })
                        }, this)), t.promise()
                    },
                    updateSelf: function(e) {
                        this.unset("normalizedObject"), this.set({
                            data: e.data,
                            timestamp: e.timestamp
                        })
                    },
                    getNormalizedObject: function(e, t) {
                        var n = $.Deferred(),
                            o = _.getFormattedDate(this.get("timestamp")),
                            u = this.get("normalizedObject");
                        if (typeof u == "object" && !t) {
                            if (u) {
                                u.time = o;
                                var a = $.extend({}, u);
                                a.localeVariables.object = e && a.localeVariables.objectNamed ? a.localeVariables.objectNamed : a.localeVariables.objectArticle, !_.defined(a.localeVariables.object) && !e && (a.localeVariables.object = a.localeVariables.objectNamed), n.resolve(a)
                            } else n.reject(u);
                            return n.promise()
                        }
                        if (_.defined(s[this.get("activityName")])) try {
                            var f = _.chainLoading(),
                                l = {
                                    id: this.get("EventID"),
                                    time: o,
                                    client: this.get("client"),
                                    message: "",
                                    itemType: "message",
                                    item: null,
                                    items: [],
                                    localeKey: "",
                                    localeVariables: {},
                                    groupBy: "",
                                    destination: ""
                                };
                            return f.push(this.getPrimaryUser().done(f.bind(function(e) {
                                l.user = e, e && e.get("Sex") === "M" ? (l.localeVariables.possessiveKey = "MALE_POSSESSIVE", l.localeVariables.user = e.getAnchorTag()) : e && e.get("Sex") === "F" ? (l.localeVariables.possessiveKey = "FEMALE_POSSESSIVE", l.localeVariables.user = e.getAnchorTag()) : (l.localeVariables.possessiveKey = "AMBIGUOUS_POSSESSIVE", e.get("Name") || e.get("ArtistName") ? l.localeVariables.user = e.getAnchorTag() : l.localeVariables.user = e.getAnchorTag("USER_SOMEONE"))
                            }, this))), f.done(_.bind(function() {
                                s[this.get("activityName")](this, l), l.itemType && (s["handle" + _.ucwords(l.itemType)](this, l), l.localeVariables.objects || (l.localeVariables.objects = _.getString(l.itemType.toUpperCase() + "_PLURAL"))), i(this, l);
                                if (l.item) {
                                    l.item.isFavorite = !1;
                                    var e = r.Models[_.ucwords(l.itemType)].getCached(l.item.id);
                                    e && e.get("isFavorite") && (l.item.isFavorite = e.get("isFavorite"))
                                }
                                var t = _.orEqual(this.get("data") && this.get("data").message, this.get("message"));
                                if (t) {
                                    var n = $.parseGSTagMessage(t);
                                    l.message = "";
                                    for (var o = 0, u = n.length; o < u; o++) n[o].name && n[o].id ? l.message += '<a href="' + _.cleanUrl(n[o].name, n[o].id, "user") + '">' + _.escape(n[o].name) + "</a>" : n[o] && (l.message += _.makeSafeLinks(n[o]))
                                }
                            }, this)), f.push(s.getEventComments(this).done(f.bind(function(e) {
                                l.comments = e
                            }, this))), f.done(_.bind(function() {
                                if (l.itemType === "message" || l.item && l.items && !l.items.length) l.items = null;
                                if (l.item || l.items && l.items.length || this.get("activityName") === "artistBroadcastFeed") {
                                    l.eventLink = this.toUrl(), this.set("normalizedObject", l);
                                    var t = $.extend({}, l);
                                    t.localeVariables.object = e && t.localeVariables.objectNamed ? t.localeVariables.objectNamed : t.localeVariables.objectArticle, !_.defined(t.localeVariables.object) && !e && (t.localeVariables.object = t.localeVariables.objectNamed), n.resolve(t)
                                } else this.set("normalizedObject", null), n.reject(null)
                            }, this)), n.promise()
                        } catch (c) {
                            gsConfig.runMode !== "production" && console.warn("couldn't process feed event", c, c.stack, this)
                        } else gsConfig.runMode !== "production" && console.warn("no event handler found for type: ", this.get("activityName"), this);
                        return this.set("normalizedObject", null), n.reject(null), n.promise()
                    },
                    getSongsPlayed: function() {
                        var e = [];
                        try {
                            switch (this.get("activityName")) {
                            case "userPlayed":
                            case "playlistPlayed":
                            case "artistPlayed":
                            case "albumPlayed":
                            case "songPlayed":
                            case "obsession":
                                e = _.orEqual(this.get("data").songs, [])
                            }
                        } catch (t) {
                            console.warn("couldn't load songs for feed event", t, this)
                        }
                        return e
                    },
                    toUrl: function() {
                        switch (this.get("feedType")) {
                        case "user":
                            var e = r.Models.User.getCached(this.get("UserID"));
                            if (e) return e.toUrl("activity/" + this.id);
                            if (this.get("UserID")) return _.cleanUrl(null, this.get("UserID"), "user", null, "activity/" + this.id);
                        case "artist":
                            var t = r.Models.Artist.getCached(this.get("ArtistID"));
                            if (t) return t.toUrl("activity/" + this.id);
                            if (this.get("UserID")) return _.cleanUrl(null, this.get("ArtistID"), "artist", null, "activity/" + this.id)
                        }
                        return ""
                    },
                    canRemove: function() {
                        var e = r.getLoggedInUserID();
                        if (this.get("UserID") === e || this.get("ArtistID") && r.isLoggedInUserOwnerOfArtist(this.get("ArtistID"))) return !0;
                        if (this.get("activityName") === "broadcast" && this.get("data") && this.get("data").users) {
                            var t = this.get("data").users;
                            for (var n = 0, i = t.length; n < i; n++) if (t[n] && _.orEqual(t[n].userID, t[n].UserID) === e) return !0
                        }
                        return !1
                    }
                }, {
                    BROADCAST_TYPES: {
                        SONG: 1,
                        PLAYLIST: 2,
                        ARTIST: 3,
                        ALBUM: 4
                    },
                    get: function(e, t) {
                        var n;
                        return t === "artist" ? n = Backbone.CachedModel.genericGet.call(this, r.Services.API.getArtistFeedEventByID, "eventID", e) : n = Backbone.CachedModel.genericGet.call(this, r.Services.API.getFeedEventByID, "eventID", e), n.promise()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = {
                    generic: function(e, n, r) {
                        var i, s = {};
                        switch (e.genericType) {
                        case 1:
                            return i = e.data.playlists[0], {
                                icon: "playlist",
                                text: _.getString("NOTIF_EVENT_ADDED_COLLABORATOR", {
                                    user: _.escape(e.usernameFrom),
                                    name: _.escape(i.name)
                                }),
                                picture: t.Models.Playlist.artPath + "70_" + (i.artFilename ? i.artFilename : "playlist.png"),
                                link: _.cleanUrl(i.name, i.playlistID, "playlist")
                            };
                        case 2:
                            i = e.data, s.icon = "comment", e.artistIDFrom ? s.picture = t.Models.Artist.artPath + "40_" + (e.artistCoverArt ? e.artistCoverArt : "artist.png") : s.picture = t.Models.User.artPath + "40_" + (e.userPicture ? e.userPicture : "user.png");
                            var o = _.orEqual(e.artistNameFrom, e.usernameFrom);
                            switch (i.TypeID) {
                            case t.Models.Comment.COMMENT_PAGE_TYPES.SONG:
                                s.text = _.getString("NOTIF_EVENT_COMMENT_SONG", {
                                    user: _.escape(o),
                                    name: _.escape(i.SongName)
                                }), s.link = null;
                                break;
                            case t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM:
                                s.text = _.getString("NOTIF_EVENT_COMMENT_ALBUM", {
                                    user: _.escape(o),
                                    name: _.escape(i.AlbumName)
                                }), s.link = null;
                                break;
                            case t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST:
                                s.text = _.getString("NOTIF_EVENT_COMMENT_PLAYLIST", {
                                    user: _.escape(o),
                                    name: _.escape(i.PlaylistName)
                                }), s.link = null;
                                break;
                            default:
                                s.text = _.getString("NOTIF_EVENT_COMMENT_PROFILE", {
                                    user: _.escape(o)
                                }), s.link = null
                            }
                            return s.commentID = i.CommentID, s;
                        case 3:
                            i = e.data, s.icon = "comment";
                            var u, a;
                            i.FromOwner && i.TypeID !== t.Models.Comment.COMMENT_PAGE_TYPES.USER || e.artistIDFrom ? (u = e.artistNameFrom, s.picture = t.Models.Artist.artPath + "40_" + (e.artistCoverArt ? e.artistCoverArt : "artist.png")) : (u = e.usernameFrom, s.picture = t.Models.User.artPath + "40_" + (e.userPicture ? e.userPicture : "user.png"));
                            if (i.CommentID) {
                                a = t.Models.Comment.getCached(i.CommentID);
                                var f = t.Models.Comment.getModelForType(i.TypeID);
                                if (a && f) {
                                    var l = f.getCached(i.ItemID),
                                        c = l ? l.get("comments") : null;
                                    c && (c.lastLoaded = 0), t.Models.Comment.uncache(a)
                                }
                            }
                            return s.text = _.getString("NOTIF_EVENT_COMMENT_INCEPTION", {
                                user: _.escape(u)
                            }), s.link = a ? a.toUrl() : null, s.commentID = i.CommentID, s;
                        case 4:
                            return null;
                        case 5:
                            return i = e.data, s.icon = "star", i.claimStatus === 9 ? s.text = _.getString("NOTIF_EVENT_ARTIST_APPROVED", {
                                name: _.escape(i.artistName)
                            }) : s.text = _.getString("NOTIF_EVENT_ARTIST_UPDATED", {
                                name: _.escape(i.artistName)
                            }), s.link = _.cleanUrl(i.artistName, i.artistID, "artist"), s.picture = "/webincludes/images/40_Logo.png", s;
                        case 6:
                            i = e.data, s.icon = "star", s.picture = t.Models.Artist.artPath + "40_" + (i.artFilename ? i.artFilename : "artist.png");
                            if (i.claimStatus === 9) {
                                s.text = _.getString("NOTIF_EVENT_CONTENT_APPROVED", {
                                    name: _.escape(i.artistName)
                                });
                                if (i.songs && i.songs.length) {
                                    var h = [],
                                        p;
                                    r && _.each(i.songs, function(e) {
                                        if (t.Models.Song.getCached(_.toInt(e.SongID))) {
                                            p = new t.Models.Song(e);
                                            if (p.get("ArtistID") === _.toInt(e.ArtistID)) return;
                                            t.Models.Song.nukeSong(p, !1)
                                        }
                                        p = new t.Models.Song(e), p.setPreferredAlbum(e.AlbumID), p.setPreferredArtist(e.ArtistID), h.push(p)
                                    });
                                    var d = t.Models.Album.getCached(i.songs[0].AlbumID);
                                    d || (d = new t.Models.Album({
                                        AlbumID: i.songs[0].AlbumID,
                                        AlbumName: i.songs[0].AlbumName
                                    }));
                                    if (h.length && r) {
                                        var v = t.Models.Artist.getCached(h[0].get("ArtistID"));
                                        v && v.get("songs") && v.get("songs").add(h), d.get("songs") && d.get("songs").add(h)
                                    }
                                    s.link = d.toUrl()
                                }
                            } else s.text = _.getString("NOTIF_EVENT_CONTENT_UPDATED", {
                                name: _.escape(i.artistName)
                            }), s.link = "#";
                            return s.picture = "/webincludes/images/40_Logo.png", s;
                        case 7:
                            return null;
                        case 8:
                            var m = t.Models.User.getCached(e.userIDFrom);
                            return m || (m = {
                                UserID: e.userIDFrom,
                                Picture: e.userPicture,
                                FName: e.usernameFrom
                            }, m = new t.Models.User(m)), {
                                icon: "user",
                                text: _.getString("NOTIF_USER_FOLLOWED_YOU", {
                                    user: m.escape("Name")
                                }),
                                picture: m.getImageURL(70),
                                link: m.toUrl()
                            };
                        case 9:
                            i = e.data;
                            if (!i.Playlist) return null;
                            var m = t.Models.User.getCached(e.userIDFrom);
                            m || (m = {
                                UserID: e.userIDFrom,
                                Picture: e.userPicture,
                                FName: e.usernameFrom
                            }, m = new t.Models.User(m));
                            var g = t.Models.Playlist.getCached(i.Playlist.PlaylistID);
                            return g || (g = new t.Models.Playlist(i.Playlist)), {
                                icon: "user",
                                text: _.getString("NOTIF_USER_FOLLOWED_YOUR_PLAYLIST", {
                                    user: m.escape("Name"),
                                    playlist: g.escape("PlaylistName")
                                }),
                                picture: m.getImageURL(70),
                                link: m.toUrl()
                            };
                        case 10:
                            var y = t.Models.User.getCached(e.userIDFrom);
                            return y || (y = {
                                UserID: e.userIDFrom,
                                Picture: e.userPicture,
                                FName: e.usernameFrom
                            }, y = new t.Models.User(y)), {
                                icon: "user",
                                text: _.getString("NOTIF_FRIEND_FROM_TWITTER_JOINED", {
                                    user: y.escape("Name")
                                }),
                                picture: y.getImageURL(70),
                                link: y.toUrl()
                            };
                        case 11:
                            i = e.data;
                            if (!i.artistID || t.isLoggedInUserOwnerOfArtist(i.artistID)) return null;
                            return {
                                icon: "star",
                                text: _.getString("NOTIF_ARTIST_VERIFY_EMAIL", {
                                    artist: _.escape(i.artistName)
                                }),
                                picture: t.Models.Artist.artPath + "40_" + (i.artFilename || "artist.png"),
                                link: _.cleanUrl(i.artistName, i.artistID, "artist")
                            }
                        }
                    },
                    broadcast: function(e, n) {
                        var r = e.data;
                        _.defined(e.broadcastType) || (e.broadcastType = e.bt);
                        var i = new t.Models.FeedEvent(e);
                        switch (e.broadcastType) {
                        case 1:
                            var s = new t.Models.Song(r.songs[0]);
                            return r = _.getString("SELECTION_SONG_SINGLE", {
                                SongName: "<strong>" + s.escape("SongName") + "</strong>",
                                ArtistName: "<strong>" + s.escape("ArtistName") + "</strong>"
                            }), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_YOU", {
                                    user: _.escape(e.UserName),
                                    thing: "song",
                                    metadata: r
                                }),
                                picture: s.getImageURL(40),
                                songID: s.get("SongID"),
                                link: i.toUrl()
                            };
                        case 2:
                            var o = t.Models.Playlist.wrapFeedData(r.playlists[0]);
                            return r = ["<strong>", o.escape("PlaylistName"), "</strong>"].join(""), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_YOU", {
                                    user: _.escape(e.UserName),
                                    thing: "playlist",
                                    metadata: r
                                }),
                                picture: o.getImageURL(70),
                                link: i.toUrl()
                            };
                        case 3:
                            var u = new t.Models.Artist(r.artists[0]);
                            return r = ["<strong>", u.escape("ArtistName"), "</strong>"].join(""), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_YOU", {
                                    user: _.escape(e.UserName),
                                    thing: "artist",
                                    metadata: r
                                }),
                                picture: u.getImageURL(40),
                                link: i.toUrl()
                            };
                        case 4:
                            var a = new t.Models.Album(r.albums[0]);
                            return r = _.getString("SELECTION_ALBUM_SINGLE", {
                                AlbumName: "<strong>" + a.escape("AlbumName") + "</strong>",
                                ArtistName: "<strong>" + a.escape("ArtistName") + "</strong>"
                            }), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_YOU", {
                                    user: _.escape(e.UserName),
                                    thing: "album",
                                    metadata: r
                                }),
                                picture: a.getImageURL(40),
                                link: i.toUrl()
                            }
                        }
                    },
                    artistBroadcastFeed: function(e, n) {
                        var r = e.data;
                        _.defined(e.broadcastType) || (e.broadcastType = e.bt), e.type === "user" && (e.type = "artist");
                        var i = new t.Models.FeedEvent(e);
                        switch (e.broadcastType) {
                        case 0:
                            return {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_TEXT_WITH_FANS", {
                                    artist: _.escape(e.artistName)
                                }),
                                picture: t.Models.Artist.artPath + "40_" + (e.artFilename || "artist.png"),
                                broadcastMessage: e.message,
                                link: i.toUrl()
                            };
                        case 1:
                            var s = new t.Models.Song(r.songs[0]);
                            return r = _.getString("SELECTION_SONG_SINGLE", {
                                SongName: "<strong>" + s.escape("SongName") + "</strong>",
                                ArtistName: "<strong>" + s.escape("ArtistName") + "</strong>"
                            }), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_FANS", {
                                    artist: _.escape(e.artistName),
                                    thing: "song",
                                    metadata: r
                                }),
                                picture: s.getImageURL(40),
                                songID: s.get("SongID"),
                                broadcastMessage: e.message,
                                link: i.toUrl()
                            };
                        case 2:
                            var o = t.Models.Playlist.wrapFeedData(r.playlists[0]);
                            return r = ["<strong>", o.escape("PlaylistName"), "</strong>"].join(""), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_FANS", {
                                    artist: _.escape(e.artistName),
                                    thing: "playlist",
                                    metadata: r
                                }),
                                picture: o.getImageURL(70),
                                broadcastMessage: e.message,
                                link: i.toUrl()
                            };
                        case 3:
                            var u = new t.Models.Artist(r.artists[0]);
                            return r = ["<strong>", u.escape("ArtistName"), "</strong>"].join(""), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_FANS", {
                                    artist: _.escape(e.artistName),
                                    thing: "artist",
                                    metadata: r
                                }),
                                picture: u.getImageURL(40),
                                broadcastMessage: e.message,
                                link: i.toUrl()
                            };
                        case 4:
                            var a = new t.Models.Album(r.albums[0]);
                            return r = _.getString("SELECTION_ALBUM_SINGLE", {
                                AlbumName: "<strong>" + a.escape("AlbumName") + "</strong>",
                                ArtistName: "<strong>" + a.escape("ArtistName") + "</strong>"
                            }), {
                                icon: "share",
                                text: _.getString("NOTIF_BROADCAST_ITEM_WITH_FANS", {
                                    artist: _.escape(e.artistName),
                                    thing: "album",
                                    metadata: r
                                }),
                                picture: a.getImageURL(40),
                                broadcastMessage: e.message,
                                link: i.toUrl()
                            }
                        }
                    },
                    comment: function(e, n) {
                        var r = _.orEqual(e.usernameFrom, e.displayName),
                            i, s;
                        if (e.eventOwnerUserID && e.eventOwnerUserID != t.getLoggedInUserID()) {
                            var o = t.Models.User.getCached(e.eventOwnerUserID);
                            o ? (s = o.toUrl("activity/" + e.eventID), e.eventOwnerName = o.get("Name")) : s = _.cleanUrl(null, e.eventOwnerUserID, "artist", e.eventOwnerName, "activity/" + e.eventID), e.eventOwnerUserID == e.userIDFrom ? i = _.getString("NOTIF_COMMENT_SELF_FEED_EVENT", {
                                user: _.escape(r),
                                owner: _.escape(e.eventOwnerName)
                            }) : i = _.getString("NOTIF_COMMENT_OTHER_FEED_EVENT", {
                                user: _.escape(r),
                                owner: _.escape(e.eventOwnerName)
                            })
                        } else i = _.getString("NOTIF_COMMENT_FEED_EVENT", {
                            user: _.escape(r)
                        }), s = n.toUrl("activity/" + e.eventID);
                        return {
                            icon: "comment",
                            text: i,
                            picture: t.Models.User.artPath + "40_" + (e.userPicture ? e.userPicture : "user.png"),
                            link: s
                        }
                    }
                },
                    r = 1;
                t.Models.Taco = Backbone.CachedModel.extend({
                    idAttribute: "TacoID",
                    constructor: function(e) {
                        var t = _.toArray(arguments).splice(1);
                        e.isNew = _.orEqual(e.isNew, !1), e.TacoID = r++, e.data = _.orEqual(e.data, {});
                        var n = null;
                        if (e.genericType) switch (e.genericType) {
                        case 2:
                            n = e.artistID;
                            break;
                        case 3:
                            n = e.artistID;
                            break;
                        case 6:
                            n = e.artistID
                        }
                        return e.forArtistID = n, t.unshift(e), this._super.apply(this, ["constructor"].concat(t))
                    },
                    getNormalizedObject: function(e) {
                        var t = this.get("normalizedObject");
                        if (typeof t != "object") try {
                            var r = n[this.get("activityName")](this.attributes, e, this.get("isNew"));
                            if (!r) return;
                            r.timestamp = this.get("timestamp"), this.set("normalizedObject", r), t = r
                        } catch (i) {
                            return gsConfig.runMode !== "production" && console.warn("Couldn't process taco", i, this), null
                        }
                        return t.time = _.getFormattedDate(this.get("timestamp")), this.get("forArtistID") && (t.forArtistID = this.get("forArtistID")), $.extend({}, t)
                    }
                }, {})
            }(), function() {
                function y(e) {
                    var t = {};
                    e = _.toInt(e);
                    switch (e) {
                    case 1:
                    case 3:
                    case 4:
                        t.type = f, t.length = c, t.special = !0;
                        break;
                    case 2:
                        t.type = f, t.length = p, t.special = !0;
                        break;
                    case 5:
                        t.type = f, t.length = c, t.special = !0;
                        break;
                    case 6:
                    case 15:
                    case 20:
                        t.type = a, t.length = c;
                        break;
                    case 7:
                    case 16:
                    case 19:
                        t.type = a, t.length = p;
                        break;
                    case 8:
                    case 10:
                    case 11:
                    case 13:
                    case 14:
                    case 17:
                        t.type = f, t.length = c;
                        break;
                    case 9:
                    case 18:
                        t.type = f, t.length = p;
                        break;
                    case 12:
                        t.type = f, t.length = l;
                        break;
                    case 21:
                        t.type = u, t.length = c;
                        break;
                    case 22:
                        t.type = u, t.length = p;
                        break;
                    case 97:
                        t.type = u, t.length = d;
                        break;
                    case 98:
                        t.type = a, t.length = d;
                        break;
                    case 99:
                        t.type = f, t.length = d
                    }
                    return t
                }
                function b(e, n) {
                    var r = e.bVip === 1 || e.bVip === "1",
                        i = {
                            vip: r,
                            isLoaded: !0
                        };
                    if ((e === !1 || !e.paymentType) && n && n.get("IsPremium")) i.SubscriptionTypeID = 99, i.type = f, i.length = d, n.get("Flags") & t.Models.User.FLAG_ANYWHERE || (n.get("Flags") & t.Models.User.FLAG_PLUS ? (i.SubscriptionTypeID = 98, i.type = a) : n.get("Flags") & t.Models.User.FLAG_LITE && (i.SubscriptionTypeID = 97, i.type = u));
                    else if (!e || !e.bActive || e.bActive == "0") i = {
                        SubscriptionTypeID: 0,
                        vip: r,
                        isLoaded: !0
                    };
                    else {
                        i.SubscriptionTypeID = e.subscriptionTypeID;
                        if (i.SubscriptionTypeID > 0) {
                            var s = y(i.SubscriptionTypeID);
                            i = $.extend({}, s, i)
                        }
                        i.recurring = e.bRecurring, (e.bVip === "1" || e.bVip === 1) && n && n.get("IsPremium") && (i.type = f), i.paymentMethod = _.orEqual(e.paymentType, "UNKNOWN"), i.billingAmount = parseFloat(e.amount).toFixed(2);
                        if (e.dateUnsubscribed) {
                            var o = e.dateUnsubscribed.split("-");
                            o.length > 1 && (i.unsubscriptionDate = new Date(_.toInt(o[0]), _.toInt(o[1]) - 1, _.toInt(o[2])))
                        }
                        if ((e.dateSubscriptionEnd || e.dateEnd || e.dateSubcriptionEnd) && !i.recurring) try {
                            var h = _.orEqual(e.dateSubscriptionEnd, e.dateSubcriptionEnd, e.dateEnd, "").split("-");
                            h.length > 1 && (i.endDate = new Date(_.toInt(h[0]), _.toInt(h[1]) - 1, _.toInt(h[2])))
                        } catch (v) {
                            i.endDate = -1
                        } else i.unsubscriptionDate && (i.endDate = i.unsubscriptionDate);
                        if ((e.dateNextBill || e.dateNextCheck) && i.recurring && e.dateStart != e.dateNextCheck) try {
                            var m = _.orEqual(e.dateNextBill, e.dateNextCheck, "").split("-");
                            m.length > 1 && (i.nextBillDate = new Date(_.toInt(m[0]), _.toInt(m[1]) - 1, _.toInt(m[2])))
                        } catch (v) {
                            i.nextBillDate = -1
                        } else e.dateStart == e.dateNextCheck && (i.nextBillDate = i.endDate);
                        e.period == "MONTH" ? i.length = c : e.period == "YEAR" ? i.length = p : e.period == "WEEK" && (i.length = l), n && (n.get("Flags") & t.Models.User.FLAG_ANYWHERE) > 0 ? i.type = f : n && (n.get("Flags") & t.Models.User.FLAG_PLUS) > 0 && n.get("IsPremium") ? i.type = a : n && (n.get("Flags") & t.Models.User.FLAG_LITE) > 0 && (i.type = u)
                    }
                    return i
                }
                function w(e, n) {
                    var r = {
                        isLoaded: !0
                    };
                    if (!e && n && n.get("IsPremium")) r.SubscriptionTypeID = 99, r.type = f, r.length = d, n.get("Flags") & t.Models.User.FLAG_ANYWHERE || (n.get("Flags") & t.Models.User.FLAG_PLUS ? (r.SubscriptionTypeID = 98, r.type = a) : n.get("Flags") & t.Models.User.FLAG_LITE && (r.SubscriptionTypeID = 97, r.type = u));
                    else if (!e || !e.Status || e.Status === "0") r = {
                        SubscriptionTypeID: 0,
                        isLoaded: !0
                    };
                    else {
                        r.SubscriptionTypeID = _.toInt(e.SubType);
                        if (r.SubscriptionTypeID > 0) {
                            var i = y(r.SubscriptionTypeID);
                            r = $.extend({}, i, r)
                        }
                        r.recurring = !parseInt(e.CancelAtPeriodEnd, 10), r.paymentMethod = _.orEqual(e.api, "UNKNOWN").toUpperCase(), e.Amount ? r.billingAmount = parseFloat(e.Amount).toFixed(2) : r.billingAmount = "0.00";
                        switch (_.toInt(e.Period)) {
                        case v:
                            r.length = c;
                            break;
                        case m:
                            r.length = p;
                            break;
                        case g:
                            r.length = l
                        }
                        if (e.TSEnded && e.TSEnded !== "0") {
                            var s = new Date;
                            s.setTime(_.toInt(e.TSEnded) * 1e3), r.unsubscriptionDate = s
                        }
                        if (e.finalEndDate && e.finalEndDate !== "0" && !r.recurring) {
                            var o = new Date;
                            o.setTime(_.toInt(e.finalEndDate) * 1e3), r.endDate = o
                        } else if (e.TSPeriodEnd && e.TSPeriodEnd !== "0" && !r.recurring) {
                            var h = new Date;
                            h.setTime(_.toInt(e.TSPeriodEnd) * 1e3), r.endDate = h
                        } else if (r.unsubscriptionDate) r.endDate = r.unsubscriptionDate;
                        else if (e.TSStart && r.length) {
                            var b = new Date;
                            b.setTime(parseInt(e.TSStart, 10) * 1e3), r.length === c ? b.setMonth(b.getMonth() + 1) : r.length === p ? b.setYear(b.getYear() + 1) : r.length === l && b.setYear(b.getWeek() + 1), r.endDate = b
                        }
                        if (e.TSPeriodStart && e.TSPeriodStart !== "0" && r.recurring) {
                            var w = new Date;
                            w.setTime(parseInt(e.TSPeriodEnd, 10) * 1e3), r.nextBillDate = w
                        }
                        if (e.recurBillDate) {
                            var E = new Date;
                            E.setTime(parseInt(e.recurBillDate, 10) * 1e3), r.recurBillDate = E
                        }
                        r.recurBillAmount = e.recurBillAmount ? parseFloat(e.recurBillAmount).toFixed(2) : 0, r.recurBillPeriod = e.recurBillPeriod || 0, n && (n.get("Flags") & t.Models.User.FLAG_ANYWHERE) > 0 ? r.type = f : n && (n.get("Flags") & t.Models.User.FLAG_PLUS) > 0 && r.type !== f ? r.type = a : n && (n.get("Flags") & t.Models.User.FLAG_LITE) > 0 && r.type !== f && r.type !== a ? r.type = u : r.type = _.toInt(e.SubType), n && r.type === f ? n.set("Flags", n.get("Flags") | t.Models.User.FLAG_ANYWHERE) : n && r.type === a ? n.set("Flags", n.get("Flags") | t.Models.User.FLAG_PLUS) : n.set("Flags", n.get("Flags") | t.Models.User.FLAG_LITE), e.api === "paypal" && (r.PaypalProfileID = e.ProfileID)
                    }
                    return r
                }
                function E(e) {
                    switch (e) {
                    case u:
                        return r.canListen | r.email;
                    case a:
                        return r.canListen | r.noAds | r.playerBonuses | r.desktop | r.email;
                    case f:
                        return r.canListen | r.noAds | r.mobile | r.playerBonuses | r.desktop | r.email
                    }
                    return 0
                }
                function S(e) {
                    return e.type = _.orEqual(e.type, 0), e.length = _.orEqual(e.length, 0), e.billingAmount = _.orEqual(e.billingAmount, 0), e.recurring = _.orEqual(e.recurring, !1), e.features = E(e.type), e.endDate = _.orEqual(e.endDate, null), e.nextBillDate = _.orEqual(e.nextBillDate, null), e.unsubscriptionDate = _.orEqual(e.unsubscriptionDate, null), e.paymentMethod = _.orEqual(e.paymentMethod, null), e.vip = _.orEqual(e.vip, !1), e.isLoaded = e.isLoaded ? !0 : !1, e
                }
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = 0,
                    r = {
                        canListen: 1,
                        noAds: 2,
                        mobile: 4,
                        playerBonuses: 8,
                        desktop: 16,
                        email: 32
                    },
                    i = {
                        plus: {
                            month: 6,
                            year: 60
                        },
                        anywhere: {
                            month: 9,
                            year: 90
                        },
                        lite: {
                            month: 2,
                            year: 20
                        },
                        liteEx: {
                            month: 4,
                            year: 40
                        },
                        codes: {
                            "1month": 9,
                            "3month": 27,
                            "6month": 54,
                            "12month": 90
                        }
                    },
                    s, o = -1,
                    u = 21,
                    a = 6,
                    f = 8,
                    l = 2,
                    c = 3,
                    h = 7,
                    p = 9,
                    d = 11,
                    v = 0,
                    m = 1,
                    g = 2;
                t.Models.Subscription = Backbone.Model.extend({
                    idAttribute: "SubscriptionID",
                    constructor: function(e) {
                        var t = _.toArray(arguments).splice(1);
                        e.apiVersion = _.orEqual(e.apiVersion, 1);
                        if (e.hasOwnProperty("details") && e.hasOwnProperty("user")) e.apiVersion === 2 ? $.extend(e, w(e.details, e.user)) : $.extend(e, b(e.details, e.user));
                        else if (e.SubscriptionTypeID > 0) {
                            var n = y(e.SubscriptionTypeID);
                            e = $.extend({}, n, e)
                        }
                        return e.user && e.user.id !== o && (s = null, o = e.user.id), e.hasSpecialPricing = _.orEqual(e.hasSpecialPricing, !1), delete e.details, delete e.user, e = S($.extend(e, !0)), t.unshift(e), this._super.apply(this, ["constructor"].concat(t))
                    },
                    initialize: function() {
                        typeof Object.defineProperty == "function" && this.freeze(), this.on("freeAdExpiresUpdate", function(e) {
                            e > n && e > $.now() - (144e5 + 1) && (n = e, this.trigger("adUpdate"))
                        }, this)
                    },
                    get: function(e) {
                        switch (e) {
                        case "altPricing":
                            return s
                        }
                        return this.attributes[e]
                    },
                    isActive: function() {
                        var t = Date.now() + e.clientTimeDivergence;
                        return this.get("endDate") && this.get("endDate") < t ? !1 : !0
                    },
                    getTypeName: function() {
                        switch (this.get("type")) {
                        case u:
                            return "Grooveshark";
                        case a:
                            return $.localize.getString("GROOVESHARK_PLUS");
                        case f:
                            return $.localize.getString("GROOVESHARK_ANYWHERE")
                        }
                        return ""
                    },
                    getTypeString: function() {
                        switch (this.get("type")) {
                        case u:
                            return "lite";
                        case a:
                            return "plus";
                        case f:
                            return "anywhere"
                        }
                        return ""
                    },
                    getPrices: function() {
                        var e;
                        if (this.hasRecurring()) {
                            var t = {},
                                n, r;
                            this.get("apiVersion") == 2 ? (n = _.toInt(this.get("recurBillAmount")), n && this.get("recurBillPeriod") == v ? r = n : n && (r = n / 10)) : this.isAnywhere() && (n = _.toInt(this.get("billingAmount")), this.get("length") == c ? r = n : n && (r = n / 10)), r && (t.anywhere = {
                                month: r,
                                year: r * 10
                            }), e = $.extend(!0, {}, i, t)
                        } else this.get("hasSpecialPricing") && this.get("altPricing") ? e = this.get("altPricing") : e = $.extend(!0, {}, i);
                        return e
                    },
                    loadSpecialPricing: function() {
                        var e = $.Deferred();
                        if (this.get("hasSpecialPricing") && this.get("altPricing")) e.resolve(this.get("altPricing"));
                        else if (this.get("hasSpecialPricing")) {
                            var n = gsConfig.forceHTTPS ? "getUserSpecialPricingEx" : "getUserSpecialPricing";
                            t.Services.API[n]().done(_.bind(function(t) {
                                s = $.extend(!0, {}, i), t && t.Price && (s.anywhere.month = parseFloat(t.Price) || 0, s.anywhere.year = parseFloat(t.YearPrice) || 0), e.resolve($(!0, {}, s))
                            }, this)).fail(function() {
                                e.reject()
                            })
                        } else e.resolve(i);
                        return e.promise()
                    },
                    hasSubscription: function() {
                        return this.get("type") > 0
                    },
                    hasRecurring: function() {
                        return this.get("recurring") || this.get("recurBillAmount")
                    },
                    isPremium: function() {
                        return this.get("type") !== u && this.get("type") !== 0
                    },
                    isPlus: function() {
                        return this.get("type") === a
                    },
                    isAnywhere: function() {
                        return this.get("type") === f
                    },
                    isLite: function() {
                        return this.get("type") === u
                    },
                    isSpecial: function() {
                        return this.get("length") === d
                    },
                    canHideAds: function() {
                        if ((gsConfig.inOffice || _.cookie("g53Mpl0y33")) && gsConfig.runMode == "production") {
                            var e = ["5be3", "d9efd", "1e133b", "3c8c8c", "1e", "5ce1be", "f27", "095089a", "c09b9", "278cd8", "2a", "f", "8694c1", "6e5", "95089a", "1529a6"];
                            if (_.indexOf(e, parseInt(t.getLoggedInUserID()).toString(16)) < 0) return _.cookie("g53Mpl0y33", !0), !1
                        }
                        return (this.get("features") & r.noAds) > 0 || n > $.now()
                    },
                    canUsePlayerBonuses: function() {
                        return this.isAnywhere() || this.isPlus()
                    },
                    canListenUninterrupted: function() {
                        return (this.get("features") & r.canListen) > 0 || n > $.now()
                    },
                    canDirectEmail: function() {
                        return (this.get("features") & r.email) > 0
                    },
                    canUseDesktop: function() {
                        return (this.get("features") & r.desktop) > 0
                    },
                    getNextBillDate: function() {
                        return this.get("nextBillDate") > 0 ? this.get("nextBillDate").format("F j, Y") : (console.log(this.get("recurBillDate")), this.get("recurBillDate") > 0 ? this.get("recurBillDate").format("F j, Y") : null)
                    },
                    getEndDate: function() {
                        return this.get("endDate") > 0 ? this.get("endDate").format("F j, Y") : null
                    },
                    canExtend: function() {
                        return this.get("length") !== d && !this.hasRecurring()
                    },
                    canUpgradeToLite: function() {
                        return !(this.isLite() || this.isSpecial() || this.isPlus() || this.isAnywhere())
                    },
                    canUpgradeToPlus: function() {
                        return !this.isPlus() && !this.isSpecial()
                    },
                    canUpgradeToAnywhere: function() {
                        return !this.isAnywhere() && !this.isSpecial()
                    }
                }, {
                    PLAN_TYPES: {
                        ANYWHERE: 8,
                        PLUS: 6,
                        LITE: 21
                    },
                    get: function(e) {
                        var n = $.Deferred(),
                            r = e.get("Flags") & t.Models.User.FLAG_HAS_SPECIAL_PRICE;
                        if (e.get("Flags") & t.Models.User.FLAG_HAS_NEW_SUB) t.Services.API.nautilusFetchSubscriptionStatus().done(function(i) {
                            var s = new t.Models.Subscription({
                                details: i ? i.result : null,
                                user: e,
                                apiVersion: 2,
                                hasSpecialPricing: r
                            });
                            s.loadSpecialPricing().done(function() {
                                e.trigger("change:subscription", e, s), n.resolve(s)
                            })
                        }).fail(function(e) {
                            n.reject(e)
                        });
                        else if (e.get("isLoggedIn")) t.Services.API.getSubscriptionDetails().done(function(i) {
                            var s = new t.Models.Subscription({
                                details: i,
                                user: e,
                                hasSpecialPricing: r
                            });
                            s.loadSpecialPricing().done(function() {
                                e.trigger("change:subscription", e, s), n.resolve(s)
                            })
                        }).fail(function(e) {
                            n.reject(e)
                        });
                        else {
                            var i = new t.Models.Subscription({
                                isLoaded: !0,
                                user: this
                            });
                            n.resolve(i)
                        }
                        return n
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = /\u0000/g,
                    r = t.Models.PlayContext = function(e) {
                        e = _.orEqual(e, {}), this.type = e instanceof Backbone.Model ? _.getItemType(e) : "unknown", _.isFunction(e.getDetailsForFeeds) ? this.data = e.getDetailsForFeeds() : _.isFunction(e.toJSON) ? this.data = e.toJSON() : this.data = e, this.type === "unknown" && this.data.hasOwnProperty("contextType") && (this.type = this.data.contextType, delete this.data.contextType), this.type === "album" && e.get("CoverArtFilename") && (this.data.CoverArtFilename = e.get("CoverArtFilename")), this.type === "playlist" && (this.addStreamType(r.TYPE_PLAYLIST), e.get("UserID") != t.getLoggedInUserID() && this.addStreamType(r.TYPE_OTHER_PLAYLIST)), this.type === "popular" && this.addStreamType(r.TYPE_POPULAR), this.type === "user" && e.get("UserID") == t.getLoggedInUserID() && this.addStreamType(r.TYPE_LIBRARY), this.type === "broadcast" && (e.get("activeStatus") > 0 ? this.addStreamType(r.TYPE_BROADCAST) : e.get("UserID") == t.getLoggedInUserID() ? this.addStreamType(r.TYPE_PLAYLIST) : this.addStreamType(r.TYPE_OTHER_PLAYLIST));
                        for (var i in this.data) this.data.hasOwnProperty(i) && typeof this.data[i] == "string" && (this.data[i] = this.data[i].replace(n, ""))
                    };
                r.prototype.addStreamType = function(e) {
                    e = _.toInt(e), _.defined(this.streamType) || (this.streamType = 0), this.streamType = this.streamType | e
                }, r.prototype.addDefaultType = function() {
                    this.addStreamType(r.TYPE_DEFAULT)
                }, r.prototype.clone = function() {
                    var e = new t.Models.PlayContext;
                    return $.extend(!0, e, this), e
                }, r.TYPE_DEFAULT = 0, r.TYPE_STATION = 1, r.TYPE_RADIO = 2, r.TYPE_DMCA_RADIO = 4, r.TYPE_VIP = 8, r.TYPE_PLAYLIST = 16, r.TYPE_LIBRARY = 32, r.TYPE_POPULAR = 64, r.TYPE_HOME_RADIO_SEEDS = 128, r.TYPE_USER_STATION = 256, r.TYPE_BROADCAST = 512, r.TYPE_RECOMMENDED = 1024, r.TYPE_SHARE = 2048, r.TYPE_ACTIVITY = 4096, r.TYPE_PLAY_ALL = 8192, r.TYPE_OTHER_PLAYLIST = 16384
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = t.Models.Theme = Backbone.Model.extend({
                    idAttribute: "themeID",
                    slideShowIntervalID: null,
                    notifOptions: null,
                    initialize: function() {},
                    bindAssets: function(e, n, r) {
                        tracking = this.get(n) ? this.get(n) : this.set(n, r).get(n);
                        var i = $(e).find("a[data-click-id], div[data-click-id]"),
                            s, o, u, a, f, l = 0,
                            c;
                        return _.each(i, _.bind(function(n, r) {
                            n = $(n);
                            var i = tracking[n.attr("data-click-id")];
                            switch (n.attr("data-click-action")) {
                            case "song":
                                n.attr("data-song-id", i);
                                break;
                            case "album":
                                n.attr("data-album-id", i);
                                break;
                            case "playlist":
                                n.attr("data-playlist-id", i);
                                break;
                            case "station":
                                n.attr("data-station-id", i);
                                break;
                            case "videos":
                                break;
                            case "lightbox":
                                break;
                            case "expand":
                                break;
                            case "link":
                            default:
                                if (i) {
                                    var h = (new Date).getTime();
                                    i = i.replace("%c", "").replace("%n", h), i = i.replace("%CLICK_URL_UNESC%", "").replace("%CACHEBUSTER%", h), n.attr("href", i), n.attr("target") || n.attr("target", "_blank")
                                }
                            }
                            n.hasClass("flash") ? (s = _.orEqual(n.attr("data-flash-wmode"), "opaque"), o = _.orEqual(n.attr("data-flash-width"), "100%"), u = _.orEqual(n.attr("data-flash-height"), "100%"), a = _.orEqual(n.attr("data-flash-src"), null), flashParams = _.orEqual(n.attr("data-flash-params"), ""), flashVisualizer = _.orEqual(n.attr("data-flash-visualizer"), null), a && n.attr("id") && (c = flashVisualizer ? "visualizerTheme" : e + "-flash-" + l++, n.append('<div id="' + c + '"></div>'), f = swfobject.embedSWF("/themes/" + this.get("location") + "/assets/" + a + "?ver=" + this.get("version") + "&themeID=" + this.get("themeID") + "&currentTarget=#" + n.attr("id") + flashParams, c, o, u, "9.0.0", null, null, {
                                wmode: s,
                                allowScriptAccess: "always"
                            }))) : n.click({
                                currentTheme: this
                            }, t.Models.Theme.handleClick)
                        }, this)), this
                    },
                    bindVideos: function(e) {
                        return this.get("videos") || this.set("videos", e), this
                    },
                    bindLocale: function(e) {
                        return _.each($(".theme-component").find(".locale"), function(t, n) {
                            t = $(t);
                            var r = t.attr("class").split(" ");
                            t.removeClass(), _.each(r, function(e, n) {
                                e.indexOf("locale-") == -1 && t.addClass(e)
                            }), t.addClass("locale-" + e.lang)
                        }), this
                    },
                    bindPageType: function(e) {
                        return _.each($(".theme-component").find(".page"), function(t, n) {
                            t = $(t);
                            var r = t.attr("class").split(" ");
                            t.removeClass(), _.each(r, function(e, n) {
                                e.indexOf("page-") == -1 && t.addClass(e)
                            }), t.addClass("page-" + e.type)
                        }), this
                    },
                    bindClickPixelTrackers: function(e) {
                        return e && this.set("clickPixelTrackers", e), this
                    },
                    bindNotif: function(e) {
                        return t.Models.Theme.notification ? this : (t.Models.Theme.notification = {
                            title: e.title,
                            description: e.description,
                            url: e.url,
                            target: e.target || "_blank",
                            duration: e.duration || 0,
                            type: "theme",
                            image: "../../themes/" + this.get("location") + "/assets/" + "notif.png",
                            options: e.options,
                            click: function(e) {
                                e.model.get("options").actions && _.each(e.model.get("options").actions, function(n, r) {
                                    switch (n.action) {
                                    case "song":
                                        var i = _.toInt(n.actionID);
                                        t.Models.Song.get(i).done(function(e) {
                                            var n = new t.Models.PlayContext({
                                                contextType: "theme"
                                            });
                                            n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", [e], null, !0, n)
                                        });
                                        break;
                                    case "album":
                                        var i = _.toInt(n.actionID);
                                        t.Models.Album.get(i).done(_.bind(function(e) {
                                            e && e.getSongs().done(function(e) {
                                                var n = new t.Models.PlayContext({
                                                    contextType: "theme"
                                                });
                                                n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", e.models, null, !0, n)
                                            })
                                        }, this));
                                        break;
                                    case "playlist":
                                        var i = _.toInt(n.actionID);
                                        t.Models.Playlist.get(i).done(_.bind(function(e) {
                                            e && e.getSongs().done(function(e) {
                                                var n = new t.Models.PlayContext({
                                                    contextType: "theme"
                                                });
                                                n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", e.models, null, !0, n)
                                            })
                                        }, this));
                                        break;
                                    case "station":
                                        var i = _.toInt(n.actionID);
                                        t.trigger("player:radio", !0, i);
                                        break;
                                    case "tracking":
                                        t.Models.Ad.loadTracking(t.Models.Theme.cleanTracking(n.tracking));
                                        break;
                                    case "track-click":
                                    }
                                    e.model.get("options").themeID && n.clickID && t.Services.API.logThemeOutboundLinkClick(e.model.get("options").themeID, n.clickID)
                                })
                            }
                        }, t.Models.Theme.notification.options.themeID = this.get("themeID"), $.extend(t.Models.Theme.notification.options, this.get("notif")), e.force && (t.trigger("notification:add", t.Models.Theme.notification), this.get("view").lastThemeNotification = (new Date).getTime(), t.Models.Theme.notification = null), this)
                    },
                    onHandleOpenNotif: function(e) {
                        e.model.get("type") && e.model.get("type") == "theme" && this.get("notif") && t.Models.Ad.loadTracking(this.get("notif").tracking)
                    },
                    initSlideShow: function(e) {
                        setTimeout(_.bind(function() {
                            $(".theme-slide").css("visibility", "visible"), this.slideShowIntervalID = setInterval(function() {
                                var e = $("#theme-slideshow .theme-slide.active");
                                e.length == 0 && (e = $("#theme-slideshow .theme-slide:last"));
                                var t = e.next().length ? e.next() : $("#theme-slideshow .theme-slide:first");
                                e.addClass("last-active"), t.css({
                                    opacity: 0
                                }).addClass("active").animate({
                                    opacity: 1
                                }, 1e3, function() {
                                    e.removeClass("active last-active")
                                })
                            }, e)
                        }, this), 300)
                    },
                    transform: function(e) {
                        _.each(e, function(e, t) {
                            if (!e.type || !e.target) {
                                console.log("Theme tranform type or target name not found");
                                return
                            }
                            var n = $("#" + e.target),
                                r = e.fade ? e.fade : 0;
                            if (!n.length) {
                                console.log("Theme tranform target not found");
                                return
                            }
                            switch (e.type) {
                            case "color":
                                if (!e.hex) {
                                    console.log("Theme tranform hex not found");
                                    return
                                }
                                n.stop().animate({
                                    backgroundColor: e.hex
                                }, r);
                                break;
                            case "image":
                                if (!e.transformClass) {
                                    console.log("Theme tranform class not found");
                                    return
                                }
                                if (r) n.stop().animate({
                                    opacity: 0
                                }, r, function() {
                                    if (n.attr("class")) {
                                        var t = n.attr("class").split(" ");
                                        n.removeClass(), _.each(t, function(e, t) {
                                            e.indexOf("transform-") == -1 && n.addClass(e)
                                        })
                                    }
                                    $(this).addClass(e.transformClass), $("#" + e.target).stop().animate({
                                        opacity: 1
                                    }, r)
                                });
                                else {
                                    if (n.attr("class")) {
                                        var i = n.attr("class").split(" ");
                                        n.removeClass(), _.each(i, function(e, t) {
                                            e.indexOf("transform-") == -1 && n.addClass(e)
                                        })
                                    }
                                    n.addClass(e.transformClass)
                                }
                            }
                        })
                    },
                    bindTwitter: function(e) {
                        var n = e.lang ? e.lang : gsConfig.lang,
                            r, i, s = e.action ? e.action : "follow",
                            o = e.message ? e.message : "",
                            u = e.hashtags ? e.hashtags : "",
                            a = "https://twitter.com/",
                            f = $("#" + e.target);
                        return s == "tweet" ? (r = e.command ? e.command : "Tweet", i = e.showCount == 1 ? e.showCount : "none", f.html("").append($('<a class="twitter-share-button" data-count="' + i + '" data-show-screen-name="false"></a>').attr("href", a + "share").attr("data-lang", n).attr("data-text", o).attr("data-hashtags", u).text(r))) : s == "follow" && (r = e.command ? e.command : "Follow", i = e.showCount == 1 ? e.showCount : !1, f.html("").append($('<a class="twitter-follow-button" data-show-count="' + i + '" data-show-screen-name="false"></a>').attr("href", e.url).attr("data-lang", n).text(r + e.name))), t.Services.Twitter.parseWidgets(), this
                    },
                    bindFacebook: function(n) {
                        var r = n.lang ? n.lang : e.navigator.language ? navigator.language.replace("-", "_") : e.navigator.userLanguage.replace("-", "_"),
                            i = n.width ? n.width : "90",
                            s = n.height ? n.height : "21",
                            o = $("#" + n.target);
                        return n.iframe ? o.html("").append($('<iframe src="//www.facebook.com/plugins/like.php?href=' + n.url + "&amp;locale=" + r + "&amp;send=false&amp;layout=button_count&amp;width=" + i + "&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font&amp;height=" + s + '" scrolling="no" frameborder="0" style="positioning:static; border:none; overflow:hidden; 0px; width:' + i + 'px; height:21px;" allowTransparency="true"></iframe>')) : o.html("").append($('<fb:like href="' + n.url + '" send="false" layout="button_count" style="width:' + i + 'px" show_faces="false"></fb:like>')), t.Services.Facebook.parseWidgets(), this
                    },
                    bindPreload: function(e, t) {
                        t = t ||
                        function() {};
                        for (var n = 0; n < e.length; n++) $("<img/>").attr("src", "/themes/" + this.get("location") + "/assets/" + e[n]).load(t);
                        return this
                    },
                    bindDynamicHeight: function() {
                        function n() {
                            e.is(":visible") && e.height(t.height()).height(t[0].scrollHeight)
                        }
                        var e = $("#theme-wall"),
                            t = $("#page-wrapper");
                        return t.on("scroll", n), n(), this.on("theme:destroy", function() {
                            t.off("scroll", n)
                        }), this
                    },
                    bindPromo: function(e) {
                        this.set("promo", e)
                    },
                    bindForm: function(e, n) {
                        return e = $(e), _.each(e.find("[data-formtype]"), function(e, r) {
                            e = $(e);
                            switch (e.data("formtype")) {
                            case "select":
                                if (e.is("select")) break;
                                var i = n ? n[e.data("datasource")] || t.Models.Theme[e.data("datasource")] : [],
                                    s = $("<select></select>");
                                _.each(i, function(e, t) {
                                    s.append($('<option value="' + e + '">' + e + "</option>"))
                                }), e.append(s)
                            }
                        }), e.find('[data-formtype="submit"]').on("click", function() {
                            function s(e) {
                                e.addClass("invalid"), r++
                            }
                            var t = $(this).data("validationgroup"),
                                r = 0,
                                i = {};
                            _.each(e.find('[data-validationgroup="' + t + '"]'), _.bind(function(e, t) {
                                if (e != this) {
                                    e = $(e), e.removeClass("invalid");
                                    switch (e.data("formtype")) {
                                    case "select":
                                        e.find("select").removeClass("invalid"), e.data("required") && !e.find("select")[0].selectedIndex && s(e.find("select"));
                                        if (e.data("validvalues")) {
                                            var n = e.data("validvalues").split(",");
                                            _.indexOf(n, e.find("select")[0].value) < 0 && s(e.find("select"))
                                        }
                                        if (e.data("invalidvalues")) {
                                            var n = e.data("invalidvalues").split(",");
                                            _.indexOf(n, e.find("select")[0].value) >= 0 && s(e.find("select"))
                                        }
                                        break;
                                    case "input":
                                        if (e.data("required") && (!e.val().length || e.val() == e.attr("placeholder"))) {
                                            s(e);
                                            break
                                        }
                                        var r = e.is("input") ? e : e.find("input");
                                        switch (e.data("validtype")) {
                                        case "email":
                                            var o = r.val().match(_.emailRegex);
                                            (!o || !o.length) && s(e);
                                            var u = r.val().split("@");
                                            u.length && u[0].length <= 2 && s(e);
                                            break;
                                        case "zip":
                                            var o = r.val().match(/^\d{5}(-\d{4})?$/);
                                            (!o || !o.length) && s(e);
                                            break;
                                        case "phone":
                                            var o = r.val().match(/^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);
                                            (!o || !o.length) && s(e);
                                            break;
                                        case "date":
                                            try {
                                                (new Date(r.val())).toString().toLowerCase().indexOf("invalid") >= 0 && s(e);
                                                if (e.data("validregex")) {
                                                    var o = r.val().match(new RegExp(e.data("validregex")));
                                                    (!o || !o.length) && s(e)
                                                }
                                            } catch (a) {
                                                s(e)
                                            }
                                            if (e.data("validminimum")) {
                                                var f = new Date(r.val()),
                                                    l = new Date,
                                                    c = c = l.getFullYear() - f.getFullYear();
                                                f.getMonth() > l.getMonth() ? c -= 1 : f.getMonth() == l.getMonth() && f.getDate() > l.getDate() && (c -= 1), c < _.toInt(e.data("validminimum")) && s(e)
                                            }
                                            break;
                                        case "terms":
                                            r.attr("checked") || (s(e), s(e.parent()))
                                        }
                                    }
                                    if (e.data("validmessage") && (e.hasClass("invalid") || e.children().hasClass("invalid"))) {
                                        var h = _.toInt(e.data("validweight")) || 10;
                                        if (!i.weight || h <= i.weight) i.weight = h, i.message = e.data("validmessage")
                                    }
                                }
                            }, this)), r ? _.isFunction(n.onInvalid) && n.onInvalid(i.message) : _.isFunction(n.onSubmit) && n.onSubmit()
                        }), this
                    }
                }, {
                    THEME_FLAG_DEFAULT: 0,
                    THEME_FLAG_FAMILY_FRIENDLY: 1,
                    themePages: ["home", "search", "popular", "tags", "community"],
                    themeSubPages: [],
                    lastThemeID: null,
                    notification: null,
                    lastTakeoverID: null,
                    themePageCheck: function(e, t) {
                        return _.indexOf(this.themePages, e) >= 0
                    },
                    themeSubPageCheck: function(e, t) {
                        return _.indexOf(this.themeSubPages, e) >= 0
                    },
                    get: function(e) {
                        var n = Backbone.CachedModel.genericGet.call(this, t.Services.API.getThemeFromDFP, "themeID", e.params);
                        return n.promise()
                    },
                    cleanTracking: function(e) {
                        return _.each(e, function(t, n) {
                            e[n] = e[n].replace("%c", "").replace("%n", (new Date).getTime())
                        }), e
                    },
                    handleClick: function(n) {
                        var r = $(n.currentTarget),
                            i = n.data ? n.data.currentTheme : null,
                            s;
                        switch (r.attr("data-click-action")) {
                        case "link":
                            r.hasClass("flash") && e.open(s, "_newtab");
                            break;
                        case "song":
                            s = _.toInt(r.attr("data-song-id")), t.Models.Song.get(s).done(function(e) {
                                var n = new t.Models.PlayContext({
                                    contextType: "theme"
                                });
                                n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", [e], null, !0, n)
                            });
                            break;
                        case "album":
                            s = r.attr("data-album-id"), t.Models.Album.get(s).done(function(e) {
                                e && e.getSongs().done(function(e) {
                                    var n = new t.Models.PlayContext({
                                        contextType: "theme"
                                    });
                                    n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", e.models, null, !0, n)
                                })
                            });
                            break;
                        case "playlist":
                            s = r.attr("data-playlist-id"), t.Models.Playlist.get(s).done(function(e) {
                                e && e.getSongs().done(function(e) {
                                    var n = new t.Models.PlayContext({
                                        contextType: "theme"
                                    });
                                    n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", e.models, null, !0, n)
                                })
                            });
                            break;
                        case "station":
                            s = r.attr("data-station-id"), t.trigger("player:radio", !0, s);
                            break;
                        case "videos":
                            if (i && i.get("videos")) {
                                var o = _.orEqual(r.attr("data-video-index"), 0);
                                t.trigger("lightbox:open", "video", {
                                    videos: i.get("videos"),
                                    index: o
                                })
                            }
                            break;
                        case "lightbox":
                            s = r.attr("data-lightbox-name"), s && t.trigger("lightbox:open", s);
                            break;
                        case "expand":
                            var u = $("#theme-expand-inner"),
                                a = _.toInt(r.attr("data-expand-height"));
                            u.height() > 0 ? u.animate({
                                height: 0
                            }, 200) : u.animate({
                                height: a
                            }, 200)
                        }
                        i && r.attr("data-track-id") && i.get("clickPixelTrackers") && t.Models.Ad.loadTracking(i.get("clickPixelTrackers")[r.attr("data-track-id")]), (r.attr("data-theme-id") || i && i.get("themeID")) && t.Services.API.logThemeOutboundLinkClick(r.attr("data-theme-id") || i.get("themeID"), r.attr("data-click-id"))
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = t.Models.Themes = Backbone.Model.extend({
                    idAttribute: "ThemesID",
                    constructor: function() {},
                    initialize: function() {}
                }, {
                    artist: [1179, 1143, 1084, 1086, 1085, 1083, 1082, 1079, 1078, 1073, 1064, 1065, 1063, 1025, 966, 965, 959, 814, 93, 150, 803, 539, 799, 581, 811, 812, 813, 73],
                    themes: {
                        73: {
                            themeID: 73,
                            title: "Avngrd",
                            author: "Grooveshark",
                            location: "avntgrd2012",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        93: {
                            themeID: 93,
                            title: "Mellow",
                            author: "Grooveshark",
                            location: "mellow",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        150: {
                            themeID: 150,
                            title: "Moon and Sea",
                            author: "365 Singles",
                            location: "moonAndSea",
                            premium: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001
                        },
                        621: {
                            themeID: 621,
                            title: "La Musica A Tu Manera",
                            author: "Coke Music",
                            location: "cokeMusicColumbia",
                            premium: !1,
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            version: 2,
                            type: {
                                isSession: !0
                            },
                            adSpecs: {
                                halfPage: !1
                            },
                            header: {
                                200: "http://google.com/",
                                201: "59456358"
                            }
                        },
                        799: {
                            themeID: 799,
                            title: "Gray Tile",
                            author: "Grooveshark",
                            location: "grayTile",
                            premium: !0,
                            sections: ["#theme-header"],
                            version: 1.001
                        },
                        800: {
                            themeID: 800,
                            title: "Plain",
                            author: "Grooveshark",
                            location: "groovesharkPlain",
                            sections: ["#theme-header"],
                            version: 1.003
                        },
                        801: {
                            themeID: 801,
                            title: "Grooveshark Capital",
                            author: "Grooveshark",
                            location: "groovesharkCapital",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            capital: "default",
                            header: {
                                capital: {
                                    width: 728,
                                    height: 90
                                }
                            }
                        },
                        802: {
                            themeID: 802,
                            title: "Quiet Company",
                            author: "Grooveshark",
                            location: "QuietCompanyJH",
                            premium: !1,
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1,
                            type: {
                                isTopLevel: !0
                            }
                        },
                        803: {
                            themeID: 803,
                            title: "Ribbon Dancer",
                            author: "Grooveshark",
                            location: "ribbonDancer",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        581: {
                            themeID: 581,
                            title: "Petit Birds",
                            author: "Grooveshark",
                            location: "petitBirds2012",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        805: {
                            themeID: 805,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                locale: "en"
                            }
                        },
                        806: {
                            themeID: 806,
                            title: "Cars 2 Go",
                            author: "Cars 2 Go",
                            location: "car2Go1",
                            premium: !1,
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            type: {
                                isSession: !0
                            }
                        },
                        807: {
                            themeID: 807,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                locale: "en"
                            }
                        },
                        808: {
                            themeID: 808,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDancePromo",
                            promotion: !0,
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"]
                        },
                        902: {
                            themeID: 902,
                            title: "Rock Smith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithPromo",
                            promotion: !0,
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"]
                        },
                        809: {
                            themeID: 809,
                            title: "Custom Color",
                            author: "Grooveshark",
                            location: "groovesharkCustomColor",
                            premium: !0,
                            sections: ["#theme-header"],
                            version: 1.001
                        },
                        539: {
                            themeID: 539,
                            title: "Instruments",
                            author: "Grooveshark",
                            location: "instruments2012",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        811: {
                            themeID: 811,
                            title: "Triangled",
                            author: "Grooveshark",
                            location: "triangled",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        812: {
                            themeID: 812,
                            title: "Wood",
                            author: "Grooveshark",
                            location: "wood",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        813: {
                            themeID: 813,
                            title: "Green Dust",
                            author: "Grooveshark",
                            location: "greenDust",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        814: {
                            themeID: 814,
                            title: "Fusion",
                            author: "Grooveshark",
                            location: "fusion",
                            premium: !1,
                            sections: ["#theme-header"],
                            version: 1.001
                        },
                        900: {
                            themeID: 900,
                            title: "KPN",
                            author: "KPN",
                            location: "kpnNetherlandsJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        901: {
                            themeID: 901,
                            title: "Hundred Waters",
                            author: "Hundred Waters",
                            location: "hundredWatersJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        903: {
                            themeID: 903,
                            title: "JB",
                            author: "JB",
                            location: "jbMexicoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        904: {
                            themeID: 904,
                            title: "Kimbra",
                            author: "Kimbra",
                            location: "kimbraJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        905: {
                            themeID: 905,
                            title: "Chocolat Kokonut",
                            author: "Stoli",
                            location: "stoliChocolatKokonutJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        906: {
                            themeID: 906,
                            title: "Shiner Bock",
                            author: "Shiner Bock",
                            location: "shinerBockJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        907: {
                            themeID: 907,
                            title: "Shiner Bock",
                            author: "Shiner Bock",
                            location: "shinerBockJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        908: {
                            themeID: 908,
                            title: "Shiner Bock",
                            author: "Shiner Bock",
                            location: "shinerBockJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        909: {
                            themeID: 909,
                            title: "Shiner Bock",
                            author: "Shiner Bock",
                            location: "shinerBockJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        910: {
                            themeID: 910,
                            title: "Jimador",
                            author: "Jimador",
                            location: "jimadorMXJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        911: {
                            themeID: 911,
                            title: "Chevy Sonic",
                            author: "Chevy",
                            location: "chevySonicQ4JH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            version: 1.003,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        912: {
                            themeID: 912,
                            title: "Big Chocolate",
                            author: "Big Chocolate",
                            location: "bigChocolateJH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        913: {
                            themeID: 913,
                            title: "GCBA",
                            author: "GCBA",
                            location: "gcbaQ4JH",
                            sponsored: !0,
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        914: {
                            themeID: 914,
                            title: "Netflix",
                            author: "Netflix",
                            location: "netflixJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        915: {
                            themeID: 915,
                            title: "Renault",
                            author: "Renault",
                            location: "renaultClioJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            }
                        },
                        916: {
                            themeID: 916,
                            title: "Jam Cast",
                            author: "Jam Cast",
                            location: "jamcastJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        917: {
                            themeID: 917,
                            title: "Ralph Lauren",
                            author: "Ralph Lauren",
                            location: "ralphLaurenQ3JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_open.html",
                                width: 300,
                                height: 600
                            }
                        },
                        918: {
                            themeID: 918,
                            title: "Ralph Lauren",
                            author: "Ralph Lauren",
                            location: "ralphLaurenQ3JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_age.html",
                                width: 300,
                                height: 600
                            }
                        },
                        919: {
                            themeID: 919,
                            title: "Ernst & Young",
                            author: "Ernst & Young",
                            location: "ernstAndYoungJH",
                            sections: ["#theme-wall", "#theme-notif", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            notif: {
                                artistIDs: [3705, 37437, 878373, 483827, 20857, 1582397, 7453, 2455458, 2043, 440833, 8580, 483866, 405212, 878, 4077, 22029, 3415, 3701, 2529, 1225894, 1453, 1441368, 20926, 10527, 2157829, 2418071, 187753, 2190841, 422798, 29681, 423466, 3773, 7076, 480510, 229, 1202849, 344328, 628038, 1035307, 1303063, 4040, 1468706, 17859, 1147605, 1395163, 9072, 101846, 1141004, 2175755, 396654, 1198420, 1228066, 1384058, 462304, 5791, 7500, 24344, 4496, 1329247]
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        920: {
                            themeID: 920,
                            title: "USAL",
                            author: "USAL",
                            location: "usalQ3JH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        921: {
                            themeID: 921,
                            title: "Quiet Company",
                            author: "Quiet Company",
                            location: "QuietCompanyFallTourJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            notif: {
                                tracking: []
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        922: {
                            themeID: 922,
                            title: "Coke",
                            author: "Coke",
                            location: "ubisoftHipHopDXJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            locale: "fr",
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_french.html",
                                width: 300,
                                height: 600
                            }
                        },
                        923: {
                            themeID: 923,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_hondouras.html",
                                width: 300,
                                height: 600
                            }
                        },
                        924: {
                            themeID: 924,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_nicaragua.html",
                                width: 300,
                                height: 600
                            }
                        },
                        926: {
                            themeID: 926,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_guatamala.html",
                                width: 300,
                                height: 600
                            }
                        },
                        927: {
                            themeID: 927,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_panama.html",
                                width: 300,
                                height: 600
                            }
                        },
                        928: {
                            themeID: 928,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_elsalvador.html",
                                width: 300,
                                height: 600
                            }
                        },
                        929: {
                            themeID: 929,
                            title: "Coke",
                            author: "Coke",
                            location: "fordFiestaQ4JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        930: {
                            themeID: 930,
                            title: "Coke",
                            author: "Coke",
                            location: "ubisoftHipHopDXJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            locale: "en",
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_english.html",
                                width: 300,
                                height: 600
                            }
                        },
                        931: {
                            themeID: 931,
                            title: "Eastern Plague",
                            author: "Eastern Plague",
                            location: "easternSeaJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        932: {
                            themeID: 932,
                            title: "Car2Go",
                            author: "Car2Go",
                            location: "car2GoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isSession: !0,
                                isSponsored: !0
                            },
                            videos: [{
                                type: "vimeo",
                                id: "50897572",
                                title: "Car2Go"
                            }],
                            capital: {
                                source: "source_vancouver.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                location: "v1"
                            }
                        },
                        933: {
                            themeID: 933,
                            title: "Car2Go",
                            author: "Car2Go",
                            location: "car2GoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isSession: !0,
                                isSponsored: !0
                            },
                            videos: [{
                                type: "vimeo",
                                id: "50897572",
                                title: "Car2Go"
                            }],
                            capital: {
                                source: "source_vancouver.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                location: "v2"
                            }
                        },
                        934: {
                            themeID: 934,
                            title: "Car2Go",
                            author: "Car2Go",
                            location: "car2GoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isSession: !0,
                                isSponsored: !0
                            },
                            videos: [{
                                type: "vimeo",
                                id: "50897572",
                                title: "Car2Go"
                            }],
                            capital: {
                                source: "source_vancouver.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                location: "v3"
                            }
                        },
                        940: {
                            themeID: 940,
                            title: "Car2Go",
                            author: "Car2Go",
                            location: "car2GoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isSession: !0,
                                isSponsored: !0
                            },
                            videos: [{
                                type: "vimeo",
                                id: "50891385",
                                title: "Car2Go"
                            }],
                            capital: {
                                source: "source_toronto.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                location: "v1"
                            }
                        },
                        941: {
                            themeID: 941,
                            title: "Car2Go",
                            author: "Car2Go",
                            location: "car2GoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isSession: !0,
                                isSponsored: !0
                            },
                            videos: [{
                                type: "vimeo",
                                id: "50891385",
                                title: "Car2Go"
                            }],
                            capital: {
                                source: "source_toronto.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                location: "v2"
                            }
                        },
                        942: {
                            themeID: 942,
                            title: "Car2Go",
                            author: "Car2Go",
                            location: "car2GoJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isSession: !0,
                                isSponsored: !0
                            },
                            videos: [{
                                type: "vimeo",
                                id: "50891385",
                                title: "Car2Go"
                            }],
                            capital: {
                                source: "source_toronto.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                location: "v3"
                            }
                        },
                        938: {
                            themeID: 938,
                            title: "Pac Sun",
                            author: "Pac Sun",
                            location: "pacsunJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-notif"],
                            sponsored: !0,
                            version: 1.004,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            notif: {
                                artistIDs: [1038659, 1229908, 1270257, 1141781, 4143, 1509521, 2198980, 7587, 1244393, 4040, 1468706, 6957, 406916, 106364, 967050, 262215, 961668, 1228066, 1384058, 450531, 1320506, 1398424, 1469640, 4138, 29164, 4014, 1312572, 1082536, 1176951, 7571, 405806],
                                tracking: ["http://ad.doubleclick.net/ad/grooveshark.notif/;id=938;notification=1;sz=1x1;ord=%n?"]
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        939: {
                            themeID: 939,
                            title: "Shakira Elixir",
                            author: "Shakira",
                            location: "shakiraElixir",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.004,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        943: {
                            themeID: 943,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                locale: "fr"
                            }
                        },
                        944: {
                            themeID: 944,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.003,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            },
                            options: {
                                locale: "fr"
                            }
                        },
                        945: {
                            themeID: 945,
                            title: "Holiday",
                            author: "Grooveshark",
                            location: "groovesharkHoliday2012",
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.004,
                            type: {}
                        },
                        946: {
                            themeID: 946,
                            title: "BPI Le Male",
                            author: "BPI",
                            location: "JPGleMale",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_colombia.html",
                                width: 300,
                                height: 600
                            }
                        },
                        947: {
                            themeID: 947,
                            title: "BPI Le Male",
                            author: "BPI",
                            location: "JPGleMale",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_mexico.html",
                                width: 300,
                                height: 600
                            }
                        },
                        948: {
                            themeID: 948,
                            title: "BPI Le Male",
                            author: "BPI",
                            location: "JPGleMale",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_chile.html",
                                width: 300,
                                height: 600
                            }
                        },
                        949: {
                            themeID: 949,
                            title: "BPI Le Male",
                            author: "BPI",
                            location: "JPGleMale",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_peru.html",
                                width: 300,
                                height: 600
                            }
                        },
                        950: {
                            themeID: 950,
                            title: "BPI Le Male",
                            author: "BPI",
                            location: "JPGleMale",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_venezuela.html",
                                width: 300,
                                height: 600
                            }
                        },
                        951: {
                            themeID: 951,
                            title: "BPI Le Male",
                            author: "BPI",
                            location: "JPGleMale",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_panama.html",
                                width: 300,
                                height: 600
                            }
                        },
                        952: {
                            themeID: 952,
                            title: "Slightly Stoopid",
                            author: "Slightly Stoopid",
                            location: "slightlyStoopidJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        953: {
                            themeID: 953,
                            title: "Ford Fiesta",
                            author: "Ford",
                            location: "fordFiestaQ4JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_rblock.html",
                                width: 300,
                                height: 600
                            }
                        },
                        954: {
                            themeID: 954,
                            title: "Chevy Spark",
                            author: "Chevy",
                            location: "chevySparkJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "en",
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 600
                            }
                        },
                        955: {
                            themeID: 955,
                            title: "Chevy Spark",
                            author: "Chevy",
                            location: "chevySparkJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "fr",
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 600
                            }
                        },
                        956: {
                            themeID: 956,
                            title: "Sonos",
                            author: "Sonos",
                            location: "sonosQ4JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        957: {
                            themeID: 957,
                            title: "Opel Corsa",
                            author: "Opel Corsa",
                            location: "opelCorsa",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        958: {
                            themeID: 958,
                            title: "Smirnoff Circus",
                            author: "Smirnoff",
                            location: "smirnoffCircus",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        959: {
                            themeID: 959,
                            title: "Novembre",
                            author: "Maxime Francout",
                            location: "novembreFrancout",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        960: {
                            themeID: 960,
                            title: "Corona",
                            author: "Corona",
                            location: "coronaChileQ4JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        961: {
                            themeID: 961,
                            title: "Discover Card",
                            author: "Discover Card",
                            location: "discoverCardJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        962: {
                            themeID: 962,
                            title: "Jack Daniels",
                            author: "Jack Daniels",
                            location: "jackDanielsFR",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            urlTracking: "",
                            capital: {
                                source: "sourceCapital.html",
                                width: 300,
                                height: 250,
                                click: ""
                            }
                        },
                        963: {
                            themeID: 963,
                            title: "La Hora Redd",
                            author: "La Hora Redd",
                            location: "reddsLaHora",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        964: {
                            themeID: 964,
                            title: "City Harvest",
                            author: "City Harvest",
                            location: "cityHarvest",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        965: {
                            themeID: 965,
                            title: "Mushrooms",
                            author: "Elena Boils",
                            location: "mushroomsBoil",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        966: {
                            themeID: 966,
                            title: "Nautical",
                            author: "Matt Glasby",
                            location: "nauticalGlasby",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        967: {
                            themeID: 967,
                            title: "Double Black",
                            author: "Smirnott",
                            location: "smirnoffDoubleBlack",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        968: {
                            themeID: 968,
                            title: "UR1",
                            author: "UR1",
                            location: "UR1creativeAllies",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        969: {
                            themeID: 969,
                            title: "La Casa",
                            author: "Corona",
                            location: "coronaLaCasaJH",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        970: {
                            themeID: 970,
                            title: "GCBA",
                            author: "GCBA",
                            location: "gcbaQ4JHv2",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            type: {
                                isTopLevel: !0,
                                isSponsored: !0
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        971: {
                            themeID: 971,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_hondouras.html",
                                width: 300,
                                height: 600
                            }
                        },
                        972: {
                            themeID: 972,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_hondouras.html",
                                width: 300,
                                height: 600
                            }
                        },
                        973: {
                            themeID: 973,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_nicaragua.html",
                                width: 300,
                                height: 600
                            }
                        },
                        974: {
                            themeID: 974,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_nicaragua.html",
                                width: 300,
                                height: 600
                            }
                        },
                        975: {
                            themeID: 975,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_guatamala.html",
                                width: 300,
                                height: 600
                            }
                        },
                        976: {
                            themeID: 976,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_guatamala.html",
                                width: 300,
                                height: 600
                            }
                        },
                        977: {
                            themeID: 977,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_panama.html",
                                width: 300,
                                height: 600
                            }
                        },
                        978: {
                            themeID: 978,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_panama.html",
                                width: 300,
                                height: 600
                            }
                        },
                        979: {
                            themeID: 979,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_elsalvador.html",
                                width: 300,
                                height: 600
                            }
                        },
                        980: {
                            themeID: 980,
                            title: "Coke",
                            author: "Coke",
                            location: "cokeFMQ3JHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source_elsalvador.html",
                                width: 300,
                                height: 600
                            }
                        },
                        981: {
                            themeID: 981,
                            title: "Red Dawn",
                            author: "Red Dawn",
                            location: "redDawnObox",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        982: {
                            themeID: 982,
                            title: "Red Dawn",
                            author: "Red Dawn",
                            location: "redDawnObox",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        983: {
                            themeID: 983,
                            title: "Shock",
                            author: "CK",
                            location: "ckShockJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        984: {
                            themeID: 984,
                            title: "Shock",
                            author: "CK",
                            location: "ckShockJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        985: {
                            themeID: 985,
                            title: "Shock",
                            author: "CK",
                            location: "ckShockJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        986: {
                            themeID: 986,
                            title: "Shock",
                            author: "CK",
                            location: "ckShockJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        987: {
                            themeID: 987,
                            title: "Shock",
                            author: "CK",
                            location: "ckShockJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        988: {
                            themeID: 988,
                            title: "Stoli",
                            author: "Stoli",
                            location: "stoliChocolatKokonutRecap",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        989: {
                            themeID: 989,
                            title: "Beach Boys",
                            author: "Beach Boys",
                            location: "beachBoys50",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        990: {
                            themeID: 990,
                            title: "Sprite",
                            author: "Sprite",
                            location: "spriteMXNovemberJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            assetVersion: "lebron",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        991: {
                            themeID: 991,
                            title: "Sprite",
                            author: "Sprite",
                            location: "spriteMXNovemberJH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            assetVersion: "kobe",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        992: {
                            themeID: 992,
                            title: "Overwerk",
                            author: "Overwerk",
                            location: "overwerk",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        993: {
                            themeID: 993,
                            title: "Hip Hop Dance",
                            author: "Ubisoft",
                            location: "ubisoftHipHopDXJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 600
                            }
                        },
                        994: {
                            themeID: 994,
                            title: "Hip Hop Dance",
                            author: "Ubisoft",
                            location: "ubisoftHipHopDXJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 600
                            }
                        },
                        995: {
                            themeID: 995,
                            title: "Hip Hop Dance",
                            author: "Ubisoft",
                            location: "ubisoftHipHopDXJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.003,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 600
                            }
                        },
                        996: {
                            themeID: 996,
                            title: "Hip Hop Dance",
                            author: "Ubisoft",
                            location: "ubisoftHipHopDXJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.003,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 600
                            }
                        },
                        997: {
                            themeID: 997,
                            title: "Nicki Minaj",
                            author: "Nicki Minaj",
                            location: "nickiMinaj",
                            sections: ["#theme-wall", "#theme-header", "#theme-notif"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        998: {
                            themeID: 998,
                            title: "U Mayor",
                            author: "U Mayor",
                            location: "uMayorChile",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1001: {
                            themeID: 1001,
                            title: "UPN",
                            author: "UPN",
                            location: "UPNadmissions",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1018: {
                            themeID: 1018,
                            title: "Karmaloop",
                            author: "Karmaloop",
                            location: "karmaloop",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            artist: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1019: {
                            themeID: 1019,
                            title: "Buick MX",
                            author: "Buick MX",
                            location: "buickMX",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1020: {
                            themeID: 1020,
                            title: "VW Fender",
                            author: "VW Fender",
                            location: "VWFenderItaly",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-expand"],
                            sponsored: !0,
                            version: 1.001
                        },
                        1021: {
                            themeID: 1021,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.003,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1022: {
                            themeID: 1022,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.004,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1023: {
                            themeID: 1023,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.003,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1024: {
                            themeID: 1024,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceJHRBlock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.004,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1025: {
                            themeID: 1025,
                            title: "Drive Train",
                            author: "Grooveshark",
                            location: "driveTrain",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        1026: {
                            themeID: 1026,
                            title: "Coke Zero",
                            author: "Coke",
                            location: "cokeZeroMX",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1027: {
                            themeID: 1027,
                            title: "Sony Xperia",
                            author: "Sony",
                            location: "sonyXperia",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-notif"],
                            sponsored: !0,
                            version: 1.003,
                            notif: {
                                artistIDs: [],
                                tracking: ["http://ad.doubleclick.net/ad/grooveshark.notif/;id=1027;notification=1;sz=1x1;ord=%n?"]
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1028: {
                            themeID: 1028,
                            title: "Quiet Company Holiday",
                            author: "Quiet Company",
                            location: "quietCompanyHoliday",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1029: {
                            themeID: 1029,
                            title: "Quiet Company Holiday",
                            author: "Quiet Company",
                            location: "quietCompanyHoliday",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            locale: "texas",
                            version: 1.002,
                            capital: {
                                source: "source_texas.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1030: {
                            themeID: 1030,
                            title: "Bumeran",
                            author: "Bumeran",
                            location: "bumeranCR",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1031: {
                            themeID: 1031,
                            title: "Honda Fit",
                            author: "Honda",
                            location: "hondaFitTwist",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-expand"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1032: {
                            themeID: 1032,
                            title: "Gillette",
                            author: "Gillette",
                            location: "gilletteVenus",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1033: {
                            themeID: 1033,
                            title: "Chevy Spark",
                            author: "Chevy",
                            location: "chevySparkRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1034: {
                            themeID: 1034,
                            title: "Chevy Spark",
                            author: "Chevy",
                            location: "chevySparkRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1035: {
                            themeID: 1035,
                            title: "Chevy Spark",
                            author: "Chevy",
                            location: "chevySparkRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1036: {
                            themeID: 1036,
                            title: "Chevy Spark",
                            author: "Chevy",
                            location: "chevySparkRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1037: {
                            themeID: 1037,
                            title: "Col Cafe",
                            author: "Col Cafe",
                            location: "colCafe",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1038: {
                            themeID: 1038,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.003,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1039: {
                            themeID: 1039,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.003,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1040: {
                            themeID: 1040,
                            title: "Coke Zero",
                            author: "Coke",
                            location: "cokeZeroMXRoadblock",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1041: {
                            themeID: 1041,
                            title: "Sony Xperia",
                            author: "Sony",
                            location: "sonyXperiaRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1042: {
                            themeID: 1042,
                            title: "Buick MX",
                            author: "Buick MX",
                            location: "buickMXRoadblock",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1043: {
                            themeID: 1043,
                            title: "Sprite",
                            author: "Sprite",
                            location: "spriteMXNovemberRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            assetVersion: "lebron",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1044: {
                            themeID: 1044,
                            title: "Sprite",
                            author: "Sprite",
                            location: "spriteMXNovemberRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            sitetakeover: !0,
                            assetVersion: "kobe",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1045: {
                            themeID: 1045,
                            title: "Tec Milenio",
                            author: "Tec Milenio",
                            location: "tecMilenio",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1046: {
                            themeID: 1046,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.004,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1047: {
                            themeID: 1047,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.004,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1048: {
                            themeID: 1048,
                            title: "Holiday",
                            author: "Grooveshark",
                            location: "salesGNVholiday2012",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1049: {
                            themeID: 1049,
                            title: "Holiday",
                            author: "Grooveshark",
                            location: "salesNYholiday2012",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.008,
                            offer: "noHeadphones",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1050: {
                            themeID: 1050,
                            title: "Gillette",
                            author: "Gillette",
                            location: "gilletteVenusRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1051: {
                            themeID: 1051,
                            title: "Holiday",
                            author: "Grooveshark",
                            location: "salesNYholiday2012",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.006,
                            offer: "noHeadphones",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1052: {
                            themeID: 1052,
                            title: "Banco Colombia",
                            author: "Banco Colombia",
                            location: "bancolombia",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1053: {
                            themeID: 1053,
                            title: "Banco Colombia",
                            author: "Banco Colombia",
                            location: "bancolombia",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1054: {
                            themeID: 1054,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceGenre",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            tag: !0,
                            version: 1.004,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1055: {
                            themeID: 1055,
                            title: "Just Dance",
                            author: "Ubisoft",
                            location: "ubisoftJustDanceGenre",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            tag: !0,
                            version: 1.004,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1056: {
                            themeID: 1056,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithGenre",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            tag: !0,
                            version: 1.004,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1057: {
                            themeID: 1057,
                            title: "Rocksmith",
                            author: "Ubisoft",
                            location: "ubisoftRocksmithGenre",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            tag: !0,
                            version: 1.004,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1058: {
                            themeID: 1058,
                            title: "Barcel Fin Del Mundo",
                            author: "Barcel Fin Del Mundo",
                            location: "barcelFinDelMundo",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1059: {
                            themeID: 1059,
                            title: "Jameson",
                            author: "Jameson",
                            location: "jameson",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1061: {
                            themeID: 1061,
                            title: "Ford Fiesta",
                            author: "Ford",
                            location: "fordFiestaQ4JH",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 600
                            }
                        },
                        1062: {
                            themeID: 1062,
                            title: "UADE",
                            author: "UADE",
                            location: "UADE",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-expand"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1063: {
                            themeID: 1063,
                            title: "Fruit",
                            author: "Ruby Taylor",
                            location: "fruitRubyTaylor",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1064: {
                            themeID: 1064,
                            title: "Day Time",
                            author: "Ana Montiel",
                            location: "daytimeAnaMontiel",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1065: {
                            themeID: 1065,
                            title: "Night Time",
                            author: "Ana Montiel",
                            location: "nighttimeAnaMontiel",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1.001
                        },
                        1066: {
                            themeID: 1066,
                            title: "White Castle Phase 1",
                            author: "White Castle Phase 1",
                            location: "whiteCastlePhase1",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1067: {
                            themeID: 1067,
                            title: "White Castle Phase 1",
                            author: "White Castle Phase 1",
                            location: "whiteCastlePhase1",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            locale: "nynj",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1068: {
                            themeID: 1068,
                            title: "Flor De La Cana",
                            author: "Flor De La Cana",
                            location: "florDeLaCana",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1069: {
                            themeID: 1069,
                            title: "Choice Hotels",
                            author: "Choice Hotels",
                            location: "choiceHotels",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1070: {
                            themeID: 1070,
                            title: "Cricket AU",
                            author: "Cricket AU",
                            location: "cricketAU",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1071: {
                            themeID: 1071,
                            title: "Ford Focus",
                            author: "Ford Focus",
                            location: "fordFocusQ113",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1072: {
                            themeID: 1072,
                            title: "Nike Sportcheck",
                            author: "Nike Sportcheck",
                            location: "nikeSportcheck",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1073: {
                            themeID: 1073,
                            title: "Airplanes",
                            author: "Alyssa Nassner",
                            location: "airplanesNassner",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1074: {
                            themeID: 1074,
                            title: "UQAM",
                            author: "UQAM",
                            location: "UQAM",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1075: {
                            themeID: 1075,
                            title: "Dos En Uno",
                            author: "Dos En Uno",
                            location: "dosEnUno",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1076: {
                            themeID: 1076,
                            title: "UQAM",
                            author: "UQAM",
                            location: "UQAM",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1077: {
                            themeID: 1077,
                            title: "The CO",
                            author: "The CO",
                            location: "theCO",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1078: {
                            themeID: 1078,
                            title: "Floral Pigeons",
                            author: "Markovka",
                            location: "floralPigeonsMarkovka",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1079: {
                            themeID: 1079,
                            title: "Seamless Waves 1",
                            author: "Markovka",
                            location: "seamlessWaves1Markovka",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1080: {
                            themeID: 1080,
                            title: "White Castle Phase 2",
                            author: "White Castle Phase 2",
                            location: "whiteCastlePhase2",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1081: {
                            themeID: 1081,
                            title: "Rock Boat",
                            author: "Rock Boat",
                            location: "rockBoat",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1082: {
                            themeID: 1082,
                            title: "Seamless Waves 2",
                            author: "Markovka",
                            location: "seamlessWaves2Markovka",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1083: {
                            themeID: 1083,
                            title: "Shark & Whales",
                            author: "Orka",
                            location: "sharkWhales",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1084: {
                            themeID: 1084,
                            title: "White Stripes",
                            author: "Jeshurun Webb",
                            location: "whiteStripesJWebb",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1085: {
                            themeID: 1085,
                            title: "Patterned Shirts",
                            author: "Adam Turnbull",
                            location: "patternShirtATurnbull",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1086: {
                            themeID: 1086,
                            title: "Old Skool",
                            author: "Scott Balmer",
                            location: "oldSkoolSBalmer",
                            sections: ["#theme-header"],
                            premium: !0,
                            version: 1
                        },
                        1087: {
                            themeID: 1087,
                            title: "Chevy Sonic HTML Launch",
                            author: "Chevy",
                            location: "chevySonicHtmlLaunch",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "en",
                            videos: [{
                                type: "vimeo",
                                id: "58903169",
                                title: "Chevy Sonic"
                            }],
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1088: {
                            themeID: 1088,
                            title: "Chevy Sonic HTML Launch",
                            author: "Chevy",
                            location: "chevySonicHtmlLaunch",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "fr",
                            videos: [{
                                type: "vimeo",
                                id: "58905360",
                                title: "Chevy Sonic"
                            }],
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1089: {
                            themeID: 1089,
                            title: "Chevy Sonic HTML Launch",
                            author: "Chevy",
                            location: "chevySonicHtmlLaunch_Cobrand",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "en",
                            capital: {
                                source: "source_en.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1090: {
                            themeID: 1090,
                            title: "Chevy Sonic HTML Launch",
                            author: "Chevy",
                            location: "chevySonicHtmlLaunch_Cobrand",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "fr",
                            capital: {
                                source: "source_fr.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1091: {
                            themeID: 1091,
                            title: "GCBA Festival Verano",
                            author: "GCBA",
                            location: "GCBAFestivalVerano",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1092: {
                            themeID: 1092,
                            title: "Ford Fiesta Record",
                            author: "Ford",
                            location: "fordFiestaRecords",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1093: {
                            themeID: 1093,
                            title: "Volley",
                            author: "Volley",
                            location: "volley",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1094: {
                            themeID: 1094,
                            title: "Nike Lunar",
                            author: "Nike Lunar",
                            location: "nikeLunar",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.005
                        },
                        1095: {
                            themeID: 1095,
                            title: "Nike Lunar Fixed",
                            author: "Nike Lunar Fixed",
                            location: "nikeLunarFixed",
                            sections: ["#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1096: {
                            themeID: 1096,
                            title: "Nike Lunar",
                            author: "Nike Lunar",
                            location: "nikeLunar",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.005
                        },
                        1097: {
                            themeID: 1097,
                            title: "White Castle Winners",
                            author: "White Castle Winners",
                            location: "whiteCastleWinners",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.001
                        },
                        1098: {
                            themeID: 1098,
                            title: "Dog and Panther",
                            author: "Dog and Panther",
                            location: "dogAndPanther",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1099: {
                            themeID: 1099,
                            title: "Miller",
                            author: "Miller",
                            location: "miller",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1100: {
                            themeID: 1100,
                            title: "Miller",
                            author: "Miller",
                            location: "millerFixed",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1101: {
                            themeID: 1101,
                            title: "Grooveshark Valentine",
                            author: "Grooveshark",
                            location: "groovesharkValentine2013",
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1
                        },
                        1102: {
                            themeID: 1102,
                            title: "Samsung Mini",
                            author: "Samsung",
                            location: "samsungMini",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1103: {
                            themeID: 1103,
                            title: "Hangout Fest",
                            author: "Hangout Fest",
                            location: "hangoutFest",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1104: {
                            themeID: 1104,
                            title: "Bavaria",
                            author: "Bavaria",
                            location: "bavaria",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1105: {
                            themeID: 1105,
                            title: "Bavaria",
                            author: "Bavaria",
                            location: "bavaria",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1106: {
                            themeID: 1106,
                            title: "Chevy Spark Italy",
                            author: "Chevy Spark Italy",
                            location: "chevySparkItaly",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.005
                        },
                        1107: {
                            themeID: 1107,
                            title: "Chevy Spark Italy",
                            author: "Chevy Spark Italy",
                            location: "chevySparkItaly",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.005
                        },
                        1108: {
                            themeID: 1108,
                            title: "Honda CRZ",
                            author: "Honda",
                            location: "hondaCRZ",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1109: {
                            themeID: 1109,
                            title: "Coke Punto Frozen",
                            author: "Coke",
                            location: "cokePunto",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003
                        },
                        1110: {
                            themeID: 1110,
                            title: "Movistar",
                            author: "Movistar",
                            location: "movistar",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1111: {
                            themeID: 1111,
                            title: "Movistar",
                            author: "Movistar",
                            location: "movistar",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1112: {
                            themeID: 1112,
                            title: "Ralph Lauren Denim and Supply",
                            author: "Ralph Lauren",
                            location: "ralphLauren",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            locale: "home",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1113: {
                            themeID: 1113,
                            title: "Ralph Lauren Denim and Supply",
                            author: "Ralph Lauren",
                            location: "ralphLauren",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            artistID: 1128441,
                            artist: !0,
                            locale: "artist",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "pageType=artist"
                            }
                        },
                        1114: {
                            themeID: 1114,
                            title: "Ralph Lauren Denim and Supply",
                            author: "Ralph Lauren",
                            location: "ralphLauren",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            tag: !0,
                            locale: "genre",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "pageType=genre"
                            }
                        },
                        1115: {
                            themeID: 1115,
                            title: "UF MBA",
                            author: "UF MBA",
                            location: "ufMBA",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1116: {
                            themeID: 1116,
                            title: "UF MBA",
                            author: "UF MBA",
                            location: "ufMBA",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1117: {
                            themeID: 1117,
                            title: "Tutorial",
                            author: "Grooveshark",
                            location: "groovesharkTutorial",
                            sections: ["#theme-wall", "#theme-header"],
                            version: 1.003
                        },
                        1118: {
                            themeID: 1118,
                            title: "Axe Columbia",
                            author: "Axe",
                            location: "axeColumbia",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1119: {
                            themeID: 1119,
                            title: "Netflix",
                            author: "Netflix",
                            location: "netflix",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "nfversion=a"
                            }
                        },
                        1120: {
                            themeID: 1120,
                            title: "21 and Over",
                            author: "21 and Over",
                            location: "21Over",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1121: {
                            themeID: 1121,
                            title: "21 and Over",
                            author: "21 and Over",
                            location: "21Over",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1122: {
                            themeID: 1122,
                            title: "Adidas Girls",
                            author: "Adidas",
                            location: "adidas",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1123: {
                            themeID: 1123,
                            title: "Netflix",
                            author: "Netflix",
                            location: "netflix",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "nfversion=b"
                            }
                        },
                        1124: {
                            themeID: 1124,
                            title: "This is Flattr",
                            author: "Flattr",
                            location: "flattr",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1125: {
                            themeID: 1125,
                            title: "Gancia",
                            author: "Gancia",
                            location: "gancia",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-expand"],
                            sponsored: !0,
                            version: 1.004,
                            locale: "a",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "ganversion=a"
                            }
                        },
                        1126: {
                            themeID: 1126,
                            title: "7 Eleven",
                            author: "7 Eleven",
                            location: "sevenEleven",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1127: {
                            themeID: 1127,
                            title: "Gancia",
                            author: "Gancia",
                            location: "gancia",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-expand"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "b",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "ganversion=b"
                            }
                        },
                        1128: {
                            themeID: 1128,
                            title: "Opel Corsa",
                            author: "Opel Corsa",
                            location: "opelCorsa2",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1129: {
                            themeID: 1129,
                            title: "Burgerking",
                            author: "Burgerking",
                            location: "burgerKing728",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: "default",
                            flight: 1
                        },
                        1130: {
                            themeID: 1130,
                            title: "Corona",
                            author: "Corona",
                            location: "corona",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1131: {
                            themeID: 1131,
                            title: "Redbull",
                            author: "Redbull",
                            location: "redbull",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1132: {
                            themeID: 1132,
                            title: "Openbucks",
                            author: "Openbucks",
                            location: "openbucks",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1133: {
                            themeID: 1133,
                            title: "Adidas Girls",
                            author: "Adidas",
                            location: "adidas",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            version: 1.01,
                            sitetakeover: !0,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1134: {
                            themeID: 1134,
                            title: "Adidas Girls",
                            author: "Adidas",
                            location: "adidas",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            version: 1.01,
                            sitetakeover: !0,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1135: {
                            themeID: 1135,
                            title: "White Castle Rings Phase 1",
                            author: "White Castle Rings Phase 1",
                            location: "whiteCastleRingsPhase1",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1136: {
                            themeID: 1136,
                            title: "White Castle Rings Phase 1",
                            author: "White Castle Rings Phase 1",
                            location: "whiteCastleRingsPhase1",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1137: {
                            themeID: 1137,
                            title: "Subway Brazil",
                            author: "Subway Brazil",
                            location: "subway",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1138: {
                            themeID: 1138,
                            title: "Nescafe",
                            author: "Nescafe",
                            location: "nescafe",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1139: {
                            themeID: 1139,
                            title: "Adidas Portugal",
                            author: "Adidas Portugal",
                            location: "adidasPortugal",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1140: {
                            themeID: 1140,
                            title: "Adidas Portugal",
                            author: "Adidas Portugal",
                            location: "adidasPortugal",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1141: {
                            themeID: 1141,
                            title: "Redbull Turkey",
                            author: "Redbull Turkey",
                            location: "redbullTurkey",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002
                        },
                        1142: {
                            themeID: 1142,
                            title: "J&B MX",
                            author: "J&B",
                            location: "j&b",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1143: {
                            themeID: 1143,
                            title: "Zombies",
                            author: "Connor Goodman",
                            location: "zombiesCGoodman",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        1144: {
                            themeID: 1144,
                            title: "Qello",
                            author: "Qello",
                            location: "qello",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1145: {
                            themeID: 1145,
                            title: "Camp Bisco",
                            author: "Camp Bisco",
                            location: "campBisco",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1146: {
                            themeID: 1146,
                            title: "Copa Airlines",
                            author: "Copa Airlines",
                            location: "copaAirlines",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "themeLocale=sp&urlKey=bogota"
                            }
                        },
                        1147: {
                            themeID: 1147,
                            title: "Copa Airlines",
                            author: "Copa Airlines",
                            location: "copaAirlines",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "themeLocale=sp&urlKey=medellin"
                            }
                        },
                        1148: {
                            themeID: 1148,
                            title: "Copa Airlines",
                            author: "Copa Airlines",
                            location: "copaAirlines",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "pt",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "themeLocale=pt&urlKey=brasilia"
                            }
                        },
                        1149: {
                            themeID: 1149,
                            title: "Copa Airlines",
                            author: "Copa Airlines",
                            location: "copaAirlines",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "pt",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "themeLocale=pt&urlKey=rio"
                            }
                        },
                        1150: {
                            themeID: 1150,
                            title: "Copa Airlines",
                            author: "Copa Airlines",
                            location: "copaAirlines",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "pt",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "themeLocale=pt&urlKey=belo"
                            }
                        },
                        1151: {
                            themeID: 1151,
                            title: "Flor De La Cana",
                            author: "Flor De La Cana",
                            location: "florDeLaCanaRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            version: 1.002,
                            sitetakeover: !0,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1152: {
                            themeID: 1152,
                            title: "Flor De La Cana",
                            author: "Flor De La Cana",
                            location: "florDeLaCanaRoadblock",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            version: 1.002,
                            sitetakeover: !0,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1153: {
                            themeID: 1153,
                            title: "LG Nexus",
                            author: "LG",
                            location: "lgNexus",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1154: {
                            themeID: 1154,
                            title: "Sony Sweden",
                            author: "Sony",
                            location: "sonySweden",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.001
                        },
                        1155: {
                            themeID: 1155,
                            title: "Vivo",
                            author: "Vivo",
                            location: "vivo",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1156: {
                            themeID: 1156,
                            title: "Vivo",
                            author: "Vivo",
                            location: "vivo",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1157: {
                            themeID: 1157,
                            title: "Broadcast",
                            author: "Broadcast",
                            location: "broadcast",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1158: {
                            themeID: 1158,
                            title: "Lacoste Arg",
                            author: "Lacoste",
                            location: "lacoste",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1159: {
                            themeID: 1159,
                            title: "Apple Storm Arg",
                            author: "Apple Storm",
                            location: "appleStorm",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1160: {
                            themeID: 1160,
                            title: "Broadcats",
                            author: "Broadcats",
                            location: "broadcats",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1161: {
                            themeID: 1161,
                            title: "Carona Argentina",
                            author: "Carona",
                            location: "caronaArgentina",
                            sections: ["#theme-header", "#theme-wall"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1162: {
                            themeID: 1162,
                            title: "summerfest",
                            author: "summerfest",
                            location: "summerfest",
                            sections: ["#theme-header", "#theme-wall"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1163: {
                            themeID: 1163,
                            title: "Bavaria Q2",
                            author: "Bavaria",
                            location: "bavariaQ2",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1164: {
                            themeID: 1164,
                            title: "Bavaria Q2",
                            author: "Bavaria",
                            location: "bavariaQ2",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1165: {
                            themeID: 1165,
                            title: "Bushmills",
                            author: "Bushmills",
                            location: "bushmills",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1166: {
                            themeID: 1166,
                            title: "Bushmills",
                            author: "Bushmills",
                            location: "bushmills",
                            sections: ["#theme-wall", "#theme-header", "#theme-interactiontimeout"],
                            sponsored: !0,
                            sitetakeover: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1167: {
                            themeID: 1167,
                            title: "Broadcast",
                            author: "Broadcast",
                            location: "broadcastPost",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1168: {
                            themeID: 1168,
                            title: "Redbull Mexico",
                            author: "Redbull Mexico",
                            location: "redbullMexico",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.001,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1169: {
                            themeID: 1169,
                            title: "Blues Pioneers Playlist",
                            author: "Blues Pioneers Playlist",
                            location: "bpPlaylist",
                            sections: ["#theme-header"],
                            version: 1
                        },
                        1170: {
                            themeID: 1170,
                            title: "Truth",
                            author: "Truth",
                            location: "truth",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.005,
                            capital: !1
                        },
                        1171: {
                            themeID: 1171,
                            title: "Ford Ecosport",
                            author: "Ford",
                            location: "fordEcosport",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1172: {
                            themeID: 1172,
                            title: "Trucko",
                            author: "Trucko",
                            location: "truckoChile",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1173: {
                            themeID: 1173,
                            title: "Trucko",
                            author: "Trucko",
                            location: "truckoChile",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            locale: "esperanza",
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                extraParams: "esperanza=true"
                            }
                        },
                        1174: {
                            themeID: 1174,
                            title: "Microsoft Mexico",
                            author: "Microsoft",
                            location: "microsoft",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1175: {
                            themeID: 1175,
                            title: "RJD2 Broadcast",
                            author: "RJD2",
                            location: "broadcastRjd2",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.002,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1176: {
                            themeID: 1176,
                            title: "Truth",
                            author: "Truth",
                            location: "truth",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.005,
                            capital: !1
                        },
                        1177: {
                            themeID: 1177,
                            title: "Broadcast",
                            author: "Broadcast",
                            location: "broadcastChicago",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1178: {
                            themeID: 1178,
                            title: "Ucimed",
                            author: "Ucimed",
                            location: "ucimed",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.004,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1179: {
                            themeID: 1179,
                            title: "Borosanna",
                            author: "Wilmer Murillo",
                            location: "designerBorosanna",
                            premium: !0,
                            sections: ["#theme-header"]
                        },
                        1180: {
                            themeID: 1180,
                            title: "HTML5 EN",
                            author: "GS",
                            location: "html5",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1181: {
                            themeID: 1181,
                            title: "HTML5 Spanish",
                            author: "GS",
                            location: "html5",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "spanish",
                            capital: {
                                source: "source_spanish.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1182: {
                            themeID: 1182,
                            title: "HTML5 French",
                            author: "GS",
                            location: "html5",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "french",
                            capital: {
                                source: "source_french.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1183: {
                            themeID: 1183,
                            title: "HTML5 Portuguese",
                            author: "GS",
                            location: "html5",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "portuguese",
                            capital: {
                                source: "source_portuguese.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1184: {
                            themeID: 1184,
                            title: "HTML5 Italian",
                            author: "GS",
                            location: "html5",
                            sections: ["#theme-wall", "#theme-header"],
                            sponsored: !0,
                            version: 1.003,
                            locale: "italian",
                            capital: {
                                source: "source_italian.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1185: {
                            themeID: 1185,
                            title: "Broadcast",
                            author: "Broadcast",
                            location: "broadcastAhmir",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1186: {
                            themeID: 1186,
                            title: "Dispatch",
                            author: "Dispatch",
                            location: "dispatch",
                            sections: ["#theme-header", "#theme-wall", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1187: {
                            themeID: 1187,
                            title: "Skol",
                            author: "Skol",
                            location: "skol",
                            sections: ["#theme-header", "#theme-wall"],
                            sponsored: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1188: {
                            themeID: 1188,
                            title: "Broadcast PTM",
                            author: "Broadcast",
                            location: "broadcastPTM",
                            sections: ["#theme-header"],
                            sponsored: !0,
                            version: 1.005,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1189: {
                            themeID: 1189,
                            title: "HTC Telecom",
                            author: "HTC",
                            location: "htc",
                            sections: ["#theme-header", "#theme-wall"],
                            sponsored: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                masthead: "masthead.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1190: {
                            themeID: 1190,
                            title: "Subway Changeable",
                            author: "Subway",
                            location: "subwayChangeable",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader"],
                            sponsored: !0,
                            version: 1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1199: {
                            themeID: 1199,
                            title: "White Castle Rings Phase 2",
                            author: "White Castle Rings Phase 2",
                            location: "whiteCastleRingsPhase2Promo",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.007
                        },
                        1200: {
                            themeID: 1200,
                            title: "White Castle Rings Phase 2",
                            author: "White Castle Rings Phase 2",
                            location: "whiteCastleRingsPhase2",
                            sections: ["#theme-wall", "#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.006,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1202: {
                            themeID: 1202,
                            title: "Mitsubishi",
                            author: "Mitsubishi",
                            location: "mitsubishi",
                            sections: ["#theme-header", "#theme-wall", "#theme-notif"],
                            sponsored: !0,
                            version: 1.012,
                            notif: {
                                artistIDs: [2699067, 2699738, 1906900, 474602, 1436743, 2466348, 1839350, 2662228, 2497651, 2560609, 1549298, 2689815, 2588232, 2699249, 2614266, 2008375, 1041939, 1698177],
                                tracking: ["http://ad.doubleclick.net/ad/grooveshark.notif/;id=1202;notification=1;sz=1x1;ord=%n?"]
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            }
                        },
                        1204: {
                            themeID: 1204,
                            title: "Mitsubishi",
                            author: "Mitsubishi",
                            location: "mitsubishi",
                            sections: ["#theme-header", "#theme-wall", "#theme-notif"],
                            sponsored: !0,
                            promotion: !0,
                            version: 1.012,
                            wall: {
                                100: "http://www.mitsubishicars.com/MMNA/jsp/outlandersport/13/showroom/overview.do?cid=display_rich_osleawareness_0001"
                            },
                            header: {
                                200: "http://www.mitsubishicars.com/MMNA/jsp/outlandersport/13/showroom/overview.do?cid=display_rich_osleawareness_0001",
                                202: "http://www.mitsubishicars.com/MMNA/jsp/outlandersport/13/showroom/overview.do?cid=display_rich_osleawareness_0001"
                            },
                            notif: {
                                artistIDs: [2699067, 2699738, 1906900, 474602, 1436743, 2466348, 1839350, 2662228, 2497651, 2560609, 1549298, 2689815, 2588232, 2699249, 2614266, 2008375, 1041939, 1698177],
                                tracking: ["http://ad.doubleclick.net/ad/grooveshark.notif/;id=1202;notification=1;sz=1x1;ord=%n?"]
                            },
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250
                            },
                            tracking: []
                        },
                        1205: {
                            themeID: 1205,
                            title: "Site Overlay",
                            author: "Site Overlay",
                            location: "overlayTest",
                            sections: ["#theme-header", "#theme-expand"],
                            sponsored: !0,
                            version: 1.004,
                            capital: "default"
                        },
                        999: {
                            themeID: 999,
                            title: "Theme Template",
                            author: "Grooveshark",
                            location: "themeTemplate",
                            sections: ["#theme-wall", "#theme-header", "#theme-videoheader", "#theme-interactiontimeout"],
                            version: 1,
                            sitetakeover: !0,
                            artist: !1,
                            capital: {
                                source: "source.html",
                                width: 300,
                                height: 250,
                                click: "http://www.sonos.com/listeningisback/janellemonae?leadsource=10173&utm_source=2012-Grooveshark-au&utm_medium=online&utm_content=online-Homepage-skin-2500x1400&utm_campaign=ListeningIsBack"
                            }
                        }
                    }
                })
            }(), function() {
                function o(e, t, n, r) {
                    if (!r || !r.length) {
                        e.resolve([]);
                        return
                    }
                    t || (t = {});
                    var i = [],
                        s;
                    for (s = 0; s < r.length; s++) _.isFunction(t.onCredit) && r[s].onCredit(t.onCredit), _.isFunction(t.onStart) && r[s].onStart(t.onStart), _.isFunction(t.onFinish) && r[s].onFinish(t.onFinish), r[s].loadIntoContainer = _.bind(n.loadActivityIntoContainer, n, r[s]), i.push(r[s]);
                    e.resolve(i)
                }
                var n = e.GS = e.GS || {};
                n.Models = n.Models || {};
                var r, i = {
                    partner_config_hash: "6c5673a47e1ef5525c824f330ffa029f4dd70a49"
                },
                    s, u = n.Models.Ad = Backbone.Model.extend({
                        idAttribute: "AdID",
                        constructor: function() {},
                        initialize: function() {}
                    }, {
                        useTestAds: !1,
                        RANDOM_PERCENT: Math.floor(Math.random() * 10) + 1,
                        locales: {
                            en: "1",
                            bg: "2",
                            ca: "3",
                            cs: "4",
                            da: "5",
                            de: "6",
                            es: "7",
                            eu: "8",
                            fi: "9",
                            fr: "10",
                            it: "11",
                            ja: "12",
                            lt: "13",
                            nb: "14",
                            nl: "15",
                            pl: "16",
                            pt: "17",
                            ro: "18",
                            ru: "19",
                            sk: "20",
                            sl: "21",
                            sv: "22",
                            tr: "23",
                            zh: "24"
                        },
                        personalizedTags: null,
                        adRotationCount: 0,
                        loadTracking: function(e, t) {
                            if (_.isArray(e)) {
                                var r = (new Date).getTime(),
                                    i;
                                _.forEach(e, function(e) {
                                    e && (e = e.replace("%n", r), e.indexOf("pointroll") == -1 && (e.indexOf("?") != -1 ? e += "&" + r : e += "?" + r), i = new Image, $("body").append($(i).load(function(e) {
                                        t && t.queueNext && n.trigger("theme:queueNextTheme"), $(e.target).remove()
                                    }).css("visibility", "hidden").attr("src", e)))
                                })
                            }
                        },
                        getParams: function(t, r, i, s) {
                            t = t instanceof Array ? t : [], r = _.orEqual(r, "?"), i = _.orEqual(i, "&"), gsConfig && gsConfig.isPreview && t.push("16=1");
                            var o;
                            try {
                                o = "0=", o += this.locales[n.Services.Local.get("gs.locale")]
                            } catch (u) {
                                o = "0=1"
                            }
                            t = t.concat([o]);
                            if (s) {
                                s.visitCount;
                                if (s.user) {
                                    var a, f, l = s.user;
                                    if (l.get("isLoggedIn")) {
                                        l.get("Sex") && (f = l.get("Sex").toLowerCase() == "m" ? "0" : "1", t.push("1=" + f));
                                        if (l.get("TSDOB")) {
                                            var c = l.get("TSDOB").split("-");
                                            if (c.length == 3) {
                                                var h = new Date,
                                                    p = h.getFullYear() - _.toInt(c[0]);
                                                _.toInt(c[1]) > h.getMonth() ? p -= 1 : _.toInt(c[1]) == h.getMonth() && _.toInt(c[2]) > h.getDate() && (p -= 1), p >= 13 && p < 18 ? a = "1" : p >= 18 && p < 25 ? a = "2" : p >= 25 && p < 35 ? a = "3" : p >= 35 && p < 50 ? a = "4" : p >= 50 && (a = "5"), p >= 21 && t.push("a=1"), a && t.push("10=" + a), t.push("14=" + this.encodeInteger(p))
                                            }
                                        }
                                        if (l.get("Email")) {
                                            var d = l.get("Email").split(".");
                                            d.length && d[d.length - 1] == "edu" && t.push("20=1")
                                        }
                                        l.get("Flags") & n.Models.User.FLAG_ISARTIST ? t.push("17=1") : l.get("Flags") & n.Models.User.FLAG_MUSIC_BUSINESS && t.push("17=2")
                                    }
                                    l.get("UserID") > 0 ? l.get("subscription").isAnywhere() ? t.push("19=3") : l.get("subscription").isPlus() ? t.push("19=2") : t.push("19=1") : t.push("19=0"), t.push("5=" + ((l.get("settings").local.themeFlags & n.Models.Theme.THEME_FLAG_FAMILY_FRIENDLY) == n.Models.Theme.THEME_FLAG_FAMILY_FRIENDLY ? 1 : 0))
                                }
                                s.currentPage && (s.currentPage.type == "home" ? t.push("9=1") : s.currentPage.type == "search" ? t.push("9=2") : t.push("9=0")), s.currentTheme && $(".theme-component:visible").length && t.push("11=" + s.currentTheme.get("themeID"));
                                if (s.model && s.model.get("player") && s.model.get("player").get("currentQueue")) {
                                    var v = s.model.get("player").get("currentQueue");
                                    v.get("currentAutoplayTagID") && (t.push("12=1"), t.push("13=" + v.get("currentAutoplayTagID"))), v.get("activeSong") && t.push("2=" + v.get("activeSong").get("ArtistID"))
                                }
                            }
                            t.push("4=" + this.adRotationCount), this.useTestAds && t.push("testAds=1"), t.push("21=" + n.Models.Ad.RANDOM_PERCENT), t.push("24=" + gsConfig.country.ID), t.push("host=" + e.location.host), n.Models.Theme.lastTakeoverID && t.push("25=" + n.Models.Theme.lastTakeoverID), !n.Models.Ad.personalizedTags && n.Services.Local && n.Services.Local.get("personalizedTags") && (n.Models.Ad.personalizedTags = n.Services.Local.get("personalizedTags"));
                            if (l && n.Models.Ad.personalizedTags && n.Models.Ad.personalizedTags[l.get("UserID")]) {
                                var m = n.Models.Ad.personalizedTags[l.get("UserID")];
                                for (var g = 0; g < m.length; g++) t.push("26=" + m[g])
                            }
                            return t.push((new Date).getTime() + "=" + (new Date).getTime()), r + t.join(i)
                        },
                        encodeInteger: function(e) {
                            var t = e.toString(2).split(""),
                                n = 1,
                                r = t.length,
                                i = 0;
                            while (n < r) t.splice(n + i, 0, 0), n += 3, i++;
                            return (parseInt(t.join(""), 2) * 751).toString(16)
                        },
                        decodeInteger: function(e) {
                            var n = (parseInt(e, 16) / 751).toString(2).split(""),
                                r = 1,
                                i = 0;
                            while (n[r + i] !== t) n[r + i] = null, r += 3, i++;
                            return parseInt(n.join(""), 2)
                        },
                        showFlashElements: function() {
                            $.browser.mozilla && _.toInt($.browser.version) < 6 ? $('#theme-header div[data-flash-wmode="window"] object').each(function(e, t) {
                                t.style.visibility = "visible"
                            }) : $('#theme-header div[data-flash-wmode="window"] object').show()
                        },
                        hideFlashElements: function() {
                            $.browser.mozilla && _.toInt($.browser.version) < 6 ? $('#theme-header div[data-flash-wmode="window"] object').each(function(e, t) {
                                t.style.visibility = "hidden"
                            }) : $('#theme-header div[data-flash-wmode="window"] object').hide()
                        },
                        loadSocialvibe: function() {
                            if (r) return r.promise();
                            r = $.Deferred();
                            var t = setTimeout(function() {
                                e.socialvibe || r.reject()
                            }, 3e3),
                                n = document.getElementById("socialvibe-root");
                            document.getElementById("socialvibe-js") ? $(n).empty() : (n = document.createElement("div"), n.id = "socialvibe-js", document.body.appendChild(n));
                            var i = function() {
                                    var i = document.createElement("script");
                                    i.id = "socialvibe-client-js", i.async = !0, gsConfig && gsConfig.testSocialvibe ? i.src = document.location.protocol + "//qa.static.socialvi.be/js/socialvibe.client.js" : i.src = document.location.protocol + "//static.socialvi.be/js/socialvibe.client.js";
                                    var s = function() {
                                            if ($.browser.msie && this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") return;
                                            this.onload = this.onreadystatechange = null, setTimeout(function() {
                                                clearTimeout(t), typeof e.socialvibe == "object" && e.socialvibe && r.resolve(e.socialvibe)
                                            }, 100)
                                        };
                                    i.onload = i.onreadystatechange = s, n.appendChild(i)
                                };
                            if (typeof e.easyXDM == "object" && e.easyXDM) return i(), r.promise();
                            var s = document.createElement("script");
                            s.id = "easyXDM-js", s.async = !0, s.src = document.location.protocol + "//static.socialvi.be/js/easyXDM.min.js";
                            var o = function() {
                                    if ($.browser.msie && this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") return;
                                    this.onload = this.onreadystatechange = null, setTimeout(function() {
                                        i()
                                    }, 10)
                                };
                            s.onload = s.onreadystatechange = o, n.appendChild(s)
                        },
                        getSocialvibeActivities: function(e, t) {
                            var r = $.extend({}, i),
                                u = $.Deferred();
                            if (e && e.get("TSDOB")) {
                                var a = e.get("TSDOB").split("-");
                                if (a.length == 3) {
                                    var f = new Date,
                                        l = f.getFullYear() - _.toInt(a[0]);
                                    _.toInt(a[1]) > f.month ? l -= 1 : _.toInt(a[1]) == f.month && _.toInt(a[2]) > f.date && (l -= 1), r.age = l
                                }
                            }
                            e && e.get("Sex") && (r.gender = e.get("Sex").toLowerCase()), e && e.get("UserID") > 0 ? r.network_user_id = e.get("UserID") : r.network_user_id = n.Services.API.sessionID;
                            var c = function(e) {
                                    try {
                                        e.requestActivities(_.bind(o, this, u, t, e))
                                    } catch (n) {
                                        u.reject()
                                    }
                                };
                            return s ? c(s) : n.Models.Ad.loadSocialvibe().done(function(e) {
                                e && e.client(r, function(e) {
                                    s = e, c(e)
                                })
                            }).fail(_.bind(u.reject, u)), u.promise()
                        }
                    })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = t.Models.Promotions = Backbone.Model.extend({
                    idAttribute: "PromotionsID",
                    initialize: function() {}
                }, {
                    promotions: {
                        557: {
                            location: "samsung",
                            themeID: 999,
                            version: 1
                        },
                        902: {
                            key: "rocksmith",
                            location: "rockSmith",
                            themeID: 902,
                            version: 1
                        },
                        808: {
                            key: "justdance",
                            location: "justDance",
                            themeID: 808,
                            version: 1
                        },
                        1206: {
                            key: "whiteCastle",
                            location: "whiteCastle",
                            themeID: 1199,
                            themeOnly: !0,
                            version: 1.002
                        },
                        1203: {
                            key: "mitsubishi",
                            location: "mitsubishi",
                            themeID: 1204,
                            version: 1.001
                        }
                    },
                    getPromotion: function(e) {
                        return this.promotions[e]
                    },
                    justDanceTopPicks: [{
                        albumID: "7766965",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7766965.jpg",
                        albumName: "Cold Rock a Party 2012",
                        albumURL: "#!/album/Cold+Rock+A+Party+2012/7766965",
                        artistName: "Brooklyn Bounce feat. King Chronic & Miss L.",
                        artistURL: "#!/artist/Brooklyn+Bounce+Feat+King+Chronic+and+Miss+L/1939717"
                    }, {
                        albumID: "7773771",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7773771.jpg",
                        albumName: "In the House",
                        albumURL: "#!/album/In+The+House/7773771",
                        artistName: "K-Maze",
                        artistURL: "#!/artist/K+Maze/2202435"
                    }, {
                        albumID: "7915016",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7915016.jpg",
                        albumName: "Back and Forth",
                        albumURL: "#!/album/Back+And+Forth/7915016",
                        artistName: "Oldschool Boys",
                        artistURL: "#!/artist/Oldschool+Boys/2433736"
                    }, {
                        albumID: "7811481",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7811481.jpg",
                        albumName: "Trip to Paradise",
                        albumURL: "#!/album/Trip+To+Paradise/7811481",
                        artistName: "Cansis vs. Spaceship",
                        artistURL: "#!/artist/Cansis+Vs+Spaceship/2378727"
                    }, {
                        albumID: "7806674",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806674.jpg",
                        albumName: "Something In The Air",
                        albumURL: "#!/album/Something+In+The+Air/7806674",
                        artistName: "Sidney Samson ft Tony Cha Cha",
                        artistURL: "#!/artist/Sidney+Samson+Ft+Tony+Cha+Cha/2397518"
                    }, {
                        albumID: "7806608",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806608.jpg",
                        albumName: "Spring Break (feat. Pitbull)",
                        albumURL: "#!/album/Spring+Break+feat+Pitbull/7806608",
                        artistName: "Jump Smokers feat. Pitbull",
                        artistURL: "#!/artist/Jump+Smokers+Feat+Pitbull/1550353"
                    }, {
                        albumID: "7188376",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7188376.jpg",
                        albumName: "Alive (feat. The Good Natured)",
                        albumURL: "#!/album/Alive+feat+The+Good+Natured/7188376",
                        artistName: "Adrian Lux feat. The Good Natured",
                        artistURL: "#!/artist/Adrian+Lux+Feat+The+Good+Natured/2202505"
                    }, {
                        albumID: "7806682",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806682.jpg",
                        albumName: "Cosmic",
                        albumURL: "#!/album/Cosmic/7806682",
                        artistName: "ZIGGY",
                        artistURL: "#!/artist/ZIGGY/1623717"
                    }, {
                        albumID: "7754641",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7754641.jpg",
                        albumName: "Miami to Ibiza One",
                        albumURL: "#!/album/Miami+To+Ibiza+One/7754641",
                        artistName: "Baby love",
                        artistURL: "#!/artist/Various+Artists/55"
                    }, {
                        albumID: "7806868",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806868.jpg",
                        albumName: "Piano Funk",
                        albumURL: "#!/album/Piano+Funk/7806868",
                        artistName: "Total Science & S.P.Y Feat. Riya & D?M FunK",
                        artistURL: "#!/artist/Total+Science+and+S+P+Y+Feat+Riya+and+D+M+FunK/2397871"
                    }, {
                        albumID: "7770742",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7770742.jpg",
                        albumName: "Zoma",
                        albumURL: "#!/album/Zoma/7770742",
                        artistName: "Crazy White Boy feat. Nonku",
                        artistURL: "#!/artist/Crazy+White+Boy+Feat+Nonku/2386022"
                    }, {
                        albumID: "7769592",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7769592.jpg",
                        albumName: "Ready or Not",
                        albumURL: "#!/album/Ready+Or+Not/7769592",
                        artistName: "Plastik Funk",
                        artistURL: "#!/artist/Plastik+Funk/9935"
                    }, {
                        albumID: "7806798",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806798.jpg",
                        albumName: "Heartbreaker (feat. Lovefoxxx)",
                        albumURL: "#!/album/Heartbreaker+feat+Lovefoxxx/7806798",
                        artistName: "Steve Aoki feat. Kid Cudi & Travis Barker",
                        artistURL: "#!/artist/Steve+Aoki+Feat+Lovefoxxx/2288346"
                    }, {
                        albumID: "7806764",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806764.jpg",
                        albumName: "Feel Alive (feat. Cosmo Klein)",
                        albumURL: "#!/album/Feel+Alive+feat+Cosmo+Klein/7806764",
                        artistName: "Jean Elan feat. Cosmo Klein",
                        artistURL: "#!/artist/Jean+Elan+Feat+Cosmo+Klein/1834256"
                    }, {
                        albumID: "7806804",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806804.jpg",
                        albumName: "Ultra Trance 10",
                        albumURL: "#!/album/Ultra+Trance+10/7806804",
                        artistName: "deadmau5",
                        artistURL: "#!/artist/Deadmau5/51915"
                    }, {
                        albumID: "7806475",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806475.jpg",
                        albumName: "Bounce To The Beat",
                        albumURL: "#!/album/Bounce+To+The+Beat/7806475",
                        artistName: "Todd Terry Presents Sound Design",
                        artistURL: "#!/artist/Todd+Terry+Presents+Sound+Design/2397364"
                    }, {
                        albumID: "7806487",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806487.jpg",
                        albumName: "Raise The Roof (feat. Pitbull, Fatman Scoop & Nabiha)",
                        albumURL: "#!/album/Raise+The+Roof+feat+Pitbull+Fatman+Scoop+and+Nabiha/7806487",
                        artistName: "Hampenberg & Alexander Brown feat. Pitbull, Fatman Scoop & Nabiha",
                        artistURL: "#!/artist/Hampenberg+and+Alexander+Brown+Feat+Pitbull+Fatman+Scoop+and+Nabiha/2397369"
                    }, {
                        albumID: "7806675",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806675.jpg",
                        albumName: "Fairytale",
                        albumURL: "#!/album/Fairytale/7806675",
                        artistName: "Zoo Brazil",
                        artistURL: "#!/artist/Zoo+Brazil/145876"
                    }],
                    justDanceNewReleases: [{
                        albumID: "7767977",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7767977.jpg",
                        albumName: "R&R",
                        albumURL: "#!/album/R+and+R/7767977",
                        artistName: "Baker, McFly & Gee",
                        artistURL: "#!/artist/Baker+McFly+and+Gee/2384281"
                    }, {
                        albumID: "7889855",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7889855.jpg",
                        albumName: "El Día De La Muerte",
                        albumURL: "#!/album/El+D+a+De+La+Muerte/788985",
                        artistName: "X-COM",
                        artistURL: "#!/artist/X+COM/2425997"
                    }, {
                        albumID: "7966981",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7966981.jpg",
                        albumName: "All for You",
                        albumURL: "#!/album/All+For+You/7966981",
                        artistName: "Plastik Funk feat. Adam Joseph",
                        artistURL: "#!/artist/Plastik+Funk+Feat+Adam+Joseph/2449389"
                    }, {
                        albumID: "7966997",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7966997.jpg",
                        albumName: "Who",
                        albumURL: "#!/album/Who/7966997",
                        artistName: "Tujamo & Plastik Funk",
                        artistURL: "#!/artist/Tujamo+and+Plastik+Funk/2449284"
                    }, {
                        albumID: "7806934",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806934.jpg",
                        albumName: "DJ Tools Vol. 15",
                        albumURL: "#!/album/DJ+Tools+Vol+15/7806934",
                        artistName: "Steve Aoki feat. Kid Cudi & Travis Barker",
                        artistURL: "#!/artist/Various+Artists/55"
                    }, {
                        albumID: "7855381",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855381.jpg",
                        albumName: "San Francisco Remixes",
                        albumURL: "#!/album/San+Francisco+Remixes/7855381",
                        artistName: "Playdoughboy",
                        artistURL: "#!/artist/Playdoughboy/1965086"
                    }, {
                        albumID: "7866503",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7866503.jpg",
                        albumName: "Plane To Somewhere",
                        albumURL: "#!/album/Plane+To+Somewhere/7866503",
                        artistName: "Different Language",
                        artistURL: "#!/artist/Different+Language/2073414"
                    }, {
                        albumID: "7886892",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7886892.jpg",
                        albumName: "Reckless",
                        albumURL: "#!/album/Reckless/7886892",
                        artistName: "Firebeatz & JOEYSUKI",
                        artistURL: "#!/artist/Firebeatz+and+JOEYSUKI/2425065"
                    }, {
                        albumID: "7911789",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7911789.jpg",
                        albumName: "Steve Jobs (feat. Angger Dimas)",
                        albumURL: "#!/album/Steve+Jobs+feat+Angger+Dimas/7911789",
                        artistName: "Steve Aoki feat. Angger Dimas",
                        artistURL: "#!/artist/Steve+Aoki+Feat+Angger+Dimas/2288345"
                    }, {
                        albumID: "7767149",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7767149.jpg",
                        albumName: "Oh Baby",
                        albumURL: "#!/album/Oh+Baby/7767149",
                        artistName: "Quembino",
                        artistURL: "#!/artist/Quembino/1951660"
                    }, {
                        albumID: "7772922",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7772922.jpg",
                        albumName: "I Can't Get Nothing - Unplugged",
                        albumURL: "#!/album/I+Can+t+Get+Nothing+Unplugged/7772922",
                        artistName: "Tiko's Groove feat. Gosha",
                        artistURL: "#!/artist/Tiko+s+Groove+Feat+Gosha/1853140"
                    }, {
                        albumID: "7773831",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7773831.jpg",
                        albumName: "Verblendet",
                        albumURL: "#!/album/Verblendet/7773831",
                        artistName: "Monkey Zoo",
                        artistURL: "#!/artist/Monkey+Zoo+Feat+Tina/2387807"
                    }, {
                        albumID: "7742396",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7742396.jpg",
                        albumName: "Egyptian Soul",
                        albumURL: "#!/album/Egyptian+Soul/7742396",
                        artistName: "Progressive Thrust",
                        artistURL: "#!/artist/Progressive+Thrust/2376395"
                    }, {
                        albumID: "7806556",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806556.jpg",
                        albumName: "Flashing Lights",
                        albumURL: "#!/album/Flashing+Lights/7806556",
                        artistName: "Roger Sanchez & Sidney Simpson",
                        artistURL: "#!/artist/Roger+Sanchez+and+Sidney+Samson/2397442"
                    }, {
                        albumID: "7806607",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806607.jpg",
                        albumName: "Dice (feat. Hadley)",
                        albumURL: "#!/album/Dice+feat+Hadley/7806607",
                        artistName: "Serge Devant feat. Hadley",
                        artistURL: "#!/artist/Serge+Devant+Feat+Hadley/1167133"
                    }, {
                        albumID: "7742398",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7742398.jpg",
                        albumName: "Coucher De Soleil Sur Ibiza",
                        albumURL: "#!/album/Coucher+De+Soleil+Sur+Ibiza/7742398",
                        artistName: "DJ JB Intl",
                        artistURL: "#!/artist/DJ+JB+Intl/2376396"
                    }, {
                        albumID: "7806712",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806712.jpg",
                        albumName: "Stand Alone (feat. Jareth)",
                        albumURL: "#!/album/Stand+Alone+feat+Jareth/7806712",
                        artistName: "Chris Lake & Lazy Rich feat. Jareth",
                        artistURL: "#!/artist/Chris+Lake+and+Lazy+Rich+Feat+Jareth/2397535"
                    }],
                    justDanceNewArtists: [{
                        albumID: "7771193",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7771193.jpg",
                        albumName: "Dreaming",
                        albumURL: "#!/album/Dreaming/7771193",
                        artistName: "Join Forces",
                        artistURL: "#!/artist/Join+Forces/62439"
                    }, {
                        albumID: "7947437",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7947437.jpg",
                        albumName: "Hands Up",
                        albumURL: "#!/album/Hands+Up/7947437",
                        artistName: "Junkfood Junkies",
                        artistURL: "#!/artist/Junkfood+Junkies/406638"
                    }, {
                        albumID: "7811347",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7811347.jpg",
                        albumName: "Party Bounce",
                        albumURL: "#!/album/Party+Bounce/7811347",
                        artistName: "Brooklyn Bounce & Splash",
                        artistURL: "#!/artist/Brooklyn+Bounce+and+Splash/2402047"
                    }, {
                        albumID: "7838069",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7838069.jpg",
                        albumName: "Evacuate",
                        albumURL: "#!/album/Evacuate/7838069",
                        artistName: "Science Vs Nature feat. Max Burgundy",
                        artistURL: "#!/artist/Science+Vs+Nature+Feat+Max+Burgundy/2409989"
                    }, {
                        albumID: "7765231",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7765231.jpg",
                        albumName: "Turn It Up",
                        albumURL: "#!/album/Turn+It+Up/7765231",
                        artistName: "Jason Chance & Marcella Woods",
                        artistURL: "#!/artist/Jason+Chance+and+Marcella+Woods/2382526"
                    }, {
                        albumID: "7765997",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7765997.jpg",
                        albumName: "Summer Love",
                        albumURL: "#!/album/Summer+Love/7765997",
                        artistName: "Candy Shop",
                        artistURL: "#!/artist/Candy+Shop/2202311"
                    }, {
                        albumID: "7767049",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7767049.jpg",
                        albumName: "Ai Se Eu Te Pego - Remix Edition",
                        albumURL: "#!/album/Ai+Se+Eu+Te+Pego+Remix+Edition/7767049",
                        artistName: "Damon Paul feat. Patricia Banks",
                        artistURL: "#!/artist/Damon+Paul+Feat+Patricia+Banks/2382550"
                    }, {
                        albumID: "7767455",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7767455.jpg",
                        albumName: "Krystal",
                        albumURL: "#!/album/Krystal/7767455",
                        artistName: "I-BIZ",
                        artistURL: "#!/artist/I+BIZ/2302003"
                    }, {
                        albumID: "7765833",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7765833.jpg",
                        albumName: "Lost in Memories 2.0",
                        albumURL: "#!/album/Lost+In+Memories+2+0/7765833",
                        artistName: "Para X",
                        artistURL: "#!/artist/Para+X/175473"
                    }, {
                        albumID: "7768752",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7768752.jpg",
                        albumName: "Tell Me",
                        albumURL: "#!/album/Tell+Me/7768752",
                        artistName: "Roberto Rodriguez",
                        artistURL: "#!/artist/Roberto+Rodriguez+Feat+Kholi/2384781"
                    }, {
                        albumID: "7769961",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7769961.jpg",
                        albumName: "I Don't Like Psychedelics",
                        albumURL: "#!/album/I+Don+t+Like+Psychedelics/7769961",
                        artistName: "Dust",
                        artistURL: "#!/artist/Dust/42080"
                    }, {
                        albumID: "7766793",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7766793.jpg",
                        albumName: "Voyage",
                        albumURL: "#!/album/Voyage/7766793",
                        artistName: "Ride Perfekt",
                        artistURL: "#!/artist/Ride+Perfekt/2382724"
                    }, {
                        albumID: "7754262",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7754262.jpg",
                        albumName: "I Just Want to Dance (single)",
                        albumURL: "#!/album/I+Just+Want+To+Dance+single/7754262",
                        artistName: "Delano Salviano",
                        artistURL: "#!/artist/Delano+Salviano/2379456"
                    }, {
                        albumID: "7806970",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806970.jpg",
                        albumName: "For All We Know",
                        albumURL: "#!/album/For+All+We+Know/7806970",
                        artistName: "Designer Drugs",
                        artistURL: "#!/artist/Designer+Drugs/1175551"
                    }, {
                        albumID: "7806850",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7806850.jpg",
                        albumName: "Glow",
                        albumURL: "#!/album/Glow/7806850",
                        artistName: "Pixel Cheese",
                        artistURL: "#!/artist/Pixel+Cheese/2327671"
                    }, {
                        albumID: "7580994",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7580994.jpg",
                        albumName: "L'Amour",
                        albumURL: "#!/album/L+Amour/7580994",
                        artistName: "Bingo Players",
                        artistURL: "#!/artist/Bingo+Players/1051384"
                    }, {
                        albumID: "7949696",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7949696.jpg",
                        albumName: "Funny Guy",
                        albumURL: "#!/album/Funny+Guy/7949696",
                        artistName: "Nickotine & Frankee G",
                        artistURL: "#!/artist/Nickotine+and+Frankee+G/2443756"
                    }, {
                        albumID: "7754260",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7754260.jpg",
                        albumName: "Kraak Beats Vol. 2",
                        albumURL: "#!/album/Kraak+Beats+Vol+2/7754260",
                        artistName: "Kraak & Smaak",
                        artistURL: "#!/artist/Kraak+and+Smaak/9117"
                    }],
                    rockSmithTopPicks: [{
                        albumID: "7811372",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7811372.jpg",
                        albumName: "Vol. 40%",
                        albumURL: "#!/album/Vol+40/7811372",
                        artistName: "Delayhead",
                        artistURL: "#!/artist/Delayhead/2402064"
                    }, {
                        albumID: "7887102",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7887102.jpg",
                        albumName: "Duke and the Darling, Live at Abbey Road",
                        albumURL: "#!/album/Duke+And+The+Darling+Live+At+Abbey+Road/7887102",
                        artistName: "Duke and the Darlings",
                        artistURL: "#!/artist/Duke+And+The+Darlings/2425212"
                    }, {
                        albumID: "7811374",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7811374.jpg",
                        albumName: "Sometimes",
                        albumURL: "#!/album/Sometimes/7811374",
                        artistName: "Mela",
                        artistURL: "#!/artist/Mela/156562"
                    }, {
                        albumID: "7851617",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7851617.jpg",
                        albumName: "Treat Her Like A Lady",
                        albumURL: "#!/album/Treat+Her+Like+A+Lady/7851617",
                        artistName: "Airiel",
                        artistURL: "#!/artist/Elvis+Presley/425"
                    }, {
                        albumID: "7837467",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7837467.jpg",
                        albumName: "Kid Games",
                        albumURL: "#!/album/Kid+Games/7837467",
                        artistName: "Airiel",
                        artistURL: "#!/artist/Airiel/87594"
                    }, {
                        albumID: "7769438",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7769438.jpg",
                        albumName: "Think This Over",
                        albumURL: "#!/album/Think+This+Over/7769438",
                        artistName: "Atlantic Attraction",
                        artistURL: "#!/artist/Atlantic+Attraction/2005201"
                    }, {
                        albumID: "7754793",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7754793.jpg",
                        albumName: "A Little Weight B/W A Little Planet",
                        albumURL: "#!/album/A+Little+Weight+B+W+A+Little+Planet/7754793",
                        artistName: "CSC Funk Band",
                        artistURL: "#!/artist/CSC+Funk+Band/2198456"
                    }, {
                        albumID: "7858344",
                        albumImage: "http://images.grooveshark.com/static/albums/90_7858344.jpg",
                        albumName: "Broken Bottles EP",
                        albumURL: "#!/album/Broken+Bottles+EP/7858344",
                        artistName: "Dizzy Tales",
                        artistURL: "#!/artist/Dizzy+Tales/2416204"
                    }, {
                        albumID: "7169050",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7169050.jpg",
                        albumName: "Breads in the Armor",
                        albumURL: "#!/album/Breaks+In+The+Armor/7169050",
                        artistName: "Crooked Fingers",
                        artistURL: "#!/artist/Crooked+Fingers/9360"
                    }, {
                        albumID: "7811776",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7811776.jpg",
                        albumName: "Mental Circus",
                        albumURL: "#!/album/Mental+Circus/7811776",
                        artistName: "BlueGem",
                        artistURL: "#!/artist/BlueGem/2402403"
                    }, {
                        albumID: "7851618",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7851618.jpg",
                        albumName: "Peru, Like the Country",
                        albumURL: "#!/album/Peru+Like+The+Country/7851618",
                        artistName: "Peru Like The Country",
                        artistURL: "#!/artist/Peru+Like+The+Country/2413965"
                    }, {
                        albumID: "7855627",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855627.jpg",
                        albumName: "Coffee and Cakes For Funerals",
                        albumURL: "#!/album/Coffee+And+Cakes+For+Funerals/7855627",
                        artistName: "Coffee and Cakes For Funerals",
                        artistURL: "#!/artist/Coffee+And+Cakes+For+Funerals/2415332"
                    }, {
                        albumID: "7769522",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7769522.jpg",
                        albumName: "Get Out of Here",
                        albumURL: "#!/album/Get+Out+Of+Here/7769522",
                        artistName: "Instead Of Lions",
                        artistURL: "#!/artist/Instead+Of+Lions/2384898"
                    }, {
                        albumID: "7807138",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7807138.jpg",
                        albumName: "Tell Me",
                        albumURL: "#!/album/Tell+Me+What+s+On+Your+Mind+EP/7807138",
                        artistName: "Allah-Las",
                        artistURL: "#!/artist/~/2091479"
                    }, {
                        albumID: "7889826",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7889826.jpg",
                        albumName: "Blacksmith Legacy",
                        albumURL: "#!/album/Blacksmith+Legacy/7889826",
                        artistName: "BlackSmith Legacy",
                        artistURL: "#!/artist/~/2425976"
                    }, {
                        albumID: "181768",
                        albumImage: "http://images.grooveshark.com/static/albums/200_181768.jpg",
                        albumName: "Absolutely The Best",
                        albumURL: "#!/album/Absolutely+The+Best/181768",
                        artistName: "The Zombies",
                        artistURL: "#!/artist/The+Zombies/4077"
                    }, {
                        albumID: "203599",
                        albumImage: "http://images.grooveshark.com/static/albums/200_203599.jpg",
                        albumName: "The Complete BBC Recordings",
                        albumURL: "#!/album/The+Complete+BBC+Recordings/203599",
                        artistName: "Joy Division",
                        artistURL: "#!/artist/Joy+Division/3549"
                    }, {
                        albumID: "7902199",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7902199.jpg",
                        albumName: "Servant’s Arise",
                        albumURL: "#!/album/Servants+Arise/7902199",
                        artistName: "Served Dead",
                        artistURL: "#!/artist/Served+Dead/2429751"
                    }, {
                        albumID: "7774920",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7774920.jpg",
                        albumName: "Ten Stories",
                        albumURL: "#!/album/Ten+Stories/7774920",
                        artistName: "MeWithoutYou",
                        artistURL: "#!/artist/MewithoutYou/401422"
                    }, {
                        albumID: "7892556",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7892556.jpg",
                        albumName: "Let Me Tell You This",
                        albumURL: "#!/album/Let+Me+Tell+You+This/7892556",
                        artistName: "The Bips",
                        artistURL: "#!/artist/The+Bips/651581"
                    }, {
                        albumID: "7855394",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855394.jpg",
                        albumName: "Another Time",
                        albumURL: "#!/album/Another+Time/7855394",
                        artistName: "The Atlantics",
                        artistURL: "#!/artist/The+Atlantics/69101"
                    }, {
                        albumID: "7889789",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7889789.jpg",
                        albumName: "Willow B/W Lost",
                        albumURL: "#!/album/Willow+B+W+Lost/7889789",
                        artistName: "Richard Buckner",
                        artistURL: "#!/artist/Richard+Buckner/6702"
                    }, {
                        albumID: "7866489",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7866489.jpg",
                        albumName: "Back in 1968 - Cadillac Superhits Vol. 2",
                        albumURL: "#!/album/Back+In+1958+Cadillac+Superhits+Vol+2/7866489",
                        artistName: "Various Artists",
                        artistURL: "#!/artist/Various+Artists/55"
                    }, {
                        albumID: "7949695",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7949695.jpg",
                        albumName: "Red Hot Lovin’",
                        albumURL: "#!/album/Red+Hot+Lovin/7949695",
                        artistName: "Session ’57",
                        artistURL: "#!/artist/Session+57/1942129"
                    }],
                    rockSmithNewReleases: [{
                        albumID: "7768847",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7768847.jpg",
                        albumName: "Thrill Me",
                        albumURL: "#!/album/Thrill+Me/7768847",
                        artistName: "Fire",
                        artistURL: "#!/artist/Fire/55036"
                    }, {
                        albumID: "7754252",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7754252.jpg",
                        albumName: "The Dawn of Nothingness",
                        albumURL: "#!/album/The+Dawn+Of+Nothingness/7754252",
                        artistName: "The Revenge Project",
                        artistURL: "#!/artist/The+Revenge+Project/1965649"
                    }, {
                        albumID: "7769270",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7769270.jpg",
                        albumName: "666 - total evil",
                        albumURL: "#!/album/666+Total+Evil/7769270",
                        artistName: "TAABOO",
                        artistURL: "#!/artist/TAABOO/2385021"
                    }, {
                        albumID: "7855839",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855839.jpg",
                        albumName: "The Emperor's New Clothes",
                        albumURL: "#!/album/The+Emperor+s+New+Clothes/7855839",
                        artistName: "Jack Rabbit Slim",
                        artistURL: "#!/artist/Jack+Rabbit+Slim/843159"
                    }, {
                        albumID: "7949689",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7949689.jpg",
                        albumName: "Coming of Age",
                        albumURL: "#!/album/Coming+Of+Age/7949689",
                        artistName: "KNESSET",
                        artistURL: "#!/artist/KNESSET/2443753"
                    }, {
                        albumID: "7902019",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7902019.jpg",
                        albumName: "Festive Hearts",
                        albumURL: "#!/album/Festive+Hearts/7902019",
                        artistName: "Lady Escape",
                        artistURL: "#!/artist/Lady+Escape/869361"
                    }, {
                        albumID: "7855678",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855678.jpg",
                        albumName: "Shake EP",
                        albumURL: "#!/album/Shake+EP/7855678",
                        artistName: "Phenomenal Handclap Band",
                        artistURL: "#!/artist/Phenomenal+Handclap+Band/1992865"
                    }, {
                        albumID: "7771153",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7771153.jpg",
                        albumName: "State of Mind",
                        albumURL: "#!/album/State+Of+Mind/7771153",
                        artistName: "Fexet",
                        artistURL: "#!/artist/Fexet/2386239"
                    }, {
                        albumID: "6747046",
                        albumImage: "http://images.grooveshark.com/static/albums/200_6747046.jpg",
                        albumName: "Sleeper",
                        albumURL: "#!/album/Sleeper/6747046",
                        artistName: "Sleeper",
                        artistURL: "#!/album/Sleeper/6747046"
                    }, {
                        albumID: "7855662",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855662.jpg",
                        albumName: "All You Gotta Do",
                        albumURL: "#!/album/All+You+Gotta+Do/7855662",
                        artistName: "Split Seconds",
                        artistURL: "#!/artist/Split+Seconds/1027365"
                    }, {
                        albumID: "7858342",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7858342.jpg",
                        albumName: "Jungle Sessions EP",
                        albumURL: "#!/album/Jungle+Sessions+EP/7858342",
                        artistName: "Sol Cat",
                        artistURL: "#!/artist/Sol+Cat/2416202"
                    }, {
                        albumID: "7860681",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7860681.jpg",
                        albumName: "Musketeer",
                        albumURL: "#!/album/Musketeer/7860681",
                        artistName: "Rawburt",
                        artistURL: "#!/artist/Rawburt/2385195"
                    }, {
                        albumID: "7855363",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855363.jpg",
                        albumName: "United States of Being",
                        albumURL: "#!/album/UNITED+STATES+OF+BEING/7855363",
                        artistName: "Pujol",
                        artistURL: "#!/artist/PUJOL/2205558"
                    }, {
                        albumID: "7578597",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7578597.jpg",
                        albumName: "Generals",
                        albumURL: "#!/album/Generals/7578597",
                        artistName: "The Mynabirds",
                        artistURL: "#!/artist/The+Mynabirds/1594830"
                    }, {
                        albumID: "7964529",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7964529.jpg",
                        albumName: "67 Purple Fishes",
                        albumURL: "#!/album/67+Purple+Fishes/7964529",
                        artistName: "67 Purple Fishes",
                        artistURL: "#!/artist/67+Purple+Fishes/2417921"
                    }, {
                        albumID: "7115185",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7115185.jpg",
                        albumName: "Listahitit",
                        albumURL: "#!/album/Listahitit/7115185",
                        artistName: "Appendix",
                        artistURL: "#!/artist/Appendix/753132"
                    }, {
                        albumID: "7966736",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7966736.jpg",
                        albumName: "Rubbing Your Gums",
                        albumURL: "#!/album/Rubbing+Your+Gums/7966736",
                        artistName: "Drunk Mums",
                        artistURL: "#!/artist/Drunk+Mums/2449177"
                    }],
                    rockSmithNewArtists: [{
                        albumID: "6828563",
                        albumImage: "http://images.grooveshark.com/static/albums/200_6828563.jpg",
                        albumName: "Let The Games Begin",
                        albumURL: "#!/album/Let+The+Games+Begin/6828563",
                        artistName: "Hell In the Club",
                        artistURL: "#!/artist/Hell+In+The+Club/2092274"
                    }, {
                        albumID: "7855351",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855351.jpg",
                        albumName: "Midlight",
                        albumURL: "#!/album/Midlight/7855351",
                        artistName: "Midlight",
                        artistURL: "#!/artist/Midlight/2415148"
                    }, {
                        albumID: "7807025",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7807025.jpg",
                        albumName: "Give Me Life",
                        albumURL: "#!/album/Give+Me+Life/7807025",
                        artistName: "The Rah's",
                        artistURL: "#!/artist/The+Rah+s/2398131"
                    }, {
                        albumID: "7837473",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7837473.jpg",
                        albumName: "Ohio",
                        albumURL: "#!/album/Ohio/7837473",
                        artistName: "4 Day Weekend",
                        artistURL: "#!/artist/4+Day+Weekend/2409563"
                    }, {
                        albumID: "7892536",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7892536.jpg",
                        albumName: "Adrenalin Junkie",
                        albumURL: "#!/album/Adrenalin+Junkie/7892536",
                        artistName: "Bleech",
                        artistURL: "#!/artist/Bleech/1178343"
                    }, {
                        albumID: "7754362",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7754362.jpg",
                        albumName: "let the commencement beginulate",
                        albumURL: "#!/album/Let+The+Commencement+Beginulate/7754362",
                        artistName: "fields without fences",
                        artistURL: "#!/artist/Fields+Without+Fences/2379514"
                    }, {
                        albumID: "7767973",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7767973.jpg",
                        albumName: "Happy Go F**k You",
                        albumURL: "#!/album/Happy+Go+F+k+You/7767973",
                        artistName: "Les Blaque Pearlz",
                        artistURL: "#!/artist/Les+Blaque+Pearlz/2384278"
                    }, {
                        albumID: "7855666",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855666.jpg",
                        albumName: "Ghost Ride the Whip",
                        albumURL: "#!/album/Ghost+Ride+The+Whip/7855666",
                        artistName: "Ninetails",
                        artistURL: "#!/artist/Ninetails/2415345"
                    }, {
                        albumID: "7803325",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7803325.jpg",
                        albumName: "What Makes a Good Man?",
                        albumURL: "#!/album/What+Makes+A+Good+Man/7803325",
                        artistName: "The Heavy",
                        artistURL: "#!/artist/The+Heavy/51167"
                    }, {
                        albumID: "7811595",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7811595.jpg",
                        albumName: "Taikonaut",
                        albumURL: "#!/album/Taikonaut/7811595",
                        artistName: "Taikonaut",
                        artistURL: "#!/artist/Taikonaut/959672"
                    }, {
                        albumID: "7773248",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7773248.jpg",
                        albumName: "Drag",
                        albumURL: "#!/album/Drag/7773248",
                        artistName: "The Dragtones",
                        artistURL: "#!/artist/The+Dragtones/2387403"
                    }, {
                        albumID: "7855437",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855437.jpg",
                        albumName: "Ramble On",
                        albumURL: "#!/album/Ramble+On/7855437",
                        artistName: "The Ramblin Ambassadors",
                        artistURL: "#!/artist/The+Ramblin+Ambassadors/971562"
                    }, {
                        albumID: "4625281",
                        albumImage: "http://images.grooveshark.com/static/albums/200_4625281.jpg",
                        albumName: "The Temper Trap",
                        albumURL: "#!/album/The+Temper+Trap/4625281",
                        artistName: "The Temper Trap",
                        artistURL: "#!/artist/The+Temper+Trap/973606"
                    }, {
                        albumID: "7855585",
                        albumImage: "http://images.grooveshark.com/static/albums/200_7855585.jpg",
                        albumName: "Joseph Liddy and the Skeleton Horse (Part 2)",
                        albumURL: "#!/album/Joseph+Liddy+And+The+Skeleton+Horse+Part+2/7855585",
                        artistName: "Joseph Liddy and the Skeleton Horse",
                        artistURL: "#!/artist/Joseph+Liddy+And+The+Skeleton+Horse/2291000"
                    }]
                })
            }(), function() {
                function i(e, t) {
                    var n = e.attributes.upVotes,
                        r = t.attributes.upVotes;
                    return (r ? r.length : 0) - (n ? n.length : 0)
                }
                function s(e, t, n) {
                    var r = [],
                        i = 0,
                        s = e.length,
                        o, u = 0,
                        a = 0,
                        f = 0;
                    for (; i < s; i++) o = e[i], o.broadcastSongID = [n, ":", i].join(""), t && t[i] && t[i].s == o.SongID ? (o.upVotes = _.toInt(t[i].u) || 0, o.downVotes = _.toInt(t[i].d) || 0, o.listens = _.toInt(t[i].l) || 0, o.listensCounted = !0, u += o.upVotes, a += o.downVotes, f += o.listens) : (o.upVotes = 0, o.downVotes = 0, o.listens = 0), o.listensCounted = !0, r.push(o);
                    return {
                        totalUpVotes: u,
                        totalDownVotes: a,
                        totalListens: f,
                        songs: r
                    }
                }
                function o(e, n, i, s) {
                    var o = [],
                        u = 0,
                        a = e.length,
                        f, l = 0,
                        c = 0,
                        h = 0;
                    for (; u < a; u++) {
                        f = e[u], f.broadcastSongID = [n, ":", f.queueSongID].join("");
                        if (i[f.broadcastSongID]) {
                            f.broadcastListens && (f.listens = _.toInt(f.broadcastListens), h += f.listens, i[f.broadcastSongID].set({
                                listens: f.listens,
                                listensCounted: !0
                            })), o.push(i[f.broadcastSongID]);
                            continue
                        }
                        f.broadcastUpVotes !== t && (f.upVotes = _.toInt(f.broadcastUpVotes), l += f.upVotes, delete f.broadcastUpVotes), f.broadcastDownVotes !== t && (f.downVotes = _.toInt(f.broadcastDownVotes), c += f.downVotes, delete f.broadcastDownVotes), f.broadcastListens !== t && (f.listensCounted = !0, f.listens = _.toInt(f.broadcastListens), h += f.listens, delete f.broadcastListens), f = new r.Models.BroadcastSong(f), i[f.id] = f, o.push(f)
                    }
                    return {
                        totalUpVotes: l,
                        totalDownVotes: c,
                        totalListens: h,
                        songs: o
                    }
                }
                function u(e) {
                    return !e || !e.b ? t : {
                        SongID: e.b.sID,
                        SongName: e.b.sN,
                        CalloutID: e.b.cID,
                        ArtistID: e.b.arID,
                        ArtistName: e.b.arN,
                        AlbumID: e.b.alID,
                        AlbumName: e.b.alN,
                        UserID: e.b.uID,
                        CoverArtFilename: e.b.art,
                        TrackNum: e.b.t,
                        EstimateDuration: e.b.estD,
                        Flags: e.b.flags,
                        Token: e.b.tk,
                        Tags: e.b.tags,
                        ArtistIsClaimed: e.b.arCl,
                        IsCallout: e.b.cID && !e.b.sID
                    }
                }
                function a(e, t, n) {
                    var i = r.Models.Player.playStatuses;
                    switch (t) {
                    case i.NONE:
                    case i.FAILED:
                    case i.COMPLETED:
                        !this.get("nextSong") && !this.idleTimeout && (this.idleTimeout = setTimeout(_.bind(function() {
                            var e = this.get("activeSongStatus");
                            switch (e) {
                            case i.NONE:
                            case i.FAILED:
                            case i.COMPLETED:
                                this.set("idle", !this.get("nextSong"));
                                break;
                            default:
                                this.set("idle", !1)
                            }
                            this.idleTimeout = !1
                        }, this), 15e3));
                        break;
                    default:
                        this.set({
                            idle: !1
                        }), this.idleTimeout && (clearTimeout(this.idleTimout), this.idleTimeout = !1)
                    }
                }
                function f(e, t, n) {
                    var s = t ? t.cachedBroadcastSongs : e.cachedBroadcastSongs,
                        u = t ? t.cachedBroadcastSuggestions : e.cachedBroadcastSuggestions;
                    if (e.history && !(e.history instanceof r.Models.Collections.BroadcastSongs)) if (e.history.songs) {
                        var a = t && t.history,
                            f;
                        e.history.songs[0] && y[e.history.songs[0].SongID] && (e.history.songs[0].broadcastListens = _.toInt(y[e.history.songs[0].SongID]), delete y[e.history.songs[0].SongID]);
                        if (a && a.length + 1 === e.history.songs.length) {
                            f = o([e.history.songs[0]], n, t.cachedBroadcastSongs);
                            var l = f.songs[0];
                            l && (e.totalListens = (t && t.totalListens || 0) + _.toInt(l.get("listens")), a.add(l, {
                                at: 0
                            }));
                            var c = e.history.songs[1],
                                h = c ? _.toInt(c.broadcastListens) : 0,
                                p = a.at(1),
                                d = p ? _.toInt(p.get("listens")) : 0;
                            p && c && h != d && (e.totalListens ? e.totalListens = Math.max(0, e.totalListens - d) + h : e.totalListens = Math.max(0, t.totalListens - d) + h, p.set("listens", h)), delete e.history
                        } else {
                            f = o(e.history.songs, n, s);
                            var v = f.songs;
                            t && t.history ? (t.history.reset(v), delete e.history) : e.history = new r.Models.Collections.BroadcastSongs(v, {
                                broadcastID: n
                            }), e.historyLoaded = !0, e.totalListens = Math.max(_.toInt(f.totalListens), t && t.totalListens || 0, _.toInt(e.totalListens))
                        }
                    } else delete e.history;
                    if (e.suggestions) {
                        e.blockedSuggestionSongIDs = _.orEqual(e.suggestions.blockedSongIDs, {});
                        var m = [],
                            g = r.getLoggedInUserID(),
                            b = {},
                            w = 0,
                            E;
                        _.each(e.suggestions.songs, function(t) {
                            t.song && t.users && t.users.length && (u[t.song.SongID] ? (E = u[t.song.SongID], (!E.attributes.upVotes || E.attributes.upVotes.length !== t.users.length) && E.set("upVotes", t.users)) : (E = new r.Models.BroadcastSuggestion(t.song), t.users && _.indexOf(t.users, g) > -1 ? w = 1 : w = 0, E.set({
                                userVote: w,
                                upVotes: t.users,
                                broadcast: e
                            }), u[t.song.SongID] = E), b[t.song.SongID] = E, m.push(E))
                        }), e.cachedBroadcastSuggestions = b, t && t.suggestions ? (t.suggestions.reset(m), delete e.suggestions) : (e.suggestions = new r.Models.Collections.BroadcastSuggestions, e.suggestions.comparator = i, e.suggestions.add(m))
                    }
                    if (e.status) {
                        var S = !1,
                            w = 0;
                        e.status.activeSong && e.status.activeSong.SongID && (!t || !t.activeSong || e.status.activeSong.queueSongID != t.activeSong.get("queueSongID")) ? (e.status.activeSong.broadcastSongID = [n, ":", e.status.activeSong.queueSongID].join(""), e.status.activeSongVotes && (e.status.activeSongVotes.up && e.status.activeSongVotes.up[r.getLoggedInUserID()] ? w = 1 : e.status.activeSongVotes.down && e.status.activeSongVotes.down[r.getLoggedInUserID()] && (w = -1)), s[e.status.activeSong.broadcastSongID] ? (e.activeSong = s[e.status.activeSong.broadcastSongID], e.activeSong.set({
                            upVotes: e.status.activeSongVotes ? _.keys(e.status.activeSongVotes.up) : [],
                            downVotes: e.status.activeSongVotes ? _.keys(e.status.activeSongVotes.down) : [],
                            isActiveSong: !0,
                            userVote: w
                        })) : (e.status.userVote = w, e.status.activeSongVotes && (e.status.activeSong.upVotes = _.keys(e.status.activeSongVotes.up), e.status.activeSong.downVotes = _.keys(e.status.activeSongVotes.down)), e.status.activeSong.isActiveSong = !0, e.activeSong = new r.Models.BroadcastSong(e.status.activeSong), s[e.activeSong.id] = e.activeSong), S = !0) : e.status.activeSong ? t && t.activeSong && (e.status.activeSongVotes && (e.status.activeSongVotes.up && e.status.activeSongVotes.up[r.getLoggedInUserID()] ? w = 1 : e.status.activeSongVotes.down && e.status.activeSongVotes.down[r.getLoggedInUserID()] && (w = -1)), t.activeSong.set({
                            upVotes: e.status.activeSongVotes ? _.keys(e.status.activeSongVotes.up) : [],
                            downVotes: e.status.activeSongVotes ? _.keys(e.status.activeSongVotes.down) : [],
                            userVote: w
                        })) : (e.activeSong = null, S = !0), e.status.nextSong && e.status.nextSong.SongID && (!t || !t.nextSong || e.status.nextSong.queueSongID != t.nextSong.get("queueSongID")) ? (e.status.nextSong.broadcastSongID = [n, ":", e.status.nextSong.queueSongID].join(""), s[e.status.nextSong.broadcastSongID] ? e.nextSong = s[e.status.nextSong.broadcastSongID] : (e.nextSong = new r.Models.BroadcastSong(e.status.nextSong), s[e.nextSong.id] = e.nextSong)) : e.status.nextSong || (e.nextSong = null), e.status.activeSongPosition && (e.activeSongPosition = e.status.activeSongPosition), e.status.activeSongStatus && (e.activeSongStatus = e.status.activeSongStatus), e.status.timestamp && (e.lastHeartbeatTime = e.status.timestamp), delete e.status, S && t && t.activeSong && t.activeSong.set("isActiveSong", !1)
                    }
                    return e.ownerArtistID && (e.ArtistID = e.ownerArtistID), e.ownerUserIDs && (!t || e.ownerUserIDs[0] !== t.UserID) ? e.UserID = e.ownerUserIDs[0] : e.UserID && e.ownerUserIDs && _.indexOf(e.ownerUserIDs, e.UserID) === -1 && e.ownerUserIDs.push(e.UserID), e.Description && (e.Description = $.trim(e.Description.replace(/[\r\n]/g, " ").replace(/\s{2,}/, " ")), t && t.Description == e.Description && delete e.Description), e.activeStatus === 1 && (!t || !t.chatActivities) && (e.chatActivities = new r.Models.Collections.ChatActivities([])), e
                }
                function l(e) {
                    var t = {},
                        n, i, s, o, u;
                    for (o in e) {
                        if (!e.hasOwnProperty(o) || !r.Models.Broadcast.broadcastsByTagsDeferreds[o]) continue;
                        n = e[o], u = n.length;
                        for (s = 0; s < u; s++) n[s] && n[s].sub && n[s].sub.substr(0, 6) === "bcast:" && (i = n[s].sub.substr(6), t[i] = 1, r.Models.Broadcast.broadcastIDToTags[i] ? r.Models.Broadcast.broadcastIDToTags[i].push(o) : r.Models.Broadcast.broadcastIDToTags[i] = [o], r.Models.Broadcast.storeListenersInCache(i, null, n[s].subscribers_count))
                    }
                    var a = _.keys(t);
                    r.Services.SWF.fetchBroadcastsInfo(a, ["owners", "t", "py", "n", "ownerSubscribed"])
                }
                function c() {
                    g || (r.on("manatee:fetchSubsByTags", l), r.on("manatee:broadcastsInfo", p), r.on("manatee:broadcastInfo", h), r.on("manatee:getUsersChatInfo", d), g = !0)
                }
                function h(e, t) {
                    !e && r.Models.Broadcast.broadcastsDeferreds[t] && r.Models.Broadcast.broadcastsDeferreds[t].reject()
                }
                function p(e) {
                    var t = [],
                        n = {},
                        i = e.length,
                        s = [],
                        o, u, a, f, l, c;
                    for (f = 0; f < i; f++) {
                        if (!e[f]) continue;
                        a = e[f].get("BroadcastID"), u = r.Models.Broadcast.broadcastIDToTags[a];
                        if (u) {
                            s = s.concat(u);
                            for (l = 0, c = u.length; l < c; l++) r.Models.Broadcast.broadcastsByTagsDeferreds[u[l]] && r.Models.Broadcast.broadcastsByTagsDeferreds[u[l]].__broadcasts.push(e[f])
                        }
                        o = e[f].get("ownerUserIDs")[0];
                        if (e[f].get("ownerArtistID") || !o || o < 1 || n[o]) continue;
                        if (r.Models.User.getCached(o)) {
                            n[o] = 1;
                            continue
                        }
                        t.push(o)
                    }
                    s = _.unique(s), t.length ? (t = _.unique(t), r.Services.SWF.getUsersChatInfo(t, {
                        completedTags: s
                    })) : d(null, {
                        completedTags: s
                    })
                }
                function d(e, t) {
                    if (!t || !t.completedTags) return;
                    var n = t.completedTags,
                        i, s, o;
                    for (s = 0, o = n.length; s < o; s++) i = r.Models.Broadcast.broadcastsByTagsDeferreds[n[s]], i && (i.resolve(i.__broadcasts), delete r.Models.Broadcast.broadcastsByTagsDeferreds[n[s]])
                }
                var r = e.GS = e.GS || {};
                r.Models = r.Models || {};
                var v = {
                    msPlayed: 5e3,
                    msLeft: 3e4,
                    numListeners: 10,
                    downDelta: 5,
                    downPercent: .9,
                    activePercent: .25,
                    countdown: 20
                },
                    m = _.throttle(function() {
                        var e = this.get("activeSong");
                        if (!e || e.get("noSkip")) return;
                        var t = n.model.get("player");
                        if (!t.get("duration") || t.get("position") < v.msPlayed || t.get("duration") - t.get("position") < v.msLeft) return;
                        var r = this.get("listeners");
                        if (!r || r.length < v.numListeners) return;
                        var i = e.get("upVotes") || [],
                            s = e.get("downVotes") || [];
                        if (s.length - i.length < v.downDelta) return;
                        if (s.length / (s.length + i.length) < v.downPercent) return
                    }, 1e3),
                    g = !1,
                    y = {},
                    b = {},
                    w = r.Models.Broadcast = Backbone.CachedModel.extend({
                        idAttribute: "BroadcastID",
                        defaults: {
                            activeSong: null,
                            nextSong: null,
                            listenersLoaded: !1,
                            activeStatus: -1,
                            isFavorite: !1
                        },
                        constructor: function(e) {
                            var t = _.toArray(arguments);
                            e.BroadcastID = _.orEqual(e.BroadcastID, e.broadcastID), e.UserID && (e.ownerUserIDs = [e.UserID]);
                            if (e.Songs) {
                                var n = s(e.Songs, e.PlayData, e.BroadcastID);
                                e.history = new r.Models.Collections.BroadcastSongs(n.songs, {
                                    broadcastID: e.BroadcastID
                                }), e.historyLoaded = !0, e.totalUpVotes = n.totalUpVotes, e.totalDownVotes = n.totalDownVotes, e.totalListens = n.totalListens
                            }
                            e.ownerArtist ? new r.Models.Artist(e.ownerArtist) : e.ownerUser && new r.Models.User(e.ownerUser);
                            try {
                                delete e.broadcastID, delete e.Songs, delete e.PlayVotes, delete e.owner, delete e.ownerArtist, delete e.ownerUser
                            } catch (i) {}
                            return e.cachedBroadcastSongs = {}, e.cachedBroadcastSuggestions = {}, e.approvedSuggestions = new r.Models.Collections.BroadcastSongs([]), !e.activeStatus && b[e.BroadcastID] && (e.activeStatus = 0, delete b[e.BroadcastID]), f(e, null, e.BroadcastID), this._super.apply(this, ["constructor"].concat(t))
                        },
                        initialize: function() {
                            return this.chatLocks = [], this.updateSearchText(), r.Models.Broadcast.restoreListenersFromCache(this), r.Models.Broadcast.broadcastsDeferreds[this.id] && this.get("activeStatus") !== -1 && r.Models.Broadcast.broadcastsDeferreds[this.id].resolve(this), this.on("change:Name change:Tag change:UserID", this.updateSearchText, this), this.on("change:activeSongStatus", a, this), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                        },
                        updateFromNew: function(e) {
                            var t;
                            e.source === "memcache" && e.hasOwnProperty("source") && !this.attributes.listenersLoaded ? (delete e.source, t = e) : e.hasOwnProperty("listenersCount") && !this.attributes.listenersLoaded && (t = _.defaults(this.attributes, e), t.listenersCount = _.toInt(e.listenersCount)), this.set(t)
                        },
                        updateListenersCount: function(e) {
                            var t = {};
                            e = _.toInt(e), e > -1 && !this.attributes.listenersLoaded && (t.listenersCount = e), this._getUpdatedListenersCountDfd && (e > -1 ? this._getUpdatedListenersCountDfd.resolve(e) : this._getUpdatedListenersCountDfd.reject(e)), this.set(t)
                        },
                        updateFromSwf: function(e) {
                            if (!e || e.BroadcastID && e.BroadcastID !== this.id) return;
                            e.bannedIDs && this.setBannedUserIDs(e.bannedIDs.users);
                            try {
                                delete e.broadcastID, delete e.BroadcastID, delete e.lastPublicMessages, delete e.bannedIDs
                            } catch (n) {}
                            var i = this.isLoggedInUserOwner();
                            e.chatEnabled === !0 ? (this.removePersistentChatActivity("info", r.Models.ChatActivity.CHAT_DISABLED), this.removePersistentChatActivity("info", r.Models.ChatActivity.CHAT_DISABLED_OWNER)) : e.chatEnabled === !1 && (i ? this.addPersistentChatActivity(new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.CHAT_DISABLED_OWNER
                            })) : this.addPersistentChatActivity(new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.CHAT_DISABLED
                            }))), e.lastUpdated = Date.now(), e.activeStatus === t && (e.activeStatus = 1), f(e, this.attributes, this.get("BroadcastID")), this.set(e), r.Models.Broadcast.broadcastsDeferreds[this.id] && r.Models.Broadcast.broadcastsDeferreds[this.id].resolve(this)
                        },
                        updateSearchText: function() {
                            var e = this.get("Name"),
                                t = this.get("Tag"),
                                n = t && t.n || _.getString("BROADCAST_DEFAULT_TAG"),
                                i = this.getOwner(),
                                s = i && i.get(i instanceof r.Models.Artist ? "ArtistName" : "Name");
                            this.set("searchText", [e, n, s].join(" ").toLowerCase())
                        },
                        activeVotesChanged: function() {
                            this.isLoggedInUserOwner() && m.call(this)
                        },
                        transferFromOldBroadcast: function(e, t) {
                            var n = this.id,
                                s = {
                                    BroadcastID: n,
                                    history: new r.Models.Collections.BroadcastSongs([], {
                                        broadcastID: n
                                    }),
                                    chatActivities: new r.Models.Collections.ChatActivities(e.get("chatActivities").last(10)),
                                    cachedBroadcastSongs: {},
                                    cachedBroadcastSuggestions: {},
                                    lastUpdated: Date.now()
                                };
                            t && (s.UserID = t, s.ownerUserIDs = [t]), s.suggestions = new r.Models.Collections.BroadcastSuggestions, s.suggestions.comparator = i;
                            var o = [],
                                u;
                            e.get("suggestions").each(function(e) {
                                u = e.get("SongID"), e = new r.Models.BroadcastSuggestion($.extend({
                                    SongID: u
                                }, e.attributes)), o.push(e), s.cachedBroadcastSuggestions[u] = e
                            }), s.suggestions.add(o);
                            var a = e.get("activeSong"),
                                f = e.get("nextSong"),
                                l;
                            a && (u = a.get("SongID"), l = $.extend({
                                SongID: u
                            }, a.attributes, {
                                broadcastSongID: [n, ":", a.get("queueSongID")].join("")
                            }), a = new r.Models.BroadcastSong(l), s.activeSong = a, s.cachedBroadcastSongs[l.broadcastSongID] = a), f && (u = a.get("SongID"), l = $.extend({
                                SongID: u
                            }, f.attributes, {
                                broadcastSongID: [n, ":", f.get("queueSongID")].join("")
                            }), l.broadcastSongID = [n, ":", f.get("queueSongID")].join(""), f = new r.Models.BroadcastSong(l), s.nextSong = f, s.cachedBroadcastSongs[l.broadcastSongID] = f), this.set($.extend({}, e.attributes, s))
                        },
                        setListeners: function(e) {
                            var t = this.get("listeners");
                            if (t) {
                                t.reset(e), this.set("listenersLoaded", !0);
                                return
                            }
                            var n = new r.Models.Collections.Users([]),
                                i = this.get("UserID");
                            this.on("change:UserID", function(e, t) {
                                t && (i = t.id, n.sort())
                            }), n.comparator = _.bind(function(e, t) {
                                return e.id === i ? -1 : t.id === i ? 1 : r.Models.User.niftyFriendSort(e, t)
                            }, this), n.add(e), this.set({
                                listeners: n,
                                listenersLoaded: !0
                            })
                        },
                        addHistoryListenCount: function(e, t) {
                            var n = this.get("history"),
                                r = t,
                                i = !1;
                            for (var s = 0, o = n.models.length; s < o; s++) if (n.models[s] && n.models[s].get("SongID") == e) {
                                r -= _.toInt(n.models[s].attributes.listens), n.models[s].set({
                                    listens: t,
                                    listensCounted: !0
                                }), i = !0;
                                break
                            }
                            if (!i) {
                                y[e] = t;
                                return
                            }
                            t && this.set("totalListens", (this.get("totalListens") || 0) + r)
                        },
                        isLoggedInUserOwner: function() {
                            if (this.attributes.ArtistID) {
                                var e = r.Models.User.getCached(r.getLoggedInUserID()),
                                    t = e && e.attributes.Context;
                                if (t && t.artist instanceof r.Models.Artist && t.artist.get("ArtistID") == this.attributes.ArtistID) return !0
                            }
                            return this.attributes.ownerUserIDs && _.contains(this.attributes.ownerUserIDs, r.getLoggedInUserID())
                        },
                        updateBroadcastDetails: function(e, n, i, s, o) {
                            var u = $.Deferred();
                            if (!this.isLoggedInUserOwner()) u.reject();
                            else {
                                var a = this.get("BroadcastID");
                                e && e != this.get("Name") ? e = e.substr(0, 50) : e = null;
                                var f = this.get("Tag");
                                n === null && f && f.i > 0 ? n = {
                                    i: 0,
                                    n: "multi-genre"
                                } : n = _.orEqual(n, f);
                                var l = this.get("Description");
                                l || (l = ""), i !== t && i != l ? i = i.substr(0, 145) : i = null, s = _.orEqual(s, null), o = _.orEqual(o, null);
                                if (!(e !== null || i !== null || s !== null && s != this.get("Image") || o !== null && o != this.get("Privacy") || !(!n && !f || n && f && n.i == f.i))) return u.resolve(this), u.promise();
                                r.Services.API.broadcastUpdateExtraData(a, e, n, i, s, o, this.get("ArtistID")).done(_.bind(function() {
                                    e === null && (e = this.get("Name")), i === null && (i = this.get("Description")), s === null && (s = this.get("Image")), o === null && (o = this.get("Privacy")), r.Services.SWF.changeBroadcastInfo(a, e, n, i, s, o, this.get("chatEnabled"), this.get("suggestionsEnabled")), u.resolve(this)
                                }, this)).fail(function(e) {
                                    u.reject(e)
                                })
                            }
                            return u.promise()
                        },
                        updateImage: function(e) {
                            e = e || null, console.log("updating the swf with new filename", e), r.Services.SWF.changeBroadcastInfo(this.get("BroadcastID"), this.get("Name"), this.get("Tag"), this.get("Description"), e)
                        },
                        updateBroadcastPreferences: function(e, t) {
                            if (!this.isLoggedInUserOwner()) {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_CHANGE_NOT_OWNER"),
                                    type: "error",
                                    duration: 5e3
                                });
                                return
                            }
                            r.Services.SWF.changeBroadcastInfo(this.get("BroadcastID"), this.get("Name"), this.get("Tag"), this.get("Description"), this.get("Image"), this.get("Privacy"), e, t)
                        },
                        sendChatMessage: function(e) {
                            e = e.substr(0, 512), r.getLoggedInUserID() > 0 ? (r.Services.SWF.sendBroadcastChat(e, this.id), r.trigger("guts:log", "broadcastChatMessageSent", {
                                broadcastID: this.id
                            })) : r.trigger("lightbox:open", "login", {
                                message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CHAT"),
                                onLogin: _.bind(r.Services.SWF.sendBroadcastChat, r.Services.SWF, e, this.id),
                                destination: this.toUrl()
                            })
                        },
                        suggestSong: function(e) {
                            function o() {
                                r.on("manatee:suggestion:" + t, function n(s) {
                                    s && s.success ? i && i.set("userVote", 1) : r.trigger("notification:add", {
                                        description: _.getString("POPUP_BROADCAST_SUGGESTION_FAILED", {
                                            song: e.escape("SongName")
                                        }),
                                        type: "error",
                                        duration: 5e3
                                    }), r.off("manatee:suggestion:" + t, n)
                                }, this), r.Services.SWF.suggestSongForBroadcast(s)
                            }
                            if (!this.get("activeStatus")) return;
                            var t = e.get("SongID"),
                                n = this.get("blockedSuggestionSongIDs");
                            if (n && n[t]) {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_BROADCAST_SUGGESTION_BLOCKED"),
                                    type: "error",
                                    duration: 5e3
                                });
                                return
                            }
                            var i = this.get("cachedBroadcastSuggestions")[t];
                            if (i && _.indexOf(i.get("upVotes"), r.getLoggedInUserID()) > -1) {
                                i.set("userVote", 1);
                                return
                            }
                            var s = e.getDetailsForSwf();
                            r.getLoggedInUserID() > 0 ? o() : r.trigger("lightbox:open", "login", {
                                message: _.getString("LB_LOGIN_MUST_LOGIN_TO_SUGGEST"),
                                onLogin: o,
                                destination: this.toUrl()
                            })
                        },
                        removeSuggestion: function(e) {
                            var t = e.get("SongID"),
                                n = this.get("blockedSuggestionSongIDs");
                            if (n && n[t]) {
                                e.set("userVote", 0);
                                return
                            }
                            var i = this.get("cachedBroadcastSuggestions")[t];
                            if (i && _.indexOf(i.get("upVotes"), r.getLoggedInUserID()) === -1) {
                                i.set("userVote", 0);
                                return
                            }
                            r.getLoggedInUserID() > 0 && (r.on("manatee:suggestionRemove:" + t, function s(n) {
                                (!n || !n.success) && r.trigger("notification:add", {
                                    description: _.getString("POPUP_BROADCAST_SUGGESTION_REMOVE_FAILED", {
                                        song: e.escape("SongName")
                                    }),
                                    type: "error",
                                    duration: 5e3
                                }), r.off("manatee:suggestionRemove:" + t, s)
                            }, this), r.Services.SWF.removeSuggestionForSongInBroadcast(t))
                        },
                        approveSuggestedSong: function(e) {
                            if (!this.isLoggedInUserOwner()) {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_APPROVE_NOT_OWNER"),
                                    type: "error",
                                    duration: 5e3
                                });
                                return
                            }
                            var t = e.get("SongID"),
                                n = this.get("cachedBroadcastSuggestions");
                            if (n && n[t]) r.Services.SWF.approveSuggestedSongForBroadcast(t);
                            else {
                                var i = r.Models.Song.getCached(t),
                                    s = new r.Models.PlayContext;
                                i && r.trigger("player:addSongs", [i], r.Services.SWF.playSpecialIndexes.LAST, !1, s)
                            }
                        },
                        rejectSuggestedSong: function(e) {
                            if (!this.isLoggedInUserOwner()) {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_REJECT_NOT_OWNER"),
                                    type: "error",
                                    duration: 5e3
                                });
                                return
                            }
                            e.set("approvalStatus", -1);
                            var t = e.get("SongID"),
                                n = this.get("cachedBroadcastSuggestions");
                            r.Services.SWF.rejectSuggestedSongForBroadcast(t), n && n[t] && delete n[t]
                        },
                        voteActiveSong: function(e) {
                            if (this.isLoggedInUserOwner()) return;
                            var t = this.get("activeSong");
                            if (!t) return;
                            var n;
                            if (e !== 0) {
                                e > 0 ? n = t.get("upVotes") : n = t.get("downVotes");
                                if (n && _.indexOf(n, r.getLoggedInUserID()) > -1) {
                                    t.set("userVote", e);
                                    return
                                }
                            } else {
                                n = t.get("upVotes");
                                if (n && _.indexOf(n, r.getLoggedInUserID()) === -1) {
                                    n = t.get("downVotes");
                                    if (n && _.indexOf(n, r.getLoggedInUserID()) === -1) {
                                        t.set("userVote", e);
                                        return
                                    }
                                }
                            }
                            r.getLoggedInUserID() > 0 ? r.Services.SWF.voteActiveBroadcastSong(e) : r.trigger("lightbox:open", "login", {
                                message: _.getString("LB_LOGIN_MUST_LOGIN_TO_VOTE"),
                                onLogin: _.bind(r.Services.SWF.voteActiveBroadcastSong, r.Services.SWF, e),
                                destination: this.toUrl()
                            })
                        },
                        setBannedUserIDs: function(e) {
                            var t = {};
                            e && _.each(e, function(e) {
                                t[e] = 1
                            }), this.set("bannedUserIDs", t);
                            var n = this.get("chatActivities"),
                                i = r.getLoggedInUserID(),
                                s;
                            n && n.each(function(e) {
                                if (e.get("type") != "message") return;
                                s = e.get("user");
                                if (!s || s.id === i) return;
                                t[s.get("UserID")] ? e.set("specialFlag", "banned") : e.get("specialFlag") === "banned" && e.unset("specialFlag")
                            })
                        },
                        banListener: function(e) {
                            var t = this.isLoggedInUserOwner(),
                                n = r.Models.Comment.ADMINS[r.getLoggedInUserID()];
                            if (!t && !n) {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_BAN_NOT_OWNER"),
                                    type: "error",
                                    duration: 5e3
                                });
                                return
                            }
                            var i = e.get("UserID");
                            if (i && t) r.Services.SWF.banBroadcastListenerByUserID(i);
                            else if (i && n) {
                                var s = this.get("bannedUserIDs"),
                                    o = [];
                                for (var u in s) s.hasOwnProperty(u) && o.push(u);
                                r.Services.API.banBroadcastListenerByUserID(i, this.get("BroadcastID"), o)
                            }
                        },
                        unBanListener: function(e) {
                            var t = this.isLoggedInUserOwner(),
                                n = r.Models.Comment.ADMINS[r.getLoggedInUserID()];
                            if (!t && !n) {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_BAN_NOT_OWNER"),
                                    type: "error",
                                    duration: 5e3
                                });
                                return
                            }
                            var i = e.get("UserID");
                            if (i) {
                                var s = this.get("bannedUserIDs");
                                s && s[i] && t && r.Services.SWF.unBanBroadcastListenerByUserID(i)
                            }
                        },
                        getImageURL: function(e) {
                            var t = this.get("Image");
                            if (t) return r.Models.Broadcast.artPath + e + "_" + t;
                            var n = this.getOwner();
                            return n ? n.getImageURL(e) : r.Models.User.artPath + e + "_user.png"
                        },
                        getActiveSongImageURL: function(e) {
                            var t = this.get("activeSong");
                            return t ? t.getImageURL(e) : r.Models.Song.artPath + e + "_album.png"
                        },
                        toUrl: function(e) {
                            var t = this.get("ArtistID"),
                                n = this.get("UserID"),
                                i, s;
                            if (!n && !t) return null;
                            if (t) {
                                var o = r.Models.Artist.getCached(t);
                                o && (i = o), s = "artist"
                            } else {
                                var u = r.Models.User.getCached(n);
                                u && (i = u), s = "user"
                            }
                            return i ? this.get("activeStatus") > 0 && !e ? i.toUrl("broadcast") : i.toUrl("broadcast/" + this.id) : _.cleanUrl("-", t || n, s, null, "broadcast/" + this.id)
                        },
                        toOwnerUrl: function() {
                            var e = this.get("ArtistID"),
                                t = this.get("UserID"),
                                n, i;
                            if (!t && !e) return null;
                            if (e) {
                                var s = r.Models.Artist.getCached(e);
                                s && (n = s), i = "artist"
                            } else {
                                var o = r.Models.User.getCached(t);
                                o && (n = o), i = "user"
                            }
                            return n ? n.toUrl() : _.cleanUrl("-", e || t, i)
                        },
                        getOwner: function() {
                            if (this.attributes.ArtistID) {
                                var e = r.Models.Artist.getCached(this.get("ArtistID"));
                                return e || null
                            }
                            var t = r.Models.User.getCached(this.get("UserID"));
                            return t || null
                        },
                        newListener: function(e) {
                            if (!this.get("listenersLoaded")) return;
                            if (e && !_.contains(this.attributes.ownerUserIDs, e.get("UserID"))) {
                                var t = this.get("listeners");
                                if (t.get(e)) return;
                                t.add(e);
                                var n = new r.Models.ChatActivity({
                                    type: "info",
                                    infoType: r.Models.ChatActivity.JOINED_BROADCAST,
                                    users: new r.Models.Collections.Users(e)
                                });
                                this.newChatActivity(n)
                            }
                            this.set("listenersCount", _.toInt(this.get("listenersCount")) + 1)
                        },
                        listenerLeft: function(e) {
                            if (!this.get("listenersLoaded")) return;
                            if (e && !_.contains(this.attributes.ownerUserIDs, e.get("UserID"))) {
                                var t = this.get("listeners");
                                if (!t.get(e)) return;
                                t.remove(e);
                                if (!(e instanceof r.Models.AuthUser)) {
                                    var n = new r.Models.ChatActivity({
                                        type: "info",
                                        infoType: r.Models.ChatActivity.LEFT_BROADCAST,
                                        users: new r.Models.Collections.Users(e)
                                    });
                                    this.newChatActivity(n)
                                }
                            }
                            this.set("listenersCount", Math.max(1, this.get("listenersCount") - 1))
                        },
                        suggestionApproved: function(e) {
                            if (!e) {
                                console.log("suggestion approve no song", e);
                                return
                            }
                            e.get("userVote") && _.indexOf(e.get("upVotes"), r.getLoggedInUserID()) === 0 && r.trigger("notification:add", {
                                type: "success",
                                description: _.getString("POPUP_BROADCAST_SUGGESTION_APPROVED", {
                                    song: e.escape("SongName")
                                }),
                                url: this.toUrl(),
                                duration: 5e3
                            }), e.set({
                                userVote: 0,
                                approvalStatus: 0
                            }), this.get("approvedSuggestions").add(e);
                            var t = new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.SUGGESTION_APPROVED,
                                song: e
                            });
                            this.newChatActivity(t)
                        },
                        suggestionAdded: function(e, t) {
                            if (!e || !t) {
                                console.log("suggestion added no song/user", e, t);
                                return
                            }
                            var n = new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.SUGGESTION_ADDED,
                                song: e,
                                user: t
                            });
                            this.newChatActivity(n)
                        },
                        newChatActivity: function(e) {
                            var t = this.get("chatActivities"),
                                i = _.orEqual(n.model.get("user").get("settings"), {}),
                                s = _.orEqual(i.local, {}),
                                o = e.get("infoType"),
                                u = r.Models.ChatActivity,
                                a = o === u.JOINED_BROADCAST || o === u.LEFT_BROADCAST,
                                f = o === u.SONG_CHANGED,
                                l = o === u.SUGGESTION_ADDED || o === u.SUGGESTION_APPROVED;
                            if (a && s.joinLeftDisabled || f && s.nowPlayingDisabled || l && s.suggestionsDisabled) return;
                            t || (t = new r.Models.Collections.ChatActivities([]), this.set("chatActivities", t));
                            if (e.get("type") === "info") {
                                var c = t.last();
                                if (c && c.get("type") === "info" && c.merge(e)) return
                            } else {
                                var h = this.get("bannedUserIDs"),
                                    p = e.get("artist"),
                                    d = e.get("user");
                                h && d && h[d.id] && d.id !== r.getLoggedInUserID() ? e.set("specialFlag", "banned") : p && this.get("ArtistID") == p.get("ArtistID") ? e.set("specialFlag", "owner") : d && _.contains(this.get("ownerUserIDs"), d.get("UserID")) && e.set("specialFlag", "owner")
                            }
                            e.set("broadcastID", this.id), t.add(e)
                        },
                        cleanupOnEnd: function(e) {
                            r.trigger("broadcast:notifEvent", !0);
                            if (this.get("activeStatus") !== 1) {
                                this.set("activeStatus", 0);
                                return
                            }
                            var t = this.get("BroadcastID"),
                                n = this.get("history"),
                                i = this.get("ownerUserIDs"),
                                s = this.get("ArtistID");
                            if (!e) {
                                var o = 0,
                                    u = 0,
                                    a = this.get("totalListens") || 0;
                                n && n.length && n.each(function(e) {
                                    o += e.get("upVotes").length, u += e.get("downVotes").length, e.get("listensCounted") || (a += e.get("listens") || 0)
                                }), this.set({
                                    activeStatus: 0,
                                    lastUpdated: Date.now(),
                                    activeSong: null,
                                    nextSong: null,
                                    listenersCount: 0,
                                    listenersLoaded: !1,
                                    listeners: null,
                                    suggestions: null,
                                    approvedSuggestions: null,
                                    blockedSuggestionSongIDs: null,
                                    totalUpVotes: o,
                                    totalDownVotes: u,
                                    totalListens: a,
                                    cachedBroadcastSongs: {},
                                    cachedBroadcastSuggestions: {}
                                });
                                var f;
                                _.each(i, function(e) {
                                    f = r.Models.User.getCached(e), f && f.get("currentBroadcastID") === t && f.set({
                                        isOwnerOfCurrentBroadcast: 0,
                                        currentBroadcastID: null
                                    })
                                }), f = r.Models.Artist.getCached(s), f && f.get("currentBroadcastID") == t && f.set({
                                    isOwnerOfCurrentBroadcast: 0,
                                    currentBroadcastID: null
                                }), f = this.getOwner();
                                var l = f ? f.get("pageNameData") : null;
                                l && (l.BroadcastListens || (l.BroadcastListens = 0), l.BroadcastListens += a)
                            } else {
                                var c = {
                                    suggestions: null,
                                    approvedSuggestions: null,
                                    blockedSuggestionSongIDs: null,
                                    listenersLoaded: !1,
                                    listeners: null,
                                    nextSong: null,
                                    cachedBroadcastSongs: {},
                                    cachedBroadcastSuggestions: {}
                                };
                                if (!this.chatLocks || !this.chatLocks.length) c.chatActivities = null, c.persistentChatActivities = null;
                                this.set(c)
                            }
                            this.stopOwnerLeftTimer()
                        },
                        startOwnerLeftTimer: function() {
                            if (this.get("ownerLeftTimer")) return;
                            var e = setTimeout(_.bind(function() {
                                var e = n.model.get("player").get("currentQueue");
                                if (!e || e.get("currentBroadcast") !== this) return;
                                delete this.popupBroadcasterLeftNotif, r.Services.SWF.endBroadcast("broadcastOwnerEnded")
                            }, this), 6e4);
                            r.trigger("notification:add", {
                                title: "",
                                description: _.getString("POPUP_ERROR_BROADCASTER_LEFT"),
                                url: this.toUrl(),
                                duration: 6e4,
                                onOpened: _.bind(function(e) {
                                    this.popupBroadcasterLeftNotif = e
                                }, this)
                            });
                            var t = new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.BROADCASTER_BAILED
                            });
                            this.newChatActivity(t), this.set("ownerLeftTimer", e)
                        },
                        stopOwnerLeftTimer: function(e) {
                            var t = this.get("ownerLeftTimer");
                            if (t) {
                                clearTimeout(t);
                                if (e) {
                                    this.popupBroadcasterLeftNotif && (this.popupBroadcasterLeftNotif.close(), delete this.popupBroadcasterLeftNotif), r.trigger("notification:add", {
                                        title: "",
                                        description: _.getString("POPUP_ERROR_BROADCASTER_BACK"),
                                        url: this.toUrl()
                                    });
                                    var n = new r.Models.ChatActivity({
                                        type: "info",
                                        infoType: r.Models.ChatActivity.BROADCASTER_BACK
                                    });
                                    this.newChatActivity(n)
                                }
                            }
                        },
                        getHistory: function() {
                            var e = $.Deferred();
                            return this.get("historyLoaded") && this.get("history") ? e.resolve(this.get("history")) : r.Services.API.getBroadcast(this.id).done(_.bind(function(t) {
                                if (this.get("historyLoaded") && this.get("history")) {
                                    e.resolve(this.get("history"));
                                    return
                                }
                                var n = [];
                                if (t && t.Songs && t.PlayData) {
                                    var i = s(t.Songs, t.PlayData, this.id);
                                    n = i.songs
                                }
                                var o = new r.Models.Collections.BroadcastSongs(n, {
                                    broadcastID: this.id
                                });
                                this.set({
                                    history: o,
                                    historyLoaded: !0
                                }), e.resolve(o)
                            }, this)).fail(function(t) {
                                e.reject(t)
                            }), e.promise()
                        },
                        getSongs: function() {
                            return this.getHistory()
                        },
                        getUpdatedListenersCount: function() {
                            var e = this._getUpdatedListenersCountDfd,
                                t = this.attributes.BroadcastID;
                            if (!e || e.state() !== "pending") e = $.Deferred(), this._getUpdatedListenersCountDfd = e;
                            return r.Services.SWF.ready.done(function() {
                                r.Services.SWF.connectToChat(), r.Services.SWF.chatReady.done(function() {
                                    r.Services.SWF.fetchBroadcastListenerCount(t)
                                })
                            }), e.promise()
                        },
                        toProxyLabel: function() {
                            return _.getString("SELECTION_BROADCAST_SINGLE", {
                                name: this.escape("Name")
                            })
                        },
                        subscribeToChat: function(e, t) {
                            var n = this.id;
                            (!this.chatLocks.length || t) && r.Services.SWF.ready.done(function() {
                                r.Services.SWF.connectToChat(), r.Services.SWF.chatReady.done(function() {
                                    r.Services.SWF.subscribeToBroadcastChat(n)
                                })
                            }), _.indexOf(this.chatLocks, e) === -1 && this.chatLocks.push(e)
                        },
                        unsubscribeFromChat: function(e) {
                            var t = _.indexOf(this.chatLocks, e);
                            t > -1 && this.chatLocks.splice(t, 1);
                            if (!this.chatLocks.length) {
                                var n = this.id;
                                r.Services.SWF.chatReady.done(function() {
                                    r.Services.SWF.unsubscribeFromBroadcastChat(n)
                                })
                            }
                        },
                        unsubscribeAllFromChat: function() {
                            this.chatLocks = [];
                            var e = this.id;
                            r.Services.SWF.chatReady.done(function() {
                                r.Services.SWF.unsubscribeFromBroadcastChat(e)
                            })
                        },
                        inviteUserToTransferOwnership: function(e, t) {
                            function a(e) {
                                e && e.success ? r.Services.SWF.currentBroadcastPrivateDispatch("inviteNewBroadcaster", {
                                    name: i
                                }, s) : o.reject({
                                    error: "publisherFailed"
                                }), r.off("manatee:broadcastAddPublisher:" + s, a)
                            }
                            function f(t) {
                                var n = t && t.success;
                                n ? (u || (u = new r.Models.Collections.Users([])), u.push(e), o.notify("invited")) : o.reject({
                                    error: "inviteFailed"
                                }), r.off("manatee:broadcastDispatch:inviteNewBroadcaster", f, this)
                            }
                            function l(n) {
                                n && n.data && n.data.accept ? r.Services.SWF.broadcastAddOwner(n.userID) : (t || r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_INVITE_DENIED", {
                                        user: e.escape("Name")
                                    }),
                                    type: "error",
                                    duration: 7e3
                                }), o.reject({
                                    error: "rejected"
                                })), r.off("manatee:newBroadcasterResponse", l)
                            }
                            function c(e, i) {
                                o.resolve(), t ? n.model.get("user").leaveBroadcast() : r.router.setHash(e.toUrl()), r.off("manatee:broadcastTransferred", c)
                            }
                            var i = this.get("Name"),
                                s = e.get("UserID"),
                                o = $.Deferred();
                            if (!this.isLoggedInUserOwner() || this.get("activeStatus") !== 1) return o.reject({
                                error: "invalid"
                            }), o.promise();
                            var u = this.get("invitedBroadcasters");
                            return u && u.get(s) ? (o.reject({
                                error: "duplicate"
                            }), o.promise()) : (r.on("manatee:broadcastAddPublisher:" + s, a), r.on("manatee:broadcastDispatch:inviteNewBroadcaster", f, this), r.on("manatee:newBroadcasterResponse", l), r.on("manatee:broadcastTransferred", c), o.always(_.bind(function() {
                                r.off("manatee:broadcastAddPublisher:" + s, a), r.off("manatee:broadcastDispatch:inviteNewBroadcaster", f, this), r.off("manatee:newBroadcasterResponse", l), r.off("manatee:broadcastTransferred", c)
                            }, this)), r.Services.SWF.broadcastAddPublisher(s), o.promise())
                        },
                        addPersistentChatActivity: function(e) {
                            var t = this.get("persistentChatActivities");
                            if (!t) t = new r.Models.Collections.ChatActivities, this.set("persistentChatActivities", t);
                            else {
                                var n;
                                for (var i = 0, s = t.models.length; i < s; i++) {
                                    n = t.models[i];
                                    if (n.attributes.type === e.attributes.type && n.attributes.infoType === e.attributes.infoType) {
                                        if (i < s - 1) {
                                            var o = t.models.splice(i, 1);
                                            o.push(e), t.reset(o)
                                        }
                                        return
                                    }
                                }
                            }
                            t.add(e)
                        },
                        removePersistentChatActivity: function(e, t) {
                            var n = this.get("persistentChatActivities");
                            if (!n) return;
                            var r;
                            for (var i = 0, s = n.models.length; i < s; i++) {
                                r = n.models[i];
                                if (r.attributes.type === e && r.attributes.infoType === t) {
                                    n.remove(r);
                                    return
                                }
                            }
                        },
                        end: function() {
                            this.isLoggedInUserOwner() && this.get("listenersCount") > 1 ? r.trigger("lightbox:open", "broadcastListeners", {
                                broadcast: this,
                                endBroadcast: !0
                            }) : r.Services.SWF.endBroadcast()
                        },
                        getDetailsForFeeds: function() {
                            return {
                                ArtistID: this.get("ArtistID"),
                                UserID: this.get("UserID"),
                                BroadcastID: this.get("BroadcastID"),
                                Name: this.get("Name"),
                                Tag: this.get("Tag"),
                                Description: this.get("Description")
                            }
                        }
                    }, {
                        artPath: "http://images.gs-cdn.net/static/broadcasts/",
                        cachedListenerCounts: {},
                        broadcastIDToTags: {},
                        broadcastsByTagsDeferreds: {},
                        broadcastsDeferreds: {},
                        get: function(e) {
                            var t = Backbone.CachedModel.genericGet.call(this, r.Services.API.getBroadcast, "BroadcastID", e);
                            return t.promise()
                        },
                        fetchRealtimeBroadcast: function(e, t) {
                            var n = r.Models.Broadcast.getCached(e),
                                i = Date.now();
                            if (!n || t || i - n.get("lastUpdated") > 3e4 || !n.get("listenersLoaded")) {
                                if (!t && r.Models.Broadcast.broadcastsDeferreds[e] && r.Models.Broadcast.broadcastsDeferreds[e].state() === "pending") return r.Models.Broadcast.broadcastsDeferreds[e].promise();
                                var s;
                                if (!r.Models.Broadcast.broadcastsDeferreds[e] || r.Models.Broadcast.broadcastsDeferreds[e].state() !== "pending") r.Models.Broadcast.broadcastsDeferreds[e] = $.Deferred();
                                s = r.Models.Broadcast.broadcastsDeferreds[e], r.Services.SWF.ready.done(function() {
                                    c(), r.Services.SWF.getBroadcastInfo(e), s.timeout && (clearTimeout(s.timeout), s.timeout = null), s.timeout = setTimeout(function() {
                                        s.reject()
                                    }, 7e3), s.always(function() {
                                        s.timeout && (clearTimeout(s.timeout), s.timeout = null)
                                    })
                                })
                            } else {
                                if (!r.Models.Broadcast.broadcastsDeferreds[e] || r.Models.Broadcast.broadcastsDeferreds[e].state() !== "pending") r.Models.Broadcast.broadcastsDeferreds[e] = $.Deferred(), r.Models.Broadcast.broadcastsDeferreds[e].resolve(n);
                                r.trigger("manatee:broadcastInfo", n, e, !0)
                            }
                            return r.Models.Broadcast.broadcastsDeferreds[e].promise()
                        },
                        fetchRealtimeBroadcasts: function(e, t, n) {
                            var i = [],
                                s = [],
                                o = [];
                            return _.each(e, function(e) {
                                var t = r.Models.Broadcast.getCached(e),
                                    u = Date.now();
                                if (!t || n || u - t.get("lastUpdated") > 3e4 || !t.get("listenersLoaded")) {
                                    if (!n && r.Models.Broadcast.broadcastsDeferreds[e] && r.Models.Broadcast.broadcastsDeferreds[e].state() === "pending") {
                                        i.push(r.Models.Broadcast.broadcastsDeferreds[e].promise());
                                        return
                                    }
                                    if (!r.Models.Broadcast.broadcastsDeferreds[e] || r.Models.Broadcast.broadcastsDeferreds[e].state() !== "pending") r.Models.Broadcast.broadcastsDeferreds[e] = $.Deferred();
                                    s.push(e)
                                } else {
                                    if (!r.Models.Broadcast.broadcastsDeferreds[e] || r.Models.Broadcast.broadcastsDeferreds[e].state() !== "pending") r.Models.Broadcast.broadcastsDeferreds[e] = $.Deferred(), r.Models.Broadcast.broadcastsDeferreds[e].resolve(t);
                                    o.push(t), r.trigger("manatee:broadcastInfo", t, e)
                                }
                                i.push(r.Models.Broadcast.broadcastsDeferreds[e].promise())
                            }), o.length && r.trigger("manatee:broadcastsInfo", o), s.length && r.Services.SWF.ready.done(function() {
                                c(), r.Services.SWF.fetchBroadcastsInfo(s, t)
                            }), $.after(i)
                        },
                        recentSort: function(e, t) {
                            return _.orEqual(t.get("TSCreated"), 0) - _.orEqual(e.get("TSCreated"), 0)
                        },
                        storeListenersInCache: function(e, t, n) {
                            var i = r.Models.Broadcast.cachedListenerCounts[e];
                            i ? (t && (i.users = t), n && (i.count = n)) : r.Models.Broadcast.cachedListenerCounts[e] = {
                                users: t,
                                count: n
                            }
                        },
                        restoreListenersFromCache: function(e) {
                            if (e.get("listenersLoaded")) {
                                delete r.Models.Broadcast.cachedListenerCounts[e.id];
                                return
                            }
                            var t = r.Models.Broadcast.cachedListenerCounts[e.id];
                            t && (t.users && e.setListeners(t.users), t.count && e.set("listenersCount", t.count), delete r.Models.Broadcast.cachedListenerCounts[e.id])
                        },
                        getBroadcastsForTag: function(e) {
                            e || (e = "bcast");
                            if (r.Models.Broadcast.broadcastsByTagsDeferreds[e]) return r.Models.Broadcast.broadcastsByTagsDeferreds[e];
                            var t = $.Deferred();
                            return t.__broadcasts = [], r.Models.Broadcast.broadcastsByTagsDeferreds[e] = t, c(), r.Services.SWF.ready.done(function() {
                                r.Services.SWF.fetchSubsByTags([e], "desc", 100)
                            }), t
                        },
                        cleanupDataFromMemcache: function(e) {
                            var t, n;
                            if (e.users) for (t = 0, n = e.users.length; t < n; t++) e.users[t] && e.users[t].UserID && new r.Models.User(e.users[t]);
                            if (e.artists) for (t = 0, n = e.artists.length; t < n; t++) e.artists[t] && e.artists[t].ArtistID && new r.Models.Artist(e.artists[t]);
                            var i = u(e.s && e.s.active);
                            return i && (i = new r.Models.Song(i)), {
                                BroadcastID: (e.sub || "").replace("bcast:", ""),
                                Name: e.n,
                                Tag: e.t,
                                isPlaying: e.py,
                                Image: e.i,
                                ownerUserIDs: e.ownerUserIDs,
                                ownerArtistID: e.ownerArtistID,
                                ownerSubscribed: e.owner_subscribed,
                                listenersCount: e.subscribers_count,
                                tallies: e.tallies || {
                                    old_tallies: {},
                                    new_tallies: {}
                                },
                                activeSong: i,
                                source: "memcache"
                            }
                        },
                        getTopBroadcastsForTags: function(t) {
                            var n = $.Deferred(),
                                i = r.Services.API.getTopBroadcasts(t);
                            return i.done(function(t) {
                                var i = {};
                                _.each(t, function(t, n) {
                                    var s = [],
                                        o = Date.now() + e.clientTimeDivergence;
                                    _.each(t, function(e) {
                                        if (e.s && e.s.ts && e.s.ts + 72e4 < o) {
                                            console.log("rejected bcast too old", e);
                                            return
                                        }
                                        if (!e.sub) return;
                                        s.push(r.Models.Broadcast.cleanupDataFromMemcache(e))
                                    }), i[n] = s
                                }), n.resolve(i)
                            }), n
                        },
                        getTopBroadcastsCombined: function() {
                            var t = $.Deferred(),
                                n = r.Services.API.getTopBroadcastsCombined();
                            return n.done(function(n) {
                                var i = [],
                                    s = Date.now() + e.clientTimeDivergence;
                                _.each(n, function(e) {
                                    if (e.s && e.s.ts && e.s.ts + 72e4 < s) {
                                        console.log("rejected bcast too old", e);
                                        return
                                    }
                                    if (!e.sub) return;
                                    i.push(r.Models.Broadcast.cleanupDataFromMemcache(e))
                                }), t.resolve(i)
                            }), t
                        },
                        getBroadcastImageURL: function(e, t) {
                            return r.Models.Broadcast.artPath + t + "_" + e
                        },
                        storeBroadcastNotFound: function(e) {
                            b[e] = 1
                        }
                    })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var r = 1,
                    i = Math.pow(10, 12);
                t.Models.ChatActivity = Backbone.CachedModel.extend({
                    idAttribute: "ChatActivityID",
                    constructor: function(e) {
                        var n = _.toArray(arguments);
                        e.ChatActivityID = r++, e.timestamp ? e.timestamp / i < 1 && (e.timestamp *= 1e3) : e.timestamp = Date.now(), this.messageCache = {};
                        switch (e.infoType) {
                        case t.Models.ChatActivity.LEFT_BROADCAST:
                            e.iconClass = "user icon-user-remove-gray-flat";
                            break;
                        case t.Models.ChatActivity.JOINED_BROADCAST:
                            e.iconClass = "user icon-user-add-gray-flat";
                            break;
                        case t.Models.ChatActivity.JOINED_LEFT_BROADCAST:
                            e.iconClass = "user icon-user-remove-gray-flat";
                            break;
                        case t.Models.ChatActivity.LEFT_JOINED_BROADCAST:
                            e.iconClass = "user icon-user-add-gray-flat";
                            break;
                        case t.Models.ChatActivity.SUGGESTION_APPROVED:
                            e.iconClass = "upvote icon-upvote-color-flat"
                        }
                        return e.type === "message" && !e.specialFlag && e.user && t.Models.Comment.ADMINS[e.user.get("UserID")] && (e.specialFlag = "admin"), this._super.apply(this, ["constructor"].concat(n))
                    },
                    initialize: function() {
                        switch (this.get("infoType")) {
                        case t.Models.ChatActivity.SONG_CHANGED:
                        case t.Models.ChatActivity.SUGGESTION_ADDED:
                            this.get("song").on("change", _.bind(function(e, t) {
                                this.trigger("change", this, t), this.trigger("change:song", this, e, t)
                            }, this))
                        }
                        return this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    merge: function(e) {
                        if (this.get("type") !== "info") return;
                        var n = this.get("infoType"),
                            r = e.get("infoType"),
                            i = this.get("users"),
                            s = e.get("users"),
                            o = n !== r,
                            u = !1,
                            a = null;
                        switch (this.get("infoType")) {
                        case t.Models.ChatActivity.LEFT_JOINED_BROADCAST:
                        case t.Models.ChatActivity.JOINED_LEFT_BROADCAST:
                            if (r === t.Models.ChatActivity.JOINED_BROADCAST || r === t.Models.ChatActivity.LEFT_BROADCAST) if (s.length === 1 && i.length === 1 && s.at(0) === i.at(0)) {
                                a = {
                                    infoType: r
                                };
                                break
                            }
                            return !1;
                        case t.Models.ChatActivity.LEFT_BROADCAST:
                        case t.Models.ChatActivity.JOINED_BROADCAST:
                            if (o) {
                                if ((r === t.Models.ChatActivity.JOINED_BROADCAST || r === t.Models.ChatActivity.LEFT_BROADCAST) && s.length === 1) {
                                    var f = s.at(0),
                                        l = i.get(f.get("UserID"));
                                    if (l && i.length > 1) {
                                        i.remove(f, {
                                            slient: !0
                                        }), a = {
                                            _update: Date.now()
                                        }, u = !0, r === t.Models.ChatActivity.JOINED_BROADCAST ? e.set("infoType", t.Models.ChatActivity.LEFT_JOINED_BROADCAST) : e.set("infoType", t.Models.ChatActivity.JOINED_LEFT_BROADCAST);
                                        break
                                    }
                                    if (l) {
                                        r === t.Models.ChatActivity.JOINED_BROADCAST ? a = {
                                            infoType: t.Models.ChatActivity.LEFT_JOINED_BROADCAST
                                        } : a = {
                                            infoType: t.Models.ChatActivity.JOINED_LEFT_BROADCAST
                                        };
                                        break
                                    }
                                }
                                return !1
                            }
                            s && s.length < 3 && (i.add(s.models, {
                                at: 0
                            }), a = {
                                _update: Date.now()
                            });
                            break;
                        default:
                            return !1
                        }
                        return this.messageCache && (this.messageCache = {}), a && this.set(a), u ? !1 : !0
                    },
                    getText: function() {
                        var e = _.makeSafeLinks(this.get("message")) || this.messageCache[n.model.get("locale")];
                        if (e) return e;
                        var r = "",
                            i, s, o, u, a;
                        switch (this.get("infoType")) {
                        case t.Models.ChatActivity.LEFT_BROADCAST:
                            i = this.get("users").map(function(e) {
                                return e.getAnchorTag()
                            }), r = i.join(", "), e = _.getString("CHAT_BROADCAST_LEFT", {
                                users: r
                            });
                            break;
                        case t.Models.ChatActivity.JOINED_BROADCAST:
                            i = this.get("users").map(function(e) {
                                return e.getAnchorTag()
                            }), r = i.join(", "), e = _.getString("CHAT_BROADCAST_JOINED", {
                                users: r
                            });
                            break;
                        case t.Models.ChatActivity.JOINED_LEFT_BROADCAST:
                            i = this.get("users").map(function(e) {
                                return e.getAnchorTag()
                            }), r = i.join(", "), e = _.getString("CHAT_BROADCAST_JOINED_LEFT", {
                                users: r
                            });
                            break;
                        case t.Models.ChatActivity.LEFT_JOINED_BROADCAST:
                            i = this.get("users").map(function(e) {
                                return e.getAnchorTag()
                            }), r = i.join(", "), e = _.getString("CHAT_BROADCAST_LEFT_JOINED", {
                                users: r
                            });
                            break;
                        case t.Models.ChatActivity.SUGGESTION_APPROVED:
                            s = this.get("song"), e = _.getString("SUGGESTION_APPROVED") + "<br>" + _.getString("QUEUE_CURRENT_SONG_NO_ALBUM", {
                                song: s.getAnchorTag(null, null, "no-title-tooltip"),
                                artist: s.getArtistAnchorTag()
                            });
                            break;
                        case t.Models.ChatActivity.SUGGESTION_ADDED:
                            s = this.get("song"), o = this.get("user"), e = _.getString("USER_SUGGESTED_A_SONG", {
                                user: o.getAnchorTag(),
                                song: _.getString("QUEUE_CURRENT_SONG_NO_ALBUM", {
                                    song: s.getAnchorTag(),
                                    artist: s.getArtistAnchorTag()
                                })
                            });
                            break;
                        case t.Models.ChatActivity.BROADCASTER_BAILED:
                            e = _.getString("CHAT_BROADCASTER_BAILED");
                            break;
                        case t.Models.ChatActivity.BROADCASTER_BACK:
                            e = _.getString("CHAT_BROADCASTER_BACK");
                            break;
                        case t.Models.ChatActivity.WELCOME_MESSAGE:
                            o = this.get("user"), u = this.get("artist"), a = o && o.escape("Name") || u && u.escape("ArtistName"), e = _.getString("CHAT_WELCOME_MESSAGE", {
                                name: a
                            });
                            break;
                        case t.Models.ChatActivity.CHAT_DISABLED:
                            e = _.getString("CHAT_DISABLED");
                            break;
                        case t.Models.ChatActivity.CHAT_DISABLED_OWNER:
                            e = _.getString("CHAT_DISABLED_OWNER");
                            break;
                        case t.Models.ChatActivity.CHAT_FAILED:
                            e = _.getString("CHAT_FAILED");
                            break;
                        case t.Models.ChatActivity.RATE_LIMITED:
                            e = _.getString("CHAT_RATE_LIMITED");
                            break;
                        case t.Models.ChatActivity.NEW_BROADCAST_OWNER:
                            o = this.get("owner"), e = _.getString("NEW_BROADCASTER_MESSAGE", {
                                user: o && o.escape("Name")
                            });
                            break;
                        case t.Models.ChatActivity.SONG_CHANGED:
                            s = this.get("song"), e = _.getString("CHAT_NOW_PLAYING", {
                                song: s.getAnchorTag(null, null, "no-title-tooltip"),
                                artist: s.getArtistAnchorTag()
                            });
                            break;
                        case t.Models.ChatActivity.OFFLINE_CANT_CHAT:
                            e = _.getString("CHAT_OFFLINE_CANT_CHAT");
                            break;
                        case t.Models.ChatActivity.VISIBILITY_FRIENDS_WARNING:
                            e = _.getString("CHAT_VISIBILITY_FRIENDS_WARNING")
                        }
                        return this.messageCache || (this.messageCache = {}), this.messageCache[n.model.get("locale")] = e, e
                    },
                    getFormattedTimestamp: function() {
                        var e = this.get("timestamp"),
                            t = Date.now();
                        if (t - e <= 6e4) return _.getString("NUM_SECONDS_AGO", {
                            seconds: Math.floor((t - e) / 1e3)
                        });
                        if (t - e < 54e5) return _.getString("MINUTES_AGO", {
                            minutes: Math.floor((t - e) / 6e4)
                        });
                        if (t - e < 864e5) {
                            var n = Math.floor((t - e) / 36e5);
                            return n > 1 ? _.getString("HOURS_AGO", {
                                hours: n
                            }) : _.getString("HOUR_AGO")
                        }
                        var r = new Date;
                        return r.setTime(e), _.getString("OVER_A_WEEK_AGO", {
                            day: _.getString("WEEK_DAYS").split(",")[r.getDay()],
                            date: _.getString("MONTHS").split(",")[r.getMonth()] + " " + r.getDate() + ", " + r.getFullYear()
                        })
                    }
                }, {
                    LEFT_BROADCAST: "leftBroadcast",
                    JOINED_BROADCAST: "joinedBroadcast",
                    JOINED_LEFT_BROADCAST: "joinedLeftBroadcast",
                    LEFT_JOINED_BROADCAST: "leftJoinedBroadcast",
                    SUGGESTION_APPROVED: "suggestionApproved",
                    SUGGESTION_ADDED: "suggestionAdded",
                    BROADCASTER_BAILED: "broadcasterBail",
                    BROADCASTER_BACK: "broadcasterBack",
                    WELCOME_MESSAGE: "welcomeMessage",
                    CHAT_DISABLED: "chatDisabled",
                    CHAT_DISABLED_OWNER: "chatDisabledOwner",
                    RATE_LIMITED: "rateLimited",
                    NEW_BROADCAST_OWNER: "newBroadcastOwner",
                    SONG_CHANGED: "songChange",
                    CHAT_FAILED: "chatFailed",
                    OFFLINE_CANT_CHAT: "offlineCantChat",
                    VISIBILITY_FRIENDS_WARNING: "visibilityFriendsWarning"
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {}, t.Models.Callout = Backbone.CachedModel.extend({
                    idAttribute: "CalloutID",
                    defaults: {
                        uploaded: !0,
                        transcoded: !0
                    },
                    constructor: function(e) {
                        var t = _.toArray(arguments);
                        return e.CalloutID = _.toInt(e.CalloutID), e.UserID = _.toInt(e.UserID), _.defined(e.FileID) && (e.FileID = _.toInt(e.FileID)), _.defined(e.Flags) && (e.Flags = _.toInt(e.Flags)), _.defined(e.uSecs) && (e.EstimateDuration = e.uSecs / 1e6, delete e.uSecs), _.defined(e.Name) ? e.SongName = e.Name : _.defined(e.SongName) && (e.Name = e.SongName), this._super.apply(this, ["constructor"].concat(t))
                    },
                    toUrl: function() {
                        return null
                    },
                    toArtistUrl: function() {
                        return null
                    },
                    toAlbumUrl: function() {
                        return null
                    },
                    getToken: function() {},
                    getDetailsForFeeds: function() {
                        return null
                    },
                    toProxyLabel: function() {
                        return _.getString("SELECTION_CALLOUT_SINGLE", {
                            name: this.escape("Name")
                        })
                    },
                    getSingleItemContextMenu: function() {
                        return []
                    },
                    getAnchorTag: function() {
                        return ""
                    },
                    getArtistAnchorTag: function() {
                        return ""
                    },
                    getDetailsForSwf: function() {
                        var e = /\u0000/g;
                        return {
                            CalloutID: this.get("CalloutID"),
                            SongID: 0,
                            isCallout: !0,
                            SongName: this.get("Name").replace(e, ""),
                            AlbumID: 0,
                            AlbumName: "",
                            ArtistID: 0,
                            UserID: this.get("UserID"),
                            ArtistName: "",
                            Flags: this.get("Flags"),
                            EstimateDuration: this.get("EstimateDuration")
                        }
                    },
                    getImageURL: function(e) {
                        return e = _.orEqual(e, 70), t.Models.Callout.artPath + e + "_album.png"
                    },
                    set: function(e, t) {
                        return _.isString(e) && e == "Name" ? e = {
                            Name: t,
                            SongName: t
                        } : e.hasOwnProperty("Name") && (e.SongName = e.Name), this._super.apply(this, ["set"].concat(_.toArray(arguments)))
                    }
                }, {
                    artPath: "http://images.gs-cdn.net/static/albums/",
                    setupCalloutListeners: function() {
                        t.on("callouts:uploadStarted", this.onUploadStarted, this), t.on("callouts:uploadComplete", this.onUploadComplete, this), t.on("callouts:uploadFailed", this.onUploadFailed, this), t.on("callouts:transcodeComplete", this.onTranscodeComplete, this), t.on("callouts:transcodeFailed", this.onTranscodeFailed, this)
                    },
                    onUploadStarted: function(e) {
                        var t = n.model.get("user"),
                            r = new this({
                                CalloutID: -1 * e.tempID,
                                Name: e.Name,
                                EstimateDuration: _.toInt(e.EstimateDuration),
                                uploaded: !1,
                                uploadPercent: 0,
                                transcoded: !1,
                                UserID: t.get("UserID")
                            });
                        t.getCallouts().done(function(e) {
                            r.get("uploadFailed") || e.add(r, {
                                at: 0
                            })
                        });
                        var i = setInterval(function() {
                            var e = r.get("uploadPercent");
                            e < 40 && !r.get("uploadFailed") ? r.set("uploadPercent", e + .33) : (r.unset("uploadTimer"), clearTimeout(i))
                        }, 30);
                        r.set("uploadTimer", i)
                    },
                    onUploadComplete: function(e) {
                        var n = -1 * e.tempID,
                            r = this.getCached(n);
                        r && (this.uncache(r), r.set({
                            uploaded: !0,
                            uploadPercent: 75,
                            CalloutID: e.realID
                        }), this.cache(r), t.Services.API.updateCalloutDetails(e.realID, r.get("Name")))
                    },
                    onUploadFailed: function(e) {
                        var r = -1 * e.tempID,
                            i = this.getCached(r),
                            s = n.model.get("user");
                        i && (this.uncache(i), s && i.get("UserID") == s.get("UserID") && (i.set("uploadFailed", !0), s.get("callouts") && s.get("callouts").remove(i), t.trigger("notification:add", {
                            title: _.getString("CALLOUT_UPLOAD_FAILED", {
                                callout: i.escape("Name")
                            }),
                            type: "error"
                        })))
                    },
                    onTranscodeComplete: function(e) {
                        var n = e.CalloutID,
                            r = this.getCached(n);
                        r && (r.set({
                            uploaded: !0,
                            uploadPercent: 100
                        }), setTimeout(function() {
                            r.set({
                                transcoded: !0
                            })
                        }, 330), r.get("UserID") == t.getLoggedInUserID() && t.trigger("notification:add", {
                            title: _.getString("CALLOUT_SUCCESS", {
                                callout: r.escape("Name")
                            }),
                            type: "success"
                        }))
                    },
                    onTranscodeFailed: function(e) {
                        var r = e.CalloutID,
                            i = this.getCached(r),
                            s = n.model.get("user");
                        i && (this.uncache(i), s && i.get("UserID") == s.get("UserID") && (s.get("callouts") && s.get("callouts").remove(i), t.trigger("notification:add", {
                            title: _.getString("CALLOUT_TRANSCODE_FAILED", {
                                callout: i.escape("Name")
                            }),
                            type: "error"
                        })))
                    },
                    get: function(e) {
                        var n = Backbone.CachedModel.genericGet.call(this, t.Services.API.getCallout, "CalloutID", e);
                        return n.promise()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Models = t.Models || {};
                var n = function(e, t) {
                        return e.id < t.id ? 1 : e.id > t.id ? -1 : 0
                    },
                    r = function(e, t) {
                        return e.id > t.id ? 1 : e.id < t.id ? -1 : 0
                    },
                    i = function(e, t) {
                        return e.attributes.timestamp < t.attributes.timestamp ? 1 : e.attributes.timestamp > t.attributes.timestamp ? -1 : 0
                    },
                    s = function(e, t) {
                        t ? t = Math.min(t, this.models.length) : t = this.models.length;
                        var n = [],
                            r = e.get("Context"),
                            i = null,
                            s;
                        r && r.type == "artist" && (i = r.artist.get("ArtistID"));
                        for (var o = 0, u = this.models.length, a = 0; o < u && a < t; o++) this.models[o].attributes.forArtistID == i && (s = this.models[o].getNormalizedObject(e), s && (n.push(s), a++));
                        return n
                    },
                    o = function(e) {
                        var n = 0;
                        e >= 25 && e < 75 ? n = 1 : e > 25 && (n = Math.max(Math.floor((e - 25) / 50) + 1, 1));
                        var r = _.orEqual(this.loadedTypeID, this.at(0).get("TypeID")),
                            i = _.orEqual(this.loadedItemID, this.at(0).get("ItemID")),
                            s = $.Deferred();
                        return t.Models.Comment.loadCommentsItemType(i, r, n).done(function(e) {
                            e && e.models ? s.resolve(e.models) : s.reject()
                        }).fail(_.bind(s.reject, s)), s.promise()
                    },
                    u = function(e, n, r) {
                        var i = $.Deferred();
                        switch (r.feedType) {
                        case "community":
                            r.user ? r.user.loadCommunityFeed(!0).done(function(e, t) {
                                i.resolve(t)
                            }).fail(_.bind(i.reject, i)) : i.reject();
                            break;
                        case "model":
                            r.model ? r.model.getFeed(!0).done(function(e, t) {
                                i.resolve(t)
                            }).fail(_.bind(i.reject, i)) : i.reject();
                            break;
                        case "interesting":
                            t.Services.API.getInterestingEvents(300).done(function(e) {
                                i.resolve(e, !1)
                            }).fail(_.bind(i.reject, i));
                            break;
                        default:
                            i.reject()
                        }
                        return i.promise()
                    },
                    a = function(e) {
                        console.log("unsubscribing from", e), t.Services.SWF.ready.done(_.bind(function() {
                            t.Services.SWF.unsubscribeFromBroadcastsStatuses(e, this.subscribedKeys)
                        }, this))
                    },
                    f = {
                        model: t.Models.Broadcast,
                        subscribed: !1,
                        initialize: function() {
                            this.toUnsubscribe = [], this.subscribeDebounce = _.debounce(_.bind(function() {
                                this.subscribed && this.subscribe()
                            }, this), 150), this.unsubscribeBroadcastIDsDebounce = _.debounce(_.bind(function() {
                                var e = _.pluck(this.toUnsubscribe.splice(0, this.toUnsubscribe.length), "id");
                                a.call(this, e)
                            }, this), 150)
                        },
                        setSubscribedKeys: function(e) {
                            return this.subscribed ? !1 : (this.subscribedKeys = e, !0)
                        },
                        subscribe: function() {
                            if (!this.subscribedKeys || !this.subscribedKeys.length) return !1;
                            var e = this.pluck("BroadcastID");
                            return t.Services.SWF.ready.done(_.bind(function() {
                                t.Services.SWF.subscribeToBroadcastsStatuses(e, this.subscribedKeys), this.subscribed = !0, this.on("add", this.onSubscribedAdd, this), this.on("remove", this.onSubscribedRemove, this)
                            }, this)), !0
                        },
                        onSubscribedAdd: function() {
                            this.subscribeDebounce()
                        },
                        onSubscribedRemove: function(e) {
                            this.toUnsubscribe.push(e), this.unsubscribeBroadcastIDsDebounce()
                        },
                        unsubscribe: function() {
                            if (!this.subscribedKeys || !this.subscribedKeys.length) return !1;
                            var e = this.pluck("BroadcastID");
                            return t.Services.SWF.ready.done(_.bind(function() {
                                t.Services.SWF.unsubscribeFromBroadcastsStatuses(e, this.subscribedKeys)
                            }, this)), this.subscribed = !1, this.off("add", this.onSubscribedAdd), this.off("remove", this.onSubscribedRemove), !0
                        },
                        filterBestBroadcasts: function() {
                            this.reset(this.filter(function(e) {
                                return gsConfig.filterBroadcastsByListenersCount && e.attributes.listenersCount > gsConfig.filterBroadcastsByListenersCount ? !1 : e.attributes.ownerSubscribed && e.attributes.isPlaying !== !1 && e.attributes.activeStatus != 0
                            }))
                        },
                        sortByListeners: function() {
                            this.comparator = function(e) {
                                return e.attributes.listenersCount * -1
                            }, this.sort()
                        },
                        getForTagName: function(e) {
                            return e = e.toLowerCase(), this.filter(function(t) {
                                var n = t.get("Tag");
                                return n ? n && n.n && e === n.n.toLowerCase() : e === _.getString("BROADCAST_DEFAULT_TAG").toLowerCase()
                            })
                        }
                    },
                    l = function(e) {
                        return this.get([this.options.broadcastID, ":", e].join(""))
                    };
                t.Models.Collections = {
                    Songs: Backbone.Collection.extend({
                        model: t.Models.Song
                    }, {}),
                    BroadcastSongs: Backbone.Collection.extend({
                        model: t.Models.BroadcastSong,
                        initialize: function(e, t) {
                            this.options = t
                        },
                        getByQueueSongID: l
                    }, {}),
                    QueueSongs: Backbone.Collection.extend({
                        model: t.Models.QueueSong
                    }, {}),
                    PlaylistSongs: Backbone.Collection.extend({
                        model: t.Models.PlaylistSong
                    }, {}),
                    BroadcastSuggestions: Backbone.Collection.extend({
                        model: t.Models.BroadcastSuggestion
                    }, {}),
                    Artists: Backbone.Collection.extend({
                        model: t.Models.Artist
                    }, {}),
                    Albums: Backbone.Collection.extend({
                        model: t.Models.Album
                    }, {}),
                    Playlists: Backbone.Collection.extend({
                        model: t.Models.Playlist
                    }, {}),
                    Broadcasts: Backbone.Collection.extend(f, {}),
                    Users: Backbone.Collection.extend({
                        model: t.Models.User
                    }, {}),
                    Videos: Backbone.Collection.extend({
                        model: t.Models.Video
                    }, {}),
                    Events: Backbone.Collection.extend({
                        model: t.Models.Event
                    }, {}),
                    Stations: Backbone.Collection.extend({
                        model: t.Models.Station
                    }, {}),
                    Tags: Backbone.Collection.extend({
                        model: t.Models.Tag
                    }, {}),
                    Callouts: Backbone.Collection.extend({
                        model: t.Models.Callout
                    }, {}),
                    Comments: Backbone.PageableCollection.extend({
                        model: t.Models.Comment,
                        comparator: n,
                        _initialPageableItemLimit: 25,
                        _pageableItemsPerLoad: 50,
                        _pageableLoadFunc: o
                    }, {}),
                    CommentResponses: Backbone.Collection.extend({
                        model: t.Models.CommentResponse,
                        comparator: r
                    }, {}),
                    FeedEvents: Backbone.PageableCollection.extend({
                        model: t.Models.FeedEvent,
                        comparator: i,
                        _initialPageableItemLimit: 25,
                        _pageableItemsPerLoad: 0,
                        _pageableLoadFunc: u
                    }, {}),
                    Tacos: Backbone.Collection.extend({
                        model: t.Models.Taco,
                        comparator: i,
                        getNormalized: s
                    }, {}),
                    ChatActivities: Backbone.Collection.extend({
                        model: t.Models.ChatActivity
                    }, {})
                }
            }(), function() {
                function o(e) {
                    this.model.get("user") && (e.data && e.data.activityName ? this.model.get("user").onNewNotification(e.data) : this.model.get("user").onNewNotification(e))
                }
                function u(e) {
                    this.model.get("user") && e && e.data && this.model.get("user").onNewFeedEvent(e.data)
                }
                function a(e) {
                    var t = r.Models.Player.playStatuses,
                        i = n.model.get("player").get("playStatus");
                    switch (i) {
                    case t.NONE:
                    case t.FAILED:
                    case t.COMPLETED:
                        return !1
                    }
                    return e && i === t.PAUSED ? !1 : !0
                }
                function f(e, t) {
                    var i = setTimeout(function() {
                        var i = $(t.currentTarget),
                            s = $(".jjmenu"),
                            o, u = r.isBroadcastListener();
                        if (!n.tooltip.currentTooltip && !s.length && !i.hasClass("no-title-tooltip")) {
                            if (!u && e == "PLAY_NOW" && a() && i.hasClass("play-or-add")) e = "PLAY_LAST";
                            else if (u && (e == "PLAY_NOW" || e == "PLAY_LAST")) {
                                var f = $("#suggestions-grid"),
                                    l = $("#recent-plays-grid");
                                f.length && $.contains(f[0], i[0]) || l.length && $.contains(l[0], i[0]) ? e = "PREVIEW_SONG" : e = "SUGGEST_SONG"
                            }
                            o = _.getString(e), i.hasClass("use-title-for-tooltip") && (o = i.attr("title") || i.data("title"), i.data("title", o), i.removeAttr("title"), o && o.substr && o.length > 63 && (o = o.substr(0, 60) + "..."));
                            var c = new r.Views.Tooltips.Helper({
                                text: o
                            });
                            c.tooltipOptions.delay = 100, r.Views.Tooltips.Helper.simpleTooltip(t, c)
                        }
                    }, 40),
                        s = $(t.currentTarget),
                        o = "mouseleave.titleTooltipHelper";
                    s.on("mouseleave.titleTooltipHelper", function() {
                        clearTimeout(i), s.off(o)
                    })
                }
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {};
                var i = " - Grooveshark",
                    s = "Grooveshark - ",
                    l = ["bg", "ca", "cs", "cy", "da", "de", "el", "en", "es", "eu", "et", "gl", "fi", "fr", "hr", "hu", "it", "ja", "ko", "lt", "lv", "nb", "nl", "pl", "pt", "ro", "ru", "sk", "sl", "sv", "tr", "uk", "zh"],
                    c = "en";
                r.Views.Application = Backbone.View.extend({
                    el: document.getElementsByTagName("body"),
                    lastActive: null,
                    events: {
                        "click a,.btn,input": "logGenericClick",
                        "click .search-link": "searchLink",
                        "click .song-link": "songLink",
                        "click .comment-link": "commentLink",
                        "click .play": "onPlayClick",
                        "click .play-genre": "onPlayGenreClick",
                        "click .play-station": "onPlayStationClick",
                        "click .join-broadcast": "onJoinBroadcastClick",
                        "click .open-broadcast": "onOpenBroadcastClick",
                        "click .leave-broadcast": "onLeaveBroadcastClick",
                        "click .favorite": "onFavoriteClick",
                        "click .share, .song-row-share, .album-cell-share, .artist-cell-share": "onShareClick",
                        "click .song-row-add, #np-add": "onAddClick",
                        "click #jh-feedback": "onFeedbackClick",
                        "click .genre-link": "onGenreTagClick",
                        "click .suggest-music": "onSuggestClick",
                        "click .login": "showLoginLightbox",
                        "click .create-account": "showSignupLightbox",
                        "mouseenter .song-row-add": "onSongRowAddMouseenter",
                        "mouseenter .song-row-favorite": "onSongRowFavMouseenter",
                        "mouseenter .song-row-share": _.bind(f, e, "SHARE_SONG"),
                        "mouseenter .song-row-delete": _.bind(f, e, "REMOVE_LISTEN"),
                        "mouseenter .song-link": _.bind(f, e, "GO_TO_SONG_PAGE"),
                        "mouseenter .go-to-broadcast-page": _.bind(f, e, "GO_TO_BROADCAST_PAGE"),
                        "mouseenter #np-fav": "onSongRowFavMouseenter",
                        "mouseenter #np-add": "onSongRowAddMouseenter",
                        "mouseenter #np-share": _.bind(f, e, "SHARE_SONG"),
                        "mouseenter .show-song-tooltip": "openSongTooltip",
                        "mouseenter .show-user-tooltip": "openUserTooltip",
                        "mouseenter .show-broadcast-tooltip": "openBroadcastTooltip",
                        "mouseenter .title-drag-song": _.bind(f, e, "SHORTCUTS_TAB"),
                        "mouseenter .play-or-add": _.bind(f, e, "PLAY_NOW"),
                        "mouseenter .play-now": _.bind(f, e, "PLAY_NOW"),
                        "mouseenter .title-drag-playlist": _.bind(f, e, "DRAG_TO_PLAY"),
                        "mouseenter .title-play-playlist": _.bind(f, e, "PLAY_PLAYLIST"),
                        "mouseenter .play-recent-songs": _.bind(f, e, "SELECTION_PLAY_RECENT"),
                        "mouseenter .title-shuffle-queue": _.bind(f, e, "QUEUE_SHUFFLE_SONGS"),
                        "mouseenter .title-loop-queue": _.bind(f, e, "QUEUE_LOOP_SONGS"),
                        "mouseenter .title-crossfade-queue": _.bind(f, e, "QUEUE_CROSSFADE_SONGS"),
                        "mouseenter .suggest-tags": _.bind(f, e, "SUGGEST_TAGS"),
                        "mouseenter .invite-followers.disabled": _.bind(f, e, "INVITE_FOLLOWERS_RATE_LIMITED"),
                        "mouseenter .upvotes": _.bind(f, e, "VOTES_FROM_LISTENERS"),
                        "mouseenter .use-title-for-tooltip": _.bind(f, e, ""),
                        "mouseenter .favorite-flat": _.bind(f, e, "FOLLOW"),
                        "mouseenter .favorite-flat.btn-success": _.bind(f, e, "UNFOLLOW"),
                        "mouseenter .bc-invite.disabled": _.bind(f, e, "BC_INVITE_LIMIT"),
                        "click .capital-ad-report": "openReportAd",
                        "submit .do-search": "doSearch",
                        "click .upload-music": "showUploadLightbox",
                        "click #live-user-count": "hideLiveUserCount",
                        "click .invite-friends": "onInviteFriendsClick",
                        "click .empty-submit": "submitEmptySearch",
                        "focus .placeholder-input": "onPlaceholderFieldFocus",
                        "keyup .placeholder-input": "onPlaceholderFieldKeyup",
                        "keypress .placeholder-input": "onPlaceholderFieldKeypress",
                        "change .placeholder-input": "onPlaceholderFieldChange",
                        "blur .placeholder-input": "onPlaceholderFieldBlur",
                        "click .placeholder-text": "onPlaceholderClick",
                        "click .bc-invite": "onBroadcastInviteClick"
                    },
                    initialize: function() {
                        r.on("setTitle", this.setTitle, this), this.onMouseMoveThrottled = _.throttle(_.bind(function() {
                            this.onMouseMove()
                        }, this), 1e3), this.$el.on("mousemove." + this.cid, this.onMouseMoveThrottled), this.onMouseMove();
                        var t = _.throttle(_.bind(function() {
                            var e = $(document).width(),
                                t = $(document).height(),
                                i = this.model.attributes.pageSize,
                                s = this.model.get("user");
                            e <= 1080 && i !== 2 ? ($(document.body).addClass("app-shrink"), s.get("isLoggedIn") ? r.trigger("sidebar:size", null, "small") : r.trigger("sidebar:close"), this.model.set({
                                pageSize: 2
                            })) : e <= 1240 && i !== 1 ? ($(document.body).removeClass("app-shrink"), s.get("isLoggedIn") ? r.trigger("sidebar:size", null, "small") : r.trigger("sidebar:close"), this.model.set({
                                pageSize: 1
                            })) : e > 1240 && i !== 0 && ($(document.body).removeClass("app-shrink"), s.get("isLoggedIn") ? r.trigger("sidebar:size", null, "large") : r.trigger("sidebar:close"), this.model.set({
                                pageSize: 0
                            })), typeof n != "undefined" && n.handleResize(), _.resizeClipboardHandler(), r.trigger("app:resize", e, t)
                        }, this), 300);
                        $(e).resize(t), t(), this.header = new r.Views.Header({
                            el: $("#header-container")[0],
                            model: this.model
                        }), this.player = new r.Views.Player({
                            el: $("#player-wrapper")[0],
                            model: this.model
                        }), this.queue = new r.Views.Queue({
                            model: this.model
                        }), this.sidebar = new r.Views.Sidebar({
                            model: this.model
                        }), this.page = new r.Views.Page({
                            model: this.model
                        }), this.theme = new r.Views.Theme({
                            model: this.model
                        }), this.ad = new r.Views.Ad({
                            model: this.model
                        });
                        var n = this.lightbox = new r.Views.Lightbox({
                            model: this.model
                        });
                        this.tooltip = new r.Views.Tooltip({
                            model: this.model
                        }), this.notification = new r.Views.Notification({
                            model: this.model
                        }), this.model.on("userChange:started", this.onUserChangeStarted, this), this.model.on("userChange:finished", this.onUserChangeFinished, this), this.model.on("change:user", this.onUserChange, this), this.model.on("change:user", t, this), this.onUserChange(), this.lastTitleObj = {
                            title: (document.title || "").replace(" - Grooveshark", "").replace("Grooveshark - ", ""),
                            page: this.page.currentPageView
                        }, this.model.get("player").on("change:playStatus", function() {
                            this.setTitle(this.lastTitleObj)
                        }, this);
                        var i = (r.Services.Local.get("gs.locale") || gsConfig.lang || this.detectLangauge() || "en").substring(0, 2);
                        _.indexOf(l, i) === -1 && (i = "en"), r.on("locale:change", this.refreshLanguage, this), $.localize.ready.done(_.bind(function() {
                            this.refreshLanguage(this.model.get("locale"))
                        }, this)), this.refreshLanguage(i), r.on("manatee:notification", o, this), r.on("manatee:feedEvent", u, this), r.on("manatee:broadcastGet", function(e) {
                            (!e || !e.success) && r.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_BROADCAST_GET_FAILED"),
                                type: "error",
                                duration: 5e3
                            })
                        }), r.on("manatee:broadcastInvite", this.onBroadcastInvitation, this), r.on("tour:start", this.startTour, this)
                    },
                    render: function() {
                        this.header.render(), this.player.render(), this.page.render(), this.lightbox.render()
                    },
                    onUserChangeStarted: function(e) {
                        this.page.removeCurrentPageView()
                    },
                    onUserChangeFinished: function(t) {
                        var n = t.destination;
                        n || (n = "#!/"), r.router.setHash(n), $(e).trigger("hashchange")
                    },
                    setTitle: function(e) {
                        if (!e || !e.title || !e.page) return;
                        e = _.clone(e);
                        var t = e.title,
                            n = e.prepend,
                            r = e.page;
                        _.isArray(t) && (t = _.filter(t, function(e) {
                            return e
                        }), t = t.join(" - ")), this.lastTitleObj = e, _.defer(_.bind(function() {
                            if (r !== this.page.currentPageView) return;
                            n = _.orEqual(n, !0);
                            var e = "";
                            a(!0) && $.browser.webkit && (e = "▶ "), n ? this.lastTitle = e + t + i : this.lastTitle = e + s + t, document.title = this.lastTitle
                        }, this))
                    },
                    onUserChange: function() {
                        var e = this.model.get("user");
                        e.get("subscription").canHideAds() ? $(document.body).addClass("premium-user") : $(document.body).removeClass("premium-user")
                    },
                    detectLangauge: function() {
                        var t = e.navigator;
                        return t.language || t.browserLanguage || t.systemLanguage || t.userLanguage
                    },
                    refreshLanguage: function(e) {
                        _.indexOf(l, e) === -1 && (e = "en");
                        var t = _.getString("WEEK_DAYS");
                        t && t.length && (_.daysOfTheWeek = t.split(","));
                        var n = _.getString("MONTHS");
                        n && n.length && (_.monthsOfTheYear = n.split(",")), $("[data-translate-text]").localize("gs", {
                            language: e
                        }).done(_.bind(function() {
                            $("[data-translate-title]").localize("gs", {
                                language: e,
                                callback: "titleCallback"
                            }), r.Services.Local.set("gs.locale", e), this.model.set("locale", e), e !== c && (r.trigger("locale:changed", e), c = e), $("#jh-feedback").removeClass().addClass(e)
                        }, this))
                    },
                    logGenericClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data(),
                            i = {
                                tag: t.prop("tagName"),
                                classes: t.attr("class")
                            };
                        for (var s in n) n.hasOwnProperty(s) && (i["data-" + s] = n[s]);
                        switch (i.tag) {
                        case "input":
                            i.inputType = t.attr("type"), i.inputType !== "password" && (i.value = t.val());
                            break;
                        case "a":
                            i.href = t.attr("href")
                        }
                        _.extend(i, _.eventToGUTSCoords(e)), r.trigger("guts:log", "defaultClicked", i)
                    },
                    searchLink: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.data("searchtype"),
                            i = t.data("searchquery");
                        n = n ? n : "", i = i ? i : "", r.router.performSearch(n, i)
                    },
                    songLink: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            r = t.data("subpage");
                        this.navigateToSong(n)
                    },
                    navigateToSong: function(e, t) {
                        r.Models.Song.get(e).done(function(e) {
                            e && e.getToken().done(function() {
                                r.router.setHash(e.toUrl(t))
                            })
                        })
                    },
                    commentLink: function(e) {
                        var t = $(e.currentTarget);
                        if (!t.attr("href")) {
                            e.preventDefault();
                            var n = t.data("commentId");
                            r.Models.Comment.get(n).done(_.bind(function(e) {
                                e && e.get("TypeID") === r.Models.Comment.COMMENT_PAGE_TYPES.SONG ? this.navigateToSong(e.get("ItemID"), "comment/" + e.id) : e && r.router.setHash(e.toUrl())
                            }, this))
                        }
                    },
                    onShareClick: function(e) {
                        e.preventDefault(), console.warn(this.model.get("user"), this.model.get("user").get("isLoggedIn"));
                        var t = $(e.currentTarget),
                            n = t.data(),
                            i = {
                                type: "",
                                id: 0,
                                excludeServices: {}
                            },
                            s, o;
                        n.playlistId ? (i.type = "playlist", i.id = n.playlistId) : n.songId ? (i.type = "song", i.id = n.songId) : n.albumId ? (i.type = "album", i.id = n.albumId, i.excludeServices = {
                            embed: !0
                        }) : n.artistId ? (i.type = "artist", i.id = n.artistId, i.excludeServices = {
                            embed: !0
                        }) : n.tagId ? (i.type = "tag", i.id = n.tagId) : n.userId && (i.type = "user", i.id = n.userId, i.excludeServices = {
                            grooveshark: !0,
                            embed: !0
                        }, i.service = "facebook"), i.type && i.id && r.trigger("lightbox:open", "share", i)
                    },
                    onAddClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = r.getLoggedInUserID(),
                            o = r.Models.User.getCached(s);
                        return i.get("fromLibrary") ? o.removeSongsFromLibrary([n]) : o.addSongsToLibrary([n]), !1
                    },
                    onFavoriteClick: function(e) {
                        var t = $(e.currentTarget),
                            n = this.model.get("user"),
                            i = t.data("playlistId"),
                            s = t.data("artistId"),
                            o = t.data("userId"),
                            u = t.data("songId"),
                            a = t.data("broadcastId"),
                            f, l, c = function(e, t) {
                                e ? n.unfavorite(t + "s", f) : n.favorite(t + "s", f), t == "Artist" && h(e, s), !e && t == "Song" && r.Services.Flattr.isUserConnected() && r.Services.Flattr.isUserFavoriteAndFlattr() && r.Services.Flattr.onFavoriteAndFlattr(r.Models.Song.getCached([f]).get("ArtistID"))
                            },
                            h = function(e, t) {
                                if (!e) {
                                    var n = r.Models.Artist.getCached(t);
                                    r.trigger("notification:add", {
                                        title: _.getString("POPUP_FOLLOWED_ARTIST", {
                                            artistLink: n.get("ArtistName")
                                        }),
                                        type: "success"
                                    })
                                }
                            };
                        i ? (l = "Playlist", f = i) : o ? (l = "User", f = o) : s ? (l = "Artist", f = s) : u ? (l = "Song", f = u) : a && (l = "Broadcast", f = a), r.Models[l].get(f).done(function(e) {
                            c(e.get("isFavorite"), l)
                        })
                    },
                    onPlayClick: function(e) {
                        e.preventDefault();
                        var n = $(e.currentTarget),
                            i = n.data("playlistId"),
                            s = n.data("songId"),
                            o = n.data("albumId"),
                            u = n.data("artistId"),
                            f = n.data("tagId"),
                            l = n.data("broadcastId"),
                            c = n.hasClass("play-pause"),
                            h = n.data("streamType"),
                            p = !0;
                        _.defined(h) || (h = n.closest(".module").data("streamType"));
                        var d = _.bind(function(e, i) {
                            var s = this.model.get("player").get("currentQueue");
                            if (s) {
                                p = !a(), n.hasClass("play-or-add") || (p = !0);
                                if (c) r.trigger("player:togglePlay");
                                else {
                                    i = _.orEqual(i, new r.Models.PlayContext);
                                    if (h) {
                                        var o = h.split(",");
                                        _.each(o, function(e) {
                                            e = $.trim(e), _.defined(r.Models.PlayContext[e]) && i.addStreamType(r.Models.PlayContext[e])
                                        })
                                    }
                                    r.trigger("player:addSongs", e, t, p, i)
                                }
                            }
                        }, this);
                        if (i) r.Models.Playlist.get(i).then(function(e) {
                            e.getSongs().then(function(t) {
                                d(t.toArray(), new r.Models.PlayContext(e))
                            })
                        });
                        else if (s) {
                            var v = n.data("contextClass"),
                                m = n.data("contextId"),
                                g = n.closest(".grid-item");
                            r.Models.Song.get(s).done(function(e) {
                                g.length && g.data("playContext") ? d([e], g.data("playContext")) : v && m && r.Models[v] && r.Models[v].hasOwnProperty("get") ? r.Models[v].get(m).then(function(t) {
                                    d([e], new r.Models.PlayContext(t))
                                }).fail(function() {
                                    d([e])
                                }) : d([e])
                            })
                        } else o ? r.Models.Album.get(o).then(function(e) {
                            e.getSongs().then(function(t) {
                                d(t.toArray(), new r.Models.PlayContext(e))
                            })
                        }) : u ? r.Models.Artist.get(u).then(function(e) {
                            e.getTopSongs().then(function(t) {
                                d(t.toArray(), new r.Models.PlayContext(e))
                            })
                        }) : f ? r.Models.Tag.get(f).then(_.bind(function(e) {
                            this.playGenre(e.get("Tag"), e.get("TagID"))
                        }, this)) : l && r.Models.Broadcast.get(l).done(function(e) {
                            e.getHistory().done(function(t) {
                                d(t.toArray(), new r.Models.PlayContext(e))
                            })
                        })
                    },
                    onMouseMove: function() {
                        this.lastActive = Date.now();
                        var t = this.model.get("user");
                        t.get("isLoggedIn") && t.get("checkBroadcastInvitesTime") && t.get("checkBroadcastInvitesTime") < (this.lastActive + e.clientTimeDivergence) / 1e3 >> 0 && t.updateBroadcastInviteableUsers(), r.trigger("mousemove", this.lastActive)
                    },
                    onGenreTagClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.attr("href");
                        if (n && n.length) return !0;
                        var i = $(e.currentTarget).data();
                        i.tag || (i.tag = "x");
                        if (!i.tagId) return !1;
                        r.router.setHash("/tag/" + _.cleanNameForURL(i.tag) + "/" + i.tagId), r.trigger("guts:gatrack", "site", "genreTagClick", i.tagId), r.trigger("guts:log", "onGenreTagClick", {
                            genreTagTagID: i.tagId
                        })
                    },
                    radioClearQueue: function(e) {
                        var t = this.model.get("player"),
                            n = t.get("currentQueue"),
                            i = !1;
                        if ((!n.get("songs") || !n.get("songs").length) && !n.get("currentBroadcast")) {
                            e();
                            return
                        }
                        var s = function() {
                                var s = function() {
                                        if (i) return;
                                        i = !0, t.off("change:currentQueue", s), n.off("change", s), e()
                                    };
                                r.Services.SWF.stopSong(), r.Services.SWF.clearQueue(), t.on("change:currentQueue", s), n.on("change", s)
                            };
                        r.trigger("lightbox:open", "radioClearQueue", {
                            startRadio: s,
                            inBroadcast: !! n.get("currentBroadcast")
                        })
                    },
                    onPlayStationClick: function(e, t) {
                        var n = $(e.currentTarget),
                            i = n.data(),
                            s = this.model.get("player");
                        if (r.isBroadcaster()) {
                            r.trigger("notification:add", {
                                title: _.getString("POPUP_NO_RADIO_WHILE_BROADCASTING"),
                                type: "error"
                            });
                            return
                        }
                        _.isUndefined(i.userId) || (t = i.userId);
                        if (!_.isUndefined(t)) {
                            var o = r.Models.User.getCached(t);
                            if (!o) {
                                this.onPlayRadioFail();
                                return
                            }
                            var u = o.get("playlists");
                            u = new r.Models.Collections.Playlists(u && u.models || []), u.comparator = r.Models.Playlist.modifiedSort, u.sort(), u = u.last(3).reverse();
                            var a = _.bind(function(e) {
                                var n = $.Deferred(),
                                    i = {},
                                    a = new r.Models.Collections.Songs([]),
                                    f = new r.Models.Collections.Songs([]),
                                    l = 1,
                                    c = s && s.get("currentQueue"),
                                    h = c && c.get("clientRadio"),
                                    p = !1,
                                    d = $.now(),
                                    v, m, g = 1,
                                    y = 0,
                                    b = !1;
                                v = function(e, t, n, r) {
                                    var s = [];
                                    return r && (r = r.models ? r.models : r, b && (r = _.shuffle(r)), s = _.first(r, t), n == 1 ? a.add(s) : f.add(s)), a.length && !i[e] && l <= 2 && d && ($.now() - d) / 1e3 > 1 && (console.log("time expired, songBucket!"), m(e)), _.difference(r, s)
                                }, m = function(e) {
                                    if (i[e]) return;
                                    i[e] = !0, a = new r.Models.Collections.Songs(b ? _.shuffle(a.models) : a.models);
                                    var s = Math.floor(a.length * g),
                                        o = a.first(s),
                                        u = !1,
                                        d;
                                    a.length <= 4 && f.length && (o = o.concat(f.models), f.reset([]));
                                    if (!o || !o.length) {
                                        n.notify(l++);
                                        return
                                    }
                                    a.reset(a.rest(s)), o = new r.Models.Collections.Songs(o), p ? (d = c.get("activeSong"), h.add(o.models)) : (o = r.Models.Queue.sortSongsForRadio(o, {
                                        shuffle: !1
                                    }), p = !0, u = !0, d = {}, o = o.models, h.reset(o).enable(), h.on("needSongs", function(e, t) {
                                        n.notify(l++)
                                    }, this), r.trigger("guts:startNewAutoplayContext", "user", t)), y += o.length, h.onActiveSongChange(c, d, {
                                        playOnAdd: u
                                    })
                                }, n.progress(_.bind(function(e) {
                                    if (e > 7) return;
                                    var t = [],
                                        i, s = _.bind(function() {
                                            a.length ? m.apply(this, [e].concat(_.toArray(arguments))) : p ? n.notify(l++) : this.onPlayRadioFail()
                                        }, this);
                                    switch (e) {
                                    case 1:
                                        t.push(o.getPersonalizedSongs().done(_.bind(function(t) {
                                            var n = v(e, Math.min(100, t.length / 1.4), 1, t);
                                            n && n.length && v(e, 100, 2, n)
                                        }, this)));
                                        break;
                                    case 2:
                                    case 3:
                                    case 4:
                                        b = !0, g = .67;
                                        if (!u.length) {
                                            l = 5, n.notify(l);
                                            return
                                        }
                                        var d = u.shift();
                                        i = d.getUnwrappedSongs(), i.done(_.bind(v, this, e, 5, 1)), t.push(i);
                                        break;
                                    case 5:
                                        g = 1, a.add(f.models), f.reset([]), i = $.Deferred(), i.resolve(), t.push(i);
                                        break;
                                    case 6:
                                        i = o.getTopArtists(), i.done(function(e) {
                                            var t = h.frowns,
                                                n = c.get("songs"),
                                                i = n.pluck("ArtistID"),
                                                s = e.pluck("ArtistID"),
                                                o = t.pluck("ArtistID");
                                            i = _.uniq(i.concat(i, s)), i = _.difference(i, o);
                                            var u = {
                                                secondaryArtistWeightModifier: .1,
                                                seedArtistWeightRange: [80, 100],
                                                weightModifierRange: [-9, 9],
                                                seeds: i,
                                                frowns: o
                                            };
                                            r.trigger("guts:gatrack", "player", "clientRadioFallbackToServer", "fallbackSeedArtistIDs:" + i.length + ",fallbackSeedFrownArtistIDs:" + o.length), r.trigger("guts:forcelog", "clientRadioFallbackToServer", {
                                                fallbackSeedArtistIDs: i.toString(),
                                                fallbackSeedFrownArtistIDs: o.toString()
                                            }), r.trigger("guts:startAutoplayFallbackContext", "autoplay", 0, "artist", i.toString()), r.Services.SWF.setAutoplay(!0, 0, u, "autoplayGetSongEx")
                                        });
                                        return;
                                    default:
                                        h.disable(), this.onPlayRadioFail(), r.trigger("guts:clearAllAutoplayContexts");
                                        return
                                    }
                                    setTimeout(_.bind(v, this, e), 1200), $.after(t).always(s)
                                }, this)), n.notify(l++)
                            }, this);
                            this.radioClearQueue(a, s)
                        }
                    },
                    onPlayGenreClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("tag"),
                            r = t.data("tagId"),
                            i = this.model.get("player");
                        if (!r) {
                            console.log("missing tagId data on element", t), n && this.onPlayGenreFail(n);
                            return
                        }
                        var s = $.Deferred();
                        return this.playGenre(n, r).done(function() {
                            s.resolve.apply(s, _.toArray(arguments))
                        }).fail(function() {
                            s.resolve.apply(s, _.toArray(arguments))
                        }), s.fail(_.bind(this.onPlayGenreFail, this, n)), s
                    },
                    playGenre: function(e, t) {
                        var i = $.Deferred();
                        return r.Models.Tag.get(t).done(_.bind(function(e) {
                            if (!e) {
                                i.reject();
                                return
                            }
                            e.getSongs().done(function(e) {
                                (!e || !e.length) && i.reject(), e = new r.Models.Collections.Songs(e.models);
                                var s = _.bind(function() {
                                    var s = n.model.get("player"),
                                        o = s.get("currentQueue"),
                                        u = o.get("clientRadio");
                                    e = r.Models.Queue.shuffleSongsForRadio(e), u.reset(e.models).enable(), u.onActiveSongChange(o, {}, {
                                        playOnAdd: !0
                                    }), u.on("needSongs", function(e, t) {
                                        e.switchToAutoplay({
                                            secondaryArtistWeightModifier: .7,
                                            seedArtistWeightRange: [75, 100],
                                            weightModifierRange: [-14, 9]
                                        }), r.trigger("guts:startAutoplayFallbackContext", "autoplay", 0)
                                    }), i.resolve(e), r.trigger("guts:startNewAutoplayContext", "tag", t)
                                }, this);
                                n.radioClearQueue(s)
                            }).fail(function() {
                                i.reject()
                            })
                        }, this)), i
                    },
                    onPlayGenreFail: function(e) {
                        r.trigger("notification:add", {
                            title: "Error retrieving tag songs for " + e + ".",
                            description: "",
                            url: ""
                        })
                    },
                    onPlayRadioFail: function() {
                        r.trigger("notification:add", {
                            title: _.getString("ERROR_FETCHING_RADIO"),
                            description: "",
                            url: ""
                        })
                    },
                    onSuggestClick: function(e) {
                        r.trigger("lightbox:open", "share", {
                            service: "grooveshark",
                            serviceLock: !0,
                            toUserID: $(e.currentTarget).data("userId")
                        }), r.trigger("guts:gatrack", "site", "onSuggestClick"), r.trigger("guts:log", "onSuggestClick", {
                            toUserID: $(e.currentTarget).data("userId")
                        })
                    },
                    onFeedbackClick: function(e) {
                        e.preventDefault(), r.trigger("lightbox:open", "feedback", {
                            type: "feedback"
                        })
                    },
                    onJoinBroadcastClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.find(".title"),
                            r = t.data(),
                            i = _.eventToGUTSCoords(e);
                        this.joinBroadcast(r.broadcastId, r.userId, r.artistId, i).done(function(e) {
                            n.data({
                                translateText: e
                            }).text(_.getString(e))
                        })
                    },
                    joinBroadcast: function(e, t, i, s) {
                        var o = n.model.get("user"),
                            u = n.model.get("player").get("currentQueue"),
                            a = u ? u.get("isBroadcasting") : !1,
                            f = u ? u.get("currentBroadcast") : null,
                            l = $.Deferred(),
                            c;
                        s = _.orEqual(s, {});
                        if (e) {
                            s.broadcastID = e;
                            if (!i && !t) {
                                var h = r.Models.Broadcast.getCached(e);
                                i = h.get("ArtistID"), t = h.get("UserID")
                            }
                            if (!u || !f || f.get("BroadcastID") != e) {
                                var p;
                                i ? p = r.Models.Artist.getCached(i) : t && (p = r.Models.User.getCached(t));

                                function d() {
                                    o.joinBroadcast(e, p).done(function() {
                                        l.resolve("LEAVE_BROADCAST")
                                    }).fail(function(e) {
                                        var t = "POPUP_ERROR_BROADCAST_JOIN_ERROR";
                                        e === 2 && (t = "POPUP_ERROR_BROADCAST_JOIN_ARTIST"), r.trigger("notification:add", {
                                            description: _.getString(t),
                                            type: "error",
                                            duration: 5e3
                                        })
                                    }), l.fail()
                                }
                                a && f ? r.trigger("lightbox:open", "broadcastListeners", {
                                    broadcast: f,
                                    endBroadcast: !0,
                                    onBroadcastEnded: d
                                }) : d();
                                return
                            }
                        }
                        if (f) {
                            function v() {
                                o.leaveBroadcast(), l.resolve("JOIN_BROADCAST")
                            }
                            c = f.get("listeners"), a && c && c.length > 1 ? r.trigger("lightbox:open", "broadcastListeners", {
                                broadcast: f,
                                endBroadcast: !0,
                                onBroadcastEnded: v
                            }) : v(), s.broadcastID = f.get("BroadcastID")
                        }
                        return r.trigger("guts:log", "joinBroadcastButtonClicked", s), l.promise()
                    },
                    onOpenBroadcastClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data();
                        if (n.broadcastId) {
                            var i = r.Models.Broadcast.getCached(n.broadcastId);
                            i && r.router.setHash(i.toUrl())
                        }
                    },
                    onLeaveBroadcastClick: function(e) {
                        var t = $(e.currentTarget),
                            i = t.find(".title"),
                            s = t.data(),
                            o = n.model.get("user"),
                            u = n.model.get("player").get("currentQueue"),
                            a = u ? u.get("isBroadcasting") : !1,
                            f = u ? u.get("currentBroadcast") : null;
                        if (s.broadcastId) {
                            var l = _.eventToGUTSCoords(e);
                            l.broadcastID = s.broadcastId;

                            function c() {
                                o.leaveBroadcast();
                                var e = "JOIN_BROADCAST";
                                i.data({
                                    translateText: e
                                }).text(_.getString(e))
                            }
                            u && f && f.get("BroadcastID") == s.broadcastId && (a ? r.trigger("lightbox:open", "broadcastListeners", {
                                broadcast: f,
                                endBroadcast: !0,
                                onBroadcastEnded: c
                            }) : c()), r.trigger("guts:log", "leaveBroadcastButtonClicked", l)
                        }
                    },
                    onSongRowAddMouseenter: function(e) {
                        var t = $(e.currentTarget).data("songId"),
                            n = "HELPER_ROW_COLLECTION_ADD";
                        r.Models.Song.getCached(t).get("fromLibrary") && (n = "HELPER_ROW_COLLECTION_REMOVE");
                        var i = new r.Views.Tooltips.Helper({
                            text: _.getString(n)
                        });
                        r.Views.Tooltips.Helper.simpleTooltip(e, i)
                    },
                    onSongRowFavMouseenter: function(e) {
                        var t = $(e.currentTarget).data("songId"),
                            n = "HELPER_ROW_FAVORITES_ADD";
                        r.Models.Song.getCached(t).get("isFavorite") && (n = "HELPER_ROW_FAVORITES_REMOVE");
                        var i = new r.Views.Tooltips.Helper({
                            text: _.getString(n)
                        });
                        r.Views.Tooltips.Helper.simpleTooltip(e, i)
                    },
                    openSongTooltip: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data(),
                            i = [],
                            s = null,
                            o = {
                                delay: 50,
                                notchSize: 6,
                                notchY: 10,
                                notch: "top",
                                x: "center",
                                y: "bottom"
                            },
                            u = t.closest(".sidebar-user");
                        n.tooltipLeft && (o.notchX = 300, o.x = -300 + t.width() / 2);
                        if (n.tooltipCacheKey) {
                            var a = this.model.get("tooltipOptionsCache"),
                                f = a && a[n.tooltipCacheKey];
                            f && (o = _.extend({}, o, f))
                        }
                        u.length && (t = $(u[0]));
                        if (n.songId) {
                            var l = new r.Views.Tooltips.SingleSong({
                                songID: n.songId,
                                addStreamType: n.addStreamType
                            });
                            i.push(l), s = "song:" + n.songId, o.views = i, o.$attached = t, o.tooltipKey = s, _.isFunction(o.beforeRender) && o.beforeRender(t, l, o), r.trigger("tooltip:open", o)
                        }
                    },
                    openUserTooltip: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data(),
                            i = [],
                            s = null,
                            o = {
                                delay: 250,
                                notchSize: 6,
                                notchY: 10,
                                notch: "top",
                                x: "center",
                                y: "bottom"
                            },
                            u = t.closest(".sidebar-user");
                        n.tooltipLeft && (o.notchX = 300, o.x = -300 + t.width() / 2);
                        if (n.tooltipCacheKey) {
                            var a = this.model.get("tooltipOptionsCache"),
                                f = a && a[n.tooltipCacheKey];
                            f && (o = _.extend({}, o, f))
                        }
                        u.length && (t = $(u[0]));
                        if (n.userId) {
                            var l = new r.Views.Tooltips.User({
                                userID: n.userId
                            });
                            i.push(l), s = "user:" + n.userId, o.views = i, o.$attached = t, o.tooltipKey = s, r.trigger("tooltip:open", o)
                        }
                    },
                    openBroadcastTooltip: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data(),
                            i = [],
                            s = null,
                            o = {
                                delay: 250,
                                notchSize: 6,
                                notchY: 10,
                                notch: "top",
                                x: "center",
                                y: "bottom"
                            },
                            u = t.closest(".sidebar-user");
                        n.tooltipLeft && (o.notchX = 300, o.x = -300 + t.width() / 2);
                        if (n.tooltipCacheKey) {
                            var a = this.model.get("tooltipOptionsCache"),
                                f = a && a[n.tooltipCacheKey];
                            f && (o = _.extend({}, o, f))
                        }
                        u.length && (t = $(u[0]));
                        if (n.userId) {
                            var l = new r.Views.Tooltips.Broadcast({
                                broadcastID: n.broadcastId,
                                userID: n.userId
                            });
                            i.push(l), s = "broadcast:" + n.userId, o.views = i, o.$attached = t, o.tooltipKey = s, o.tooltipClass = "broadcast-tooltip", o.width = 330, r.trigger("tooltip:open", o)
                        }
                    },
                    openReportAd: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("capitalId"),
                            i = $("iframe", "#" + n);
                        if (!i || !i.length) return;
                        var s = i.data("adInfo"),
                            o = {
                                delay: 0,
                                hideDelay: 5e3,
                                notchSize: 6,
                                notchY: 10,
                                notchX: 300,
                                notch: "top",
                                x: "center",
                                y: "bottom"
                            };
                        gsConfig.runMode !== "production" && console.log("Got ad info from iFrame: " + $.stringify(s)), o.views = [new r.Views.Tooltips.ReportAd({
                            info: s
                        })], o.$attached = t, o.tooltipKey = "reportAd", r.trigger("tooltip:open", o), r.trigger("guts:forcelog", "openedReportAd", {
                            iframeID: n,
                            country: gsConfig.country.ID
                        }), r.trigger("guts:gatrack", "site", "openedReportAd", n + "_" + gsConfig.country.ID)
                    },
                    doSearch: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.attr("data-search-type") || "";
                        query = $(e.currentTarget).find(".search-input").val(), console.warn(n, query), r.router.performSearch(n, query)
                    },
                    submitEmptySearch: function(e) {
                        return e.preventDefault(), $(".empty-search").submit(), !1
                    },
                    showLoginLightbox: function() {
                        return r.trigger("lightbox:open", "login"), !1
                    },
                    showSignupLightbox: function() {
                        return r.trigger("lightbox:open", "signup"), !1
                    },
                    showUploadLightbox: function() {
                        if (r.getLoggedInUserID() == -1) {
                            r.trigger("lightbox:open", "login", {
                                onLogin: function() {
                                    setTimeout(function() {
                                        var t = n.model.get("user"),
                                            i = t.get("Context"),
                                            s = t.get("artistsOwned"),
                                            o = i.type == "artist" ? {
                                                artist: i.artist
                                            } : {};
                                        s.length ? r.trigger("lightbox:open", "upload", o) : e.open("http://grooveshark.com/upload", "_blank")
                                    }, 1e3)
                                }
                            });
                            return
                        }
                        var t = this.model.get("user"),
                            i = t.get("Context"),
                            s = t.get("artistsOwned"),
                            o = i.type == "artist" ? {
                                artist: i.artist
                            } : {};
                        s.length ? r.trigger("lightbox:open", "upload", o) : e.open("http://grooveshark.com/upload", "_blank")
                    },
                    startTour: function(e) {
                        var t = new r.Views.Tooltips.Tour({
                            type: "default"
                        }),
                            n = {
                                persist: !0,
                                width: 265,
                                delay: 0,
                                views: [t],
                                tooltipKey: "tour",
                                fixPosition: !1,
                                scrollable: $("body"),
                                tooltipClass: "tooltip-tour"
                            };
                        t.tour[0].setup(n), r.trigger("tooltip:open", n)
                    },
                    onInviteFriendsClick: function(e) {
                        r.trigger("lightbox:open", "invite")
                    },
                    hideLiveUserCount: function() {
                        $("#live-user-count").addClass("hide")
                    },
                    onPlaceholderClick: function(e) {
                        e.preventDefault(), $(e.target).parent().find(".placeholder-input").focus()
                    },
                    onPlaceholderFieldFocus: function(e) {
                        $(e.currentTarget).parent().addClass("focused")
                    },
                    onPlaceholderFieldKeyup: function(e) {
                        var t = $(e.currentTarget),
                            n = t.parent();
                        t.val() ? n.addClass("has-text") : n.removeClass("has-text")
                    },
                    onPlaceholderFieldKeypress: function(e) {
                        $(e.currentTarget).parent().addClass("has-text")
                    },
                    onPlaceholderFieldBlur: function(e) {
                        $(e.currentTarget).parent().removeClass("focused")
                    },
                    onPlaceholderFieldChange: function(e) {
                        var t = $(e.currentTarget),
                            n = t.parent();
                        t.val() ? n.addClass("has-text") : n.removeClass("has-text")
                    },
                    onBroadcastInviteClick: function(t) {
                        var i = $(t.currentTarget),
                            s = i.data("userId"),
                            o = n.model.get("player").get("currentQueue"),
                            u = o ? o.get("currentBroadcast").get("BroadcastID") : null;
                        if (i.hasClass("disabled")) return;
                        r.Services.API.sendRealtimeBroadcastInvite(s, u).done(_.bind(function() {
                            var t = this.model.get("user"),
                                n = r.Models.User.getCached(s);
                            t && t.get("isLoggedIn") && (n.set("canBroadcastInvite", {
                                val: !1,
                                timeInvited: (Date.now() + e.clientTimeDivergence) / 1e3 >> 0
                            }), t.updateBroadcastInviteableUsers())
                        }, this))
                    },
                    onBroadcastInvitation: function(e) {
                        var t = e.userIDFrom ? r.Models.User.getCached(e.userIDFrom) : r.Models.Artist.getCached(e.artistIDFrom),
                            i = e.ownerUser ? new r.Models.User(e.ownerUser) : new r.Models.Artist(e.ownerArtist),
                            s = e.userIDFrom ? t.escape("Name") : t.escape("ArtistName"),
                            o = e.ownerUser ? i.escape("Name") : i.escape("ArtistName"),
                            u = new r.Models.Broadcast(e.broadcastInfo);
                        r.trigger("notification:add", {
                            title: _.getString("INVITED_TO_BROADCAST", {
                                sender: s
                            }),
                            description: _.getString("INVITED_TO_BROADCAST_DESC", {
                                broadcast: u.escape("Name"),
                                owner: o
                            }),
                            click: _.bind(function() {
                                var e = n.model.get("player").get("currentQueue");
                                e && e.get("currentBroadcast") ? r.router.setHash(u.toUrl()) : this.joinBroadcast(u.get("BroadcastID"), u.get("UserID"), u.get("ArtistID"))
                            }, this),
                            duration: 1e4
                        })
                    }
                })
            }(), function() {
                function u(e, t) {
                    return function(n) {
                        return e.filter(function(e) {
                            return _.startsWith(e.attributes[t], n)
                        })
                    }
                }
                function a() {
                    s && i && (s.hide(), i.append('<img id="taco-explosion" src="/webincludes/images/tacoExplosion.gif" style="position: absolute; height: 20px;" />'), setTimeout(function() {
                        i.addClass("boom")
                    }, 10), setTimeout(function() {
                        i.removeClass("boom").addClass("hide"), $("#taco-explosion").remove(), s.show()
                    }, 700), o = 0)
                }
                function f() {
                    this.userNotificationsFailed = !0
                }
                function l(e) {
                    this.userNotificationsFailed = !1;
                    var t = r.get("Context"),
                        n;
                    if (r.get("pageNameData") && e && e.length) {
                        o = 0;
                        var u = r.get("pageNameData").NotificationReadTime;
                        u ? e.each(function(e) {
                            n = e.get("forArtistID"), e.get("timestamp") >= u && (!n && t.type != "artist" || t.type == "artist" && n == t.artist.get("ArtistID")) && o++
                        }) : o = e.length, s.text(o), o > 0 ? i.removeClass("hide") : i.addClass("hide")
                    }
                    e.on("add", this.newNotification, this)
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {};
                var r, i, s, o = 0;
                t.Views.Header = Backbone.View.extend({
                    templatePath: "header",
                    autocompleteTooltip: null,
                    tacobellTooltip: null,
                    events: {
                        "mouseenter #logo": "showExploreDropdown",
                        "click #logo": "handleLogoClick",
                        "click #settings-button": "showSettingsDropdown",
                        "submit #header-search": "performSearch",
                        "click #header-search .placeholder": "focusSearch",
                        "click #header-search .remove": "clearSearch",
                        "click #header-search .icon.search": "submitSearch",
                        "focus #header-search input": "onSearchFocus",
                        "blur #header-search input": "onSearchBlur",
                        "keydown input.search": "onSearchKeydown",
                        "keyup input.search": "onSearchKeyup",
                        "click #notification-button": "showNotifications",
                        "mouseenter #settings-button": "onSettingsMouseenter",
                        "mouseenter #upload-button": "onUploadMouseenter",
                        "mouseenter #notification-button": "onNotificationsMouseenter",
                        "click #old-gs": "goBackToOld",
                        "click #close-top-hat": "closeTopHat",
                        "click #header-back-btn": "navigateBack",
                        "click #header-forward-btn": "navigateForward",
                        "mouseenter #profile-button": "showUserDropdown",
                        "click #upload-button": "logUploadClick"
                    },
                    initialize: function() {
                        this.$search = $(), this.$placeholder = $(), this.$prediction = $(), this.userNotificationsFailed = !0, t.ready.done(_.bind(function() {
                            this.model.on("change:user", this.onModelUserChange, this), this.onModelUserChange(), t.on("router:change", _.bind(this.updateNavButtons, this))
                        }, this)), $(document).on("keydown", _.bind(function(e) {
                            var t = e.target && e.target.tagName || "",
                                n = ["input", "textarea", "select", "object"];
                            if (!_.isString(t) || _.indexOf(n, t.toLowerCase()) != -1) return;
                            var r = e.which,
                                i = e.metaKey || e.ctrlKey,
                                s = String.fromCharCode(r).replace(/\s+/g, ""),
                                o = {
                                    17: !0,
                                    91: !0,
                                    93: !0,
                                    37: !0,
                                    38: !0,
                                    39: !0,
                                    40: !0,
                                    16: !0
                                },
                                u = {
                                    9: !0,
                                    19: !0,
                                    20: !0,
                                    27: !0,
                                    33: !0,
                                    34: !0,
                                    35: !0,
                                    36: !0,
                                    45: !0,
                                    46: !0,
                                    112: !0,
                                    113: !0,
                                    114: !0,
                                    115: !0,
                                    116: !0,
                                    117: !0,
                                    118: !0,
                                    119: !0,
                                    120: !0,
                                    121: !0,
                                    122: !0,
                                    123: !0,
                                    145: !0
                                };
                            r == 8 ? history.back() : s !== "" && !o[r] && !u[r] && !i && !this.model.get("lightboxOpen") && (this.$el.find("input.search").val("").select().focus(), this.onSearchKeydown(e));
                            if (String.fromCharCode(r) == " " && this.getSearchValue().length === 0) return !1
                        }, this))
                    },
                    render: function() {
                        if (!r) return;
                        var e = $("#page-wrapper").width(),
                            n = $("#page-helper").width(),
                            i = e - n;
                        $("#header").css({
                            left: Math.ceil(i / 2) * -1
                        }), this.fetchTemplate("search").always(_.bind(this.renderSearch, this)), r.get("isLoggedIn") ? this.fetchTemplate("loggedIn").always(_.bind(this.renderUserOptions, this, !0)) : this.fetchTemplate("loggedOut").always(_.bind(this.renderUserOptions, this, !1)), t.External.AIRBridge && t.External.AIRBridge.isDesktop && $("#desktop-nav").removeClass("hide")
                    },
                    destroy: function() {
                        this._super.apply(this, ["destroy"].concat(_.toArray(arguments)))
                    },
                    renderUserOptions: function(e, t) {
                        if (e !== r.get("isLoggedIn")) return;
                        var n = $("#header-login-form");
                        n.detach(), this.model.off("change:user", this.updateUserMenu, this), r.off("change", this.updateUserMenu, this), $("#header-user-assets").html(this.renderTemplate(t));
                        if (r.get("isLoggedIn")) {
                            $("#header-login-holder").append(n);
                            var o = _.chainLoading();
                            o.push(r.getPageNameData()), o.push(r.getNotifications().done(o.bind(l, this)).fail(o.bind(f, this, !1))), i = $("#header-notification-pill"), s = $("#header-notification-count"), this.model.on("change:user", this.updateUserMenu, this), r.on("change", this.updateUserMenu, this)
                        } else $("#dropdown-login-form-box").append(n)
                    },
                    renderSearch: function(e) {
                        var t = $("#header-search-container");
                        t.html(this.renderTemplate(e)), this.$search = t.find("input.search"), this.$placeholder = t.find(".placeholder"), this.$prediction = t.find(".prediction")
                    },
                    onModelUserChange: function(e) {
                        if (r && r.get("UserID") === this.model.get("user").get("UserID")) return;
                        var n = !1;
                        r && (r.get("notifications") && r.get("notifications").off(null, null, this), r.off(null, null, this), this.userNotificationsFailed = !0, o = 0, i && i.addClass("hide"), n = !0), r = this.model.get("user"), r.bind("change", this.onUserChange, this), n && (this.render(), this.tacobellTooltip && (this.tacobellTooltip.openDfd && this.tacobellTooltip.openDfd.state() === "pending" && t.trigger("tooltip:close"), this.tacobellTooltip.destroy(), this.tacobellTooltip = null))
                    },
                    onUserChange: function(e) {
                        var t = e.changedAttributes();
                        if (t) {
                            t.PathName && $("#profile-button").attr("href", e.toUrl()), t.Picture && $(".profile-img", "#profile-button").attr("src", e.getImageURL(30));
                            if (t.Context) {
                                this.tacobellTooltip && this.tacobellTooltip.destroy();
                                if (e.get("Context").type == "user") $("#profile-button").attr("href", e.toUrl()), $("#profile-button .title").text(e.getShortName()), $("#profile-button .profile-img").attr("src", e.getImageURL(30));
                                else {
                                    var n = e.get("Context").artist;
                                    $("#profile-button").attr("href", n.toUrl()), $("#profile-button .title").text(n.get("ArtistName")), $("#profile-button .profile-img").attr("src", n.getImageURL(30))
                                }
                                this.updateExploreDropdown()
                            }
                            t.Name && $("#profile-button .title").text(e.getShortName())
                        }
                    },
                    updateUserMenu: function() {
                        var e = $("#profile-button"),
                            r = n.model.get("user"),
                            i = r.get("UserID"),
                            s = r.get("artistsOwned");
                        this.userMenuOptions = {
                            delay: 0,
                            notchSize: 6,
                            notchX: 16,
                            width: 170,
                            x: 1,
                            y: 30,
                            $attached: e,
                            tooltipClass: "menu user-menu"
                        };
                        var o = function(e) {
                                t.trigger("guts:gatrack", "site", "headerClick", e), t.trigger("guts:log", "headerClick", {
                                    buttonLabel: e
                                }), t.trigger("tooltip:close")
                            },
                            u = [];
                        if (r.get("Context").type == "user") u.push({
                            localeKey: "VIEW_PROFILE",
                            url: r.toUrl(),
                            click: _.bind(o, this, "profile")
                        }, {
                            localeKey: "COLLECTION",
                            url: r.toUrl("collection"),
                            click: _.bind(o, this, "my music")
                        }, {
                            localeKey: "FAVORITES",
                            url: r.toUrl("collection/favorites"),
                            click: _.bind(o, this, "favorites")
                        }, {
                            localeKey: "PLAYLISTS",
                            url: r.toUrl("playlists"),
                            click: _.bind(o, this, "playlists")
                        });
                        else {
                            var a = r.get("Context").artist;
                            u.push({
                                localeKey: "VIEW_PROFILE",
                                url: a.toUrl(),
                                click: _.bind(o, this, "artist-profile")
                            }, {
                                localeKey: "EDIT_PROFILE",
                                click: _.bind(function() {
                                    t.trigger("lightbox:open", "editArtist", {
                                        artist: a
                                    }), o("artist-edit-profile")
                                }, this)
                            })
                        }
                        var f = {
                            model: r,
                            appModel: this.model,
                            items: u
                        };
                        r.get("Flags") & t.Models.User.FLAG_KINESIS && r.get("Context").type == "user" && f.items.push({
                            localeKey: "SETTINGS_NAV_SURVEYS",
                            url: "#!/surveys",
                            click: _.bind(o, this, "surveys")
                        });
                        if (i > 0 && s && s.length) {
                            var l = [];
                            l.push({
                                title: _.getString("USE_GROOVESHARK_AS"),
                                type: "title"
                            }, {
                                title: r.escape("Name"),
                                click: function() {
                                    r.setContext({
                                        type: "user",
                                        artist: {}
                                    })
                                },
                                itemClass: r.get("Context").type == "user" ? "active" : ""
                            }), s.sort(), s.each(function(e) {
                                l.push({
                                    title: e.escape("ArtistName"),
                                    click: function() {
                                        r.setContext({
                                            type: "artist",
                                            artist: e
                                        })
                                    },
                                    itemClass: r.get("Context").type == "artist" && r.get("Context").artist.get("ArtistID") == e.get("ArtistID") ? "active" : ""
                                })
                            }), f.items.push({
                                type: "divider"
                            }), f.items = f.items.concat(l)
                        }
                        f.items.push({
                            type: "divider"
                        }), f.items.push({
                            localeKey: "SIGN_OUT",
                            click: _.bind(function() {
                                this.model.logout()
                            }, this)
                        }), this.userMenuTooltip ? this.userMenuTooltip.updateMenuOptions(f.items) : this.userMenuTooltip = new t.Views.Tooltips.Menu(f), this.userMenuOptions.views = [this.userMenuTooltip], this.userMenuOptions.tooltipKey = "user-menu"
                    },
                    showUserDropdown: function(e) {
                        if (this.userMenuTooltip && this.userMenuTooltip.openDfd && this.userMenuTooltip.openDfd.state() === "pending") return;
                        this.userMenuTooltip || this.updateUserMenu();
                        var n = $(e.currentTarget);
                        $.hideJJMenu(), n.addClass("active"), this.userMenuOptions.dfd = $.Deferred(), t.trigger("tooltip:open", this.userMenuOptions), this.userMenuTooltip.openDfd = this.userMenuOptions.dfd, this.userMenuTooltip.openDfd.always(function() {
                            n.removeClass("active")
                        })
                    },
                    updateExploreDropdown: function() {
                        this.exploreTooltip && (this.exploreTooltip.destroy(), delete this.exploreTooltip);
                        var e = $("#logo"),
                            n = this.model.get("user");
                        this.headerMenuOptions = {
                            delay: 0,
                            notchSize: 6,
                            width: 170,
                            notch: !1,
                            x: 1,
                            y: "bottom",
                            $attached: e,
                            tooltipClass: "header-explore"
                        };
                        if (!this.exploreTooltip) {
                            var r = function(e) {
                                    t.trigger("guts:gatrack", "site", "headerClick", e), t.trigger("guts:log", "headerClick", {
                                        buttonLabel: e
                                    }), t.trigger("tooltip:close")
                                },
                                i = [];
                            if (n.get("Context").type == "user") i.push({
                                localeKey: "HOME",
                                url: "/#!/",
                                click: _.bind(r, this, "home")
                            }, {
                                localeKey: "GENRES",
                                descriptionKey: "TAGS_TAGLINE",
                                url: "/#!/genres",
                                click: _.bind(r, this, "genres")
                            }, {
                                localeKey: "BROADCASTS",
                                descriptionKey: "BROADCASTS_TAGLINE",
                                url: "/#!/broadcasts",
                                click: _.bind(r, this, "broadcasts")
                            }, {
                                localeKey: "COMMUNITY",
                                descriptionKey: "COMMUNITY_TAGLINE",
                                url: "/#!/community",
                                click: _.bind(r, this, "community")
                            }, {
                                localeKey: "POPULAR",
                                descriptionKey: "POPULAR_TAGLINE",
                                url: "/#!/popular",
                                click: _.bind(r, this, "popular")
                            });
                            else {
                                var s = n.get("Context").artist;
                                i.push({
                                    localeKey: "ANALYTICS",
                                    url: "/#!/",
                                    click: _.bind(r, this, "artist-dashboard")
                                }, {
                                    localeKey: "SONGS",
                                    url: s.toUrl("dashboard/songs"),
                                    click: _.bind(r, this, "artist-songs")
                                }, {
                                    localeKey: "COMMENTS",
                                    url: s.toUrl("dashboard/comments"),
                                    click: _.bind(r, this, "artist-comments")
                                }, {
                                    localeKey: "FAN_ACTIVITY",
                                    url: s.toUrl("dashboard/activity"),
                                    click: _.bind(r, this, "artist-fan-activity")
                                }, {
                                    localeKey: "FOLLOWERS",
                                    url: s.toUrl("dashboard/fans"),
                                    click: _.bind(r, this, "artist-followers")
                                })
                            }
                            var o = {
                                model: n,
                                appModel: this.model,
                                items: i
                            };
                            this.exploreTooltip = new t.Views.Tooltips.Menu(o)
                        }
                        this.headerMenuOptions.views = [this.exploreTooltip], this.headerMenuOptions.tooltipKey = "explore"
                    },
                    showExploreDropdown: function(e) {
                        if (this.exploreTooltip && this.exploreTooltip.openDfd && this.exploreTooltip.openDfd.state() === "pending") return;
                        this.exploreTooltip || this.updateExploreDropdown();
                        var n = $(e.currentTarget);
                        $.hideJJMenu(), n.addClass("active"), this.headerMenuOptions.dfd = $.Deferred(), t.trigger("tooltip:open", this.headerMenuOptions), this.exploreTooltip.openDfd = this.headerMenuOptions.dfd, this.exploreTooltip.openDfd.always(function() {
                            n.removeClass("active")
                        })
                    },
                    handleLogoClick: function(e) {
                        t.trigger("guts:gatrack", "site", "headerClick", "logo"), t.trigger("guts:log", "headerClick", {
                            buttonLabel: "logo"
                        })
                    },
                    showSettingsDropdown: function(e) {
                        t.trigger("tooltip:close");
                        var n = $(e.currentTarget);
                        n.jjmenu(e, this.getSettingsOptions(), null, {
                            xposition: "right",
                            yposition: "bottom",
                            show: "default",
                            spill: "left",
                            keepState: n,
                            className: "settings-dropdown",
                            shouldLog: !0
                        }), t.Models.Ad.hideFlashElements(), t.trigger("guts:gatrack", "site", "headerClick", "onSettings"), t.trigger("guts:log", "headerClick", {
                            headerAction: "onSettings"
                        })
                    },
                    getSettingsOptions: function() {
                        var e = [],
                            n = this.model.get("user"),
                            r = n.get("UserID"),
                            i = n.get("subscription"),
                            s = n.get("Context");
                        return s.type == "user" && e.push({
                            title: _.getString("BACK_TO_OLD_GROOVESHARK"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.goBackToOld()
                                }, this)
                            }
                        }, {
                            customClass: "separator"
                        }, {
                            title: _.getString("SETTINGS"),
                            action: {
                                type: "gourl",
                                url: r > 0 ? "/#!/settings" : "/#!/settings/preferences"
                            }
                        }), e.push({
                            title: _.getString("LANGUAGE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "locale"), t.trigger("guts:log", "localeLBOpenedFromHeader"), t.trigger("guts:gatrack", "site", "localeLBOpenedFromHeader")
                                }
                            }
                        }), i && i.isPremium() && s.type == "user" && e.push({
                            title: _.getString("HOME_THEMES"),
                            action: {
                                type: "gourl",
                                url: "/#!/settings/design"
                            }
                        }), i && i.canDirectEmail() && s.type == "user" && e.push({
                            title: _.getString("FEEDBACK"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "feedback", {
                                        type: "feedback"
                                    })
                                }
                            }
                        }), r > 0 && s.type == "user" && e.push({
                            title: _.getString("INVITE_FRIENDS"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "invite")
                                }
                            }
                        }), s.type == "user" && e.push({
                            title: _.getString("TOUR"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    t.trigger("tour:start")
                                }, this)
                            }
                        }), e.push({
                            title: _.getString("HOME_HELP"),
                            action: {
                                type: "gourl",
                                target: "_blank",
                                url: "http://help.grooveshark.com"
                            }
                        }), r < 0 && s.type == "user" && (e.push({
                            customClass: "separator"
                        }), e.push({
                            title: _.getString("SIGN_UP"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "signup")
                                }
                            }
                        })), e
                    },
                    getSearchValue: function() {
                        var e = this.$el.find("input.search"),
                            t = e.val();
                        return t || ""
                    },
                    focusSearch: function(e) {
                        this.$el.find("input.search").focus()
                    },
                    clearSearch: function(e) {
                        return e.preventDefault(), this.$el.find("input.search").blur().val(""), !1
                    },
                    submitSearch: function(e) {
                        return e.preventDefault(), $("#header-search").submit(), !1
                    },
                    performSearch: function(e) {
                        e.preventDefault();
                        var n = $(e.currentTarget),
                            r = this.getSearchValue(),
                            i = n.find(".search-results"),
                            s = i.find("li.selected");
                        if (s.is(".search-item-result")) return t.router.setHash("/artist/~/" + s.children("a.search-item").attr("data-artist-id")), i.hide(), this.$el.find("input.search").blur().val(""), !1;
                        var o = n.attr("data-search-type") || "";
                        return r && r.length && (t.trigger("guts:log", "searchQuerySubmitted", {
                            type: o,
                            query: r
                        }), t.router.performSearch(o, r)), !1
                    },
                    onSearchFocus: function(e) {
                        var t = $(e.currentTarget);
                        this.$placeholder.css({
                            color: "#b2b2b2"
                        });
                        if (t.length) try {
                            t[0].selectionStart = -1, t[0].selectionEnd = -1
                        } catch (n) {
                            console.log("selectionStart error", n, n.message, n.code)
                        }
                        t.val() && setTimeout(function() {
                            t.select()
                        }, 50), this.doAutocomplete(t)
                    },
                    onSearchBlur: function(e) {
                        var n = $(e.currentTarget);
                        n.val() || this.$placeholder.removeClass("hide").css({
                            color: ""
                        }), this.autocompleteTooltip && setTimeout(_.bind(function() {
                            this.autocompleteTooltip = null, t.trigger("tooltip:close")
                        }, this), 200)
                    },
                    onSearchKeydown: function(e) {
                        var n = this.$el.find("input.search"),
                            r, i, s;
                        this.autocompleteTooltip && (r = this.autocompleteTooltip.$el, i = $("li.selected", r), s = i.parents("ul"));
                        switch (e.which) {
                        case _.keyboard.ENTER:
                            if (i.length) {
                                var o = i.find(".autocomplete-item-link").attr("href");
                                if (o) {
                                    t.router.setHash(o), n.val("");
                                    return
                                }
                                var u = i.find(".autocomplete-item-link").data("songId");
                                if (u) {
                                    var a = t.Models.Song.getCached(u);
                                    if (a) {
                                        a.getToken().done(function() {
                                            t.router.setHash(a.toUrl())
                                        }), n.val("");
                                        return
                                    }
                                }
                            }
                            var f = n.parents("form");
                            f && f.length && f.submit(), n.blur();
                            return;
                        case _.keyboard.ESC:
                            r ? (this.autocompleteTooltip = null, t.trigger("tooltip:close")) : (n.val(""), this.doAutocompleteDebounced(n));
                            return;
                        case _.keyboard.UP:
                            e.preventDefault();
                            if (r) {
                                var l = i.is(":first-child"),
                                    c = s.prev().is(":first-child");
                                !i.length || c && l ? $("li:last", r).addClass("selected") : l ? s.prev().prev("ul").children(":last-child").addClass("selected") : i.prev().addClass("selected"), i.removeClass("selected")
                            }
                            return;
                        case _.keyboard.DOWN:
                            e.preventDefault();
                            if (r) {
                                var h = i.is(":last-child"),
                                    p = s.is(":last-child");
                                !i.length || h && p ? $("li:first", r).addClass("selected") : h ? s.next().next("ul").children(":first-child").addClass("selected") : i.next().addClass("selected"), i.removeClass("selected")
                            }
                            return;
                        case _.keyboard.TAB:
                            var d = this.$prediction.text();
                            this.lastPrediction && n && n.length && d.length > this.getSearchValue().length && (e.preventDefault(), n.val(d));
                            return
                        }
                        var v = e.which,
                            m = String.fromCharCode(v).replace(/[\b]/g, ""),
                            g = String.fromCharCode(v).replace(/[\s]/g, "");
                        if (g.length > 0) {
                            var y = n.val() === "" && m.length < 1;
                            this.$placeholder[y ? "removeClass" : "addClass"]("hide"), y && this.setPrediction()
                        }
                        this.doAutocompleteDebounced(n)
                    },
                    onSearchKeyup: function(e) {
                        this.setPrediction()
                    },
                    doAutocompleteDebounced: _.debounce(function(e) {
                        return this.doAutocomplete(e)
                    }, 100),
                    doAutocomplete: function(e) {
                        var n = $.trim((e.val() || "").toLowerCase());
                        if (n.length > 1 && this.autocompleteTooltip) this.autocompleteTooltip.changeQuery(n);
                        else if (n.length > 1) {
                            var i = {
                                sticky: !0,
                                notchX: 12,
                                notch: "top",
                                x: 0,
                                y: 31,
                                $attached: $("#header-search"),
                                tooltipKey: "autocomplete",
                                fixPosition: !1
                            },
                                s = r ? r.get("library") : !1,
                                o = r ? r.get("favoriteArtists") : !1,
                                a = r ? r.get("favoriteUsers") : !1,
                                f = r ? r.get("playlists") : !1,
                                l = r ? r.get("favoritePlaylists") : !1,
                                c = function() {
                                    return []
                                },
                                h = !1,
                                p = !1;
                            if (o && o.length || s && s.length) h = function(e) {
                                var t = [];
                                o && o.length && (t = t.concat(o.filter(function(t) {
                                    return _.startsWith(t.attributes.ArtistName, e)
                                })));
                                if (s && s.length) {
                                    var n = s.filter(function(t) {
                                        return _.startsWith(t.get("ArtistName"), e)
                                    });
                                    n.length && (n = _.map(n, function(e) {
                                        return e.attributes.Artists.models[0]
                                    }), t = t.concat(n), t = _.uniq(t))
                                }
                                return t
                            };
                            if (f && f.length || l && l.length) p = function(e) {
                                var t = [];
                                f && f.length && (t = t.concat(f.filter(function(t) {
                                    return _.startsWith(t.attributes.PlaylistName, e)
                                })));
                                if (l && l.length) {
                                    var n = l.filter(function(t) {
                                        return _.startsWith(t.attributes.PlaylistName, e)
                                    });
                                    n.length && (t = t.concat(n), t = _.uniq(t))
                                }
                                return t
                            };
                            this.autocompleteTooltip = new t.Views.Tooltips.Autocomplete({
                                query: n,
                                maxResults: 6,
                                sections: [{
                                    type: "Users",
                                    filterFunction: a && a.length ? u(a, "Name") : c,
                                    search: !1
                                }, {
                                    type: "Songs",
                                    filterFunction: s && s.length ? u(s, "SongName") : c,
                                    search: !1
                                }, {
                                    type: "Artists",
                                    filterFunction: h ? h : c,
                                    search: !0
                                }, {
                                    type: "Playlists",
                                    filterFunction: p ? p : c,
                                    search: !1
                                }]
                            }), i.views = [this.autocompleteTooltip], t.trigger("tooltip:open", i);
                            var d = _.bind(function(e) {
                                var t, n;
                                switch (e) {
                                case "progress":
                                    n = arguments[1], n == "resultsChanged" && (t = arguments[2]);
                                    break;
                                case "fail":
                                case "done":
                                    t = {}
                                }
                                if (t) {
                                    if (t.autocompleteResults) {
                                        var r = t.autocompleteResults.models;
                                        this.lastPrediction = r && r[0] && r[0].get("ArtistName") || this.lastPrediction || ""
                                    }
                                    this.setPrediction()
                                }
                            }, this);
                            i.dfd.progress(_.bind(d, this, "progress")), i.dfd.done(_.bind(d, this, "done")), i.dfd.fail(_.bind(d, this, "fail")), i.dfd.then(_.bind(function() {
                                this.autocompleteTooltip = null
                            }, this))
                        } else this.autocompleteTooltip && (this.autocompleteTooltip = null, t.trigger("tooltip:close"))
                    },
                    setPrediction: function(e) {
                        e = e || this.lastPrediction || "";
                        var t = this.$search.val() || "",
                            n = e.substr(0, t.length),
                            r = [t];
                        t.length > 20 ? r = [] : t.length && t.toLowerCase() == n.toLowerCase() && r.push(e.substr(t.length).toLowerCase()), this.$prediction.text(r.join(""))
                    },
                    newNotification: function(e) {
                        if (this.tacobellTooltip && this.tacobellTooltip.openDfd && this.tacobellTooltip.openDfd.state() === "pending") this.tacobellTooltip.newNotification(e), setTimeout(t.Services.API.updateNotificationReadTime, 1e3);
                        else {
                            var n = r.get("Context"),
                                u = e.get("forArtistID");
                            if (!u && n.type != "artist" || n.type == "artist" && u == n.artist.get("ArtistID")) o++, s.text(o), i.removeClass("hide")
                        }
                    },
                    showNotifications: function(e) {
                        e.preventDefault();
                        if (this.userNotificationsFailed) return;
                        if (this.tacobellTooltip && this.tacobellTooltip.openDfd && this.tacobellTooltip.openDfd.state() === "pending") {
                            t.trigger("tooltip:close");
                            return
                        }
                        var n = {
                            sticky: !0,
                            delay: 0,
                            notchSize: 6,
                            notchX: 300,
                            notch: "top",
                            x: -286,
                            y: "bottom",
                            $attached: $("#notification-button"),
                            tooltipClass: "header-notifications",
                            destroyViewOnClose: !1
                        };
                        this.tacobellTooltip || (this.tacobellTooltip = new t.Views.Tooltips.Tacobell({
                            model: r,
                            appModel: this.model
                        })), n.views = [this.tacobellTooltip], n.tooltipKey = "tacobell", t.trigger("tooltip:open", n), this.tacobellTooltip.openDfd = n.dfd, o && t.Services.API.updateNotificationReadTime().done(a), $("#notification-button").addClass("active"), this.tacobellTooltip.openDfd.always(function() {
                            $("#notification-button").removeClass("active")
                        }), t.Models.Ad.hideFlashElements(), t.trigger("guts:gatrack", "site", "headerClick", "onTacoBell"), t.trigger("guts:log", "headerClick", {
                            headerAction: "onTacoBell"
                        })
                    },
                    delayHeaderTooltip: function(e, r) {
                        _.delay(function() {
                            var i = $(".jjmenu"),
                                s = _.any(n.tooltip.tooltips, function(e, t) {
                                    return t == "user-menu"
                                });
                            if (!s && !i.length) {
                                var o = new t.Views.Tooltips.Helper({
                                    text: _.getString(r)
                                });
                                o.tooltipOptions.delay = 500, o.tooltipOptions.adjustY = 5, t.Views.Tooltips.Helper.simpleTooltip(e, o)
                            }
                        }, 40)
                    },
                    onSettingsMouseenter: function(e) {
                        this.delayHeaderTooltip(e, "SETTINGS")
                    },
                    onUploadMouseenter: function(e) {
                        this.delayHeaderTooltip(e, "UPLOAD_MUSIC")
                    },
                    onNotificationsMouseenter: function(e) {
                        this.delayHeaderTooltip(e, "NOTIFICATIONS")
                    },
                    goBackToOld: function(n) {
                        n && n.preventDefault(), t.trigger("guts:log", "backToUkulele", {
                            isDesktop: t.External.AIRBridge.isDesktop
                        }), t.trigger("guts:gatrack", "site", "backToUkulele", t.External.AIRBridge.isDesktop ? "air" : "normal"), e.location = "http://retro.grooveshark.com/"
                    },
                    closeTopHat: function() {
                        $("#top-hat-notif").empty(), $("body").removeClass("top-hat"), t.Services.Local.set("gs.topHatNotif", 2)
                    },
                    navigateBack: function(e) {
                        e && e.preventDefault(), t.router.back()
                    },
                    navigateForward: function(e) {
                        e && e.preventDefault(), t.router.forward()
                    },
                    updateNavButtons: function() {
                        t.router && t.External.AIRBridge.isDesktop && ($("#header-back-btn").attr("disabled", !t.router.hasBack), $("#header-forward-btn").attr("disabled", !t.router.hasForward))
                    },
                    logUploadClick: function(e) {
                        t.trigger("guts:gatrack", "site", "headerClick", "onUpload"), t.trigger("guts:log", "headerClick", {
                            headerAction: "onUpload"
                        })
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {};
                var r = e.clientTimeDivergence || 0,
                    i = function(e) {
                        e && !(e instanceof t.Models.Song) && (e = t.Models.Song.getCached(e.get("SongID")));
                        if (!e) return;
                        var n = this.model.get("user");
                        n.addLocalSongListen(e, Math.floor(($.now() + r) / 1e3), !0)
                    },
                    s = 15,
                    o = {};
                t.Views.Player = Backbone.View.extend({
                    templatePath: "player",
                    events: {
                        "click #player-details-current-song": "onCurrentSongClick",
                        "click #progress-bar": "onSeekClick",
                        dropinit: "handleDropInit",
                        dropstart: "handleDropStart",
                        drop: "handleDrop"
                    },
                    initialize: function() {
                        this.$playerWrapper = $("#player-wrapper"), this.$player = $("#player"), this.$progressBar = $("#progress-bar"), this.$seekBuffer = $("#buffered"), this.$seekProgress = $("#elapsed"), this.$seekScrubber = $("#scrubber"), this.$timeElapsed = $("#time-elapsed"), this.$timeTotal = $("#time-total"), this.$nowPlaying = $("#now-playing"), this.$nowPlayingImage = $("#now-playing-image"), this.$nowPlayingMetadata = $("#now-playing-metadata"), this.$activeSongMenuBtn = $("#np-menu"), this.$activeSongCommentBtn = $("#np-comment"), this.$seekScrubber.on("dragstart", _.bind(this.onScrubberDragStart, this)), this.$seekScrubber.on("drag", _.bind(this.onScrubberDrag, this)), this.$seekScrubber.on("dragend", _.bind(this.onScrubberDragEnd, this)), this.$playPause = $("#play-pause"), this.$volume = $("#volume"), this.$volumeControl = $("#volume-control"), this.$shuffle = $("#shuffle"), this.$repeat = $("#repeat"), this.$playNext = $("#play-next"), this.$playPrevious = $("#play-prev"), this.$crossfade = $("#crossfade"), this.$playPause.on("click", _.bind(this.onPlayPauseClick, this)), this.$shuffle.on("click", _.bind(this.onShuffleClick, this)), this.$repeat.on("click", _.bind(this.onRepeatClick, this)), this.$playNext.on("click", _.bind(this.onPlayNextSongClick, this)), this.$playPrevious.on("click", _.bind(this.onPlayPreviousSongClick, this)), this.$crossfade.on("click", _.bind(this.onCrossfadeClick, this)), this.$activeSongMenuBtn.on("click", _.bind(this.onActiveSongMenuClick, this)), this.$activeSongCommentBtn.on("click", _.bind(this.onActiveSongCommentClick, this)), this.volumeSliderDuration = 300, this.$volumeSlider = this.addVolumeSlider(), this.$volume.on("click", _.bind(this.onVolumeClick, this)), this.$volume.on("mouseenter", _.bind(this.onVolumeMouseenter, this)), this.$volume.on("mouseleave", _.bind(this.onVolumeMouseleave, this)), this.$volumeControl.on("mouseenter", _.bind(this.onVolumeControlMouseenter, this)), this.$volumeControl.on("mouseleave", _.bind(this.onVolumeControlMouseleave, this)), this.$volumeSlider.slider("value", this.model.get("player").get("volume")), t.on("player:volume:keychange", this.showVolumeBriefly, this), t.on("player:openFanFeedback", this.openFanFeedback, this), this.lockScrubber = !1, this.model.get("player").on("change", this.onStatusChange, this)
                    },
                    onStatusChange: function(e, t) {
                        var n = e.changed;
                        (!_.isUndefined(n.duration) || !_.isUndefined(n.position) || !_.isUndefined(n.bytesLoaded)) && this.onPositionChange(), _.isUndefined(n.playStatus) || this.onPlayStatusChange(), _.isUndefined(n.currentQueue) || this.onModelQueueChange(), _.isUndefined(n.crossfadeEnabled) || this.$crossfade[n.crossfadeEnabled ? "addClass" : "removeClass"]("active"), _.isUndefined(n.volume) || this.$volumeSlider.slider("value", n.volume)
                    },
                    onModelQueueChange: function() {
                        var e = this.model.get("player"),
                            t = e.previous("currentQueue"),
                            n = e.get("currentQueue");
                        t && t.off(), n && (console.log("k, logging via player", t, n.cid, _.clone(n.attributes)), n.on("change", this.onQueueChange, this), this.onQueueChange(n, {
                            overwrite: !0
                        }))
                    },
                    onQueueChange: function(e, n) {
                        n = _.extend({}, n);
                        var r = n.overwrite ? e.toJSON() : e.changed;
                        _.isUndefined(r.activeSong) || this.onActiveSongChange(), _.isUndefined(r.shuffleEnabled) || this.$shuffle[r.shuffleEnabled ? "addClass" : "removeClass"]("active");
                        if (!_.isUndefined(r.repeatMode)) {
                            var i = t.Models.Player.repeatModes;
                            switch (r.repeatMode) {
                            case i.ALL:
                                this.$repeat.addClass("active").removeClass("one");
                                break;
                            case i.ONE:
                                this.$repeat.addClass("one").removeClass("active");
                                break;
                            case i.NONE:
                            default:
                                this.$repeat.removeClass("active one")
                            }
                        }
                        var s = e.get("currentBroadcast") && !e.get("isBroadcasting"),
                            o = e.get("currentBroadcast") && e.get("currentBroadcast").isLoggedInUserOwner();
                        e.get("nextSong") && !s ? this.$playNext.removeClass("disabled") : this.$playNext.addClass("disabled"), (e.get("previousSong") || e.get("activeSong") && this.model.get("position") > 5e3) && !e.get("currentBroadcast") ? this.$playPrevious.removeClass("disabled") : this.$playPrevious.addClass("disabled"), s ? this.$playerWrapper.addClass("broadcast-listener") : this.$playerWrapper.removeClass("broadcast-listener"), o ? this.$playerWrapper.addClass("is-broadcasting") : this.$playerWrapper.removeClass("is-broadcasting")
                    },
                    onPositionChange: function() {
                        var e = this.model.get("player"),
                            t = e.changed,
                            n = Math.min(1, e.get("bytesLoaded") / e.get("bytesTotal")),
                            r = Math.min(1, e.get("position") / e.get("duration")),
                            i = this.$progressBar.width(),
                            s = Math.min(i, n * 100),
                            o = Math.min(i, r * 100),
                            u = Math.min(i, Math.max(0, i * r));
                        s = isNaN(s) ? 0 : s, o = isNaN(o) ? 0 : o, u = isNaN(u) ? 0 : u - 8, this.$seekBuffer.width(s + "%"), this.$seekProgress.width(o + "%"), this.lockScrubber || this.$seekScrubber.css("left", u), _.isUndefined(t.position) || this.$timeElapsed.text(_.millisToMinutesSeconds(e.get("position"), !0)), _.isUndefined(t.duration) || this.$timeTotal.text(_.millisToMinutesSeconds(e.get("duration"), !0));
                        var a = e.get("currentQueue");
                        e.get("position") > 5e3 && !a.get("currentBroadcast") ? this.$playPrevious.removeClass("disabled") : a.get("previousSong") || this.$playPrevious.addClass("disabled")
                    },
                    onPlayStatusChange: function() {
                        var e = this.model.get("player"),
                            n = e.get("currentQueue"),
                            r = n && n.get("activeSong"),
                            i = t.Models.Player.playStatuses,
                            s = t.Models.Player.repeatModes,
                            o = e.get("playStatus"),
                            u = e.previous("playStatus"),
                            a = e.get("lastSongByStatus"),
                            f = e.get("currentStreamServer");
                        a || (a = {}, e.set({
                            lastSongByStatus: a
                        })), status.currentStreamServer && status.currentStreamServer !== f && e.set("currentStreamServer", status.currentStreamServer);
                        switch (o) {
                        case i.NONE:
                            u !== o && (this.$nowPlaying.removeClass("buffering"), this.$playPause.removeClass("playing paused buffering"), $("body").removeClass("song-playing")), r && (r.set({
                                paused: !0
                            }), $("body").addClass("song-playing"));
                            break;
                        case i.INITIALIZING:
                            u !== o && (this.$nowPlaying.addClass("buffering"), this.$playPause.removeClass("playing paused").addClass("buffering")), $("body").addClass("song-playing");
                            break;
                        case i.LOADING:
                            u !== o && (this.$playPause.hasClass("buffering") || (this.$nowPlaying.addClass("buffering"), this.$playPause.removeClass("playing paused").addClass("buffering"))), r && r.set({
                                paused: !1
                            }), $("body").addClass("song-playing");
                            break;
                        case i.PLAYING:
                            var l = e.get("duration"),
                                c = r ? r.get("SongID") : !1;
                            if (u !== o || a[o] != r) this.$nowPlaying.removeClass("buffering"), this.$playPause.addClass("playing").removeClass("paused buffering"), r && (a[o] != r || e.get("repeatMode") == s.ONE && u == i.LOADING) && l && r.set("playerDuration", l), u != i.LOADING && t.trigger("guts:gatrack", "player", "loadingTime", f, 0), console.log("setting unpaused on song", r), r && r.set({
                                paused: !1
                            }), $("body").addClass("song-playing");
                            this.pauseNextQueueSongID && r && this.pauseNextQueueSongID === r.get("queueSongID") && (this.pauseNextQueueSongID = !1, setTimeout(_.bind(function() {
                                this.pauseSong()
                            }, this), 10)), e.get("position") % 10 < 1;
                            break;
                        case i.PAUSED:
                            u !== o && (this.$nowPlaying.removeClass("buffering"), this.$playPause.addClass("paused").removeClass("playing buffering")), r && r.set({
                                paused: !0
                            }), $("body").addClass("song-playing");
                            break;
                        case i.BUFFERING:
                            u !== o && !this.$playPause.hasClass("buffering") && (this.$nowPlaying.addClass("buffering"), this.$playPause.addClass("buffering").removeClass("playing paused")), r && r.set({
                                paused: !1
                            }), $("body").addClass("song-playing");
                            break;
                        case i.FAILED:
                            u !== o && (this.$nowPlaying.removeClass("buffering"), this.$playPause.removeClass("playing paused buffering")), r && r.set({
                                paused: !0
                            }), $("body").removeClass("song-playing");
                            break;
                        case i.COMPLETED:
                            u !== o && (this.$nowPlaying.removeClass("buffering"), this.$playPause.removeClass("playing paused buffering"), r && this.onSongCompleted(r)), r && r.set({
                                paused: !0
                            }), this.$seekBuffer.width("0%"), this.$seekProgress.width("0%"), this.$seekScrubber.css("left", 0), $("body").removeClass("song-playing")
                        }
                        a[o] = r, r && r.trigger("change", r)
                    },
                    onActiveSongChange: function() {
                        var e = this.model.get("player").get("currentQueue"),
                            n = e.get("activeSong"),
                            r = e.previous("activeSong"),
                            i = this.model.get("user");
                        r && r.set({
                            active: !1,
                            paused: !0
                        });
                        if (!n) this.$nowPlayingMetadata.html("").hide(), this.$nowPlayingImage.addClass("hide"), this.$playPause.addClass("disabled"), this.$player.removeClass("playing"), $(document.body).removeClass("song-playing");
                        else {
                            this.activeSong && this.activeSong.off("change", this.onActiveSongModelChange), this.activeSong = n, n.on("change", this.onActiveSongModelChange, this);
                            var o = {
                                active: !0
                            };
                            this.model.get("player").get("playStatus") == 3 && (o.paused = !1), n.set(o);
                            var u, a, f = n.get("isCallout");
                            if (f) a = n.escape("Name"), u = ['<span data-callout-id="', n.get("CalloutID"), '" class="now-playing-link" title="', a, '">', a, "</a>"];
                            else {
                                var l = /^(.{15,25})[\s;]/i,
                                    c = function(e) {
                                        return new RegExp("^(.{" + Math.max(10, e / 2) + "," + e + "})[s;]", "i")
                                    },
                                    h = n.get("SongName"),
                                    p = n.get("ArtistName"),
                                    d = n.get("AlbumName") || "Unknown Album",
                                    v = h.match(l),
                                    m = 52;
                                h.length > 25 ? (m -= (v && v[1].length || 25) + 3, h = _.escape(v && v[1] || h.substr(0, 25)) + "&hellip;") : (m -= h.length, h = _.escape(h));
                                var g = Math.ceil(m / 2);
                                if (p.length > g) {
                                    l = c(g);
                                    var y = p.match(l);
                                    p = _.escape(y && y[1] || p.substr(0, g)) + "&hellip;"
                                } else p = _.escape(p);
                                if (d.length > g) {
                                    l = c(g);
                                    var b = d.match(l);
                                    d = _.escape(b && b[1] || d.substr(0, g)) + "&hellip;"
                                } else d = _.escape(d);
                                var w = _.getString("BY"),
                                    E = _.getString("ON");
                                u = ['<a data-song-id="', n.get("SongID"), '" data-tooltip-cache-key="playerSong" class="now-playing-link song-link song show-song-tooltip no-title-tooltip" title="', n.escape("SongName"), '">', h, '</a> <span data-translate-text="BY">', w, '</span> <a href="', n.toArtistUrl(), '" class="now-playing-link artist" title="', n.escape("ArtistName"), '">', p, '</a> <span data-translate-text="ON">', E, '</span> <a href="', n.toAlbumUrl(), '" class="now-playing-link album" title="', n.escape("AlbumName"), '">', d, "</a>"];
                                var S = this.model.get("tooltipOptionsCache");
                                S && !S.playerSong && (S.playerSong = {
                                    zIndex: 2e6,
                                    notch: "bottom",
                                    y: "top",
                                    notchBackgroundColor: "#cdcdcd",
                                    notchBorderColor: "#cdcdcd"
                                }), a = n.escape("SongName")
                            }
                            this.$nowPlayingImage.attr({
                                src: n.getImageURL(40),
                                title: a
                            }).removeClass("hide"), this.$nowPlayingMetadata.html(u.join("")).show(), this.$playPause.removeClass("disabled"), this.$player.addClass("playing"), f ? this.$el.find(".np-action").addClass("hide") : (this.$el.find(".np-action").removeClass("hide").data("songId", n.get("SongID")), this.openFanFeedback(), s++)
                        }
                        var x = n ? t.Models.Song.getCached(n.get("SongID")) : null,
                            T = {},
                            N;
                        if (i && x && x.get("source") !== "recommended") {
                            var C = i.get("settings");
                            if (C && C.local && _.isArray(C.local.artistsPlayed)) {
                                T.artistsPlayed = C.local.artistsPlayed;
                                var k = x.get("ArtistID");
                                N = _.indexOf(T.artistsPlayed, k), N !== -1 && T.artistsPlayed.splice(N, 1), T.artistsPlayed.unshift(k), T.artistsPlayed.splice(999, 1), i.saveLocalSettings(T)
                            }
                        }
                    },
                    openFanFeedback: function() {
                        var e = this.model.get("player").get("currentQueue");
                        if (!e) return;
                        var t = e.get("activeSong"),
                            n = this.model.get("user"),
                            r = n.get("isLoggedIn") ? 5 : 15;
                        if (this.isFanFeedbackOpen()) this.closeFanFeedbackTooltip();
                        else if (t && !n.get("subscription").isPremium() && t.get("artistIsClaimed") === 1) {
                            var i = Math.max(0, 3e4 - this.model.get("player").get("position"));
                            _.delay(_.bind(function() {
                                var e = t.get("ArtistID");
                                !o[e] && s >= r && (o[e] = !0, s = 0, this.createFanFeedbackTooltip($("#np-comment"), "ARTIST_FAN_FEEDBACK"))
                            }, this), i)
                        }
                    },
                    onActiveSongModelChange: function(e) {
                        var t = this.model.get("player").get("currentQueue").get("activeSong");
                        t && (t.get("isFavorite") ? $("#np-fav").addClass("active") : $("#np-fav").removeClass("active"), t.get("fromLibrary") ? $("#np-add").addClass("active") : $("#np-add").removeClass("active"))
                    },
                    onSongCompleted: i,
                    addVolumeSlider: function() {
                        var e = ["off", "one", "two", "three", "four", "five"],
                            n = this,
                            r = function(r, i) {
                                var s = _.orEqual(Math.ceil(i.value / 20), 5),
                                    o = e[s];
                                n.$volume.removeClass(e.join(" ")).addClass(o), i.value === 0 ? (t.trigger("player:volumeMute"), n.$volume.addClass("mute")) : (t.trigger("player:volumeChange", i.value), n.$volume.removeClass("mute"))
                            },
                            i = $("#volume-slider");
                        return i.slider({
                            orientation: "vertical",
                            range: "min",
                            min: 0,
                            max: 100,
                            slide: r,
                            change: r
                        }), i
                    },
                    onPlayPauseClick: function() {
                        var e = this.model.get("player"),
                            n = e.get("currentQueue");
                        !n.get("currentBroadcast") || n.get("isBroadcasting") ? t.trigger("player:togglePlay") : this.onVolumeClick()
                    },
                    onVolumeClick: function() {
                        t.trigger("player:volumeMute"), this.$volume.toggleClass("mute").hasClass("mute") ? this.$volumeControl.addClass("hide") : this.$volumeControl.removeClass("hide")
                    },
                    showVolumeBriefly: function() {
                        this.$volumeControl.show(), this.onVolumeMouseleave()
                    },
                    onVolumeMouseenter: function() {
                        clearTimeout(this.volumeSliderTimeout), this.$volumeControl.show()
                    },
                    onVolumeMouseleave: function() {
                        clearTimeout(this.volumeSliderTimeout);
                        var e = this;
                        this.volumeSliderTimeout = setTimeout(function() {
                            e.$volumeControl.hide()
                        }, e.volumeSliderDuration)
                    },
                    onVolumeControlMouseenter: function() {
                        clearTimeout(this.volumeSliderTimeout)
                    },
                    onVolumeControlMouseleave: function() {
                        clearTimeout(this.volumeSliderTimeout);
                        var e = this;
                        if (!this.isMouseDown) this.volumeSliderTimeout = setTimeout(function() {
                            e.$volumeControl.hide()
                        }, e.volumeSliderDuration);
                        else {
                            var t = function(n, r) {
                                    $("body").unbind("mouseup", t), $("body").unbind("mouseleave", t), e.isMouseDown = 0, e.volumeSliderTimeout = setTimeout(function() {
                                        e.$volumeControl.hide()
                                    }, e.volumeSliderDuration)
                                };
                            $("body").bind("mouseup", t), $("body").bind("mouseleave", t)
                        }
                    },
                    onShuffleClick: function() {
                        var e = this.model.get("player"),
                            n = e.get("currentQueue");
                        n.get("currentBroadcast") || t.trigger("player:shuffle")
                    },
                    onRepeatClick: function() {
                        var e = this.model.get("player"),
                            n = e.get("currentQueue");
                        n.get("currentBroadcast") || t.trigger("player:repeat")
                    },
                    onPlayNextSongClick: function() {
                        this.$playNext.hasClass("disabled") || t.trigger("player:nextSong")
                    },
                    onPlayPreviousSongClick: function() {
                        this.$playPrevious.hasClass("disabled") || t.trigger("player:previousSong")
                    },
                    onCrossfadeClick: function() {
                        var e = this.model.get("player"),
                            n = e.get("currentQueue");
                        n.get("currentBroadcast") || t.trigger("player:crossfade")
                    },
                    onCurrentSongClick: function(e) {
                        var t = $(".now-playing-caret", this.el);
                        if (e.currentTarget != e.target && e.target != t[0]) return;
                        var n = this.model.get("player"),
                            r = n.get("currentQueue"),
                            i = r && r.get("activeSong"),
                            s = i.get("queueSongID"),
                            o = {
                                isQueue: !0,
                                queueSongClickedID: s,
                                autoplayEnabled: r.get("autoplayEnabled")
                            };
                        $(e.currentTarget).jjmenu(e, i.getSingleItemContextMenu(o), null, {
                            xposition: "right",
                            yposition: "top",
                            orientation: "top",
                            spill: "left",
                            show: "show",
                            className: "queuesongid" + s,
                            keepState: t
                        })
                    },
                    onActiveSongMenuClick: function(e) {
                        var t = $(e.currentTarget),
                            n = this.model.get("player").get("currentQueue").get("activeSong"),
                            r = this.model.get("player").get("currentQueue"),
                            i = r.get("autoplayEnabled") || r.get("clientRadioEnabled"),
                            s = {
                                isQueue: !0,
                                queueSongClickedID: n.get("SongID"),
                                queueSongClickedQueueSongID: n.get("queueSongID"),
                                autoplayEnabled: i
                            };
                        t.jjmenu(e, n.getSingleItemContextMenu(s), null, {
                            xposition: "auto",
                            yposition: "top",
                            orientation: "top",
                            show: "show",
                            className: "songid" + n.get("SongID"),
                            keepState: t
                        })
                    },
                    onActiveSongCommentClick: function(e) {
                        this.isFanFeedbackOpen() ? this.closeFanFeedbackTooltip() : this.createFanFeedbackTooltip(e.currentTarget, "COMMENT_TOOLTIP_SONG")
                    },
                    createFanFeedbackTooltip: function(e, n) {
                        var r = $(e),
                            i = {},
                            s = "active-song-comment",
                            o = new t.Views.Tooltips.Comment({
                                model: this.model,
                                placeholderTextKey: n,
                                tooltipKey: s
                            });
                        i.views = [o], i.$attached = r, i.persist = !0, i.y = "top", i.notch = "bottom", i.tooltipClass = s, i.tooltipKey = s, i.model = this, i.adjustX = -6, i.adjustY = -2, t.trigger("tooltip:open", i), t.Models.Ad.hideFlashElements()
                    },
                    closeFanFeedbackTooltip: function() {
                        var e = "active-song-comment",
                            n = $("." + e);
                        n && n.length && (t.trigger("tooltip:close", e), t.Models.Ad.showFlashElements())
                    },
                    isFanFeedbackOpen: function() {
                        var e = "active-song-comment",
                            t = $("." + e);
                        return t && t.length ? !0 : !1
                    },
                    onSeekClick: function(e) {
                        var n = this.model.get("player"),
                            r = n.get("currentQueue");
                        if (r && r.get("currentBroadcast") && !r.get("isBroadcasting")) return e.preventDefault(), !1;
                        var i = this.$progressBar.offset(),
                            s = e.pageX - i.left,
                            o = s / this.$progressBar.width(),
                            u = Math.min(Math.max(o, 0), 1),
                            a = this.model.get("player").get("duration") * u;
                        t.trigger("player:seekTo", a)
                    },
                    onScrubberDragStart: function(e, n) {
                        var r = this.model.get("player"),
                            i = r.get("currentQueue"),
                            s = r.get("playStatus");
                        if (s !== t.Models.Player.playStatuses.PLAYING && s !== t.Models.Player.playStatuses.PAUSED || i && i.get("currentBroadcast") && !i.get("isBroadcasting")) return !1;
                        this.lockScrubber = !0;
                        var o = this.$seekScrubber.css("left");
                        return this.scrubberLeft = _.toInt(o.substring(0, o.length - 2)), this.maxScrubberLeft = this.$progressBar.width() - 8, this.minScrubberLeft = -8, n.draggedItems = [], n.scrubber = !0, !0
                    },
                    onScrubberDrag: function(e, t) {
                        var n = this.scrubberLeft + t.deltaX;
                        if (n >= this.maxScrubberLeft) {
                            this.$seekScrubber.css("left", this.maxScrubberLeft);
                            return
                        }
                        if (n <= this.minScrubberLeft) {
                            this.$seekScrubber.css("left", this.minScrubberLeft);
                            return
                        }
                        this.$seekScrubber.css("left", n)
                    },
                    onScrubberDragEnd: function(e, t) {
                        t.scrubber && this.onSeekClick(e), this.lockScrubber = !1
                    },
                    isObjectDropable: function(e) {
                        var n = this.model.get("player"),
                            r = n.get("currentQueue"),
                            i = r ? r.get("currentBroadcast") : null,
                            s = r ? r.get("isBroadcasting") : !1,
                            o = r && !0;
                        if (o && s && e) {
                            var u = n.get("position"),
                                a = n.get("duration");
                            if (i.get("listenersCount") > t.Services.SWF.largeBroadcastThreshold && r.get("nextSong") === e && a && a - u < t.Services.SWF.broadcastNextPreventPosition) o = !1;
                            else {
                                var f = r.get("songs"),
                                    l = f.indexOf(e);
                                l > -1 && l < f.indexOf(r.get("activeSong")) && (o = !1)
                            }
                        }
                        return o
                    },
                    handleDropInit: function(e, t) {
                        var n = $(e.srcElement).closest(".queue-item"),
                            r = !0;
                        n.length === 1 ? r = this.isObjectDropable(n.data("module").model) : r = this.isObjectDropable(), this.$el.data("valid-drop", r)
                    },
                    handleDropStart: function(e, t) {
                        if (t.draggedItems.length === 0) return !1
                    },
                    handleDrop: function(e, r) {
                        function h(e, n) {
                            !_.isArray(n) && n.toArray && (n = n.toArray());
                            var r = this.model.get("player"),
                                i = r && r.get("currentQueue"),
                                s = i && i.get("songs");
                            t.trigger("player:addSongs", n, -1, s.length === 0, e)
                        }
                        r.draggedItemsType = r.draggedItemsType || _.getCollectionType(r.draggedItems);
                        if (r.draggedItemsType == "song" && r.draggedItems && r.draggedItems.length) {
                            var i = r.draggedItems[0];
                            if (!this.isObjectDropable(i)) return;
                            var s = i.get("queueSongID"),
                                o = this.model.get("player"),
                                u = o && o.get("currentQueue"),
                                a = u && u.get("songs");
                            if (s && a && a.length) {
                                t.Services.SWF.moveSongsTo([s], a.length);
                                return
                            }
                        } else if (!this.isObjectDropable()) return;
                        var f, l, c;
                        switch (r.draggedItemsType) {
                        case "song":
                            _.bind(h, this)(r.draggedItemsContext, r.draggedItems);
                            break;
                        case "album":
                        case "artist":
                        case "playlist":
                        case "broadcast":
                            for (f = 0, c = r.draggedItems.length; f < c; f++) l = r.draggedItems[f], _.isFunction(l.getSongs) && l.getSongs().then(_.bind(h, this, new t.Models.PlayContext(l)));
                            break;
                        case "tag":
                            var p = r.draggedItems[0];
                            n.playGenre(p.get("DisplayName"), p.get("TagID"));
                            break;
                        case "user":
                            for (f = 0, c = r.draggedItems.length; f < c; f++) l = r.draggedItems[f], _.isFunction(l.getFavorites) && l.getFavorites("Songs").then(_.bind(h, this, new t.Models.PlayContext(l)))
                        }
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {};
                var i = {};
                r.Views.Queue = Backbone.View.extend({
                    el: document.getElementById("player-wrapper"),
                    templatePath: "queue",
                    openedOnce: !1,
                    autoplayEnabled: !1,
                    queueSize: "",
                    openQueueSize: "",
                    bestQueueSize: "",
                    lastUserQueueSize: "",
                    preferredUserQueueSize: "",
                    viewDirty: !1,
                    queueOpen: !1,
                    greatestQueueSongID: 0,
                    songsAdded: 0,
                    events: {
                        "click #player-radio-button": "onRadioClick",
                        "click .queue-song-options .options": "onSongOptionsClick",
                        "click #player-radio-label": "onStationsLabelClick",
                        "click .smile": "onSmileClick",
                        "click .frown": "onFrownClick",
                        "click .restore-queue": "onRestoreClick",
                        "click .bc-more-options": "onBroadcastMoreOptions"
                    },
                    initialize: function() {
                        var e = this.model.get("player");
                        this._onScrollForDebounce = _.bind(this.onScroll, this, i), this.collection = new r.Models.Collections.QueueSongs([]), this.$queue = $("#queue"), this.$queueMenu = $("#queue-menu-btn"), this.$broadcastBtn = $("#broadcast-menu-btn"), this.$player = $("#player"), this.$main = $("#main"), this.$queueToggle = $("#queue-toggle"), this.$queueListWindow = $("#queue-list-window"), this.$queueList = $("#queue-list"), this.$queueNum = $("#queue-num"), this.$songsText = $("#songs-text"), this.$radio = $("#player-radio-button"), this.grid = new r.Views.QueueGrid({
                            el: this.$queueList[0],
                            collection: this.collection,
                            model: e,
                            scrollElement: this.$queueListWindow
                        }), this.grid.on("rendered", this.updateScrollbar, this), this.grid.render(), r.on("queue:setSize", this.setQueueSize, this), e.on("change:playStatus", function(e, t) {
                            var n = e.get("currentQueue").get("activeSong"),
                                i = r.Models.Player.playStatuses,
                                s = "";
                            switch (t) {
                            case i.NONE:
                                s = "NONE";
                                break;
                            case i.INITIALIZING:
                                s = "INITIALIZING";
                                break;
                            case i.LOADING:
                                s = "LOADING";
                                break;
                            case i.PLAYING:
                                s = "PLAYING";
                                break;
                            case i.PAUSED:
                                s = "PAUSED";
                                break;
                            case i.BUFFERING:
                                s = "BUFFERING";
                                break;
                            case i.FAILED:
                                s = "FAILED";
                                break;
                            case i.COMPLETED:
                                s = "COMPLETED";
                                break;
                            default:
                                s = "UNKNOWN"
                            }
                            n && r.trigger("guts:log", "playStatusUpdate", {
                                playStatus: s,
                                activeSong: n.get("SongID"),
                                streamServer: e.get("currentStreamServer")
                            })
                        }, this), e.on("change:currentQueue", this.onCurrentQueueChange, this), e.on("change:previousQueue", this.onPreviousQueueChange, this), e.get("currentQueue") && this.onCurrentQueueChange(e, {}), this.$queue.tinyscrollbar({
                            axis: "x",
                            onscroll: _.bind(this.onScroll, this)
                        }), this.$queueMenu.on("click", _.bind(this.onOptionsClick, this)), r.Services.SWF.chatReady.done(_.bind(function() {
                            this.$broadcastBtn.removeClass("hide")
                        }, this)), r.on("manatee:connected", function() {
                            this.$broadcastBtn.removeClass("hide")
                        }, this), this.$broadcastBtn.on("click", _.bind(this.onBroadcastBtnClick, this)), this.$broadcastBtn.on("mouseenter", _.bind(this.onBroadcastBtnHover, this)), this.$queueToggle.on("click", _.bind(this.onQueueToggle, this)), this.broadcastNotifs = 0, r.on("broadcast:notifEvent", this.onBroadcastNotifEvent, this), this.songQueueHelper = {}, this.isDragging = !1, r.on("drag:start", function() {
                            this.isDragging = !0
                        }, this), r.on("drag:end", function() {
                            this.isDragging = !1
                        }, this), this.lastMouseInteraction = Date.now() - 3e4, this.$queue.on("click mousewheel", _.debounce(_.bind(function() {
                            this.lastMouseInteraction = Date.now()
                        }, this), 100));
                        var t = function(e, t) {
                                var n = "s";
                                t >= 825 && (n = "m"), this.queueOpen && this.bestQueueSize != n && r.trigger("queue:setSize", n, !1), this.bestQueueSize = n, this.optionsTooltip && r.trigger("tooltip:close"), this.updateScrollbar()
                            };
                        r.on("app:resize", t, this), t.call(this, 0, $("body").height()), this.notifySongsAdded = _.debounce(_.bind(function() {
                            var e = this.model.get("player").get("currentQueue");
                            if (!e) return;
                            this.songsAdded = Math.max(0, Math.min(this.songsAdded, e.get("songs").length));
                            if (this.songsAdded === 0) return;
                            var t = this.songsAdded > 1 ? "POPUP_QUEUE_SONGS_ADDED" : "POPUP_QUEUE_SONG_ADDED",
                                n = _.getString(t, {
                                    numSongs: this.songsAdded
                                }),
                                i = $(".popupQueueSongs .description"),
                                s = $(".popupQueueSongs").data();
                            if (i.length && s.view && !s.view.closing) i.html(n);
                            else {
                                if (e.get("currentBroadcast") && !e.get("isBroadcasting")) {
                                    this.songsAdded = 0;
                                    return
                                }
                                r.trigger("notification:add", {
                                    description: n,
                                    className: "popupQueueSongs",
                                    type: "success",
                                    closeAction: _.bind(function() {
                                        this.songsAdded = 0
                                    }, this)
                                })
                            }
                        }, this), 700)
                    },
                    onCurrentQueueChange: function(e, t, n) {
                        this.greatestQueueSongID = 0;
                        var i = e.previous("currentQueue"),
                            s = t.get("songs"),
                            o = r.isBroadcastListener() || e.get("isJoiningBroadcast");
                        if (i) {
                            var u = i.get("songs"),
                                a = i.get("currentBroadcast");
                            u.off(null, null, this), i.off("change", null, this), a && a.off("change", null, this)
                        }
                        t && (s.on("add", this.addSong, this), s.on("remove", this.removeSong, this), s.on("reset", this.resetSongs, this), s.on("add remove reset", this.onSongsChanged, this), t.on("change", this.onQueueChange, this), s.on("change", this.onSongChanged, this), this.updateCurrentSongs(), this.updateRadio(), this.resetSongs(s, {}), this.onActiveSongChange(), this.onSongsChanged()), this.updateRestoreQueue(), !t || !s.length || o ? (r.trigger("queue:setSize", "c", !1), this.openedOnce = !1) : r.trigger("queue:setSize", this.lastUserQueueSize || this.bestQueueSize, !1)
                    },
                    onPreviousQueueChange: function() {
                        this.updateRestoreQueue()
                    },
                    onQueueChange: function(e, n) {
                        var r = e.changedAttributes();
                        if (r.activeSong) {
                            var i = e.previousAttributes().activeSong;
                            i && i.trigger("change", i), this.onActiveSongChange()
                        }
                        if (r.currentBroadcast !== t) {
                            var s = e.previousAttributes().currentBroadcast;
                            if (s) {
                                s.off(null, null, this);
                                var o = s.get("history");
                                o && o.off("add reset", this.onNewBroadcastHistory, this)
                            }
                            var u = r.currentBroadcast;
                            if (u) {
                                u.on("change:Name", this.onBroadcastChange, this);
                                var a = u.get("history");
                                if (a) a.on("add reset", this.onNewBroadcastHistory, this);
                                else {
                                    var f = this;
                                    u.on("change:history", function(e, t) {
                                        var n = this.model.get("player").get("currentQueue");
                                        n && n.get("currentBroadcast") === e && t.on("add reset", f.onNewBroadcastHistory, f), f.onNewBroadcastHistory(t), u.off("change:history", null, this)
                                    }, this)
                                }
                            } else {
                                var l = e.get("songs");
                                l && l.each(function(e) {
                                    e.set("broadcastPlayed", !1)
                                })
                            }
                            this.onBroadcastChange(u)
                        }(!_.isUndefined(r.autoplayEnabled) || !_.isUndefined(r.clientRadioEnabled)) && this.updateRadio()
                    },
                    onActiveSongChange: function() {
                        var e = this.model.get("player"),
                            t = e.get("currentQueue"),
                            n = t.get("activeSong");
                        n ? (n == this.lastSuggestedSong && this.lastSuggestedSong.set({
                            suggestion: !1
                        }), n.trigger("change", n), t.get("autoplayEnabled") || t.get("clientRadioEnabled") ? e.set("scrollAfterRadioAdd", !0) : this.scrollToActiveSong()) : e.set("expectManualSongChange", !1)
                    },
                    scrollToActiveSong: function(e) {
                        e = _.orEqual(e, !1);
                        var t = this.model.get("player"),
                            n = t.get("currentQueue").get("activeSong");
                        console.log("scrollToActiveSong", e, t.get("expectManualSongChange"), this.isDragging, Date.now() - this.lastMouseInteraction);
                        if (!n) return;
                        if (e || t.get("expectManualSongChange") || !this.isDragging && Date.now() - this.lastMouseInteraction > 3e4) {
                            var r = this.grid.getScrollPositionToShowItem(n, !0);
                            r !== -1 && (this.$queue.tinyscrollbar_forceScroll(r), this.onScroll({}, r, {
                                force: !0
                            }))
                        }
                        t.set("expectManualSongChange", !1), t.set("scrollAfterRadioAdd", !1)
                    },
                    scrollToEnd: function() {
                        var e = this.grid.getMaxScrollPos();
                        this.$queue.tinyscrollbar_forceScroll(e), this.onScroll({}, e, {
                            force: !0
                        })
                    },
                    onScroll: function(e, t, n) {
                        e === i && this._debouncedOnScrollArgs && (e = this._debouncedOnScrollArgs[0], t = this._debouncedOnScrollArgs[1], n = this._debouncedOnScrollArgs[2], this._debouncedOnScrollArgs = null), n = n || {};
                        if (_.isUndefined(t) || _.isNull(t)) t = this.$queueList.position().left * -1;
                        n.overrideScrollPos = t, this.grid.handleScroll(n)
                    },
                    debouncedOnScroll: function() {
                        return this._debouncedOnScrollArgs = _.toArray(arguments), _.debounce(this._onScrollForDebounce, 10)
                    },
                    updateRestoreQueue: function() {
                        var e = this.model.get("player").get("currentQueue"),
                            t = this.model.get("player").get("previousQueue");
                        t && (!e || !e.get("songs").length) && !r.isBroadcastListener() ? this.$queueToggle.addClass("restore-queue") : this.$queueToggle.removeClass("restore-queue")
                    },
                    onClearQueueClick: function() {
                        var e = this.model.get("player").get("currentQueue");
                        e && e.get("songs").length ? r.trigger("player:clear") : r.trigger("player:restore")
                    },
                    onRadioClick: function(e, t) {
                        var n = this.model.get("player").get("currentQueue"),
                            i = n.get("clientRadioEnabled");
                        i ? (n.get("clientRadio").disable(), r.trigger("guts:clearAllAutoplayContexts")) : r.trigger("player:radio")
                    },
                    addQueuePropertiesToSong: function(e) {
                        var t = this.model.get("player"),
                            n = t.get("currentQueue"),
                            r = n.get("songs"),
                            i = r.indexOf(e),
                            s = !1,
                            o = e.get("autoplayVote") - 0,
                            u = n.get("autoplayEnabled") || n.get("clientRadioEnabled");
                        return u && r.length > 1 && i == r.length - 1 && e.get("source") != "user" && (s = !0, this.lastSuggestedSong = e), e.set({
                            paused: e != n.get("activeSong") || !t.playStatusIsPlaying(),
                            smile: o == 1 || e.get("source") == "user" && o === 0,
                            frown: o == -1,
                            suggestion: s,
                            songQueueHelper: this.songQueueHelper
                        }), e
                    },
                    addSong: function(e, t, n) {
                        this.lastSuggestedSong && this.lastSuggestedSong.set({
                            suggestion: !1
                        }), t.AlbumName && (console.trace(), console.log(e, t)), this.addQueuePropertiesToSong(e), this.collection.add(e, {
                            at: n.index
                        }), this.debouncedOnScroll(null, null, {
                            force: !0
                        }), e == this.lastSuggestedSong && this.model.get("player").get("scrollAfterRadioAdd") && this.scrollToActiveSong()
                    },
                    notifySongsAdded: function() {},
                    removeSong: function(e, t, n) {
                        this.collection.remove(e), this.debouncedOnScroll(null, null, {
                            force: !0
                        })
                    },
                    resetSongs: function(e, t) {
                        this.greatestQueueSongID = 0, _.each(e.models, _.bind(this.addQueuePropertiesToSong, this)), this.collection.reset(e.models, {
                            sorted: !0
                        }), this.debouncedOnScroll(null, null, {
                            force: !0
                        })
                    },
                    updateCurrentSongs: function() {
                        var e = this.model.get("player").get("currentQueue"),
                            t;
                        e.get("songs").length === 0 ? t = "QUEUE_NO_SONGS" : e.get("songs").length == 1 ? t = "QUEUE_ONE_SONG" : t = "QUEUE_NUM_SONGS", $(".current-songs-text").text(_.getString(t, {
                            numSongs: e.get("songs").length
                        }))
                    },
                    updateRadio: function() {
                        var e = this.model.get("player").get("currentQueue"),
                            t = e.get("autoplayEnabled") || e.get("clientRadioEnabled");
                        this.songQueueHelper.autoplayEnabled = t, t ? (this.$radio.addClass("active"), this.$queueList.addClass("autoplay"), $("span", this.$radio).attr("data-translate-text", "RADIO_ON"), $("span", this.$radio).text("RADIO ON")) : (this.$radio.removeClass("active"), this.$queueList.removeClass("autoplay"), $("span", this.$radio).attr("data-translate-text", "RADIO_OFF"), $("span", this.$radio).text("RADIO OFF")), this.grid.refresh(), this.debouncedOnScroll(null, null, {
                            force: !0
                        })
                    },
                    setQueueSize: function(e, t, n) {
                        t = _.orEqual(t, !0), n = _.orEqual(n, !1);
                        if (!e || !_.isString(e)) {
                            e = this.queueSize;
                            switch (e) {
                            case "c":
                                e = "s";
                                break;
                            case "m":
                                e = "l";
                                break;
                            case "l":
                                e = "c";
                                break;
                            case "s":
                            default:
                                e = "m"
                            }
                        }
                        var r = ["queue-closed", "queue-small", "queue-medium", "queue-large"],
                            i = ["closed", "small", "medium", "large"],
                            s, o, u, a;
                        this.queueSize = e, e != "c" && (this.openQueueSize = e), n ? this.preferredUserQueueSize = e : t ? this.lastUserQueueSize = e : this.preferredUserQueueSize && (e = this.preferredUserQueueSize), !this.queueOpen && !t && this.openedOnce && (e = "c");
                        switch (e) {
                        case "c":
                            s = [0, 0], o = r[0], u = i[0], a = 70;
                            break;
                        case "s":
                            s = [144, 55], o = r[1], u = i[1], a = 30;
                            break;
                        case "m":
                            s = [86, 125], o = r[2], u = i[2], a = 70;
                            break;
                        case "l":
                            s = [106, 145], o = r[3], u = i[3], a = 90
                        }
                        this.songQueueHelper.queueImageSize = a, this.queueDimensions = {
                            width: s[0],
                            height: s[1]
                        }, this.openedOnce = this.openedOnce || e != "c", this.queueOpen = e != "c", $([this.$el[0], this.$main[0]]).removeClass(r.join(" ")).addClass(o), this.grid.options.itemWidth = s[0], this.grid.refresh(), this.grid.resize(), this.updateScrollbar(!1), this.scrollToActiveSong(!0)
                    },
                    onSongsChanged: function(e) {
                        this.updateRestoreQueue(), this.updateCurrentSongs();
                        var t = this.collection.length == 1 ? "SONG" : "SONGS",
                            n = this.collection.length;
                        this.lastSongCount && (n = this.collection.length - this.lastSongCount), n > 0 && (!e || !e.get("suggestion") && e.get("queueSongID") > this.greatestQueueSongID) && (this.songsAdded += n, this.notifySongsAdded()), this.lastSongCount = this.collection.length, n > 0 && e && e instanceof r.Models.QueueSong && this.greatestQueueSongID < e.get("queueSongID") && (this.greatestQueueSongID = e.get("queueSongID"));
                        if (this.collection.length) {
                            var i = this.model.get("player").get("currentQueue"),
                                s = r.isBroadcastListener() || this.model.get("player").get("isJoiningBroadcast");
                            this.queueSize === "c" && this.lastUserQueueSize !== "c" && !s && r.trigger("queue:setSize", this.lastUserQueueSize || this.bestQueueSize, !1), this.$player.addClass("has-songs"), this.$queueNum.text(this.collection.length), this.$songsText.data("translateText", t).text(_.getString(t))
                        } else this.$player.removeClass("has-songs"), this.$queueNum.text("0"), this.$songsText.data("translateText", t).text(_.getString(t));
                        var o = 0;
                        this.queueDimensions && (o = this.queueDimensions.width), this.$queueList.width(this.collection.length * o), this.updateScrollbar()
                    },
                    onSongChanged: function(e) {
                        this.addQueuePropertiesToSong(e)
                    },
                    updateScrollbar: _.debounce(function(e) {
                        e = typeof e == "undefined" ? !0 : e, this.$queue.tinyscrollbar_update("relative"), e && this.debouncedOnScroll(null, null, {
                            force: !0
                        })
                    }, 100),
                    sidebarToggle: function() {
                        $("body").hasClass("sidebar-open") ? r.trigger("sidebar:close") : r.trigger("sidebar:open")
                    },
                    onSongOptionsClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.parents(".queue-item").data("queueSongId"),
                            r = this.model.get("player").get("currentQueue"),
                            i = null,
                            s = r.get("songs");
                        for (var o = 0; o < s.length; o++) if (s.at(o).get("queueSongID") == n) {
                            i = s.at(o);
                            break
                        }
                        var u = r.get("autoplayEnabled") || r.get("clientRadioEnabled"),
                            a = {
                                isQueue: !0,
                                queueSongClickedID: n,
                                queueSongClickedQueueSongID: i.get("queueSongID"),
                                autoplayEnabled: u
                            };
                        t.jjmenu(e, i.getSingleItemContextMenu(a), null, {
                            xposition: "auto",
                            yposition: "top",
                            orientation: "top",
                            show: "show",
                            className: "queuesongid" + n,
                            keepState: t
                        })
                    },
                    onStationsLabelClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, r.Models.Station.getStationsStartMenu(), null, {
                            xposition: "right",
                            yposition: "top",
                            orientation: "top",
                            spill: "left",
                            show: "show",
                            className: "radiomenu",
                            keepState: t
                        })
                    },
                    onOptionsClick: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getQueueMenu(), null, {
                            xposition: "right",
                            yposition: "top",
                            orientation: "top",
                            spill: "left",
                            show: "show",
                            className: "current-songs-menu",
                            keepState: t
                        })
                    },
                    onBroadcastBtnClick: function(e) {
                        var t = n.model.get("user"),
                            i = this.model.get("player").get("currentQueue"),
                            s = i ? i.get("currentBroadcast") : null;
                        s ? r.router.setHash(s.toUrl()) : t.createBroadcast()
                    },
                    onBroadcastBtnHover: function(e) {
                        var t = n.model.get("user"),
                            r = this.model.get("player").get("currentQueue");
                        (!r || !r.get("currentBroadcast")) && t.getLastBroadcast()
                    },
                    onBroadcastChange: function(e) {
                        e ? (this.$broadcastBtn.removeClass("hide").find(".label").text(e.get("Name")).removeAttr("data-translate-text").siblings(".icon.icon-caret").removeClass("hide"), this.$broadcastBtn.find(".icon-station-orange-animation").removeClass("hide"), this.$broadcastBtn.find(".icon-station-white-outline").addClass("hide"), this.$broadcastBtn.parent().addClass("btn-group"), this.$broadcastBtn.siblings(".bc-more-options").removeClass("hide"), this.$broadcastBtn.addClass("go-to-broadcast-page"), $("body").addClass("in-broadcast")) : (this.$broadcastBtn.find(".label").text(_.getString("START_BROADCASTING")).attr("data-translate-text", "START_BROADCASTING").siblings(".icon.icon-caret").addClass("hide"), this.$broadcastBtn.find(".icon-station-orange-animation").addClass("hide"), this.$broadcastBtn.find(".icon-station-white-outline").removeClass("hide"), this.$broadcastBtn.parent().removeClass("btn-group"), this.$broadcastBtn.siblings(".bc-more-options").addClass("hide"), this.$broadcastBtn.removeClass("go-to-broadcast-page"), $("body").removeClass("in-broadcast"), this.onBroadcastNotifEvent(!0)), this.updateRestoreQueue()
                    },
                    onBroadcastNotifEvent: function(e) {
                        e ? this.broadcastNotifs = 0 : this.broadcastNotifs++;
                        var t = $("#broadcast-menu-btn-group").find(".notification-pill"),
                            n = t.find(".notification-pill-count");
                        if (this.broadcastNotifs > 0) {
                            var r = this.broadcastNotifs;
                            this.broadcastNotifs >= 1e3 && (r = Math.floor(this.broadcastNotifs / 1e3) + "K+"), t.removeClass("hide"), n.text(r)
                        } else t.addClass("hide")
                    },
                    onNewBroadcastHistory: function(e) {
                        var t = this.model.get("player").get("currentQueue"),
                            n = t ? t.get("songs") : null;
                        if (!n) return;
                        var i;
                        e instanceof r.Models.BroadcastSong ? (i = n.get(e.get("queueSongID")), i && i.set("broadcastPlayed", !0)) : e instanceof r.Models.Collections.BroadcastSongs && n.each(function(t) {
                            i = e.getByQueueSongID(t.get("queueSongID")), i ? t.set("broadcastPlayed", !0) : t.set("broadcastPlayed", !1)
                        })
                    },
                    onQueueToggle: function(e) {
                        var t = this.queueOpen ? "c" : this.openQueueSize;
                        t || (t = this.lastUserQueueSize || this.preferredUserQueueSize || this.bestQueueSize), r.trigger("queue:setSize", t, !0, !1)
                    },
                    onRestoreClick: function(e) {
                        e.preventDefault(), r.trigger("player:restore")
                    },
                    onSmileClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.parents(".queue-item"),
                            i = n.data("module"),
                            s = i && i.model,
                            o = this.model.get("player").get("currentQueue");
                        if (s) {
                            var u = s.get("smile"),
                                a = s.get("queueSongID"),
                                f = u ? 0 : 1;
                            r.trigger("player:voteSong", a, f)
                        }
                    },
                    onFrownClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.parents(".queue-item"),
                            i = n.data("module"),
                            s = i && i.model,
                            o = this.model.get("player").get("currentQueue");
                        if (s) {
                            var u = s.get("frown"),
                                a = s.get("queueSongID"),
                                f = u ? 0 : -1;
                            r.trigger("player:voteSong", a, f)
                        }
                    },
                    getQueueMenu: function() {
                        var e = [],
                            t = [],
                            n = [],
                            i = this.model.get("player"),
                            s = i.get("currentQueue"),
                            o = s.get("songs"),
                            u = i.get("previousQueue"),
                            a = s.get("autoplayEnabled") || s.get("clientRadioEnabled"),
                            f = s.get("isBroadcasting"),
                            l = s.get("currentBroadcast");
                        if (!r.isBroadcaster()) {
                            var c = a ? "TURN_RADIO_OFF" : "TURN_RADIO_ON",
                                h = a ? " toggle-on" : "";
                            e.push({
                                title: _.getString(c),
                                customClass: "jj_menu_item_radio menu-item-toggle" + h,
                                action: {
                                    type: "fn",
                                    callback: _.bind(function() {
                                        s.get("clientRadioEnabled") ? (s.get("clientRadio").disable(), this.updateRadio(), r.trigger("guts:clearAllAutoplayContexts")) : r.trigger("player:radio")
                                    }, this)
                                }
                            }, {
                                title: "",
                                customClass: "divider"
                            })
                        }
                        return e.push({
                            title: _.getString("PLAYER_SHOW_VISUALIZER"),
                            customClass: "jj_menu_item_visualizer",
                            action: {
                                type: "fn",
                                callback: function() {
                                    var e = function(t) {
                                            t = _.orEqual(t, r.Models.User.getCached(r.getLoggedInUserID()));
                                            if (!t) return;
                                            t.get("subscription").canUsePlayerBonuses() ? r.trigger("lightbox:open", "visualizers", {
                                                _showPlayerControls: !0
                                            }) : r.trigger("lightbox:open", "vipOnlyFeature", {
                                                onLogin: e
                                            })
                                        };
                                    e()
                                }
                            }
                        }), e.push({
                            title: "",
                            customClass: "divider"
                        }, {
                            title: _.getString("VIEW_SONGS"),
                            customClass: "jj_menu_item_now_playing",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.isBroadcastListener() ? r.router.setHash(l.toUrl()) : r.router.setHash("now_playing")
                                }
                            }
                        }), t = this.getCurrentSongsSaveMenu(), t.length && e.push({
                            title: _.getString("SAVE_SONGS"),
                            customClass: "jj_menu_item_save_songs",
                            type: "sub",
                            src: this.getCurrentSongsSaveMenu()
                        }), n = this.getCurrentSongsLoadMenu(), n.length && r.getLoggedInUserID() > 0 && (!l || f) && e.push({
                            title: _.getString("QUEUE_LOAD_SONGS"),
                            customClass: "jj_menu_item_load_songs jj_menu_item_more",
                            type: "sub",
                            src: this.getCurrentSongsLoadMenu()
                        }), o.length && (!l || f) && e.push({
                            title: _.getString("QUEUE_CLEAR_QUEUE"),
                            customClass: "jj_menu_item_clear_queue",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.trigger("player:clear")
                                }
                            }
                        }), f ? e.push({
                            title: _.getString("STOP_BROADCASTING"),
                            customClass: "jj_menu_item_clear_queue",
                            action: {
                                type: "fn",
                                callback: function() {
                                    function e() {
                                        r.Services.SWF.endBroadcast()
                                    }
                                    l && l.get("listeners") && l.get("listeners").length > 1 ? r.trigger("lightbox:open", "broadcastListeners", {
                                        broadcast: l,
                                        endBroadcast: !0,
                                        onBroadcastEnded: e
                                    }) : e()
                                }
                            }
                        }) : l && e.push({
                            title: _.getString("LEAVE_BROADCAST"),
                            customClass: "jj_menu_item_clear_queue",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.Services.SWF.endBroadcast()
                                }
                            }
                        }), u && !o.length && !l && e.push({
                            title: _.getString("QUEUE_RESTORE_QUEUE"),
                            customClass: "jj_menu_item_restore_queue",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.trigger("player:restore")
                                }
                            }
                        }), e
                    },
                    getCurrentSongsSaveMenu: function() {
                        var e = this.model.get("player").get("currentQueue"),
                            t = e.get("songs"),
                            n = this.model.get("user"),
                            i = [];
                        if (t.length < 1) return i;
                        var s = t.pluck("SongID");
                        return i.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            customClass: "jj_menu_item_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    n.addSongsToLibrary(s)
                                }
                            }
                        }, {
                            title: _.getString("QUEUE_SAVE_PLAYLIST"),
                            customClass: "jj_menu_item_replace_playlist",
                            type: "sub",
                            src: n.getPlaylistsMenu(!1, !0, {
                                songs: t.toArray()
                            }, function(e) {
                                r.trigger("lightbox:open", {
                                    _type: "areYouSure",
                                    view: {
                                        header: "LB_ARE_YOU_SURE",
                                        message: "LB_ARE_YOU_SURE_OVERWRITE_PLAYLIST",
                                        messageParams: {
                                            playlistName: e.get("PlaylistName")
                                        },
                                        buttonsRight: [{
                                            label: "CONTINUE",
                                            className: "continue btn-primary"
                                        }]
                                    },
                                    callbacks: {
                                        ".continue": function() {
                                            e.overwriteWithSongs(t.pluck("SongID")).done(function() {
                                                r.trigger("lightbox:close"), r.trigger("notification:add", {
                                                    description: _.getString("POPUP_PLAYLIST_SAVED"),
                                                    type: "success",
                                                    duration: 5e3
                                                })
                                            }).fail(function() {
                                                r.trigger("lightbox:close"), r.trigger("notification:add", {
                                                    description: _.getString("POPUP_PLAYLIST_SAVED_FAIL"),
                                                    type: "error",
                                                    duration: 5e3
                                                })
                                            })
                                        }
                                    }
                                })
                            })
                        }, {
                            title: _.getString("QUEUE_ADD_TO_PLAYLIST"),
                            customClass: "jj_menu_item_add_playlist",
                            type: "sub",
                            src: n.getPlaylistsMenu(!1, !0, {
                                songs: t.toArray()
                            }, function(e) {
                                e.addSongs(t.pluck("SongID"), null, !0)
                            })
                        }), i
                    },
                    getCurrentSongsLoadMenu: function() {
                        var e = [],
                            t = this.model.get("player").get("currentQueue"),
                            n = t.get("songs"),
                            i = this.model.get("user");
                        return i && i.get("favoriteSongs") && e.push({
                            title: _.getString("QUEUE_LOAD_FAVORITES"),
                            customClass: "jj_menu_item_favorites",
                            action: {
                                type: "fn",
                                callback: function() {
                                    var e = new r.Models.PlayContext;
                                    e.addStreamType(r.Models.PlayContext.TYPE_LIBRARY), r.trigger("player:addSongs", i.get("favoriteSongs").pluck("SongID"), r.Services.SWF.playSpecialIndexes.DEFAULT, !1, e)
                                }
                            }
                        }), i && i.get("playlists") && i.get("playlists").length > 0 && e.push({
                            title: _.getString("QUEUE_LOAD_PLAYLIST"),
                            customClass: "jj_menu_item_playlists",
                            type: "sub",
                            src: i.getPlaylistsMenu(!0, !1, {
                                songs: _.toArray(n)
                            }, function(e) {
                                e.getSongs().done(function(t) {
                                    var n = new r.Models.PlayContext(e);
                                    r.trigger("player:addSongs", _.toArray(t), r.Services.SWF.playSpecialIndexes.DEFAULT, !1, n)
                                }).fail(function() {})
                            })
                        }), e
                    },
                    getOptionsMenu: function() {
                        var e = [],
                            t = r.getLoggedInUserID(),
                            n = this.model.get("player").get("currentQueue"),
                            i = [{
                                title: _.getString("QUEUE_LARGE"),
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        r.trigger("queue:setSize", "l")
                                    }
                                }
                            }, {
                                title: _.getString("QUEUE_NORMAL"),
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        r.trigger("queue:setSize", "m")
                                    }
                                }
                            }, {
                                title: _.getString("QUEUE_SMALL"),
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        r.trigger("queue:setSize", "s")
                                    }
                                }
                            }, {
                                title: _.getString("QUEUE_HIDE"),
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        r.trigger("queue:setSize", "c")
                                    }
                                }
                            }];
                        return e.push({
                            title: _.getString("QUEUE_SIZES"),
                            type: "sub",
                            customClass: "jj_menu_item_play",
                            src: i
                        }), t > 0 && e.push({
                            title: _.getString("PLAYER_SHOW_SETTINGS"),
                            customClass: "jj_menu_item_privacy",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.router.setHash("/settings/preferences")
                                }
                            }
                        }), n && n.get("songs") && n.get("songs").length && (e.push({
                            customClass: "separator"
                        }), e.push({
                            title: _.getString("PLAYER_SHOW_VISUALIZER"),
                            customClass: "jj_menu_item_visualizer",
                            action: {
                                type: "fn",
                                callback: function() {
                                    var e = function(t) {
                                            t = _.orEqual(t, r.Models.User.getCached(r.getLoggedInUserID()));
                                            if (!t) return;
                                            t.get("subscription").canUsePlayerBonuses() ? r.trigger("lightbox:open", "visualizers", {
                                                _showPlayerControls: !0
                                            }) : r.trigger("lightbox:open", "vipOnlyFeature", {
                                                onLogin: e
                                            })
                                        };
                                    e()
                                }
                            }
                        })), e
                    },
                    onBroadcastMoreOptions: function(e) {
                        this.bcMoreOptions && (this.bcMoreOptions.destroy(), delete this.bcMoreOptions);
                        var t = $(".bc-more-options"),
                            n = this.model.get("player").get("currentQueue"),
                            i = n.get("currentBroadcast"),
                            s = i && !n.get("isBroadcasting"),
                            o = 12;
                        this.broadcastMenuOptions = {
                            delay: 0,
                            notchSize: 6,
                            width: 170,
                            notch: "bottom",
                            notchX: o,
                            x: 5,
                            y: "top",
                            adjustY: -10,
                            $attached: t,
                            tooltipClass: "menu bc-more-options"
                        };
                        if (!this.bcMoreOptions) {
                            var u = function(e) {
                                    r.router.setHash(i.toUrl()), r.trigger("tooltip:close")
                                },
                                a = function(e) {
                                    r.trigger("lightbox:open", "editBroadcast", {
                                        broadcast: i
                                    }), r.trigger("tooltip:close")
                                },
                                f = function(e) {
                                    i.end(), r.trigger("tooltip:close")
                                },
                                l = [{
                                    localeKey: "GO_TO_PAGE",
                                    click: u
                                }, {
                                    localeKey: "EDIT_BROADCAST",
                                    click: a
                                }, {
                                    localeKey: "STOP_BROADCASTING",
                                    click: f
                                }];
                            s && (l = [{
                                localeKey: "GO_TO_PAGE",
                                click: u
                            }, {
                                localeKey: "LEAVE_BROADCAST",
                                click: f
                            }]);
                            var c = {
                                model: i,
                                items: l
                            };
                            this.bcMoreOptions = new r.Views.Tooltips.Menu(c)
                        }
                        this.broadcastMenuOptions.views = [this.bcMoreOptions], this.broadcastMenuOptions.tooltipKey = "bc-more-options";
                        if (this.bcMoreOptions && this.bcMoreOptions.openDfd && this.bcMoreOptions.openDfd.state() === "pending") return;
                        $.hideJJMenu(), t.addClass("active"), this.broadcastMenuOptions.dfd = $.Deferred(), r.trigger("tooltip:open", this.broadcastMenuOptions), this.bcMoreOptions.openDfd = this.broadcastMenuOptions.dfd, this.bcMoreOptions.openDfd.always(function() {
                            t.removeClass("active")
                        })
                    }
                })
            }(), function() {
                function r(e, t) {
                    var n = t.attributes.currentBroadcastID && t.attributes.nowPlayingSong,
                        r = t.attributes.currentBroadcastID;
                    if (t.attributes.currentBroadcastID && t.attributes.currentBroadcastOwner) {
                        var i = t.attributes.currentBroadcastOwner;
                        i && (n = i.attributes.nowPlayingSong, i.attributes.currentBroadcastID != r && (r = null))
                    }
                    return n ? (t.attributes.isOwnerOfCurrentBroadcast && r && (e.currentBroadcasts[r] = {
                        owner: t.id,
                        Name: t.attributes.currentBroadcastName
                    }), 0 + r + (t.attributes.isOwnerOfCurrentBroadcast ? 0 : 1)) : 1 + (t.attributes.onlineStatus ? 0 : 1) + (t.attributes.nowPlayingSong ? 0 : 1) + t.attributes.Name.toLowerCase()
                }
                function i(e) {
                    var t = parseFloat(e.attributes.TSModified, 10);
                    return isNaN(t) && (t = 0), -1 * t
                }
                function s() {
                    if (!this.indexRendered || !this.isOnline) return;
                    this.communityUsers.sort(), t.trigger("sidebar:friendsChange")
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {};
                var n;
                t.Views.Sidebar = Backbone.View.extend({
                    el: document.getElementById("sidebar"),
                    templatePath: "sidebar",
                    events: {
                        "click .collapser": "toggleList",
                        "mouseenter .scrollable": "scrollbarFadeIn",
                        "mouseleave .scrollable": "scrollbarFadeOut",
                        "keyup #sidebar-filter": "filterGrids",
                        "submit form.search-bar": "onFilterSubmit",
                        "focus .filter": "onFilterFocus",
                        "blur .filter": "onFilterBlur",
                        "click .search-bar": "filterFocus",
                        "click .new-playlist": "newPlaylist",
                        "click #sidebar-add-menu": "onAddMenu",
                        "click #manatee-reconnect": "onManateeReconnectClick",
                        "click #sidebar-playlists-title": "onPlaylistsTitleClick",
                        "click .sidebar-user": "onSidebarUserClick",
                        "click .sidebar-playlist": "onSidebarPlaylistClick",
                        "click .sidebar-broadcast": "onSidebarBroadcastClick",
                        "click #toggle-sidebar": "onSizeChange",
                        "click #filter-toggle, #hide-sidebar-filter": "toggleFilter",
                        "click #sidebar-settings": "onSettingsMenu",
                        "click #sidebar-go-online": "updatePrivacySetting",
                        "click #close-offline-msg": "closeOfflineMsg"
                    },
                    initialize: function() {
                        this.$main = $("#main"), this.indexRendered = !1, this.user = this.model.get("user"), this.playlists = new t.Models.Collections.Playlists([]), this.subscribedPlaylists = new t.Models.Collections.Playlists([]), this.communityUsers = new t.Models.Collections.Users([]), this.extraUsers = new t.Models.Collections.Users([]), this.favoriteBroadcasts = new t.Models.Collections.Broadcasts([]), this.subscribedToFriendsChange = !1, this.settingChatFriends = !1, this.createdTimestamp = Date.now(), this.loadingFriends = !0, this.allowRenderFriends = !1, this.throttleAppResize = _.throttle(_.bind(this.handleAppResize, this), 300), this.currentBroadcasts = {}, this.communityUsers.comparator = _.bind(r, this.communityUsers, this), this.playlists.comparator = i, this.activeView = "music", this.model.set("size", this.model.get("pageSize") > 0 ? "small" : "large"), t.on("sidebar:open", _.bind(this.open, this)), t.on("sidebar:close", _.bind(this.close, this)), t.on("sidebar:size", _.bind(this.onSizeChange, this)), t.on("drag:start", this.openDropMenu, this), t.on("drag:end", this.closeDropMenu, this), t.on("app:resize", this.throttleAppResize, this), t.on("manatee:disconnected", _.bind(this.chatDisconnected, this)), t.on("manatee:connected", _.bind(this.chatConnected, this)), this.model.on("change:user", _.bind(this.onUserChange, this)), this.user.on("change:Context", _.bind(this.onUserChange, this)), this.onUserChange(), this.render()
                    },
                    onDestroy: function() {
                        var e = $("#drop-targets");
                        e.off("dropinit.sidebar"), e.off("dropstart.sidebar"), e.off("drop.sidebar");
                        var n = $("sidebar-collection");
                        n.off("dropinit.sidebar"), n.off("dropstart.sidebar"), n.off("drop.sidebar"), this.communityUsers.off(null, null, this);
                        var r = this.model.get("user");
                        r && r.off(null, null, this), t.off(null, null, this)
                    },
                    onSizeChange: function(e, n) {
                        if (!n || n && this.model.get("size") != n) var r = !0;
                        e ? (e.preventDefault(), e.stopPropagation(), this.stickySize = !0) : this.stickySize = !1;
                        var i = $(document.body),
                            s = $("#toggle-sidebar");
                        n ? this.model.set("size", n) : this.model.set("size", this.model.get("size") == "small" ? "large" : "small"), this.model.get("size") == "small" ? (i.addClass("sidebar-small"), this.$el.addClass("small"), _.defer(_.bind(function() {
                            var e = this.model.get("tooltipOptionsCache");
                            e && (e.sidebarUser = {
                                notch: "right",
                                notchY: 60,
                                x: -325,
                                y: -43
                            })
                        }, this)), t.trigger("guts:log", "sidebarClosed"), t.trigger("guts:gatrack", "sidebar", "sidebarClosed")) : (i.removeClass("sidebar-small"), s.find(".icon").removeClass("sidebar-open icon-sidebar-open-m-gray").addClass("sidebar-close icon-sidebar-close-m-gray"), this.$el.removeClass("small"), this.$el.hasClass("filter-open") && this.toggleFilter(), _.defer(_.bind(function() {
                            var e = this.model.get("tooltipOptionsCache");
                            e && (e.sidebarUser = {
                                notch: "right",
                                notchY: 60,
                                x: -325,
                                y: -37
                            })
                        }, this)), t.trigger("guts:log", "sidebarExpanded"), t.trigger("guts:gatrack", "sidebar", "sidebarExpanded")), r && this.render(), !t.Services.SWF.chatDisconnected && this.user && this.indexRendered && !this.loadingFriends && $("#chat-loading").addClass("hide")
                    },
                    onUserChange: function() {
                        this.user = this.model.get("user"), n && n.get("UserID") != this.user.get("UserID") && (n.off(null, null, this), n.get("playlists") && n.get("playlists").off(null, null, this), n.get("friends") && n.get("friends").off(null, null, this), n.get("favoriteUsers") && n.get("favoriteUsers").off(null, null, this), n.get("favoritePlaylists") && n.get("favoritePlaylists").off(null, null, this), n.get("favoriteBroadcasts") && n.get("favoriteBroadcasts").off(null, null, this), this.extraUsers.reset([]), this.createdTimestamp = Date.now()), this.user.get("isLoggedIn") ? (this.user.on("change:pageNameData", this.renderCollabPlaylists, this), this.user.on("change:Context", this.onContextChange, this), this.user.on("change:sessionPrivacy", this.onUpdatePrivacySettings, this), this.indexRendered && (this.loadUserInfo(), this.onUpdatePrivacySettings(), this.onSizeChange(null, this.model.get("size"))), t.trigger("sidebar:open")) : t.trigger("sidebar:close"), n = this.user
                    },
                    loadUserInfo: function(e) {
                        e || (e = _.chainLoading()), this.allowRenderFriends = !1, this.loadingFriends = !0, e.push(this.user.getFavoritesByType("Users").done(e.bind(function(e) {
                            this.loadingFriends = !1, e && (this.updateFriends(), e.on("add remove reset", this.updateFriends, this)), $("#friends-failed").addClass("hide"), $("#sidebar-invite-cta").removeClass("hide")
                        }, this)).fail(function() {
                            $("#friends-failed").removeClass("hide"), $("#chat-loading").addClass("hide")
                        })), e.push(this.user.getFriends().fail(function() {
                            t.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_LOAD_FRIENDS"),
                                type: "error",
                                duration: 5e3
                            })
                        })), e.push(this.user.getPlaylists().done(e.bind(function(e) {
                            this.model.get("size") == "large" && (this.renderPlaylists(), this.user.get("playlists").on("add remove reset", this.renderPlaylists, this))
                        }, this)).fail(function() {
                            $(".collapser", "#sidebar-playlists").addClass("hide"), $(".scrollbar", "#sidebar-playlists").addClass("hide"), $("#playlists-failed").removeClass("hide")
                        })), e.push(this.user.getFavoritesByType("Playlists").done(e.bind(function(e) {
                            this.model.get("size") == "large" && (this.renderSubscribedPlaylists(), this.user.get("favoritePlaylists").on("add remove reset", this.renderSubscribedPlaylists, this))
                        }, this)).fail(function() {
                            $("#sidebar-subbed-collapser").addClass("hide"), $("#sidebar-subbed-playlists").addClass("hide")
                        })), e.push(this.user.getFavoritesByType("Broadcasts").done(e.bind(function(e) {
                            this.model.get("size") == "large" && (this.renderFavoriteBroadcasts(), this.user.get("favoriteBroadcasts").on("add remove reset", this.renderFavoriteBroadcasts, this))
                        }, this)).fail(function() {
                            $("#sidebar-broadcasts-collapser").addClass("hide"), $("#sidebar-subbed-broadcasts").addClass("hide")
                        }));
                        var n = 0,
                            r = Date.now() - this.createdTimestamp,
                            i = 3e3,
                            s = $.Deferred();
                        return r < i && (n = Math.min(i, Math.max(0, i - r))), _.delay(_.bind(function() {
                            s.resolve()
                        }, this), n), e.push(s.done(e.bind(function() {
                            this.allowRenderFriends = !0, this.renderFriends()
                        }, this))), e
                    },
                    render: function() {
                        this.indexRendered = !1, this.throttleAppResize();
                        var e = _.chainLoading();
                        e.push(this.fetchTemplate("index").done(e.bind(this.onTemplate, this)).done(e.bind(function() {
                            this.user.get("isLoggedIn") ? t.trigger("sidebar:open") : t.trigger("sidebar:close")
                        }, this))), this.loadUserInfo(e)
                    },
                    onTemplate: function(e) {
                        this.playlistsGrid && this.playlistsGrid.$el.detach(), this.collabPlaylistsGrid && this.collabPlaylistsGrid.$el.detach(), this.subscribedPlaylistsGrid && this.subscribedPlaylistsGrid.$el.detach(), this.favoriteBroadcastsGrid && this.favoriteBroadcastsGrid.$el.detach(), this.friendsGrid && this.friendsGrid.$el.detach(), this.$el.html(this.renderTemplate(e, this)), this.isOnline ? $("#sidebar-offline-msg").addClass("hide") : $("#sidebar-offline-msg").removeClass("hide"), this.$playlists = $("#sidebar-playlists"), this.$community = $("#sidebar-community"), this.$playlists.tinyscrollbar({
                            onscroll: _.bind(this.onPlaylistScroll, this)
                        }), this.$community.tinyscrollbar({
                            onscroll: _.bind(this.onCommunityScroll, this)
                        }), this.indexRendered = !0;
                        var t = $("#drop-targets");
                        t.on("dropinit.sidebar", _.bind(this.handleDropInit, this)), t.on("dropstart.sidebar", _.bind(this.handleDropStart, this)), t.on("drop.sidebar", _.bind(this.handleDrop, this));
                        var n = $("#sidebar-collection");
                        n.on("dropinit.sidebar", _.bind(this.handleDropInit, this)), n.on("dropstart.sidebar", _.bind(this.handleDropStart, this)), n.on("drop.sidebar", _.bind(this.handleDrop, this)), this.titleHeight = this.$playlists.find(".sidebar-title").outerHeight(), this.$sidebarCollection = n, this.$sidebarFilter = $("#sidebar-filter-container"), this.$sidebarUtility = $("#sidebar-utility"), $("#section-resize-handle").on("draginit", _.bind(this.onSectionResizeStart, this)), $("#section-resize-handle").on("drag", _.bind(this.onSectionResize, this)), $("#section-resize-handle").on("dragend", _.bind(this.onSectionResizeEnd, this)), this.onUpdatePrivacySettings(), this.renderFriends(), this.onSizeChange(null, this.model.get("size"))
                    },
                    open: function() {
                        $("body").addClass("sidebar-open")
                    },
                    close: function() {
                        $("body").removeClass("sidebar-open sidebar-small")
                    },
                    renderPlaylists: function() {
                        if (!this.indexRendered || !this.user.get("isLoggedIn") || !this.user.get("playlists") || this.model.get("size") == "small") return;
                        this.user.get("playlists").length ? this.hideEmptyPlaylistsCTA() : this.showEmptyPlaylistsCTA(), this.playlists.reset(this.user.get("playlists").models), this.playlists.comparator = function(e) {
                            return e.get("PlaylistName").toLowerCase()
                        }, this.playlists.sort();
                        var e = $("#sidebar-playlists-grid");
                        this.playlistsGrid ? (this.playlistsGrid.collection.reset(this.playlists.models, {
                            sorted: !0
                        }), e[0] !== this.playlistsGrid.el && e.replaceWith(this.playlistsGrid.$el), $("#sidebar-playlists-collapser").removeClass("loading")) : (this.playlistsGrid = new t.Views.PlaylistsSidebarGrid({
                            el: e[0],
                            collection: this.playlists,
                            sidebar: this,
                            dropListenOn: this.$playlists.find(".viewport")
                        }), $("#sidebar-playlists-collapser").removeClass("loading"), this.playlistsGrid.render()), this.filterGrids(null, $("#sidebar-filter")), this.$playlists.tinyscrollbar_update("relative")
                    },
                    renderCollabPlaylists: function() {
                        if (!this.indexRendered || !this.user.get("isLoggedIn") || !this.user.get("pageNameData") || !this.user.get("pageNameData").CollabPlaylists || this.model.get("size") == "small") return;
                        var e;
                        this.collabPlaylists = [], this.user.get("pageNameData") && (e = this.user.get("pageNameData").CollabPlaylists), _.each(e, function(n, r) {
                            this.collabPlaylists.push(new t.Models.Playlist($.extend(e[r], {
                                PlaylistID: r,
                                Collaborative: !0
                            })))
                        }, this), this.collabPlaylists = new t.Models.Collections.Playlists(this.collabPlaylists), this.collabPlaylists.comparator = i;
                        var n = $("#sidebar-collab-playlists");
                        this.collabPlaylistsGrid ? (this.collabPlaylistsGrid.collection.reset(this.collabPlaylists.models, {
                            sorted: !0
                        }), n[0] !== this.collabPlaylistsGrid.el && n.replaceWith(this.collabPlaylistsGrid.$el), $("#sidebar-collab-collapser").removeClass("loading")) : (this.collabPlaylistsGrid = new t.Views.PlaylistsSidebarGrid({
                            el: n[0],
                            collection: this.collabPlaylists,
                            sidebar: this,
                            dropListenOn: this.$playlists.find(".viewport")
                        }), $("#sidebar-collab-collapser").removeClass("loading"), this.collabPlaylistsGrid.render()), this.filterGrids(null, $("#sidebar-filter")), this.$playlists.tinyscrollbar_update("relative")
                    },
                    renderSubscribedPlaylists: function() {
                        if (!this.indexRendered || !this.user.get("isLoggedIn") || !this.user.get("favoritePlaylists") || this.model.get("size") == "small") return;
                        this.hideEmptyPlaylistsCTA(), this.subscribedPlaylists.reset(this.user.get("favoritePlaylists").models);
                        var e = $("#sidebar-subbed-playlists");
                        this.subscribedPlaylistsGrid ? (this.subscribedPlaylistsGrid.collection.reset(this.subscribedPlaylists.models, {
                            sorted: !0
                        }), e[0] !== this.subscribedPlaylistsGrid.el && e.replaceWith(this.subscribedPlaylistsGrid.$el), $("#sidebar-subbed-collapser").removeClass("loading")) : (this.subscribedPlaylistsGrid = new t.Views.PlaylistsSidebarGrid({
                            el: e[0],
                            collection: this.subscribedPlaylists,
                            sidebar: this
                        }), $("#sidebar-subbed-collapser").removeClass("loading"), this.subscribedPlaylistsGrid.render()), this.filterGrids(null, $("#sidebar-filter")), this.$playlists.tinyscrollbar_update("relative")
                    },
                    renderFavoriteBroadcasts: function() {
                        if (!this.indexRendered || !this.user.get("isLoggedIn") || !this.user.get("favoriteBroadcasts") || this.model.get("size") == "small") return;
                        this.hideEmptyPlaylistsCTA(), this.favoriteBroadcasts.reset(this.user.get("favoriteBroadcasts").models);
                        var e = $("#sidebar-broadcasts-grid");
                        this.favoriteBroadcastsGrid ? (this.favoriteBroadcastsGrid.collection.reset(this.favoriteBroadcasts.models, {
                            sorted: !0
                        }), e[0] !== this.favoriteBroadcastsGrid.el && e.replaceWith(this.favoriteBroadcastsGrid.$el), $("#sidebar-broadcasts-collapser").removeClass("loading")) : (this.favoriteBroadcastsGrid = new t.Views.BroadcastsSidebarGrid({
                            el: e[0],
                            collection: this.favoriteBroadcasts,
                            sidebar: this
                        }), $("#sidebar-broadcasts-collapser").removeClass("loading"), this.favoriteBroadcastsGrid.render()), this.filterGrids(null, $("#sidebar-filter")), this.$playlists.tinyscrollbar_update("relative")
                    },
                    showEmptyPlaylistsCTA: function() {
                        this.$el.find(".collapser").addClass("hide"), $("#sidebar-no-playlists").removeClass("hide"), this.$el.find(".sidebar-link.new-playlist").addClass("hide")
                    },
                    hideEmptyPlaylistsCTA: function() {
                        this.$el.find(".collapser").removeClass("hide"), $("#sidebar-no-playlists").addClass("hide"), this.$el.find(".sidebar-link.new-playlist").removeClass("hide")
                    },
                    initialOnlineFriendsUpdate: function() {
                        t.off("manatee:friendsStatus", null, this), this.communityUsers.on("change:onlineStatus", this.updateOnlineFriendsThrottle, this), this.communityUsers.on("change:nowPlayingSong", this.updateOnlineUserSong, this), this.communityUsers.on("change:currentBroadcastID", this.updateOnlineFriendsThrottle, this), s.call(this), this.subscribedToFriendsChange = !1, $("#chat-loading").addClass("hide")
                    },
                    extraUsersUpdate: function(e) {
                        this.communityUsers.add(e), this.extraUsers.add(e)
                    },
                    extraUsersRemoved: function(e) {
                        this.communityUsers.remove(e), this.extraUsers.remove(e)
                    },
                    updateOnlineFriendsThrottle: _.throttle(s, 30),
                    updateOnlineUserSong: function(e, t, n) {
                        var r = e.previous("nowPlayingSong");
                        (r && !t || t && !r) && this.updateOnlineFriendsThrottle()
                    },
                    updateFriends: function() {
                        var e = $("#sidebar-user-filter"),
                            t = e.val() ? !0 : !1,
                            n = this.user.get("favoriteUsers"),
                            r = n ? n.models : [],
                            i = [].concat(r).concat(this.extraUsers.models);
                        this.communityUsers.reset(i, {
                            silent: t
                        }), this.$community.tinyscrollbar_update("relative"), this.extraUsers.remove(r), this.sendFriendsToManatee()
                    },
                    sendFriendsToManatee: function() {
                        if (this.user && !this.loadingFriends) {
                            var e = this.user.get("favoriteUsers");
                            if (!e) return;
                            if (!e.length || (this.user.get("sessionPrivacy") & 4) > 0) {
                                $("#chat-loading").addClass("hide");
                                return
                            }
                            this.communityUsers && (this.communityUsers.off("change:onlineStatus", null, this), this.communityUsers.off("change:nowPlayingSong", null, this), this.subscribedToFriendsChange || (t.on("manatee:friendsStatus", this.initialOnlineFriendsUpdate, this), t.on("manatee:extraUsersStatus", this.extraUsersUpdate, this), t.on("manatee:extraUsersRemoved", this.extraUsersRemoved, this), this.subscribedToFriendsChange = !0));
                            if (this.settingChatFriends) return;
                            this.settingChatFriends = !0;
                            var n = [];
                            e.each(function(e) {
                                n.push(e.id), e.addStatusLock("sidebar")
                            }), t.Services.SWF.ready.done(_.bind(function() {
                                t.Services.SWF.setChatFriends(n), this.settingChatFriends = !1
                            }, this))
                        }
                    },
                    renderFriends: function() {
                        if (!this.indexRendered || !this.communityUsers || !this.allowRenderFriends) return;
                        this.communityUsers.length ? ($("#sidebar-no-friends").addClass("hide"), $("#sidebar-friends").removeClass("hide")) : (this.$el.find(".share-profile").data("userId", this.user.get("UserID")), $("#sidebar-no-friends").removeClass("hide"), $("#sidebar-friends").addClass("hide"));
                        var e = $("#sidebar-friends");
                        this.friendsGrid ? e[0] != this.friendsGrid.el && e.replaceWith(this.friendsGrid.$el) : (e.empty(), this.friendsGrid = new t.Views.UserSidebarGrid({
                            el: e[0],
                            collection: this.communityUsers,
                            scrollElement: this.$community,
                            sidebar: this,
                            currentBroadcasts: this.currentBroadcasts
                        }), this.friendsGrid.blockSize = this.friendsGrid.blockSize * 2, this.friendsGrid.render(), this.friendsGrid.on("rendered", function() {
                            this.$community.tinyscrollbar_update("relative")
                        }, this)), this.filterGrids(null, $("#sidebar-filter")), this.$community.tinyscrollbar_update("relative")
                    },
                    newPlaylist: function(e) {
                        this.user.id > 0 ? t.trigger("lightbox:open", "createPlaylist") : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                            onLogin: function(e) {
                                t.trigger("lightbox:open", "createPlaylist")
                            }
                        }), t.trigger("guts:gatrack", "sidebar", "newPlaylistClick"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "newPlaylist"
                        })
                    },
                    openDropMenu: function() {
                        $("#sidebar-content").animate({
                            bottom: 163
                        }, 300, "swing"), $("#drop-targets").css({
                            bottom: 0
                        })
                    },
                    closeDropMenu: function() {
                        $("#sidebar-content").animate({
                            bottom: 0
                        }, 300, "swing"), $("#drop-targets").css({
                            bottom: -163
                        }), $("#drop-targets .drop-target.drop-active").removeClass("drop-active"), $("#drop-targets .drop-target.drop-invalid").removeClass("drop-invalid")
                    },
                    onSettingsMenu: function(e) {
                        this.settingsTooltip && (this.settingsTooltip.destroy(), delete this.settingsTooltip);
                        var n = $("#sidebar-settings"),
                            r = this.model.get("user");
                        this.sidebarMenuOptions = {
                            delay: 0,
                            notchSize: 6,
                            width: 170,
                            notch: "bottom",
                            notchX: 150,
                            x: -128,
                            y: "top",
                            adjustY: -5,
                            $attached: n,
                            tooltipClass: "menu sidebar-settings"
                        };
                        if (!this.settingsTooltip) {
                            var i = r.get("sessionPrivacy"),
                                s, o, u;
                            (i & 4) > 0 ? (s = "GO_ONLINE", o = 0, u = !1) : (i & 8) > 0 ? (s = "GO_OFFLINE", o = 4, u = !0) : (s = "GO_OFFLINE", o = 4, u = !0);
                            var a = {
                                model: r,
                                appModel: this.model,
                                items: [{
                                    localeKey: s,
                                    click: _.bind(function() {
                                        this.updatePrivacySetting(null, o)
                                    }, this)
                                }]
                            };
                            u && a.items.push({
                                title: (i == 0 ? '<i class="icon check icon-check-gray"></i> ' : "") + _.getString("SIDEBAR_EVERYONE"),
                                click: _.bind(function() {
                                    this.updatePrivacySetting(null, 0)
                                }, this)
                            }, {
                                title: ((i & 8) > 0 ? '<i class="icon check icon-check-gray"></i> ' : "") + _.getString("SIDEBAR_FRIENDS"),
                                click: _.bind(function() {
                                    this.updatePrivacySetting(null, 8)
                                }, this)
                            }), this.settingsTooltip = new t.Views.Tooltips.Menu(a)
                        }
                        this.sidebarMenuOptions.views = [this.settingsTooltip], this.sidebarMenuOptions.tooltipKey = "sidebar-settings";
                        if (this.settingsTooltip && this.settingsTooltip.openDfd && this.settingsTooltip.openDfd.state() === "pending") return;
                        $.hideJJMenu(), n.addClass("active"), this.sidebarMenuOptions.dfd = $.Deferred(), t.trigger("tooltip:open", this.sidebarMenuOptions), this.settingsTooltip.openDfd = this.sidebarMenuOptions.dfd, this.settingsTooltip.openDfd.always(function() {
                            n.removeClass("active")
                        }), t.trigger("guts:log", "sidebarSettingsClick"), t.trigger("guts:gatrack", "sidebar", "onSettingsClick")
                    },
                    onAddMenu: function(e) {
                        this.addMenuTooltip && (this.addMenuTooltip.destroy(), delete this.addMenuTooltip);
                        var n = $("#sidebar-add-menu"),
                            r = this.model.get("user");
                        this.sidebarMenuOptions = {
                            delay: 0,
                            notchSize: 6,
                            width: 170,
                            notch: "bottom",
                            notchX: 150,
                            x: -128,
                            y: "top",
                            adjustY: -5,
                            $attached: n,
                            tooltipClass: "menu sidebar-add-menu"
                        };
                        if (!this.addMenuTooltip) {
                            var i = function(e) {
                                    t.trigger("lightbox:open", "invite")
                                },
                                s = function(e) {
                                    t.trigger("lightbox:open", "createPlaylist")
                                },
                                o = {
                                    model: r,
                                    appModel: this.model,
                                    items: [{
                                        localeKey: "CREATE_PLAYLIST",
                                        click: s
                                    }, {
                                        localeKey: "INVITE_FRIENDS",
                                        click: i
                                    }]
                                };
                            this.addMenuTooltip = new t.Views.Tooltips.Menu(o)
                        }
                        this.sidebarMenuOptions.views = [this.addMenuTooltip], this.sidebarMenuOptions.tooltipKey = "sidebar-add-menu";
                        if (this.addMenuTooltip && this.addMenuTooltip.openDfd && this.addMenuTooltip.openDfd.state() === "pending") return;
                        $.hideJJMenu(), n.addClass("active"), this.sidebarMenuOptions.dfd = $.Deferred(), t.trigger("tooltip:open", this.sidebarMenuOptions), this.addMenuTooltip.openDfd = this.sidebarMenuOptions.dfd, this.addMenuTooltip.openDfd.always(function() {
                            n.removeClass("active")
                        }), t.trigger("guts:log", "sidebarAddMenuClick"), t.trigger("guts:gatrack", "sidebar", "onAddMenuClick")
                    },
                    updatePrivacySetting: function(e, n) {
                        var r = _.orEqual(n, 0);
                        this.user.savePrivacySettings(null, r), t.trigger("guts:log", "setPrivacySidebar", {
                            setPrivacySetting: r
                        }), t.trigger("guts:gatrack", "site", "setPrivacySidebar", r)
                    },
                    onUpdatePrivacySettings: function() {
                        this.isOnline = (this.user.get("sessionPrivacy") & 4) == 0, this.isOnline || (this.communityUsers.remove(this.extraUsers.models), this.extraUsers.reset([]), this.communityUsers.each(_.bind(function(e) {
                            e.set({
                                onlineStatus: 0,
                                nowPlayingSong: null
                            })
                        }, this))), this.sendFriendsToManatee(), t.trigger("tooltip:close");
                        var e = $("#sidebar-offline-msg");
                        this.isOnline ? (e.addClass("hide"), this.$community.css("bottom", "")) : (e.removeClass("hide"), this.$community.css("bottom", e.outerHeight() + 31 + "px")), this.$community.tinyscrollbar_update("relative")
                    },
                    closeOfflineMsg: function() {
                        $("#sidebar-offline-msg").addClass("hide"), this.$community.css("bottom", "")
                    },
                    filterGrids: function(e, n) {
                        if (this.model.get("size") == "small") return;
                        var r = [],
                            i = e ? $(e.currentTarget).val().toLowerCase() : n.val().toLowerCase(),
                            s = !1;
                        r.push(this.playlistsGrid, this.collabPlaylistsGrid, this.subscribedPlaylistsGrid, this.favoriteBroadcastsGrid, this.friendsGrid);
                        for (var o = 0, u = r.length; o < u; o++) r[o] && (r[o].filter(i), r[o].visibleCollection.length > 0 ? (s = !0, r[o].$el.prev().removeClass("hide")) : r[o].$el.prev().addClass("hide"));
                        if (e && e.which == _.keyboard.ENTER && i.length && $.trim(i) !== "" && !s) {
                            t.router.performSearch("", i);
                            return
                        }
                        this.$playlists.tinyscrollbar_update("relative"), this.$community.tinyscrollbar_update("relative")
                    },
                    onFilterSubmit: function(e) {
                        return !1
                    },
                    filterFocus: function(e) {
                        e.preventDefault(), e.stopPropagation();
                        var t = $(e.currentTarget);
                        t.find(".filter").focus()
                    },
                    onFilterFocus: function(e) {
                        var t = $(e.currentTarget);
                        t.siblings(".placeholder").hide()
                    },
                    onFilterBlur: function(e) {
                        var t = $(e.currentTarget);
                        t.val() || t.siblings(".placeholder").show()
                    },
                    handleAppResize: function() {
                        this.indexRendered && (this.$community.tinyscrollbar_update("relative"), this.$playlists.tinyscrollbar_update("relative"))
                    },
                    throttleAppResize: function() {},
                    toggleList: function(e) {
                        var t = $(e.currentTarget);
                        $(e.currentTarget).next(".collapsable").toggle(), t.children(".caret").toggleClass("point-right")
                    },
                    scrollbarFadeIn: function(e) {
                        var t = $(e.currentTarget);
                        t.find(".scrollbar").stop().fadeTo(200, 1)
                    },
                    scrollbarFadeOut: function(e) {
                        var t = $(e.currentTarget);
                        t.find(".scrollbar").stop().fadeTo(200, 0)
                    },
                    toggleFilter: function(e) {
                        var n = this.$sidebarFilter;
                        n.hasClass("hide") ? (this.$el.addClass("filter-open"), n.removeClass("hide"), $("#sidebar-filter").focus(), t.trigger("guts:gatrack", "sidebar", "showFilter"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "showFilter"
                        })) : (this.$el.removeClass("filter-open"), n.addClass("hide"), t.trigger("guts:gatrack", "sidebar", "hideFilter"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "hideFilter"
                        })), n.find("input").val("").keyup()
                    },
                    handleDropInit: function(e, t) {
                        return !0
                    },
                    handleDropStart: function(e, t) {
                        if (!t.draggedItems || t.draggedItems.length === 0) return !1;
                        e.currentTarget.updateDropOnDrag = _.bind(this.handleDragOver, this), $("#sidebar-collection").data("valid-drop", !! $("#sidebar-collection").within(e.clientX, e.clientY).length), $("#drop-targets").data("valid-drop", !! $("#drop-targets").within(e.clientX, e.clientY).length);
                        var n = ["song", "album", "artist", "playlist"],
                            r = ["song", "user", "artist", "playlist"];
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems), (t.draggedItems.length > 1 || _.indexOf(r, t.draggedItemsType) == -1) && $(".sidebar-item.drop-favorite").addClass("drop-invalid"), t.draggedItemsType !== "song" && $(".sidebar-item.drop-collection").addClass("drop-invalid"), $(".sidebar-item.no-drop").addClass("drop-invalid"), _.indexOf(n, t.draggedItemsType) == -1 && $(".sidebar-item.drop-facebook, .sidebar-item.drop-google, .sidebar-item.drop-twitter").addClass("drop-invalid")
                    },
                    handleDragOver: function(e, t) {
                        this.$el.find(".drop-active").removeClass("drop-active");
                        var n = $("#drop-targets .drop-target").within(e.clientX, e.clientY).eq(0),
                            r = $("#sidebar-collection .sidebar-item").within(e.clientX, e.clientY).eq(0);
                        n.length && !n.hasClass("drop-invalid") ? (n.addClass("drop-active"), $("#drop-targets").data("valid-drop", !0)) : $("#drop-targets").data("valid-drop", !1), r.length && !r.hasClass("drop-invalid") ? (r.addClass("drop-active"), $("#sidebar-collection").data("valid-drop", !0)) : $("#sidebar-collection").data("valid-drop", !1)
                    },
                    handleDrop: function(e, n) {
                        function o(e) {
                            return n.draggedItemsType === "song" ? e.get("SongID") : e.id
                        }
                        var r = $("div.sidebar-item").within(e.clientX, e.clientY).eq(0),
                            i = this.model.get("user"),
                            s;
                        if (!r || !r.length) return;
                        if (r.hasClass("drop-collection")) {
                            i.addSongsToLibrary(n.draggedItems);
                            return
                        }
                        if (r.hasClass("drop-favorite")) {
                            s = _.ucwords(n.draggedItemsType) + "s", i.favorite(s, o(n.draggedItems[0]));
                            return
                        }
                        var u = [];
                        _.forEach(n.draggedItems, function(e) {
                            u.push(o(e))
                        });
                        var a = {
                            type: n.draggedItemsType
                        };
                        u.length === 1 ? a.id = u[0] : a.ids = u, r.hasClass("drop-facebook") ? a.service = "facebook" : r.hasClass("drop-twitter") ? a.service = "twitter" : r.hasClass("drop-google-plus") ? a.service = "google" : a.service = "grooveshark", t.trigger("lightbox:open", "share", a)
                    },
                    onPlaylistScroll: function(e, t, n) {
                        n = n || {};
                        if (_.isUndefined(t) || _.isNull(t)) t = this.$playlists.position().top * -1;
                        n.overrideScrollPos = t, this.playlistsGrid && this.playlistsGrid.handleScroll(n), this.collabPlaylistsGrid && this.collabPlaylistsGrid.handleScroll(n)
                    },
                    chatDisconnected: function() {
                        t.Services.SWF.chatReconnecting ? $("#manatee-reconnect").addClass("disabled") : $("#manatee-reconnect").removeClass("disabled"), $("#chat-disconnected").removeClass("hide"), $("#chat-loading").addClass("hide"), $(".js-scrollable", "#sidebar-community").addClass("hide")
                    },
                    chatConnected: function() {
                        $("#chat-disconnected").addClass("hide"), $(".js-scrollable", "#sidebar-community").removeClass("hide"), $("#chat-loading").removeClass("hide"), this.sendFriendsToManatee()
                    },
                    onManateeReconnectClick: function() {
                        if (!t.Services.SWF.chatDisconnected) {
                            this.chatConnected();
                            return
                        }
                        $("#manatee-reconnect").addClass("disabled"), t.trigger("manatee:initReconnect")
                    },
                    debouncedOnMusicScroll: function() {
                        return _.debounce(_.bind(this.onPlaylistScroll, this), 10)
                    },
                    onCommunityScroll: function(e, t, n) {
                        n = n || {};
                        if (_.isUndefined(t) || _.isNull(t)) t = this.$community.position().top * -1;
                        n.overrideScrollPos = t, this.friendsGrid && this.friendsGrid.handleScroll(n)
                    },
                    onSectionResizeStart: function() {
                        this.playlistsHeight = this.$playlists.height(), this.communityHeight = this.$community.height(), this.communityTop = this.$community.offset().top
                    },
                    onSectionResize: function(e, t) {
                        var n = this.$sidebarCollection.outerHeight() + this.titleHeight - 1,
                            r = this.$el.height() - (this.$sidebarUtility.outerHeight() + this.titleHeight) + 1;
                        if (this.communityTop + t.deltaY < n) {
                            this.$community.css("top", n), this.$playlists.height(this.titleHeight);
                            return
                        }
                        if (this.communityTop + t.deltaY > r) {
                            this.$community.css("top", r), this.$playlists.height(r - n + this.titleHeight);
                            return
                        }
                        this.$playlists.height(this.playlistsHeight + t.deltaY), this.$community.css("top", this.communityTop + t.deltaY)
                    },
                    onSectionResizeEnd: function() {
                        this.$community.tinyscrollbar_update("relative"), this.$playlists.tinyscrollbar_update("relative"), t.trigger("guts:gatrack", "site", "sidebarClick", "sectionResizeHandle"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "sectionResizeHandle"
                        })
                    },
                    onSidebarPlaylistClick: function() {
                        t.trigger("guts:gatrack", "site", "sidebarClick", "onPlaylist"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "onPlaylist"
                        })
                    },
                    onSidebarBroadcastClick: function() {
                        t.trigger("guts:gatrack", "site", "sidebarClick", "onBroadcast"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "onBroadcast"
                        })
                    },
                    onSidebarUserClick: function() {
                        t.trigger("guts:gatrack", "site", "sidebarClick", "onUser"), t.trigger("guts:log", "sidebarClick", {
                            sidebarAction: "onUser"
                        })
                    },
                    onPlaylistsTitleClick: function() {},
                    debouncedOnCommunityScroll: function() {
                        return _.debounce(_.bind(this.onCommunityScroll, this), 10)
                    },
                    onContextChange: function() {
                        this.user.get("Context").type == "artist" ? this.close() : this.open()
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var n = !1,
                    r = function() {
                        t.Services.SWF.ready.then(function() {
                            t.Services.SWF.attemptAutoRestoreQueue()
                        })
                    },
                    i = function(n, r) {
                        if (this !== this.options.parent.currentPageView) return;
                        if (_.isFunction(n.toUrl)) {
                            var i = n.toUrl(r);
                            if (e.location.hash !== i) {
                                var s = location.hash.match(/(?:&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/);
                                s && s[1] && (i += s[0]), e.location.hash.replace(/src=\d/, "") !== i.replace(/src=\d/, "") && t.router.replaceHash(i)
                            }
                        }
                    };
                t.Views.Page = Backbone.View.extend({
                    el: document.getElementById("page"),
                    events: {
                        "click #page-nav a": "onPageNavClick"
                    },
                    initialize: function() {
                        this.pageEl = document.getElementById("page-inner"), this.hasRendered = !1
                    },
                    render: function() {
                        this.hasRendered = !0, this.currentPageView && this.currentPageView.render()
                    },
                    setPage: function(e, i) {
                        var s = $.Deferred(),
                            o = !n;
                        n = !0;
                        if (this.currentPageView && this.currentPageView.pageType === e && this.currentPageView.options && this.currentPageView.options.id === i.id && !i.notFound && this.currentPageView.options.params && !this.currentPageView.options.params.notFound) return i.fbComment ? s.resolve() : (t.trigger("change:page", e, i, this), this.$el.parent().scrollTop(0), this.currentPageView.updatePageParams(i), s.resolve());
                        var u = _.bind(function(n) {
                            var s = t.Views.Pages[_.ucwords(e)];
                            if (!s) {
                                console.log("page not really loaded", e);
                                return
                            }
                            if (this.lastDfd !== n) {
                                console.log("page changed during loading of another page"), o && r();
                                return
                            }
                            $(".decoupledCapital").hide(), this.removeCurrentPageView(), this.currentPageView = new s({
                                el: this.pageEl,
                                id: i.id,
                                parent: this,
                                model: new Backbone.Model({
                                    appModel: this.model
                                }),
                                params: i
                            }), o && this.currentPageView.wasFirstPage(), t.trigger("change:page", e, i, this), this.hasRendered && this.currentPageView.render(), n.resolve()
                        }, this, s),
                            a = t.Views.Pages[_.ucwords(e)];
                        this.lastDfd = s;
                        if (!a) {
                            var f = ["artistDashboard", "settings", "nowPlaying", "community", "promotion", "surveys", "tag"];
                            return _.contains(f, e) ? (requireDeferred(e + "Page").done(u), s) : (o && (n = !1), s.reject())
                        }
                        return u(), s.resolve()
                    },
                    removeCurrentPageView: function() {
                        this.currentPageView && (this.currentPageView.cleanupChildViews(), this.currentPageView.destroy(!1), this.$el.parent().scrollTop(0), this.currentPageView = null)
                    },
                    onPageNavClick: function(e) {
                        var n = $(e.target).attr("DATA-TRANSLATE-TEXT").toLowerCase();
                        t.trigger("guts:gatrack", "site", "pageNavClick", n), t.trigger("guts:log", "pageNavClick", {
                            buttonLabel: n
                        })
                    }
                }), t.Views.Pages.Base = Backbone.View.extend({
                    setTitle: function(e, n) {
                        t.trigger("setTitle", {
                            title: e,
                            prepend: n,
                            page: this
                        })
                    },
                    correctUrl: function(e, t) {
                        _.delay(_.bind(function() {
                            if (this !== this.options.parent.currentPageView) return;
                            e && (_.isFunction(e.getPathName) ? e.getPathName().then(_.bind(i, this, e, t)) : i.call(this, e, t))
                        }, this))
                    },
                    addAutocomplete: function() {
                        if (this !== this.options.parent.currentPageView) return
                    },
                    wasFirstPage: r,
                    blockPageChange: function() {
                        return !1
                    },
                    pageLoadFailed: function() {
                        t.router.notFound()
                    },
                    getPlayMenu: function(e, n) {
                        n = _.orEqual(n, {});
                        var r = [{
                            title: _.getString("PLAY_NOW"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, n.playContext)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play"
                        }, {
                            title: _.getString("PLAY_NEXT"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.NEXT, !1, n.playContext)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play_next"
                        }, {
                            title: _.getString("PLAY_LAST"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.LAST, !1, n.playContext)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play_last"
                        }, {
                            customClass: "separator"
                        }, {
                            title: _.getString("REPLACE_QUEUE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.REPLACE, !0, n.playContext)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_replace_playlist"
                        }, {
                            title: _.getString("START_RADIO"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:startRadioWithSongs", e)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_replace_playlist"
                        }];
                        return r
                    },
                    getAddMenu: function(e, n) {
                        n = _.orEqual(n, {});
                        var r = this.model.get("appModel").get("user"),
                            i = [{
                                title: _.getString("CONTEXT_ADD_TO_QUEUE"),
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.LAST, !1, n.playContext)
                                    },
                                    log: function() {}
                                },
                                customClass: "jj_menu_item_now_playing"
                            }];
                        allInLibrary = !0;
                        for (var s = 0; s < e.length; s++) {
                            var o = t.Models.Song.getCached(e[s]);
                            if (o && !o.get("fromLibrary")) {
                                allInLibrary = !1;
                                break
                            }
                        }
                        return allInLibrary ? i.push({
                            title: _.getString("REMOVE_FROM_COLLECTION"),
                            customClass: "jj_menu_item_remove_music",
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.removeSongsFromLibrary(e)
                                },
                                log: function() {}
                            }
                        }) : i.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.addSongsToLibrary(e)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_music"
                        }), e.length == 1 && (t.Models.Song.getCached(e[0]).get("isFavorite") ? i.push({
                            title: _.getString("CONTEXT_REMOVE_FROM_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.favorite("Songs", e[0])
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        }) : i.push({
                            title: _.getString("CONTEXT_ADD_TO_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.favorite("Songs", e[0])
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        })), i.push({
                            title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                            type: "sub",
                            src: r.getPlaylistsMenu(!1, !0, {
                                songs: e
                            }, function(t) {
                                t.addSongs(e, null, !0)
                            }),
                            customClass: "jj_menu_item_add_playlist jj_menu_item_more"
                        }), i
                    },
                    handleFavoriteButtonChange: function(e, t) {
                        var n = ["artist", "playlist", "user"],
                            r = $("a.favorite-page", this.el),
                            i = _.getItemType(e);
                        if (_.indexOf(n, i) == -1 || _.isUndefined(r)) return;
                        var s = this.model.get("appModel").get("user"),
                            o = this.model.get(i).get("isFavorite"),
                            u = r.hasClass("favorite-flat"),
                            a = "",
                            f = "";
                        if (i == "playlist") a = "SUBSCRIBED", f = "SUBSCRIBE";
                        else if (i == "artist" || i == "user") a = "FOLLOWING", f = "FOLLOW";
                        o ? (r.addClass("btn-success"), u ? (r.find(".icon").removeClass("icon-plus-small-l-gray-flat").addClass("icon-check-white-flat"), r.find(".favorite-label").attr("DATA-TRANSLATE-TEXT", a).text(_.getString(a))) : (r.find(".icon").removeClass("icon-plus-gray").addClass("icon-check-white-active"), r.find(".favorite-label").attr("DATA-TRANSLATE-TEXT", a).text(_.getString(a)))) : (r.removeClass("btn-success"), u ? (r.find(".icon").addClass("icon-plus-small-l-gray-flat").removeClass("icon-check-white-flat"), r.find(".favorite-label").attr("DATA-TRANSLATE-TEXT", f).text(_.getString(f))) : (r.find(".icon").addClass("icon-plus-gray").removeClass("icon-check-white-active"), r.find(".favorite-label").attr("DATA-TRANSLATE-TEXT", f).text(_.getString(f))))
                    },
                    updateLiveUserCount: function(e) {
                        var t = $("#live-user-count");
                        typeof e != "undefined" ? t.removeClass("hide").text(e) : t.addClass("hide")
                    }
                }), t.Views.Pages.ItemPage = t.Views.Pages.Base.extend({
                    commentsRendered: !1,
                    constructor: function() {
                        this._super.apply(this, ["constructor"].concat(_.toArray(arguments))), this.$el.on("click", ".column2-tab", _.bind(this.toggleCommentsActivity, this)), this.model.has("defaultSidebarTab") || this.model.set("defaultSidebarTab", "comments")
                    },
                    toggleCommentsActivity: function(e) {
                        var t = $(e.currentTarget),
                            n = $("#comments"),
                            r = $("#activity");
                        t.hasClass("show-comments") ? (r.addClass("hide"), n.removeClass("hide")) : (n.addClass("hide"), r.removeClass("hide")), t.addClass("active").siblings().removeClass("active")
                    },
                    showActivity: function() {
                        $("#comments").addClass("hide"), $("#activity").removeClass("hide"), $("#comments-tab").removeClass("active"), $("#activity-tab").addClass("active")
                    },
                    showComments: function() {
                        $("#activity").addClass("hide"), $("#comments").removeClass("hide"), $("#comments-tab").addClass("active"), $("#activity-tab").removeClass("active")
                    },
                    handleCommentSubpage: function() {
                        var e = null,
                            t = this.model.get("subpage"),
                            n = this.model.get("section");
                        if (t && t !== "profile") if (t.indexOf("comment") === 0) {
                            var r = t.split("/");
                            e = r[1], this.model.set({
                                section: "",
                                subpage: this.defaultSubpage
                            })
                        } else n === "comment" && (e = t, this.model.set({
                            subpage: this.defaultSubpage,
                            section: ""
                        }));
                        return e
                    },
                    loadComments: function(e, n, r) {
                        if (r) return this.highlightSingleComment(r, e, n);
                        var i;
                        n ? i = n.bind(this.renderComments, this) : i = _.bind(this.renderComments, this), n.push(t.Models.Comment.loadComments(this.pageType, e).done(i))
                    },
                    highlightSingleComment: function(e, n, r) {
                        r || (r = _.chainLoading());
                        var i = [],
                            s = _.bind(function() {
                                this.renderComments.apply(this, i), this.showComments()
                            }, this);
                        r.push(t.Models.Comment.loadComments(this.pageType, n).done(r.bind(function() {
                            i = i.concat(_.toArray(arguments))
                        }, this))), r.push(t.Models.Comment.get(e).done(r.bind(function(e) {
                            i.push(e), s()
                        }, this)).fail(r.bind(function() {
                            i.push(-1), s()
                        }, this)))
                    },
                    renderComments: function(e, n, r, i) {
                        if (this.destroyed || !this.indexRendered) return;
                        if (!e || !(e instanceof t.Models.Collections.Comments)) e = new t.Models.Collections.Comments([]);
                        if (i === -1) t.router.notFound();
                        else if (i && (i.get("TypeID") !== r || i.get("ItemID") !== n)) {
                            t.router.replaceHash(i.toUrl());
                            return
                        }
                        var s = this.model.get(this.pageType),
                            o = "",
                            u = this.model.get("appModel").get("user");
                        switch (r) {
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST:
                            o = s.escape("ArtistName");
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM:
                            o = s.escape("AlbumName");
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST:
                            o = s.escape("PlaylistName");
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.USER:
                            o = s.escape("Name");
                            break;
                        case t.Models.Comment.COMMENT_PAGE_TYPES.SONG:
                            o = s.escape("SongName")
                        }
                        var a = new t.Views.Comments({
                            el: $("#comments")[0],
                            collection: e,
                            itemID: n,
                            typeID: r,
                            model: this.model,
                            item: s,
                            itemName: o,
                            highlightComment: i,
                            commentStyleType: this.pageType == "song" ? "page" : "sidebar",
                            fromArtistID: u.get("Context").type == "user" ? 0 : u.get("Context").artist.get("ArtistID")
                        });
                        a && (this.childViews.push(a), a.render()), this.commentsRendered || this.modelBindings.push(this.model.get("appModel").on("change:user", _.bind(this.renderComments, this, e, n, r, null))), this.commentsRendered = !0
                    },
                    feedEventsRendered: !1,
                    handleFeedEventSubpage: function() {
                        var e = null,
                            t = this.model.get("subpage"),
                            n = this.model.get("section");
                        if (t && t !== "profile") if (t.indexOf("activity") === 0) {
                            var r = t.split("/");
                            e = r[1], e ? this.model.set({
                                subpage: "singleFeedEvent"
                            }) : this.model.set({
                                section: "",
                                subpage: this.defaultSubpage,
                                defaultSidebarTab: "activity"
                            })
                        } else n === "activity" && (e = t, this.model.set({
                            subpage: "",
                            section: "singleFeedEvent"
                        }));
                        else n === "activity" && this.model.set({
                            section: "",
                            subpage: this.defaultSubpage,
                            defaultSidebarTab: "activity"
                        });
                        return e
                    },
                    loadActivity: function(e, t) {
                        if (t) return this.highlightSingleFeedEvent(t, e);
                        var n;
                        e ? n = e.bind(this.renderActivity, this) : n = _.bind(this.renderActivity, this), e.push(this.model.get(this.pageType).getFeed().done(n))
                    },
                    highlightSingleFeedEvent: function(e, n) {
                        n || (n = _.chainLoading()), n.push(this.fetchTemplate("/shared/feedEventPage").done(n.bind(function(e) {
                            if (this.destroyed && this.model.get("section") === "singleFeedEvent") return;
                            this.$el.html(this.renderTemplate(e)), t.trigger("page:ready", this)
                        }, this))), n.push(t.Models.FeedEvent.get(e, this.pageType).done(n.bind(function(e) {
                            var n = new t.Views.Modules.SingleFeedEvent({
                                el: $("#feed-event-container"),
                                model: e,
                                $relatedContentEl: $("#event-related-content")
                            });
                            this.childViews.push(n), n.render().fail(function() {
                                t.router.notFound()
                            })
                        }, this)).fail(n.bind(function() {
                            t.router.notFound()
                        }, this)))
                    },
                    renderActivity: function(e, n, r) {
                        if (this.destroyed || !this.indexRendered) return;
                        if (!e || !(e instanceof t.Models.Collections.FeedEvents)) e = new t.Models.Collections.FeedEvents([]);
                        if (r !== -1) {
                            if (r && r.get("feedType") === "user" && r.get("UserID") !== this.model.get("userID")) {
                                t.router.replaceHash(r.toUrl());
                                return
                            }
                            if (r && r.get("feedType") === "artist" && r.get("ArtistID") !== this.model.get("artistID")) {
                                t.router.replaceHash(r.toUrl());
                                return
                            }
                        }
                        var i = new t.Views.ActivityFeed({
                            el: $("#activity")[0],
                            collection: e,
                            model: this.model.get(this.pageType),
                            highlightFeedEvent: r
                        });
                        i && (this.childViews.push(i), i.render()), this.feedEventsRendered || this.modelBindings.push(this.model.get("appModel").on("change:user", _.bind(this.renderActivity, this, e, null, null))), this.feedEventsRendered = !0
                    }
                })
            }(), function() {
                function i(e) {
                    switch (e._type) {
                    case "video":
                    case "record":
                    case "previewSong":
                    case "editBroadcast":
                    case "broadcastEnded":
                        return
                    }
                    var t = $("#lightbox-content"),
                        r = t.position(),
                        i = n.height() - (r ? r.top : 0);
                    t.css("max-height", i + "px");
                    if (t.length && t[0].scrollHeight < i) e._hasScrollbarEnhancedWidth && ($("#lightbox").css("width", ""), e._hasScrollbarEnhancedWidth = !1);
                    else if (!e._hasScrollbarEnhancedWidth && t.length) {
                        var s = t.width();
                        $("#lightbox").width(s + (t.width() - t[0].clientWidth)), e._hasScrollbarEnhancedWidth = !0
                    }
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {};
                var n = $("#page-wrapper"),
                    r = 0;
                t.Views.Lightbox = Backbone.View.extend({
                    el: document.getElementById("lightbox-outer"),
                    events: {
                        "click .close": "closeHandler",
                        "keydown form input": "enterSubmit"
                    },
                    initialize: function() {
                        this.$outer = $("#lightbox-outer"), this.$overlay = $("#lightbox-overlay"), this.$lightbox = $("#lightbox"), this.queue = [], this.currentLightbox = !1, this.isOpen = !1, this.model.set({
                            lightboxOpen: !1
                        }), t.on("lightbox:open", this.open, this), t.on("lightbox:close", this.close, this), t.on("queue:setSize", this.handleResize, this), $(document).on("keydown.lightbox", _.bind(function(e) {
                            e.which == _.keyboard.ESC && this.isOpen && this.currentLightbox._canClose && this.close()
                        }, this))
                    },
                    onDestroy: function() {
                        $(document).off(".lightbox")
                    },
                    handleResize: function() {
                        this.isOpen && i(this.currentLightbox)
                    },
                    render: function() {
                        this.isOpen ? (t.trigger("tooltip:close"), this.currentLightbox._canClose ? $("#lightbox-close", this.$el).removeClass("hide") : $("#lightbox-close", this.$el).addClass("hide"), $.browser.mozilla && _.toInt($.browser.version) < 6 ? $(".theme-component .flash object").each(function(e, t) {
                            t.style.visibility = "hidden"
                        }) : $(".theme-component .flash object").hide(), _.each($(".capital"), function(e, t) {
                            $("#" + $(e).attr("data-capital-id")).hide()
                        }), this.$outer.removeClass("player-visible"), this.$overlay.removeClass("player-visible"), this.currentLightbox._showPlayerControls && (this.$outer.addClass("player-visible"), this.$overlay.addClass("player-visible")), this.$overlay.show(), this.$lightbox.attr("class", "lightbox-" + this.currentLightbox._type), this.$el.show(), this.currentLightbox.render()) : ($.browser.mozilla && _.toInt($.browser.version) < 6 ? $(".theme-component .flash object").each(function(e, t) {
                            t.style.visibility = "visible"
                        }) : $(".theme-component .flash object").show(), _.each($(".capital"), function(e, t) {
                            $("#" + $(e).attr("data-capital-id")).show()
                        }), t.trigger("ad:updatePositions"), this.$overlay.hide(), this.$el.hide(), this.$lightbox.css("width", ""), i(this.currentLightbox))
                    },
                    open: function(n, r) {
                        var i = t.Services.GUTS && t.Services.GUTS.currentTest && t.Services.GUTS.currentTest.name == "paymentsPopup";
                        if (i && t.Services.GUTS.currentGroup == 1 && n == "payments") {
                            r = r || {};
                            var s = _.getCenteredCoordinates(600, 418),
                                o = "width=600,height=418,left=" + s[0] + ",top=" + s[1] + ",menubar=0,resizable=0,status=0,toolbar=0",
                                u = e.open("https://" + e.location.host + "/pay.php?" + $.param(r), "payGS", o),
                                a, f = function() {
                                    clearInterval(a), t.trigger("lightbox:close", "paymentsOpen");
                                    var e = t.Models.AuthUser.getCached(t.getLoggedInUserID());
                                    e.gotNewSubscription().done(function(e) {
                                        console.log("new sub", e)
                                    }).fail(function() {
                                        t.trigger("notification:add", {
                                            description: _.getString("REFRESH_SUB_ERROR_UNKNOWN"),
                                            type: "error"
                                        })
                                    })
                                };
                            t.trigger("lightbox:open", {
                                _type: "paymentsOpen",
                                _canClose: !1,
                                view: {
                                    header: "PAYMENT",
                                    message: "POPUP_PAYMENT_OPEN",
                                    buttonsLeft: [{
                                        label: "CANCEL",
                                        className: "cancel"
                                    }]
                                },
                                callbacks: {
                                    ".cancel": function() {
                                        u.close(), f()
                                    }
                                }
                            }), a = setInterval(function() {
                                u.closed && f()
                            }, 1e3);
                            return
                        }
                        if (e.gsProduction && e.gsProduction.LB_CSSURI) {
                            var l = _.isUndefined(e.dataURISupport) || dataURISupport ? gsProduction.LB_CSSURI : gsProduction.LB_CSS;
                            l && l.assetPath && $.getStylesheet(l.assetPath)
                        }
                        typeof n == "object" && (r = n, n = "generic"), r = _.orEqual(r, {});
                        var c = n == "generic" ? r._type : n;
                        if (this.isOpen && this.currentLightbox && c === this.currentLightbox._type) return;
                        var h = _.bind(function() {
                            var e = t.Views.Lightboxes[p];
                            if (!e) {
                                console.log("invalid lb type (in bind)");
                                return
                            }
                            var n = new e({
                                model: new Backbone.Model({
                                    appModel: this.model
                                }),
                                params: r
                            });
                            n._type = c;
                            for (var i = 0; i < this.queue.length; i++) if (c === this.queue[i]._type) {
                                this.queue[i].destroy(), this.queue[i] = n;
                                return
                            }
                            if (this.isOpen && this.currentLightbox) {
                                if (n._priority <= this.currentLightbox._priority) {
                                    var s = _.sortedIndex(this.queue, n, function(e) {
                                        return e._priority
                                    });
                                    this.queue.splice(s, 0, n);
                                    return
                                }
                                this.currentLightbox.suspend(), this.queue.push(this.currentLightbox)
                            }
                            this.currentLightbox = n, this.isOpen = !0, this.model.set({
                                lightboxOpen: !0
                            }), this.render(), t.trigger("lightbox:ready", this, this.currentLightbox)
                        }, this),
                            p = n.substr(0, 1).toUpperCase() + n.substr(1),
                            d = t.Views.Lightboxes[p];
                        if (!d) {
                            var v = ["claimArtist", "claimSongs", "editArtist", "editAlbum", "editSongs", "upload", "share", "suggestTags", "feedback"];
                            if (_.contains(v, n)) {
                                requireDeferred(n + "Lightbox").done(h);
                                return
                            }
                            console.log("invalid lb type", n);
                            return
                        }
                        h()
                    },
                    close: function(e) {
                        var n = e && _.isString(e) ? e : !1,
                            r = e && e instanceof t.Views.Lightboxes.Base ? e : !1;
                        if (n || r) {
                            var i = [],
                                s = 0,
                                o = this.queue.length,
                                u;
                            for (; s < o; s++) u = this.queue[s], u === r || u._type === n ? u.beforeClose() && u.destroy() : i.push(u);
                            this.queue = i
                        }
                        if (!this.currentLightbox || (n || r) && this.currentLightbox !== r && this.currentLightbox._type !== n) return;
                        if (!this.currentLightbox.beforeClose()) return;
                        this.currentLightbox.destroy(), t.trigger("lightbox:destroyed", this, this.currentLightbox), this.queue.length ? (this.currentLightbox = this.queue.pop(), this.currentLightbox.resume()) : (this.isOpen = !1, this.model.set({
                            lightboxOpen: !1
                        }), this.currentLightbox = !1), this.render()
                    },
                    closeHandler: function() {
                        this.close()
                    },
                    enterSubmit: function(e) {
                        if (e.keyCode == 13) {
                            var t = $(e.currentTarget),
                                n = t.parents("form");
                            if (!t.hasClass("no-submit")) return n.submit(), !1
                        }
                    }
                }, {
                    trackLightboxView: function(t) {
                        var n = "#!/lb/" + t;
                        return e._gaq && e._gaq.push ? (n = encodeURI(n), e._gaq.push(["_trackPageview", n]), !0) : !1
                    }
                }), t.Views.Lightboxes.Base = Backbone.View.extend({
                    templatePath: "lightbox",
                    tagName: "div",
                    className: "lbcontainer",
                    _priority: 0,
                    _canClose: !0,
                    _showPlayerControls: !1,
                    initialize: function() {
                        this.options.params = this.options.params || {}, _.defined(this.options.params._priority) && (this._priority = this.options.params._priority), _.defined(this.options.params._canClose) && (this._canClose = this.options.params._canClose), _.defined(this.options.params._showPlayerControls) && (this._showPlayerControls = this.options.params.showPlayerControls), this.$parent = $("#lightbox-inner"), this.viewReported = !1, this.suspended = !1
                    },
                    handleResize: function() {
                        i(this)
                    },
                    render: function() {
                        if (this.suspended || this.destroyed) return;
                        this.viewReported || (this.viewReported = t.Views.Lightbox.trackLightboxView(this._type)), $.contains(this.$parent[0], this.$el[0]) || this.$parent.append(this.$el)
                    },
                    onTemplate: function() {
                        this._canClose && $("#lightbox-close", this.$el).removeClass("hide"), this.handleResize(), $("#lightbox-content :input:visible:first").focus()
                    },
                    suspend: function() {
                        this.suspended = !0, this.$el.hide()
                    },
                    resume: function() {
                        this.suspended = !1, this.$el.show()
                    },
                    beforeClose: function() {
                        return !0
                    },
                    close: function() {
                        t.trigger("lightbox:close", this)
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Modules = r.Views.Modules || {}, r.Views.Modules.Base = Backbone.View.extend({
                    templatePath: "modules",
                    templateFile: "base",
                    tagName: "div",
                    className: "module grid-item",
                    cacheKey: "Base",
                    initialize: function(e) {
                        this.changeModelCached = {};
                        var t = {
                            module: this
                        };
                        e.grid && (this.grid = e.grid, this.grid.options && (this.grid.options.playContext && (t.playContext = this.grid.options.playContext), this.grid.options.addStreamType && (t.streamType = this.grid.options.addStreamType))), e.activeSong && (this.activeSong = !0), this.$el.data(t), this.addModelListeners(), this.$el.on("mouseleave", _.bind(function() {
                            this.$el.blur()
                        }, this)), this.options.addClass && this.$el.addClass(this.options.addClass);
                        var n = this.changeModelSelectors["&"];
                        _.isFunction(n) && n.call(this, 0, this.el)
                    },
                    addModelListeners: function() {
                        this.grid && this.grid.cid && (this.model.on(this.grid.cid + ":select", this.select, this), this.model.on(this.grid.cid + ":deselect", this.deselect, this)), this.model.on("change", this.handleModelChange, this)
                    },
                    removeModelListeners: function() {
                        this.model.off(null, null, this)
                    },
                    destroy: function() {
                        this.removeModelListeners(), this.$el.off("mouseleave"), this._super.apply(this, ["destroy"].concat(_.toArray(arguments)))
                    },
                    changeModelSelectors: {},
                    render: function() {
                        return this.model ? (this.renderDfd = $.Deferred(), r.Views.Modules[this.cacheKey].cachedTemplate ? (this.completeRender(r.Views.Modules[this.cacheKey].cachedTemplate), this.renderDfd.resolve().promise()) : (this.fetchTemplate(this.templateFile).always(_.bind(this.cacheAndCompleteRender, this)), this.renderDfd.promise())) : $.Deferred().resolve()
                    },
                    select: function() {
                        this.selected = !0, this.$el.addClass("active")
                    },
                    deselect: function() {
                        this.selected = !1, this.$el.removeClass("active")
                    },
                    changeModel: function(e, t) {
                        t = _.defaults(t || {}, {
                            selected: !1,
                            force: !1
                        });
                        var n = this.changeModelSelectors,
                            r;
                        if (this.model == e && !t.force) return;
                        this.model != e && (this.removeModelListeners(), this.model = e, this.addModelListeners()), this.selected && !t.selected ? this.deselect() : !this.selected && t.selected && this.select();
                        if (!this.renderDfd) {
                            this.render();
                            return
                        }
                        if (this.renderDfd.state() !== "resolved") return;
                        var i = 0;
                        for (r in n) n.hasOwnProperty(r) && (this.changeModelCached[r] || (r == "&" ? this.changeModelCached[r] = this.$el : this.changeModelCached[r] = this.$el.find(r)), i++, this.changeModelCached[r].each(_.bind(n[r], this)))
                    },
                    show: function() {
                        this.isHidden && (this.isHidden = !1, this.$el.show())
                    },
                    hide: function() {
                        this.isHidden = !0, this.$el.hide()
                    },
                    cacheAndCompleteRender: function(e) {
                        r.Views.Modules[this.cacheKey].cachedTemplate = e, this.completeRender(e), this.renderDfd.resolve(e), this.options.redrawUpdate && r.trigger("page:redrawUpdate"), this.trigger("rendered")
                    },
                    completeRender: function(e) {
                        this.$el.html(this.renderTemplate(_.bind(e, this)));
                        var t = this.grid && this.grid.options ? this.grid.options.excludeCells : !1;
                        if (t && t.length) for (var n = 0, r = t.length; n < r; n++) this.$el.find(".module-row-cell." + t[n]).remove()
                    },
                    acceptDrop: function(e) {
                        return !1
                    },
                    handleModelChange: function() {
                        var e = {
                            force: !0
                        };
                        this.grid && this.grid.selectedItems && (e.selected = this.grid.selectedItems.indexOf(this.model) !== -1), this.changeModel(this.model, e)
                    }
                }), r.Views.Modules.SongRow = r.Views.Modules.Base.extend({
                    className: "module module-row song grid-item",
                    cacheKey: "SongRow",
                    templateFile: "songRow",
                    events: {
                        "click .song-row-dropdown": "onDropDownGearClick",
                        "click .module-row-cell.artist a": "onArtistLinkClick",
                        "click .module-row-cell.album a": "onAlbumLinkClick",
                        "click i.song-link": "onSongLinkClick",
                        "click a.play": "onSongPlay",
                        "click a.song-row-favorite": "onSongFavorite",
                        "click a.song-row-add": "onSongAdded",
                        "click a.song-row-share": "onSongShared"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-favorite": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-add": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-dropdown": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-share": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-delete": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-heart-l-gray-flat").addClass("icon-heart-color-flat color-flat") : _.$one(t).removeClass("icon-heart-color-flat color-flat").addClass("icon-heart-l-gray-flat")
                        },
                        ".btn.song-row-add .icon": function(e, t) {
                            this.model.get("fromLibrary") ? _.$one(t).removeClass("icon-check-l-gray-flat").addClass("icon-check-color-flat color-flat") : _.$one(t).removeClass("icon-check-color-flat color-flat").addClass("icon-check-l-gray-flat")
                        },
                        ".song-link": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("SongName"))
                        },
                        ".artist a": function(e, t) {
                            _.$one(t).attr("href", this.model.toArtistUrl()).innerText(this.model.get("ArtistName"))
                        },
                        ".album a": function(e, t) {
                            _.$one(t).attr("href", this.model.toAlbumUrl()).innerText(this.model.get("AlbumName"))
                        },
                        ".track-num": function(e, t) {
                            _.$one(t).innerText(this.model.get("TrackNum") ? this.model.get("TrackNum") : "")
                        }
                    },
                    initialize: function() {
                        this.$el.data("songId", this.model.get("SongID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDropDownGearClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = {};
                        this.grid && this.grid.options && this.grid.options.playContext && (s.playContext = this.grid.options.playContext), t.jjmenu(e, i.getSingleItemContextMenu(s), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "option-context-menu",
                            keepState: t
                        }), r.trigger("guts:log", "OLdropdownClick", {
                            songIDs: n
                        })
                    },
                    onArtistLinkClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.closest(".grid-item").data("songId");
                        r.trigger("guts:log", "OLartistPageLoad", {
                            songID: n
                        })
                    },
                    onAlbumLinkClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.closest(".grid-item").data("songId");
                        r.trigger("guts:log", "OLalbumPageLoad", {
                            songID: n
                        })
                    },
                    onSongLinkClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId");
                        r.trigger("guts:log", "OLsongPageLoad", {
                            songID: n
                        })
                    },
                    onSongPlay: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId");
                        r.trigger("guts:log", "OLPlayClick", {
                            songID: n
                        })
                    },
                    onSongShared: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId");
                        r.trigger("guts:log", "OLShareClick", {
                            songIDs: n
                        })
                    },
                    onSongAdded: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId");
                        r.trigger("guts:log", "OLlibraryClick", {
                            songIDs: n
                        })
                    },
                    onSongFavorite: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId");
                        r.trigger("guts:log", "OLfavoriteClick", {
                            songID: n
                        })
                    }
                }), r.Views.Modules.SongRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row song tall grid-item",
                    cacheKey: "SongRowTall",
                    templateFile: "songRowTall",
                    events: {
                        "click .song-row-dropdown": "onDropDownGearClick",
                        "click .song-row-add": "onAddClick",
                        "click .metadata .artist": "onArtistLinkClick",
                        "click .metadata .album": "onAlbumLinkClick",
                        "click .metadata i.song-link": "onSongLinkClick",
                        "click .btn.play": "onSongPlay",
                        "click .song-row-favorite": "onSongFavorite",
                        "click .song-row-share": "onSongShared",
                        "click .upvote-btn": "onSongUpVoteClick",
                        "click .downvote-btn": "onSongDownVoteClick",
                        "click .approve": "onSongApproveClick",
                        "click .reject": "onSongRejectClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID")).data("calloutId", this.model.get("CalloutID")), this.activeSong ? _.$one(t).addClass("is-playing") : _.$one(t).removeClass("is-playing"), this.model.get("approvalStatus") > 0 ? this.$el.addClass("approved").removeClass("rejected") : this.model.get("approvalStatus") < 0 ? this.$el.addClass("rejected").removeClass("approved") : this.$el.removeClass("approved rejected"), this.model.idAttribute == "queueSongID" && this.$el.data("queueSongId", this.model.id)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))[(this.model.get("isCallout") ? "add" : "remove") + "Class"]("hide")
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("SongName"))
                        },
                        ".song-link": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))[(this.model.get("isCallout") ? "add" : "remove") + "Class"]("hide")
                        },
                        ".meta-inner": function(e, t) {
                            _.$one(t)[(this.model.get("isCallout") ? "add" : "remove") + "Class"]("hide")
                        },
                        ".row-actions.bc-actions": function(e, t) {
                            _.$one(t)[(this.model.get("isCallout") ? "add" : "remove") + "Class"]("hide")
                        },
                        ".btn.favorite": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-add": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-dropdown": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.song-row-share": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(this.activeSong ? 80 : 40))
                        },
                        ".btn.song-row-favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-heart-l-gray-flat").addClass("icon-heart-color-flat color-flat") : _.$one(t).removeClass("icon-heart-color-flat color-flat").addClass("icon-heart-l-gray-flat")
                        },
                        ".btn.song-row-add .icon": function(e, t) {
                            this.model.get("fromLibrary") ? _.$one(t).removeClass("icon-check-l-gray-flat").addClass("icon-check-color-flat color-flat") : _.$one(t).removeClass("icon-check-color-flat color-flat").addClass("icon-check-l-gray-flat")
                        },
                        "a.artist": function(e, t) {
                            _.$one(t).attr("href", this.model.toArtistUrl()).innerText(this.model.get("ArtistName"))
                        },
                        "a.album": function(e, t) {
                            _.$one(t).attr("href", this.model.toAlbumUrl()).innerText(this.model.get("AlbumName"))
                        },
                        ".suggested-by-text": function(e, t) {
                            var n = this.model.get("upVotes"),
                                i = n && n.length ? r.Models.User.getCached(n[0]) : null;
                            i ? _.$one(t).removeClass("hide") : _.$one(t).addClass("hide")
                        },
                        ".user-link": function(e, t) {
                            var n = this.model.get("upVotes"),
                                i = n && n.length ? r.Models.User.getCached(n[0]) : null;
                            i && _.$one(t).attr("href", i.toUrl()).html(i.escape("Name"))
                        },
                        ".row-number": function(e, t) {
                            _.$one(t).innerText(this.grid.collection.indexOf(this.model) + 1 + ".")
                        },
                        ".votes": function(e, t) {
                            _.$one(t)[(this.grid.options && this.grid.options.isBroadcastOwner && (this.activeSong || this.grid.options.isBroadcastHistory) ? "add" : "remove") + "Class"]("both-votes")
                        },
                        ".upvotes": function(e, t) {
                            var n = this.model.get("upVotes"),
                                r = this.model.get("downVotes"),
                                i = this.grid.options && this.grid.options.isBroadcastHistory,
                                s = (this.activeSong || i) && this.grid.options && this.grid.options.isBroadcastOwner;
                            n = _.isArray(n) ? n.length : _.toInt(n), r = _.isArray(r) ? r.length : _.toInt(r);
                            var o = n - r;
                            _.$one(t)[(s || o >= 0 ? "remove" : "add") + "Class"]("hide").html(s ? n : o)
                        },
                        ".downvotes": function(e, t) {
                            var n = this.model.get("upVotes"),
                                r = this.model.get("downVotes"),
                                i = this.grid.options && this.grid.options.isBroadcastHistory,
                                s = (this.activeSong || i) && this.grid.options && this.grid.options.isBroadcastOwner;
                            n = _.isArray(n) ? n.length : _.toInt(n), r = _.isArray(r) ? r.length : _.toInt(r);
                            var o = n - r;
                            _.$one(t)[(s || o < 0 ? "remove" : "add") + "Class"]("hide").html(s ? r : o)
                        },
                        ".upvote-btn": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID")), this.model.get("userVote") > 0 ? _.$one(t).addClass("btn-success") : _.$one(t).removeClass("btn-success")
                        },
                        ".downvote-btn": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID")), this.model.get("userVote") < 0 ? _.$one(t).addClass("btn-danger") : _.$one(t).removeClass("btn-danger")
                        },
                        ".approve": function(e, t) {
                            this.model.get("approvalStatus") > 0 ? _.$one(t).addClass("btn-success") : _.$one(t).removeClass("btn-success")
                        },
                        ".reject": function(e, t) {
                            this.model.get("approvalStatus") < 0 ? _.$one(t).addClass("btn-danger") : _.$one(t).removeClass("btn-danger")
                        },
                        ".row-actions, .meta-inner, .song-link": function(e, t) {
                            this.model.get("isCallout") ? _.$one(t).addClass("hide") : _.$one(t).removeClass("hide")
                        }
                    },
                    initialize: function() {
                        this.$el.data("songId", this.model.get("SongID")).data("calloutId", this.model.get("CalloutID")), this.activeSong ? this.$el.addClass("is-playing") : this.$el.removeClass("is-playing"), this.model.idAttribute == "queueSongID" && this.$el.data("queueSongId", this.model.id), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDropDownGearClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = {
                                activeSong: this.activeSong
                            };
                        return this.grid && this.grid.options && this.grid.options.playContext && (s.playContext = this.grid.options.playContext), i && t.jjmenu(e, i.getSingleItemContextMenu(s), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "option-context-menu",
                            keepState: t
                        }), r.trigger("guts:log", "OLdropdownClick", {
                            songIDs: n
                        }), !1
                    },
                    onAddClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = r.getLoggedInUserID(),
                            o = r.Models.User.getCached(s);
                        return this.grid && this.grid.onLibraryClick && this.grid.onLibraryClick(e), i.get("fromLibrary") ? o.removeSongsFromLibrary([n]) : o.addSongsToLibrary([n]), !1
                    },
                    onArtistLinkClick: function(e) {
                        this.grid && this.grid.onArtistLinkClick && this.grid.onArtistLinkClick(e)
                    },
                    onAlbumLinkClick: function(e) {
                        this.grid && this.grid.onAlbumLinkClick && this.grid.onArtistLinkClick(e)
                    },
                    onSongLinkClick: function(e) {
                        this.grid && this.grid.onSongLinkClick && this.grid.onSongLinkClick(e)
                    },
                    onSongPlay: function(e) {
                        this.grid && this.grid.onSongLinkClick && this.grid.onSongPlayClick(e);
                        var t = $(e.currentTarget),
                            n = t.data("songId");
                        r.trigger("guts:log", "OLPlayClick", {
                            songID: n
                        })
                    },
                    onSongShared: function(e) {
                        this.grid && this.grid.onSongShareClick && this.grid.onSongShareClick(e)
                    },
                    onSongFavorite: function(e) {
                        this.grid && this.grid.onSongFavoriteClick && this.grid.onSongFavoriteClick(e)
                    },
                    onSongUpVoteClick: function(e) {
                        var t = $(e.currentTarget),
                            r = n.model.get("player").get("currentQueue"),
                            i = r.get("currentBroadcast");
                        if (!i) return;
                        if (r.get("isBroadcasting")) return;
                        this.activeSong ? this.model.get("userVote") === 1 ? i.voteActiveSong(0) : i.voteActiveSong(1) : this.model.get("userVote") ? i.removeSuggestion(this.model) : i.suggestSong(this.model)
                    },
                    onSongDownVoteClick: function(e) {
                        var t = $(e.currentTarget),
                            r = n.model.get("player").get("currentQueue"),
                            i = r.get("currentBroadcast");
                        if (!i) return;
                        if (r.get("isBroadcasting")) return;
                        this.activeSong && (this.model.get("userVote") === -1 ? i.voteActiveSong(0) : i.voteActiveSong(-1))
                    },
                    onSongApproveClick: function() {
                        var e = n.model.get("player").get("currentQueue"),
                            t = e.get("currentBroadcast");
                        if (!t) return;
                        e.get("isBroadcasting") && (this.model.set("approvalStatus", 1), t.approveSuggestedSong(this.model))
                    },
                    onSongRejectClick: function() {
                        var e = n.model.get("player").get("currentQueue"),
                            t = e.get("currentBroadcast");
                        if (!t) return;
                        e.get("isBroadcasting") && (this.model.set("approvalStatus", -1), t.rejectSuggestedSong(this.model))
                    }
                }), r.Views.Modules.SongCell = r.Views.Modules.Base.extend({
                    className: "module module-cell song block grid-item",
                    cacheKey: "SongCell",
                    templateFile: "songCell",
                    events: {
                        "click .song-cell-dropdown": "onDropDownGearClick",
                        "click .song-cell-add": "onAddClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".song-link": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".artist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toArtistUrl()).innerText(this.model.get("ArtistName"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("SongName"))
                        },
                        ".btn.song-cell-dropdown": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data({
                            songId: this.model.get("SongID"),
                            tooltipCacheKey: "songMini"
                        }), e.grid && e.grid.options && (e.grid.options.smallGrid ? this.$el.addClass("small") : e.grid.options.mediumGrid && this.$el.addClass("medium")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDropDownGearClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = {};
                        return this.grid && this.grid.options && this.grid.options.playContext && (s.playContext = this.grid.options.playContext), i && t.jjmenu(e, i.getSingleItemContextMenu(s), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "option-context-menu",
                            keepState: t
                        }), !1
                    },
                    onAddClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = r.getLoggedInUserID(),
                            o = r.Models.User.getCached(s);
                        return i.get("fromLibrary") ? o.removeSongsFromLibrary([n]) : o.addSongsToLibrary([n]), !1
                    }
                }), r.Views.Modules.SongProfileCard = r.Views.Modules.Base.extend({
                    className: "module module-profile-card song grid-item",
                    cacheKey: "SongProfileCard",
                    templateFile: "songProfileCard",
                    events: {
                        "click .play-song-more-options": "onPlayMoreOptions"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".song-link": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID")).attr("title", this.model.get("SongName")).innerText(this.model.get("SongName"))
                        },
                        ".byline": function(e, t) {
                            _.$one(t).html(_.getString("SONG_BYLINE", {
                                artist: this.model.get("Artists").at(0).getAnchorTag(),
                                album: this.model.get("Albums").at(0).getAnchorTag()
                            }))
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".btn.play-song-more-options": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        }
                    },
                    initialize: function() {
                        this.$el.data("songId", this.model.get("SongID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onPlayMoreOptions: function(e) {
                        var t = $(e.currentTarget),
                            n = r.Views.Pages.Base.prototype.getPlayMenu,
                            i = new r.Models.PlayContext;
                        return i.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), t.jjmenu(e, n([this.model.id], {
                            playContext: i
                        }), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        }), !1
                    }
                }), r.Views.Modules.ArtistDashboardSongCell = r.Views.Modules.Base.extend({
                    className: "module module-row song tall grid-item dashboard-list",
                    cacheKey: "ArtistDashboardSongCell",
                    templateFile: "artistDashboardSongCell",
                    events: {},
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).text(this.model.get("SongName"))
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".song-link": function(e, t) {
                            _.$one(t).data("songId", this.model.get("SongID"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(40))
                        },
                        ".column-stat": function(e, t) {
                            this.grid.options.selectedStatColumn === e ? _.$one(t).addClass("selected") : _.$one(t).removeClass("selected")
                        },
                        ".column-stat .num": function(e, t) {
                            _.$one(t).text(this.model.get("statsForDashboardColumns")[e])
                        },
                        "a.album": function(e, t) {
                            _.$one(t).attr("href", this.model.toAlbumUrl()).innerText(this.model.get("AlbumName"))
                        }
                    },
                    initialize: function() {
                        this.$el.data("songId", this.model.get("SongID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.grid && this.grid.options.digest && this.$el.addClass("digest")
                    }
                }), r.Views.Modules.AlbumCellVertical = r.Views.Modules.Base.extend({
                    className: "module module-cell album block grid-item",
                    cacheKey: "AlbumCellVertical",
                    templateFile: "albumCellVertical",
                    events: {
                        "click .album-cell-dropdown": "onDropDownGearClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        },
                        ".play": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        },
                        ".album-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("AlbumName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(142))
                        },
                        ".btn.album-cell-share": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        },
                        ".btn.album-cell-dropdown": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("albumId", this.model.get("AlbumID")), e.grid && e.grid.options && (e.grid.options.smallGrid ? this.$el.addClass("small") : e.grid.options.mediumGrid && this.$el.addClass("medium")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDropDownGearClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("albumId"),
                            i = r.Models.Album.getCached(n);
                        return i && t.jjmenu(e, i.getSingleItemContextMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "option-context-menu",
                            keepState: t
                        }), !1
                    }
                }), r.Views.Modules.AlbumRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row tall album grid-item",
                    cacheKey: "AlbumRowTall",
                    templateFile: "albumRowTall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        },
                        ".album-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("AlbumName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(40))
                        },
                        ".artist-link": function(e, t) {
                            _.$one(t).innerText(this.model.get("ArtistName")).attr("href", this.model.toArtistUrl())
                        }
                    },
                    initialize: function() {
                        this.$el.data("albumId", this.model.get("AlbumID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.ArtistAlbumRow = r.Views.Modules.Base.extend({
                    className: "module module-nested artist-album grid-item",
                    cacheKey: "ArtistAlbumRow",
                    templateFile: "artistAlbumRow",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            var n = _.$one(t).data("albumId") > 0,
                                i = this.model.get("AlbumID") > 0;
                            _.$one(t).data("albumId", this.model.get("AlbumID")), this.model._gridSelectedItems || (this.model._gridSelectedItems = {}), this.model._gridSelectedItems[this.grid.cid] || (this.model._gridSelectedItems[this.grid.cid] = new Backbone.Collection([]));
                            if (!this.songGrid || n !== i) this.makeChildGrid();
                            else {
                                var s = this.model.get("songs");
                                s && this.songGrid.collection.reset(s.models), this.songGrid.options.playContext = new r.Models.PlayContext(this.model), _.defer(_.bind(this.fixSelection, this))
                            }
                            this.$el.height(this.constructor.estimateSize(this.model))
                        },
                        ".album-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".album-title": function(e, t) {
                            _.$one(t).innerText(this.model.get("AlbumName"))
                        },
                        ".album-year": function(e, t) {
                            _.$one(t).innerText(this.model.get("Year"))
                        },
                        ".album-img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(142))
                        }
                    },
                    initialize: function() {
                        this.$el.data("albumId", this.model.get("AlbumID")), this.size = this.constructor.estimateSize(this.model), this.$el.height(this.size), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    destroy: function() {
                        this.songGrid && this.songGrid.off("resized", null, this), this._super.apply(this, ["destroy"].concat(_.toArray(arguments)))
                    },
                    completeRender: function(e) {
                        this._super.apply(this, ["completeRender"].concat(_.toArray(arguments))), this.makeChildGrid()
                    },
                    makeChildGrid: function() {
                        this.songGrid && (this.songGrid.selectedItems.off("add remove reset", null, this), this.songGrid.off("resized", null, this), this.songGrid.destroy(!1));
                        var e = this.model.get("songs"),
                            t = this.model.get("AlbumID"),
                            n = new r.Models.Collections.Songs(e ? e.models : []);
                        n.comparator = t > 0 ? _.getModelSort("TrackNum", !0) : _.getModelSort("Popularity"), this.songGrid = new r.Views.SongGrid({
                            el: this.$el.find(".song-grid")[0],
                            collection: n,
                            columns: t > 0 ? r.Views.SongGrid.columnsNoAlbumArtist : r.Views.SongGrid.columnsNoArtistTrack,
                            excludeCells: t > 0 ? ["artist", "album"] : ["artist", "track-num"],
                            playContext: new r.Models.PlayContext(this.model),
                            header: !1,
                            dontDeselectFor: [this.grid.$el.parent()[0]],
                            parentGrid: this.grid,
                            parentGridModule: this
                        }), _.defer(_.bind(this.fixSelection, this)), this.songGrid.on("resized", this.childResized, this), this.songGrid.render(), this.childViews = [this.songGrid]
                    },
                    fixSelection: function() {
                        this.songGrid.selectedItems.off("add remove reset", null, this);
                        var e = this.model._gridSelectedItems[this.grid.cid];
                        e ? this.songGrid.selectedItems.reset(e.models) : this.songGrid.selectedItems.reset([]), this.songGrid.selectedItems.on("add remove reset", function() {
                            this.model._gridSelectedItems[this.grid.cid].reset(this.songGrid.selectedItems.models)
                        }, this)
                    },
                    childResized: function() {
                        var e = Math.max(163, this.songGrid.$el.height() + 45);
                        this.size != e && (this.size = e, this.$el.height(e), this.trigger("resized"))
                    }
                }, {
                    estimateSize: function(e) {
                        var t = e.get("songs");
                        return Math.max(163, t ? t.length * 31 + 45 : 0)
                    }
                }), r.Views.Modules.AlbumProfileCard = r.Views.Modules.Base.extend({
                    className: "module module-profile-card album grid-item",
                    cacheKey: "AlbumProfileCard",
                    templateFile: "albumProfileCard",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            this.pageNameData = this.model.get("pageNameData") || {}, _.$one(t).data("album", this.model)
                        },
                        ".album-name a": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("AlbumName"))
                        },
                        ".btn.favorite": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).addClass("btn-success") : _.$one(t).removeClass("btn-success")
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        },
                        ".btn.favorite .favorite-label": function(e, t) {
                            this.changeFavoriteLabel(e, t)
                        },
                        ".tags": function(e, t) {
                            this.model.get("Tags") && this.fetchTemplate("/shared/genreTags").done(_.bind(function(e) {
                                var n = _.clone(this.options);
                                n.tags = this.model.get("Tags"), _.$one(t).html(this.renderTemplate(e, n.tags))
                            }, this))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("album", this.model).attr("id", "album-" + this.model.get("AlbumID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    changeFavoriteLabel: function(e, t) {
                        this.model.get("isFavorite") ? _.$one(t).attr("data-translate-text", "FOLLOWING").text(_.getString("FOLLOWING")) : _.$one(t).attr("data-translate-text", "FOLLOW").text(_.getString("FOLLOW"))
                    }
                }), r.Views.Modules.PromotionAlbumCell = r.Views.Modules.Base.extend({
                    className: "module module-cell promotionAlbum song grid-item",
                    cacheKey: "PromotionAlbumCell",
                    templateFile: "promotionAlbumCell",
                    events: {},
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        },
                        ".album-link": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("AlbumID"))
                        },
                        ".artist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.get("artistURL")).innerText(this.model.get("ArtistName"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("AlbumName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.get("albumImage"))
                        }
                    },
                    initialize: function() {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.UserRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row user tall grid-item",
                    cacheKey: "UserRowTall",
                    templateFile: "userRowTall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            this.isArtist = this.artistBroadcast && this.artistBroadcast.get("ArtistID") === this.model.get("contextArtistID");
                            if (this.isArtist) {
                                var n = r.Models.Artist.getCached(this.artistBroadcast.get("ArtistID"));
                                _.$one(t).data({
                                    artistId: n.get("ArtistID"),
                                    userId: null
                                }), this.useModel = n || this.model
                            } else _.$one(t).data({
                                artistId: null,
                                userId: this.model.get("UserID")
                            }), this.useModel = this.model
                        },
                        ".title": function(e, t) {
                            this.isArtist ? _.$one(t).attr("href", this.useModel.toUrl()).innerText(this.useModel.get("ArtistName")) : _.$one(t).attr("href", this.useModel.toUrl()).innerText(this.useModel.get("Name"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.useModel.getImageURL(40))
                        },
                        ".btn.favorite": function(e, t) {
                            this.isArtist ? _.$one(t).data({
                                artistId: this.useModel.get("ArtistID"),
                                userId: null
                            }) : _.$one(t).data({
                                artistId: null,
                                userId: this.useModel.get("UserID")
                            }), _.$one(t)[this.useModel.get("isFavorite") ? "addClass" : "removeClass"]("btn-success")
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.useModel.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        },
                        ".btn.favorite .favorite-label": function(e, t) {
                            this.changeFavoriteLabel(e, t)
                        },
                        ".row-actions.secondary": function(e, t) {
                            _.$one(t)[this.model.get("UserID") != r.getLoggedInUserID() ? "removeClass" : "addClass"]("hide")
                        }
                    },
                    events: {
                        "click .user-broadcast-options": "onBroadcastOptionsClick",
                        "click .bc-give-ownership": "onGiveOwnershipClick"
                    },
                    initialize: function(e) {
                        e && e.endBroadcast && (this.endBroadcastOnTransfer = e.endBroadcast);
                        var t;
                        this.options.grid && this.options.grid.options.broadcast && this.options.grid.options.broadcast.get("ArtistID") && (this.artistBroadcast = this.options.grid.options.broadcast, t = r.Models.Artist.getCached(this.artistBroadcast.get("ArtistID"))), this.useModel = t || this.model, this.changeModelSelectors["&"].call(this, 0, this.el), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)));
                        if (this.artistBroadcast && this.artistBroadcast.get("ArtistID") === this.model.get("contextArtistID")) {
                            var n = this,
                                i = function() {
                                    n.off("rendered", i), _.defer(function() {
                                        n.handleModelChange()
                                    })
                                };
                            this.on("rendered", i)
                        }
                    },
                    addModelListeners: function() {
                        this.useModel && this.useModel.on("change", this.handleModelChange, this), this.grid && this.grid.cid && (this.model.on(this.grid.cid + ":select", this.select, this), this.model.on(this.grid.cid + ":deselect", this.deselect, this)), this.model.on("change", this.handleModelChange, this)
                    },
                    removeModelListeners: function() {
                        this.useModel && this.useModel.off(null, null, this), this.model.off(null, null, this)
                    },
                    changeFavoriteLabel: function(e, t) {
                        var n = this.useModel || this.model;
                        n.get("isFavorite") ? _.$one(t).attr("data-translate-text", "FOLLOWING").text(_.getString("FOLLOWING")) : _.$one(t).attr("data-translate-text", "FOLLOW").text(_.getString("FOLLOW"))
                    },
                    onBroadcastOptionsClick: function(e) {
                        var t = $(e.currentTarget),
                            i = r.Models.User.getCached(t.data("userId")),
                            s = n.model.get("player").get("currentQueue"),
                            o = s ? s.get("currentBroadcast") : null;
                        o && t.jjmenu(e, i.getBroadcastOptionMenu(o, this.endBroadcastOnTransfer), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            keepState: t
                        })
                    },
                    onGiveOwnershipClick: function() {
                        function t() {
                            r.trigger("lightbox:close", "broadcastListeners")
                        }
                        var e = this.options.grid.options.broadcast;
                        r.trigger("lightbox:open", "broadcastTransferOwnership", {
                            user: this.model,
                            broadcast: e,
                            endBroadcast: this.endBroadcastOnTransfer,
                            onSuccess: t
                        })
                    }
                }), r.Views.Modules.SidebarUser = r.Views.Modules.Base.extend({
                    className: "sidebar-user grid-item",
                    cacheKey: "SidebarUser",
                    templateFile: "sidebarUser",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            var n = this.model.attributes.currentBroadcastID,
                                i = _.$one(t).data({
                                    userId: this.model.id,
                                    broadcastId: n
                                }),
                                s = ["now-playing", "user-offline", "user-online", "broadcast-owner", "broadcast-listener", "show-broadcast-tooltip", "show-user-tooltip", "tall"],
                                o = r.Views.Modules.SidebarUser.getClassesToAdd(this.model, this.options.grid);
                            i.removeClass(s.join(" ")).addClass(o.join(" ")), this.model.attributes.onlineStatus ? this.nowPlaying = this.model.attributes.nowPlayingSong : this.nowPlaying = null, this.trigger("resized")
                        },
                        ".song-link": function(e, t) {
                            this.nowPlaying && _.$one(t).data("songId", this.nowPlaying.get("SongID"))
                        },
                        ".user-song-name": function(e, t) {
                            this.nowPlaying && _.$one(t).innerText(this.nowPlaying.get("SongName"))
                        },
                        ".user-artist-name": function(e, t) {
                            this.nowPlaying && _.$one(t).innerText(this.nowPlaying.get("ArtistName"))
                        },
                        ".play": function(e, t) {
                            this.nowPlaying && _.$one(t).data("songId", this.nowPlaying.get("SongID"))
                        },
                        ".user-name": function(e, t) {
                            this.model.attributes.isOwnerOfCurrentBroadcast && this.nowPlaying ? _.$one(t).innerText(this.model.get("currentBroadcastName")) : _.$one(t).innerText(this.model.get("Name"))
                        },
                        ".title": function(e, t) {
                            this.model.attributes.isOwnerOfCurrentBroadcast && this.nowPlaying ? _.$one(t).attr("href", this.model.toUrl("broadcast")).data("broadcastId", this.model.attributes.currentBroadcastID) : _.$one(t).attr("href", this.model.toUrl()).data("userId", this.model.id)
                        },
                        ".user-img-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).data("userId", this.model.id)
                        },
                        ".user-img": function(e, t) {
                            var n;
                            this.model.attributes.isOwnerOfCurrentBroadcast && this.model.attributes.currentBroadcastPicture ? n = r.Models.Broadcast.getBroadcastImageURL(this.model.attributes.currentBroadcastPicture, 30) : n = this.model.getImageURL(30), _.$one(t).attr("src", n).data("userId", this.model.get("UserID"))
                        },
                        ".suggest-song": function(e, t) {
                            _.$one(t)[this.nowPlaying ? "addClass" : "removeClass"]("hide")
                        },
                        ".icon.station": function(e, t) {
                            var n = this.model.attributes.isOwnerOfCurrentBroadcast && this.nowPlaying ? "removeClass" : "addClass";
                            _.$one(t)[n]("hide")
                        },
                        ".bc-user-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).data("userId", this.model.id)
                        },
                        ".bc-user-name": function(e, t) {
                            _.$one(t).innerText(this.model.get("Name"))
                        },
                        ".bc-invite": function(e, t) {
                            if (!this.model.attributes.isFollower) {
                                _.$one(t).addClass("hide");
                                return
                            }
                            _.$one(t).removeClass("hide"), this.model.attributes.canBroadcastInvite && !this.model.attributes.canBroadcastInvite.val ? _.$one(t).addClass("disabled") : _.$one(t).removeClass("disabled");
                            var n = this.model.attributes.currentBroadcastID && !this.model.attributes.isOwnerOfCurrentBroadcast;
                            n ? _.$one(t).addClass("btn-small") : _.$one(t).removeClass("btn-small"), _.$one(t).data("userId", this.model.attributes.UserID)
                        }
                    },
                    initialize: function(e) {
                        this.$el.data({
                            tooltipCacheKey: "sidebarUser"
                        }), this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.changeModelSelectors["&"].call(this, 0, this.el)
                    },
                    acceptDrop: function(e) {
                        return e.draggedItemsType == "song" && e.draggedItems[0].get("isCallout") ? !1 : (r.trigger("lightbox:open", "share", {
                            service: "grooveshark",
                            serviceLock: !0,
                            toUserID: this.model.get("UserID"),
                            type: e.draggedItemsType,
                            id: e.draggedItems[0].get(_.ucwords(e.draggedItemsType) + "ID")
                        }), !0)
                    }
                }, {
                    getClassesToAdd: function(e, t) {
                        var n = e.attributes.nowPlayingSong,
                            r = e.attributes.currentBroadcastID,
                            i = e.attributes.isOwnerOfCurrentBroadcast,
                            s = r && !i,
                            o = [],
                            u = !0;
                        if (e.attributes.currentBroadcastID && e.attributes.currentBroadcastOwner) {
                            var a = e.attributes.currentBroadcastOwner;
                            a && (n = a.attributes.nowPlayingSong, a.attributes.currentBroadcastID != r && (s = !1))
                        }
                        return e.get("onlineStatus") ? o.push("user-online") : o.push("user-offline"), n && (i ? (u = !1, o.push("broadcast-owner", "show-broadcast-tooltip", "tall")) : s ? o.push("broadcast-listener") : o.push("now-playing")), u && o.push("show-user-tooltip"), o
                    },
                    estimateSize: function(e, t) {
                        var n = r.Views.Modules.SidebarUser.getClassesToAdd(e, t);
                        return _.indexOf(n, "broadcast-listener") !== -1 ? 29 : _.indexOf(n, "broadcast-owner") !== -1 ? 61 : 46
                    }
                }), r.Views.Modules.SuggestedUserRowTall = r.Views.Modules.UserRowTall.extend({
                    className: "module module-row user tall suggested",
                    cacheKey: "SuggestedUserRowTall",
                    templateFile: "suggestedUserRowTall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("userId", this.model.get("UserID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("Name")).data("userId", this.model.get("UserID"))
                        },
                        ".img-container": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(40))
                        },
                        ".mutual-friends": function(e, t) {
                            this.changeMutualFriendCount(_.$one(t))
                        },
                        ".favorite": function(e, t) {
                            _.$one(t).data("userId", this.model.get("UserID")), this.changeFavoriteLabel(e, t)
                        },
                        ".success": function(e, t) {
                            _.$one(t).data("userId", this.model.get("UserID")), this.changeFavoriteLabel(e, t)
                        },
                        ".remove-suggestion": function(e, t) {
                            _.$one(t).data("userId", this.model.get("UserID"))
                        }
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(arguments))
                    },
                    changeMutualFriendCount: function(e) {
                        var t = _.toInt(this.model.get("SimilarFriendsCount"));
                        t ? (e.removeClass("hide"), t > 1 ? e.find(".count").text(_.getString("MUTUAL_FRIENDS_PLURAL", {
                            count: t
                        })) : e.find(".count").text(_.getString("MUTUAL_FRIENDS_SINGLE"))) : e.addClass("hide")
                    },
                    changeFavoriteLabel: function(e, t) {
                        this.model.get("isFavorite") ? _.$one(t).attr("data-translate-text", "FOLLOWING").text(_.getString("FOLLOWING")).addClass("success").removeClass("favorite") : _.$one(t).attr("data-translate-text", "FOLLOW").text(_.getString("FOLLOW")).removeClass("success").addClass("favorite")
                    }
                }), r.Views.Modules.ArtistDashboardTopFanCell = r.Views.Modules.Base.extend({
                    className: "module module-row user tall grid-item dashboard-list digest",
                    cacheKey: "ArtistDashboardTopFanCell",
                    templateFile: "artistDashboardTopFanCell",
                    events: {},
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("userId", this.model.get("UserID"))
                        },
                        ".user-name": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("Name"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(40))
                        }
                    },
                    initialize: function() {
                        this.$el.data("userId", this.model.get("UserID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.ArtistCellVertical = r.Views.Modules.Base.extend({
                    className: "module module-cell artist grid-item",
                    cacheKey: "ArtistCellVertical",
                    templateFile: "artistCellVertical",
                    events: {
                        "click .artist-cell-dropdown": "onDropDownGearClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("artistId", this.model.get("ArtistID"))
                        },
                        ".artist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("ArtistName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        },
                        ".btn.artist-cell-follow": function(e, t) {
                            _.$one(t).data("artistId", this.model.get("ArtistID"))
                        },
                        ".btn.artist-cell-dropdown": function(e, t) {
                            _.$one(t).data("artistId", this.model.get("ArtistID"))
                        },
                        ".btn.artist-cell-share": function(e, t) {
                            _.$one(t).data("artistId", this.model.get("ArtistID"))
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("artist", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDropDownGearClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("artistId"),
                            i = r.Models.Artist.getCached(n);
                        return !1
                    }
                }), r.Views.Modules.ArtistRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row tall artist grid-item",
                    cacheKey: "ArtistRowTall",
                    templateFile: "artistRowTall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("artistId", this.model.get("ArtistID"))
                        },
                        ".artist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".btn.favorite": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).addClass("btn-success") : _.$one(t).removeClass("btn-success"), _.$one(t).data("artistId", this.model.get("ArtistID"))
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        },
                        ".btn.favorite .favorite-label": function(e, t) {
                            this.changeFavoriteLabel(e, t)
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("ArtistName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(40))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("artist", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    changeFavoriteLabel: function(e, t) {
                        this.model.get("isFavorite") ? _.$one(t).attr("data-translate-text", "FOLLOWING").text(_.getString("FOLLOWING")) : _.$one(t).attr("data-translate-text", "FOLLOW").text(_.getString("FOLLOW"))
                    }
                }), r.Views.Modules.ArtistProfileCard = r.Views.Modules.Base.extend({
                    className: "module module-profile-card artist grid-item",
                    cacheKey: "ArtistProfileCard",
                    templateFile: "artistProfileCard",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            this.pageNameData = this.model.get("pageNameData") || {}, _.$one(t).data("artist", this.model)
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        },
                        ".artist-name a": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("ArtistName"))
                        },
                        ".btn.favorite": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).addClass("btn-success") : _.$one(t).removeClass("btn-success")
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        },
                        ".btn.favorite .favorite-label": function(e, t) {
                            this.changeFavoriteLabel(e, t)
                        },
                        ".metadata": function(e, t) {
                            _.$one(t)[_.isUndefined(this.pageNameData.FavoriteCount) ? "addClass" : "removeClass"]("hide")
                        },
                        ".metadata-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl("followers"))
                        },
                        ".followers-num": function(e, t) {
                            _.$one(t).text(this.pageNameData.FavoriteCount || "-")
                        },
                        ".description": function(e, t) {
                            var n = this.pageNameData.Bio || "",
                                r = _.$one(t),
                                i = '<a class="description-more" data-translate-text="MORE_ELLIPSIS" data-artist-id="' + this.model.get("ArtistID") + '">' + _.getString("MORE_ELLIPSIS") + "</a>"
                        },
                        ".tags": function(e, t) {
                            this.model.get("Tags") && this.fetchTemplate("/shared/genreTags").done(_.bind(function(e) {
                                var n = _.clone(this.options);
                                n.tags = this.model.get("Tags"), _.$one(t).html(this.renderTemplate(e, n))
                            }, this))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("artist", this.model).attr("id", "artist-" + this.model.get("ArtistID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    changeFavoriteLabel: function(e, t) {
                        this.model.get("isFavorite") ? _.$one(t).attr("data-translate-text", "FOLLOWING").text(_.getString("FOLLOWING")) : _.$one(t).attr("data-translate-text", "FOLLOW").text(_.getString("FOLLOW"))
                    }
                }), r.Views.Modules.PlaylistCell = r.Views.Modules.Base.extend({
                    className: "module module-cell playlist grid-item",
                    cacheKey: "PlaylistCell",
                    templateFile: "playlistCell",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("playlist", this.model)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("playlistId", this.model.get("PlaylistID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("PlaylistName"))
                        },
                        ".byline a": function(e, t) {
                            _.$one(t).attr("href", this.model.toUserUrl()).innerText(this.model.get("UserName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(200))
                        },
                        "a.img-container": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("playlist", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    acceptDrop: function(e) {
                        return r.Models.Playlist.acceptDrop(this.model, e)
                    }
                }), r.Views.Modules.PlaylistCellSmall = r.Views.Modules.Base.extend({
                    className: "module module-cell playlist small grid-item",
                    cacheKey: "PlaylistCellSmall",
                    templateFile: "playlistCellSmall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("playlist", this.model)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("playlistId", this.model.get("PlaylistID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("PlaylistName"))
                        },
                        ".byline": function(e, t) {
                            _.$one(t).innerText(_.getString("PLAYLIST_NUMBER_SONGS", {
                                songcount: this.model.get("SongCount")
                            }))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(200))
                        },
                        "a.img-container": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("playlist", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    acceptDrop: function(e) {
                        return r.Models.Playlist.acceptDrop(this.model, e)
                    }
                }), r.Views.Modules.SidebarPlaylist = r.Views.Modules.Base.extend({
                    className: "module sidebar-playlist grid-item",
                    cacheKey: "SidebarPlaylist",
                    templateFile: "sidebarPlaylist",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("playlist", this.model)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("playlistId", this.model.get("PlaylistID"))
                        },
                        ".playlist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".name": function(e, t) {
                            _.$one(t).innerText(this.model.get("PlaylistName"))
                        }
                    },
                    events: {
                        contextmenu: "handleContextMenuClick"
                    },
                    initialize: function(e) {
                        this.$el.data("playlist", this.model), this._super.apply(this, ["initialize"].concat(arguments))
                    },
                    acceptDrop: function(e) {
                        return r.Models.Playlist.acceptDrop(this.model, e)
                    },
                    handleContextMenuClick: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = _.toInt(t.find(".inner").attr("data-playlist-id")),
                            i = r.Models.Playlist.getCached(n);
                        t.jjmenu(e, i.getSingleItemContextMenu(), null, {
                            xposition: "mouse",
                            yposition: "mouse",
                            show: "default",
                            className: "contextmenu"
                        }), t.addClass("active-context")
                    }
                }), r.Views.Modules.PlaylistRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row tall playlist grid-item",
                    cacheKey: "PlaylistRowTall",
                    templateFile: "playlistRowTall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("artistId", this.model.get("PlaylistID"))
                        },
                        ".playlist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("PlaylistName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(70))
                        },
                        ".btn.favorite": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).addClass("btn-success") : _.$one(t).removeClass("btn-success")
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        },
                        ".btn.favorite .favorite-label": function(e, t) {
                            this.changeFavoriteLabel(e, t)
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("playlist", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    changeFavoriteLabel: function(e, t) {
                        this.model.get("isFavorite") ? _.$one(t).attr("data-translate-text", "SUBSCRIBED").text(_.getString("SUBSCRIBED")) : _.$one(t).attr("data-translate-text", "SUBSCRIBE").text(_.getString("SUBSCRIBE"))
                    }
                }), r.Views.Modules.PlaylistCellBlock = r.Views.Modules.Base.extend({
                    className: "module module-cell playlist block grid-item",
                    cacheKey: "PlaylistCellBlock",
                    templateFile: "playlistCellBlock",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("playlist", this.model)
                        },
                        ".playlist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("PlaylistName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(200))
                        },
                        ".user-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUserUrl()).innerText(this.model.get("UserName"))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("playlist", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.BroadcastCell = r.Views.Modules.Base.extend({
                    className: "module module-cell broadcast grid-item",
                    cacheKey: "BroadcastCell",
                    templateFile: "broadcastCell",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("broadcast", this.model)
                        },
                        ".join-toggle": function(e, t) {
                            var i = n.model.get("user"),
                                s = this.model.getOwner();
                            if (s === i || i.get("Context").type == "artist" && i.get("Context").artist === s) _.$one(t).addClass("hide");
                            else {
                                var o = this.model.get("BroadcastID"),
                                    u = r.getCurrentBroadcastID() == o,
                                    a = u ? "LEAVE" : "JOIN_NOW";
                                _.$one(t).removeClass("hide").data("broadcastId", o)[(u ? "add" : "remove") + "Class"]("leave-broadcast")[(u ? "remove" : "add") + "Class"]("join-broadcast").attr("data-translate-text", a).text(_.getString(a))
                            }
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).attr("title", this.model.get("Name")).innerText(this.model.get("Name"))
                        },
                        ".user-link": function(e, t) {
                            var n = this.model.getOwner();
                            n instanceof r.Models.User ? _.$one(t).attr("href", n.toUrl()).innerText(n.get("Name") || "") : _.$one(t).attr("href", n.toUrl()).innerText(n.get("ArtistName") || "")
                        },
                        ".bc-img-container .img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        },
                        ".listeners .num": function(e, t) {
                            _.$one(t).innerText(this.model.get("listenersCount"))
                        },
                        ".listeners .label": function(e, t) {
                            _.$one(t).innerText(_.getStringPluralized("LISTENER", "LISTENERS", this.model.get("listenersCount")))
                        },
                        ".active-song": function(e, t) {
                            var n = this.model.get("activeSong");
                            n ? _.$one(t).html(_.getString("QUEUE_CURRENT_SONG_NO_ALBUM", {
                                song: n.getAnchorTag(null, null, null, !0),
                                artist: this.model.get("activeSong").getArtistAnchorTag()
                            })) : _.$one(t).html("N/A")
                        },
                        ".tag": function(e, t) {
                            var n = this.model.get("Tag");
                            if (n) _.$one(t).text(n.n);
                            else {
                                var r = _.getString("BROADCAST_DEFAULT_TAG");
                                _.$one(t).text(r)
                            }
                        },
                        ".genre-link": function(e, t) {
                            var n = this.model.get("Tag");
                            n ? _.$one(t).data({
                                tag: n.n,
                                tagId: n.i
                            }) : _.$one(t).data({
                                tagId: -1,
                                tag: _.getString("BROADCAST_DEFAULT_TAG")
                            })
                        },
                        ".listens": function(e, t) {
                            var n = this.model.getOwner(),
                                r;
                            n && n.attributes.pageNameData && n.attributes.pageNameData.BroadcastListens ? (r = _.toInt(n.attributes.pageNameData.BroadcastListens), _.$one(t).removeClass("hide").find(".num-listens").text(_.getStringPluralized("ONE_LISTEN", "NUM_LISTENS", r, {
                                num: _.addCommaSeparators(r)
                            }))) : _.$one(t).addClass("hide")
                        },
                        ".followers": function(e, t) {
                            var n = this.model.getOwner(),
                                r;
                            n && n.attributes.pageNameData && n.attributes.pageNameData.FollowedCount ? (r = _.toInt(n.attributes.pageNameData.FollowedCount), _.$one(t).removeClass("hide").find(".num-followers").text(_.getStringPluralized("ONE_FOLLOWER", "NUM_FOLLOWERS", r, {
                                num: r
                            }))) : _.$one(t).addClass("hide")
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("broadcast", this.model);
                        var t = this.model.getOwner();
                        t && t.on("change:pageNameData", this.onOwnerPageNameDataChange, this), n.model.get("player").on("change:currentQueue", this.onPlayerChange, this), this.onPlayerChange(), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDestroy: function() {
                        n.model.off(null, null, this), this.queue && this.queue.off(null, null, this)
                    },
                    completeRender: function() {
                        this._super.apply(this, ["completeRender"].concat(_.toArray(arguments)));
                        var e = n.model.get("user"),
                            t = this.model.getOwner();
                        (t === e || e.get("Context").type == "artist" && e.get("Context").artist === t) && this.$el.find(".join-toggle").addClass("hide")
                    },
                    onPlayerChange: function() {
                        this.queue && this.queue.off(null, null, this), this.queue = n.model.get("player").get("currentQueue"), this.queue && this.queue.on("change:currentBroadcast", this.onCurrentBroadcastChange, this), this.handleModelChange()
                    },
                    changeModel: function(e) {
                        if (this.model) {
                            var t = this.model.getOwner();
                            t && t.off(null, null, this)
                        }
                        var n = e.getOwner();
                        n && n.on("change:pageNameData", this.onOwnerPageNameDataChange, this), this._super.apply(this, ["changeModel"].concat(_.toArray(arguments)))
                    },
                    onOwnerPageNameDataChange: function(e, t) {
                        this.handleModelChange()
                    },
                    onCurrentBroadcastChange: function() {
                        this.handleModelChange()
                    }
                }), r.Views.Modules.BroadcastCellSmall = r.Views.Modules.Base.extend({
                    className: "module module-cell broadcast small grid-item",
                    cacheKey: "BroadcastCellSmall",
                    templateFile: "broadcastCellSmall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("broadcast", this.model)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("broadcastId", this.model.get("BroadcastID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("Name"))
                        },
                        ".byline a": function(e, t) {
                            var n = r.Models.User.getCached(this.model.get("UserID"));
                            n && _.$one(t).attr("href", this.model.toOwnerUrl()).innerText(n.get("Name") || "")
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(80))
                        },
                        "a.img-container": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("broadcast", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.BroadcastCellBlock = r.Views.Modules.Base.extend({
                    className: "module module-cell broadcast block grid-item",
                    cacheKey: "BroadcastCellBlock",
                    templateFile: "broadcastCellBlock",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("broadcast", this.model)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("broadcastId", this.model.get("BroadcastID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("Name"))
                        },
                        ".byline a": function(e, t) {
                            var n = r.Models.User.getCached(this.model.get("UserID"));
                            n && _.$one(t).attr("href", this.model.toOwnerUrl()).innerText(n.get("Name") || "")
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        },
                        "a.img-container": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("broadcast", this.model), e.grid && e.grid.options && (e.grid.options.smallGrid ? this.$el.addClass("small") : e.grid.options.mediumGrid && this.$el.addClass("medium")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.SidebarBroadcast = r.Views.Modules.Base.extend({
                    className: "module sidebar-broadcast grid-item",
                    cacheKey: "SidebarBroadcast",
                    templateFile: "sidebarBroadcast",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("broadcast", this.model)
                        },
                        ".btn.play": function(e, t) {
                            _.$one(t).data("broadcastId", this.model.get("BroadcastID"))
                        },
                        ".broadcast-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".name": function(e, t) {
                            _.$one(t).innerText(this.model.get("Name"))
                        }
                    },
                    events: {
                        contextmenu: "handleContextMenuClick"
                    },
                    initialize: function(e) {
                        this.$el.data("broadcast", this.model), this._super.apply(this, ["initialize"].concat(arguments))
                    },
                    acceptDrop: function(e) {
                        return !1
                    },
                    handleContextMenuClick: function(e) {
                        return e.preventDefault(), !1
                    }
                }), r.Views.Modules.VideoCell = r.Views.Modules.Base.extend({
                    className: "module module-cell video block grid-item",
                    cacheKey: "VideoCell",
                    templateFile: "videoCell",
                    events: {
                        "click .btn.play": "playVideo",
                        "click .title": "playVideo"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("videoId", this.model.get("VideoID"))
                        },
                        ".video-link": function(e, t) {
                            _.$one(t).data("videoId", this.model.get("VideoID"))
                        },
                        ".artist-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toArtistUrl()).innerText(this.model.get("ArtistName"))
                        },
                        ".attributor": function(e, t) {
                            _.$one(t).innerText(this.model.get("attributor"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("title"))
                        },
                        ".btn.video-cell-dropdown": function(e, t) {
                            _.$one(t).data("videoId", this.model.get("VideoID"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("videoId", this.model.get("VideoID")), e.grid && e.grid.options && (e.grid.options.smallGrid ? this.$el.addClass("small") : e.grid.options.mediumGrid && this.$el.addClass("medium")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    playVideo: function(e) {
                        var t = !0;
                        this.model.get("clickToPlay") == "true" && (t = !1), r.trigger("lightbox:open", "video", {
                            videos: [{
                                type: this.model.get("type"),
                                id: this.model.get("VideoID"),
                                title: this.model.get("title"),
                                width: this.model.get("width"),
                                height: this.model.get("height"),
                                autoplay: t
                            }],
                            hideHeader: !0
                        })
                    }
                }), r.Views.Modules.EventRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row event tall grid-item",
                    cacheKey: "EventRowTall",
                    templateFile: "eventRowTall",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("eventId", this.model.get("EventID"))
                        },
                        ".event-link": function(e, t) {
                            _.$one(t).attr("href", this.model.get("TicketsURL")).innerText(this.model.get("EventName"))
                        },
                        ".meta-inner": function(e, t) {
                            _.$one(t).innerText(this.model.get("VenueName") + " " + this.model.get("City"))
                        },
                        ".month": function(e, t) {
                            _.$one(t).innerText(_.getDateFormatChars(this.model.get("StartTime")).M)
                        },
                        ".day": function(e, t) {
                            _.$one(t).innerText(_.getDateFormatChars(this.model.get("StartTime")).j)
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("eventId", this.model.get("EventID")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.StationRow = r.Views.Modules.Base.extend({
                    className: "module module-row station grid-item",
                    cacheKey: "StationRow",
                    templateFile: "stationRow",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("station", this.model)
                        }
                    }
                }), r.Views.Modules.QueueSongCell = r.Views.Modules.Base.extend({
                    className: "module module-cell queue-item grid-item",
                    cacheKey: "QueueSongCell",
                    templateFile: "queueSongCell",
                    events: {
                        "click .remove": function() {
                            r.trigger("player:removeSongs", [this.model])
                        },
                        "click .play": function() {
                            r.trigger("player:togglePlay", this.model.get("queueSongID"))
                        }
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t)[this.model.get("active") ? "addClass" : "removeClass"]("queue-item-active").data("queueSongId", this.model.get("queueSongID"))
                        },
                        ".queue-song": function(e, t) {
                            _.$one(t)[this.model.get("suggestion") ? "addClass" : "removeClass"]("suggestion"), _.$one(t)[this.model.get("broadcastPlayed") ? "addClass" : "removeClass"]("dj-locked")
                        },
                        ".queue-radio-options": function(e, t) {
                            _.$one(t)[this.model.get("songQueueHelper").autoplayEnabled ? "addClass" : "removeClass"]("active"), _.$one(t)[this.model.get("isCallout") ? "addClass" : "removeClass"]("hide")
                        },
                        ".smile": function(e, t) {
                            _.$one(t)[this.model.get("smile") ? "addClass" : "removeClass"]("active")
                        },
                        ".frown": function(e, t) {
                            _.$one(t)[this.model.get("frown") ? "addClass" : "removeClass"]("active")
                        },
                        ".queue-song-options": function(e, t) {
                            _.$one(t)[this.model.get("isCallout") ? "addClass" : "removeClass"]("hide"), _.$one(t)[this.model.get("fromLibrary") ? "addClass" : "removeClass"]("inLibrary")[this.model.get("isFavorite") ? "addClass" : "removeClass"]("isFavorite")
                        },
                        ".paused, .play": function(e, t) {
                            _.$one(t)[this.model.get("paused") ? "addClass" : "removeClass"]("paused")
                        },
                        img: function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(this.model.get("songQueueHelper").queueImageSize))
                        },
                        ".queue-song-name": function(e, t) {
                            var n = this.model.get("SongName");
                            _.$one(t).attr("title", n).data("songId", this.model.get("SongID")).data("calloutId", this.model.get("CalloutID")).innerText(n)
                        },
                        ".queue-song-artist": function(e, t) {
                            var n = this.model.get("ArtistName");
                            _.$one(t).attr("title", n).attr("href", _.cleanUrl(n, this.model.get("ArtistID"), "artist")).innerText(n)
                        }
                    }
                }), r.Views.Modules.Comment = r.Views.Modules.Base.extend({
                    className: "module module-comment",
                    cacheKey: "Comment",
                    templateFile: "comment",
                    events: {
                        "click .respond-cta": "openResponseInput",
                        "click .delete-response-cta": "deleteResponse",
                        "click .report-response-cta": "reportResponse",
                        "click .comment-options": "onOptionClick"
                    },
                    initialize: function(e) {
                        this.$el.data("comment", this.model), this.commentStyleType = _.orEqual(this.options.commentStyleType, "sidebar"), this.getUserPicture = _.orEqual(this.options.getUserPicture, _.bind(r.getLoggedInUserPicture, r)), this.isParentPage = this.model.get("ItemID") != this.options.pageItemID || this.model.get("TypeID") != this.options.pageTypeID, this.model.get("Responses").on("add", this.renderNewResponse, this), this.model.get("Responses").on("remove", this.removeResponse, this), this.model.on("commentRemoved", this.destroy, this), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    completeRender: function(e) {
                        if (this.isParentPage && !this.model.getChildMetadata()) {
                            this.$el.addClass("empty");
                            return
                        }
                        this.$el.removeClass("empty"), this._super.apply(this, ["completeRender"].concat(_.toArray(arguments))), this.responseModules = [], this.$responsesEl = this.$el.find(".comment-responses"), this.renderResponses(), this.options.highlighted && this.$el.addClass("reply").find(".comment-response-container").removeClass("hide")
                    },
                    renderResponses: function() {
                        var e = this.model.get("Responses").length;
                        if (!e) return;
                        this.$responsesEl.empty();
                        var t = [],
                            n = this.responseModules;
                        this.model.get("Responses").each(function(e) {
                            if (!e.get("author")) return;
                            var i = new r.Views.Modules.CommentResponse({
                                model: e
                            });
                            i.render(), n.push(i), t.push(i.$el[0])
                        }), this.$responsesEl.append(t).show(), this.$el.find(".module-item-respond").show(), this.$el.find(".comment-replies-num").text(e)
                    },
                    renderNewResponse: function(e) {
                        if (!this.$responsesEl || !e.get("author")) return;
                        var t = new r.Views.Modules.CommentResponse({
                            model: e
                        });
                        t.render(), this.responseModules.push(t), this.$responsesEl.append(t.$el[0]).show(), this.$el.find(".module-item-respond").show(), setTimeout(_.bind(function() {
                            var e = this.model.getResponsesCount();
                            e === 1 && (this.render(), this.$el.find(".comment-response-container").removeClass("hide")), this.$el.find(".comment-replies-num").text(e)
                        }, this), 0)
                    },
                    removeResponse: function(e) {
                        if (!this.$responsesEl) return;
                        var t = e.get("ResponseID");
                        _.each(this.responseModules, function(e) {
                            e.model.get("ResponseID") === t && e.destroy()
                        });
                        var n = this.model.get("Responses").length;
                        this.$el.find(".comment-replies-num").text(n)
                    },
                    openResponseInput: function(e) {
                        e.preventDefault();
                        var t = this.$el,
                            n = function() {
                                t.addClass("reply").find(".comment-response-container").removeClass("hide"), $(".reply-input", t).focus()
                            };
                        this.model.get("ResponsesLoaded") ? n() : this.model.loadResponses().done(_.bind(function() {
                            this.renderResponses(), n()
                        }, this))
                    },
                    deleteResponse: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.parents(".response-row").data("response");
                        n && !t.hasClass("pending") && n.deleteResponse().fail(function() {
                            t.removeClass("pending")
                        }), t.addClass("pending")
                    },
                    reportResponse: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.parents(".response-row").data("response");
                        n && !t.hasClass("pending") && n.reportResponse().done(function() {
                            t.replaceWith('<span class="module-footer-link">' + _.getString("REPORTED") + "</span>")
                        }).always(function() {
                            t.removeClass("pending")
                        }), t.addClass("pending")
                    },
                    onOptionClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getCommentMenu(t), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        }), t.addClass("active-context")
                    },
                    getCommentMenu: function(e) {
                        var t = [],
                            n = this.model,
                            i = this.collection;
                        return n.get("author").UserID != r.getLoggedInUserID() && t.push({
                            title: n.get("reportedByUser") ? _.getString("REPORTED") : _.getString("REPORT"),
                            customClass: n.get("reportedByUser") ? "jj_menu_item_disabled" : "jj_menu_item_comment_report",
                            action: {
                                type: "fn",
                                callback: function() {
                                    n && !n.get("reportedByUser") && n.reportComment().done(function() {
                                        n.set("reportedByUser", !0)
                                    })
                                }
                            }
                        }), n.canDelete() && t.push({
                            title: _.getString("DELETE"),
                            customClass: "jj_menu_item_comment_delete",
                            action: {
                                type: "fn",
                                callback: function() {
                                    n && n.deleteComment().done(function(e) {
                                        e ? n.destroy() : r.trigger("notification:add", {
                                            description: _.getString("POPUP_ERROR_COMMENT_DELETE_FAILED"),
                                            type: "error",
                                            duration: 5e3
                                        })
                                    }).fail(function() {
                                        r.trigger("notification:add", {
                                            description: _.getString("POPUP_ERROR_COMMENT_DELETE_FAILED"),
                                            type: "error",
                                            duration: 5e3
                                        })
                                    })
                                }
                            }
                        }), t
                    }
                }), r.Views.Modules.CommentResponse = r.Views.Modules.Base.extend({
                    className: "module response-row",
                    cacheKey: "CommentResponse",
                    templateFile: "commentResponse",
                    initialize: function(e) {
                        this.$el.data("response", this.model), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.TagProfileCard = r.Views.Modules.Base.extend({
                    className: "module module-profile-card genre grid-item no-img",
                    cacheKey: "TagProfileCard",
                    templateFile: "tagProfileCard",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("tag", this.model)
                        },
                        ".tag-name a": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).data({
                                tagId: this.model.id,
                                tag: this.model.get("Tag")
                            }).innerText(this.model.get("DisplayName"))
                        },
                        ".artist-links": function(e, t) {
                            var n = this.model.getRandomArtists(3);
                            for (var r = 0, i = n.length; r < i; r++) n[r] = n[r].getAnchorTag();
                            _.$one(t).html(n.join(", "))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("tag", this.model).attr("id", "tag-" + this.model.get("TagID")), this.on("rendered", _.bind(function() {
                            var e = this.$el.find(".artist-links");
                            if (!e.length) return;
                            var t = this.model.id;
                            this.model.get("pageInfoLoaded") ? this.changeModelSelectors[".artist-links"].call(this, 0, e[0]) : this.model.getArtists().done(_.bind(function() {
                                this.model.id == t && this.changeModelSelectors[".artist-links"].call(this, 0, e[0])
                            }, this))
                        }, this)), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.TagRow = r.Views.Modules.Base.extend({
                    className: "module module-row tall genre grid-item",
                    cacheKey: "TagRow",
                    templateFile: "tagRow",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("tag", this.model)
                        },
                        "a.title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).data({
                                tagId: this.model.id,
                                tag: this.model.get("Tag")
                            }).innerText(this.model.get("DisplayName"))
                        },
                        ".artist-links": function(e, t) {
                            var n = this.model.getRandomArtists(3),
                                r = [];
                            for (var i = 0, s = Math.min(n.length, 3); i < s; i++) r[i] = n[i].getAnchorTag();
                            _.$one(t).html(r.join(", "))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("tag", this.model).attr("id", "tag-" + this.model.get("TagID")), this.on("rendered", _.bind(function() {
                            var e = this.$el.find(".artist-links");
                            if (!e.length) return;
                            this.changeModelSelectors["&"].call(this, 0, this.el), this.changeModelSelectors[".artist-links"].call(this, 0, e[0])
                        }, this)), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.ThemeCell = r.Views.Modules.Base.extend({
                    className: "module module-cell theme grid-item",
                    cacheKey: "ThemeCell",
                    templateFile: "themeCell",
                    user: null,
                    events: {
                        "click .theme-select": "onThemeClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("themeID", this.model.get("themeID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("title"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", "themes/" + this.model.get("location") + "/preview.jpg")
                        }
                    },
                    initialize: function(e) {
                        this.user = e.grid.user;
                        var t = this.model.get("themeID");
                        this.$el.data("themeID", t).attr("data-theme-id", t), t == e.grid.selected && this.$el.addClass("active"), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onThemeClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.attr("data-theme-id");
                        $("#page-content .save").removeClass("btn-success").removeClass("disabled"), $("#page-content .cancel").removeClass("disabled"), this.user.get("subscription").isPremium() ? (r.trigger("theme:set", {
                            themeID: n,
                            temporary: !0
                        }), $(".theme").removeClass("active"), $('.theme[data-theme-id="' + n + '"]').addClass("active")) : r.trigger("lightbox:open", "vipOnlyFeature")
                    }
                }), r.Views.Modules.AlbumEditor = r.Views.Modules.Base.extend({
                    className: "module edit-entity-container album",
                    cacheKey: "AlbumEditor",
                    templateFile: "albumEditor",
                    events: {
                        "mousemove .button-upload-form": "uploadMousemove",
                        "change .uploader": "onNewUpload"
                    },
                    initialize: function(e) {
                        this.artist = e.artist, this.creatingNew = _.orEqual(e.creatingNew, !1), this.hideArt = _.orEqual(e.hideArt, !1), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    render: function() {
                        var e = _.toArray(arguments);
                        if (!this.creatingNew) {
                            var t = $.Deferred();
                            return this.model.getAlbumDetails().done(_.bind(function() {
                                this._super.apply(this, ["render"].concat(e)).done(_.bind(t.resolve, t)).fail(_.bind(t.fail, t))
                            }, this)), t.promise()
                        }
                        return this._super.apply(this, ["render"].concat(e))
                    },
                    submit: function(e) {
                        var t = _.chainLoading({
                            ignoreFails: !0
                        }),
                            n = $.Deferred(),
                            i = this.$el.find(".album-name"),
                            s = this.$el.find(".album-year"),
                            o = this.artist,
                            u = {},
                            a = {
                                Name: i.val(),
                                Year: _.toInt(s.val()),
                                ReleaseType: _.toInt(this.$el.find(".album-type").val()),
                                IsVerified: _.toInt(this.$el.find(".album-verified").val()),
                                ArtistID: o.get("ArtistID")
                            };
                        if (!a.Name || a.Name == "") return i.parent().addClass("field-error"), n.reject(0), n.promise();
                        var f = s.val();
                        if (f !== "" && a.Year < 1900) return s.parent().addClass("field-error"), n.reject(0), n.promise();
                        f === "" && (a.Year = "");
                        if (e) return n.resolve(a), n.promise();
                        if (!this.creatingNew) {
                            var l = this.model;
                            a.Name !== l.get("AlbumName") && (u.changedAlbumName = !0), a.IsVerified !== l.get("IsVerified") && (u.originalAlbumIsVerified = l.get("IsVerified"), u.changedAlbumIsVerified = a.IsVerified), a.ReleaseType !== l.get("ReleaseType") && (u.originalAlbumReleaseType = l.get("ReleaseType"), u.changedAlbumReleaseType = a.ReleaseType), a.Year !== l.get("Year") && (u.originalAlbumReleaseYear = l.get("Year"), u.changedAlbumReleaseYear = a.Year), u.editedAlbum = l.get("AlbumID"), t.push(this.model.updateInfo(a).fail(t.bind(n.reject, n, 1))), this.submitArtUpload(n, t, this.model), t.done(_.bind(n.resolve, n, this.model)), r.trigger("guts:log", "editAlbum", u), r.trigger("guts:gatrack", "artist", "editAlbum", l.get("AlbumID"))
                        } else t.push(r.Services.API.artistCreateAlbum(a).done(t.bind(function(e) {
                            if (!e || !e.success) {
                                n.reject(1);
                                return
                            }
                            a.AlbumID = _.toInt(e.albumID), a.ArtistName = o.get("ArtistName");
                            var i = new r.Models.Album(a);
                            o.getAllAlbums().done(function() {
                                o.get("albums").add(i)
                            }), this.submitArtUpload(n, t, i), t.done(_.bind(n.resolve, n, i)), r.trigger("guts:log", "createAlbum", {
                                newAlbumID: a.AlbumID,
                                onArtistID: o.get("ArtistID")
                            }), r.trigger("guts:gatrack", "artist", "newAlbum", o.get("ArtistID"))
                        }, this)).fail(t.bind(n.reject, n, 1)));
                        return n.promise()
                    },
                    submitArtUpload: function(t, n, i) {
                        var s = $("#upload-entity-art"),
                            o = s.val();
                        if (!this.hideArt && o && o.length) {
                            var u, a = new $.Deferred;
                            n.push(a.fail(n.bind(t.reject, t, 2)));
                            var f = _.bind(function(e, t) {
                                switch (e) {
                                case "complete":
                                    i.set("CoverArtFilename", t.filename + "?" + (new Date).getTime()), $(".entity-art", this.$el).find("img").attr("src", i.getImageURL(120)), s.val(""), a.resolve(), r.trigger("guts:log", "editAlbumArt", {
                                        editedAlbumID: i.get("AlbumID"),
                                        editedAlbumArtistID: i.get("ArtistID")
                                    }), r.trigger("guts:gatrack", "artist", "editAlbumArt", i.get("ArtistID"));
                                    break;
                                case "error":
                                    a.reject()
                                }
                            }, this);
                            if (e.FormData) {
                                u = new e.XMLHttpRequest;
                                var l = new FormData;
                                l.append("albumArt", s.data("file")), l.append("albumID", i.get("AlbumID")), u.addEventListener("load", function(e) {
                                    var t = e.currentTarget.response;
                                    try {
                                        t = $.parseJSON(t)
                                    } catch (e) {
                                        t = null
                                    }
                                    f && t && t.filename ? f("complete", t) : f("error", t)
                                }, !1), u.addEventListener("error", function(e) {
                                    f && f("error", e)
                                }, !1), u.open("POST", "/upload.php?albumArt=1"), u.send(l)
                            } else {
                                var c = "uploadAlbumArt_" + i.get("AlbumID"),
                                    h = c + "_Frame";
                                e[c] = function(t) {
                                    f && (t && t.filename ? f("complete", t) : f("error", t), _.defer(function() {
                                        $("#" + h).remove(), delete e[c]
                                    }))
                                };
                                var p = document.createElement("iframe");
                                p.src = "empty.html", p.id = h, p.name = h, p.setAttribute("style", "visiblity: hidden; display: none;"), document.body.appendChild(p);
                                var d = $(".button-upload-form", this.$el);
                                d.find(".upload-albumID").val(i.get("AlbumID")), d.attr("action", "/upload.php?albumArt=1&callback=" + c).attr("target", h).submit()
                            }
                        }
                    },
                    uploadMousemove: function(e) {
                        typeof e.pageY == "undefined" && typeof e.clientX == "number" && document.documentElement && (e.pageX = e.clientX + document.documentElement.scrollLeft, e.pageY = e.clientY + document.documentElement.scrollTop);
                        var t = $(e.currentTarget),
                            n = t.offset(),
                            r = $(t).find(".uploader").removeClass("hide");
                        r.css("top", e.pageY - n.top - Math.abs(r.height() / 2) + "px"), r.css("left", e.pageX - n.left - Math.abs(r.width() - 50) + "px")
                    },
                    onNewUpload: function(t) {
                        var n = $(t.currentTarget),
                            r = t.target && t.target.files ? t.target.files : null,
                            i;
                        if (r && r.item(0)) {
                            var s = r.item(0);
                            s.getAsDataURL ? i = s.getAsDataURL() : e.URL && e.URL.createObjectURL ? i = e.URL.createObjectURL(s) : e.webkitURL && e.webkitURL.createObjectURL && (i = e.webkitURL.createObjectURL(s)), n.data("file", s)
                        }
                        if (i) {
                            var o = $(".entity-art", this.$el).find("img").css({
                                height: "auto",
                                width: "auto",
                                left: 0,
                                top: 0
                            }),
                                u = function() {
                                    try {
                                        o.width() > o.height() ? (o.css("height", "120px"), o.css("left", -1 * Math.floor((o.width() - 120) / 2) + "px")) : (o.css("width", "120px"), o.css("top", -1 * Math.floor((o.height() - 120) / 2) + "px")), e.URL ? e.URL.revokeObjectURL(this.src) : e.webkitURL && e.webkitURL.revokeObjectURL(this.src), o.off("load", u)
                                    } catch (t) {}
                                };
                            o.on("load", u).attr("src", i)
                        }
                        var a = _.last(_.last(n.val().split("\\")).split("/"));
                        $(".entity-art-filename", this.$el).text(a)
                    }
                }), r.Views.Modules.UserArtistCell = r.Views.Modules.Base.extend({
                    className: "module module-cell user-artist grid-item",
                    cacheKey: "UserArtistCell",
                    templateFile: "userArtistCell",
                    changeModelSelectors: {
                        "&": function(e, t) {
                            var n = _.$one(t);
                            this.model instanceof r.Models.User ? n.data({
                                userId: this.model.id,
                                artistId: null
                            }) : n.data({
                                artistId: this.model.id,
                                userId: null
                            })
                        },
                        ".title": function(e, t) {
                            this.model instanceof r.Models.User ? _.$one(t).attr({
                                href: this.model.toUrl()
                            }).innerText(this.model.get("Name")) : _.$one(t).attr({
                                href: this.model.toUrl()
                            }).innerText(this.model.get("ArtistName"))
                        },
                        ".user-city": function(e, t) {
                            this.model instanceof r.Models.User && this.model.get("City") ? _.$one(t).innerText(this.model.get("City") + ", ") : _.$one(t).innerText("")
                        },
                        ".user-state": function(e, t) {
                            this.model instanceof r.Models.User && this.model.get("State") ? _.$one(t).innerText(this.model.get("State") + ", ") : _.$one(t).innerText("")
                        },
                        ".user-country": function(e, t) {
                            this.model instanceof r.Models.User && this.model.get("Country") ? _.$one(t).innerText(this.model.get("Country")) : _.$one(t).innerText("")
                        },
                        ".img-container": function(e, t) {
                            _.$one(t).attr({
                                href: this.model.toUrl(),
                                title: this.model.get("Name")
                            })
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(120))
                        },
                        ".btn.favorite": function(e, t) {
                            var n = _.$one(t)[this.model.get("isFavorite") ? "addClass" : "removeClass"]("btn-success");
                            this.model instanceof r.Models.User ? (n.data({
                                userId: this.model.id,
                                artistId: null
                            }), _.$one(t)[this.model.id == r.getLoggedInUserID() ? "addClass" : "removeClass"]("hide"), _.$one(t).removeAttr("data-artist-id").attr("data-user-id", this.model.id)) : (n.data({
                                artistId: this.model.id,
                                userId: null
                            }), _.$one(t).removeAttr("data-user-id").attr("data-artist-id", this.model.id))
                        },
                        ".btn.favorite .icon": function(e, t) {
                            this.model.get("isFavorite") ? _.$one(t).removeClass("icon-plus-gray").addClass("icon-check-white-active") : _.$one(t).removeClass("icon-check-white-active").addClass("icon-plus-gray")
                        },
                        ".btn.play-station": function(e, t) {
                            this.model instanceof r.Models.User ? _.$one(t).removeAttr("data-artist-id").attr("data-user-id", this.model.id) : _.$one(t).removeAttr("data-user-id").attr("data-artist-id", this.model.id)
                        }
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    }
                }), r.Views.Modules.TagCellVertical = r.Views.Modules.Base.extend({
                    className: "module module-cell genre block grid-item",
                    cacheKey: "TagCellVertical",
                    templateFile: "tagCellVertical",
                    events: {
                        "click .tag-cell-dropdown": "onDropDownGearClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("albumId", this.model.get("TagID"))
                        },
                        ".tag-link": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl())
                        },
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("DisplayName"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(142))
                        },
                        ".btn.tag-cell-share": function(e, t) {
                            _.$one(t).data("tagId", this.model.get("TagID"))
                        },
                        ".btn.tag-cell-dropdown": function(e, t) {
                            _.$one(t).data("tagId", this.model.get("TagID"))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("tagId", this.model.get("TagID")), e.grid && e.grid.options && (e.grid.options.smallGrid ? this.$el.addClass("small") : e.grid.options.mediumGrid && this.$el.addClass("medium")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onDropDownGearClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("tagId"),
                            i = r.Models.Tag.getCached(n);
                        return i && t.jjmenu(e, i.getSingleItemContextMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "option-context-menu",
                            keepState: t
                        }), !1
                    }
                }), r.Views.Modules.SuggestedFriends = r.Views.Modules.Base.extend({
                    className: "module snapshot suggested-friends",
                    cacheKey: "SuggestedFriends",
                    templateFile: "suggestedFriends",
                    defaultVisibleCount: 10,
                    events: {
                        "click .remove-suggestion": "hideSuggestion"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.visibleCount = _.orEqual(e.visibleCount, this.defaultVisibleCount)
                    },
                    render: function() {
                        var e = _.toArray(arguments),
                            t = _.chainLoading(),
                            n = $.Deferred();
                        return t.fail(_.bind(n.reject, n)), t.push(this.model.getFavoritesByType("Users")), t.push(this.model.getRecommendedUsers().done(t.bind(this.onRecommendedUsers, this))), t.push(this._super.apply(this, ["render"].concat(e)).done(t.bind(this.renderRecommendedUsers, this))), t.done(_.bind(function() {
                            n.resolve(this.recommendations)
                        }, this)), n.promise()
                    },
                    destroy: function() {
                        this.grid && this.grid.destroy(), this._super.apply(this, ["destroy"].concat(_.toArray(arguments)))
                    },
                    onRecommendedUsers: function(e) {
                        if (!e || !e.models) return;
                        var t = this.model.get("favoriteUsers");
                        t ? (e = _.difference(e.models, t.models), t.on("add", this.onNewFavoriteUser, this)) : e = e.models, e = _.sortBy(e, function(e) {
                            return Math.random() * _.toInt(e.get("SimilarFriendsCount")) * -1
                        }), this.recommendations = new r.Models.Collections.Users(e)
                    },
                    renderRecommendedUsers: function() {
                        if (!this.recommendations || !this.recommendations.models || !this.recommendations.length) return;
                        var e = [];
                        while (this.recommendations.length && e.length < this.visibleCount) e.push(this.recommendations.shift());
                        e = new r.Models.Collections.Users(e);
                        var t = this.$el.find(".suggested-friends-grid").empty();
                        this.grid = new r.Views.SuggestedUserGridTall({
                            el: t[0],
                            collection: e
                        }), this.visibleUserIDs = e.pluck("UserID"), this.grid.render()
                    },
                    onNewFavoriteUser: function(e) {
                        if (!this.grid || _.indexOf(this.visibleUserIDs, e.id) === -1) return;
                        _.delay(_.bind(this.removedSuggestion, this, e.id), 2e3)
                    },
                    hideSuggestion: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("userId");
                        n && r.Services.API.userHideRecommendedUser(n).done(_.bind(this.removedSuggestion, this, n)).fail(function() {
                            r.trigger("notification:add", {
                                description: _.getString("ERROR_HIDE_SUGGESTION"),
                                type: "error",
                                duration: 5e3
                            })
                        })
                    },
                    removedSuggestion: function(e) {
                        this.grid.collection.remove(e), this.recommendations.remove(e);
                        if (this.recommendations.length) {
                            var t = this.recommendations.shift();
                            this.grid.collection.add(t), this.visibleUserIDs.push(t.id)
                        }
                    }
                }), r.Views.Modules.BroadcastRowTall = r.Views.Modules.Base.extend({
                    className: "module module-row broadcast tall grid-item",
                    cacheKey: "BroadcastRowTall",
                    templateFile: "broadcastRowTall",
                    events: {
                        "click .join-broadcast": "onBroadcastLinkClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("broadcastId", this.model.get("BroadcastID"))
                        },
                        ".img": function(e, t) {
                            _.$one(t).attr("src", this.model.getImageURL(this.imageSize))
                        },
                        ".join-broadcast": function(e, t) {
                            _.$one(t).data("broadcastId", this.model.get("BroadcastID"))
                        },
                        ".title": function(e, t) {
                            _.$one(t).attr("href", this.model.toUrl()).innerText(this.model.get("Name"))
                        },
                        "a.broadcaster": function(e, t) {
                            var n = this.model.getOwner();
                            n && _.$one(t).attr("href", n.toUrl()).innerText(n.get("Name"))
                        },
                        ".listeners": function(e, t) {
                            var n = _.toInt(this.model.get("PeakSubscribers") || this.model.get("listenersCount"));
                            _.$one(t).html(_.getStringPluralized("ONE_LISTENER", "NUM_LISTENERS", n, {
                                num: n
                            }))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("broadcastId", this.model.get("BroadcastID")), this.imageSize = _.orEqual(e.imageSize, 40), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    onBroadcastLinkClick: function(e) {
                        n.onJoinBroadcastClick(e)
                    }
                }), r.Views.Modules.ChatActivity = r.Views.Modules.Base.extend({
                    className: "module chat-activity",
                    cacheKey: "ChatActivity",
                    templateFile: "chatActivity",
                    events: {
                        "click .upvote-btn": "onUpvoteClick",
                        "click .downvote-btn": "onDownvoteClick",
                        "click .approve-btn": "onApproveClick",
                        "click .user-broadcast-actions": "onBroadcastUserOptionsClick",
                        "click .enable-chat": "onEnableChatClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {
                            _.$one(t).data("chatActivityId", this.model.get("ChatActivityID"));
                            var n = this.model.get("type"),
                                r = n !== this.type;
                            this.update(!r)
                        },
                        ".img": function(e, n) {
                            if (this.model.get("type") === "message") {
                                var r = this.model.get("user") || this.model.get("artist");
                                _.$one(n).attr("src", r && r.getImageURL(30))
                            } else this.model.get("song") !== t ? _.$one(n).attr("src", this.model.get("song").getImageURL(30)) : _.$one(n).attr("src", "")
                        },
                        ".user-name": function(e, t) {
                            if (this.model.get("type") === "message") {
                                var n = this.model.get("user");
                                _.$one(t).attr("href", n.toUrl()).innerText(n.get("Name"))
                            }
                        },
                        ".artist-name": function(e, t) {
                            if (this.model.get("type") === "message") {
                                var n = this.model.get("user");
                                _.$one(t).attr("href", n.toUrl()).innerText(n.get("Name"))
                            }
                        },
                        ".block-user": function(e, t) {
                            this.model.get("type") === "message" && _.$one(t).data("userId", this.model.get("user").get("UserID"))
                        },
                        ".message": function(e, t) {
                            _.$one(t).html(this.model.getText())
                        },
                        ".timestamp": function(e, t) {
                            _.$one(t).innerText(this.model.getFormattedTimestamp())
                        },
                        ".user-broadcast-actions": function(e, t) {
                            var n = this.model.get("specialFlag"),
                                r = this.model.get("user");
                            this.model.get("type") == "message" && (this.isBroadcasting || this.isAdminLoggedIn) && r && n !== "owner" && n !== "admin" ? _.$one(t).removeClass("hide").data("userId", r.get("UserID")) : _.$one(t).addClass("hide")
                        },
                        ".upvote-btn": function(e, t) {
                            var n = this.model.get("song");
                            n && (n.get("userVote") > 0 ? _.$one(t).addClass("btn-success").find(".icon").removeClass("icon-upvote-gray").addClass("icon-upvote-white-active") : _.$one(t).removeClass("btn-success").find(".icon").removeClass("icon-upvote-white-active").addClass("icon-upvote-gray"))
                        },
                        ".downvote-btn": function(e, t) {
                            var n = this.model.get("song");
                            n && (n.get("userVote") < 0 ? _.$one(t).addClass("btn-danger").find(".icon").removeClass("icon-downvote-gray").addClass("icon-downvote-white-active") : _.$one(t).removeClass("btn-danger").find(".icon").removeClass("icon-downvote-white-active").addClass("icon-downvote-gray"))
                        },
                        ".info-icon": function(e, t) {
                            _.$one(t).attr("class", ["icon", this.iconClass].join(" "))
                        }
                    },
                    initialize: function(e) {
                        this.$el.data("chatActivityId", this.model.get("ChatActivityID")), this.classes = [], e && e.persistent && (this.persistent = !0);
                        var t = n.model.get("player");
                        t.on("change:currentQueue", this.currentQueueChange, this), this.currentQueueChange(t, t.get("currentQueue")), this.update(!0), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    currentQueueChange: function(e, t) {
                        this.currentQueue && this.currentQueue.off(null, null, this), this.currentQueue = t, this.currentQueue.on("change:isBroadcasting", this.onBroadcastingChanged, this), this.onBroadcastingChanged(t, t.get("isBroadcasting"))
                    },
                    onBroadcastingChanged: function(e, t) {
                        var n = e ? e.get("currentBroadcast") : null;
                        t && e && n && n.get("BroadcastID") === this.model.get("broadcastID") ? this.isBroadcasting = t : this.isBroadcasting = !1, this.renderDfd && this.renderDfd.state() === "resolved" && this.render()
                    },
                    destroy: function() {
                        n.model.get("player").off(null, null, this), this.currentQueue && this.currentQueue.off(null, null, this), this._super.apply(this, ["destroy"].concat(_.toArray(arguments)))
                    },
                    update: function(e) {
                        var t = this.model.get("type"),
                            i = this.model.get("infoType"),
                            s = ["chat-" + t];
                        i && s.push(i), this.type && this.type !== t && (this.classes += " chat-" + this.type), this.type = t, this.classes.length && this.$el.removeClass(this.classes);
                        if (t == "info") {
                            var o = this.iconClass;
                            switch (this.model.get("infoType")) {
                            case r.Models.ChatActivity.LEFT_BROADCAST:
                                this.iconClass = "user icon-user-remove-gray-flat";
                                break;
                            case r.Models.ChatActivity.JOINED_BROADCAST:
                                this.iconClass = "user icon-user-add-gray-flat";
                                break;
                            case r.Models.ChatActivity.LEFT_JOINED_BROADCAST:
                                this.iconClass = "user icon-user-add-gray-flat";
                                break;
                            case r.Models.ChatActivity.JOINED_LEFT_BROADCAST:
                                this.iconClass = "user icon-user-remove-gray-flat";
                                break;
                            case r.Models.ChatActivity.SUGGESTION_ADDED:
                                break;
                            case r.Models.ChatActivity.SUGGESTION_APPROVED:
                                this.iconClass = "upvote icon-upvote-color-flat";
                                break;
                            case r.Models.ChatActivity.SONG_CHANGED:
                                var u = this.model.get("song"),
                                    a = n.model.get("player").get("currentQueue");
                                u.get("isActiveSong") && a && !a.get("isBroadcasting") && s.push("has-buttons")
                            }
                        }
                        var f = this.model.get("specialFlag");
                        f && s.push("chat-" + f), this.model.get("closeable") && s.push("closeable"), this.isAdminLoggedIn = r.Models.Comment.ADMINS[r.getLoggedInUserID()], this.classes = s.join(" "), this.$el.addClass(this.classes), e || this.render()
                    },
                    onDownvoteClick: function(e) {
                        var t = $(e.currentTarget),
                            i = n.model.get("player").get("currentQueue"),
                            s = i.get("currentBroadcast"),
                            o = this.model.get("song");
                        if (!s) return;
                        if (i.get("isBroadcasting")) return;
                        var u = s.get("activeSong");
                        o instanceof r.Models.BroadcastSong && u && o.get("queueSongID") === u.get("queueSongID") && (o.get("userVote") === -1 ? s.voteActiveSong(0) : s.voteActiveSong(-1))
                    },
                    onUpvoteClick: function(e) {
                        var t = $(e.currentTarget),
                            i = n.model.get("player").get("currentQueue"),
                            s = i.get("currentBroadcast"),
                            o = this.model.get("song");
                        if (!s) return;
                        if (i.get("isBroadcasting")) return;
                        var u = s.get("activeSong");
                        o instanceof r.Models.BroadcastSong && u && o.get("queueSongID") === u.get("queueSongID") ? o.get("userVote") === 1 ? s.voteActiveSong(0) : s.voteActiveSong(1) : o instanceof r.Models.BroadcastSuggestion && (o.get("userVote") < 1 ? s.suggestSong(o) : s.removeSuggestion(o))
                    },
                    onApproveClick: function(e) {
                        var t = $(e.currentTarget),
                            r = n.model.get("player").get("currentQueue"),
                            i = r.get("currentBroadcast"),
                            s = this.model.get("song");
                        if (!i) return;
                        r.get("isBroadcasting") && i.approveSuggestedSong(s)
                    },
                    onEnableChatClick: function(e) {
                        var t = $(e.currentTarget),
                            i = n.model.get("player").get("currentQueue"),
                            s = i ? i.get("currentBroadcast") : null,
                            o = _.eventToGUTSCoords(e);
                        o.broadcastID = s ? s.get("BroadcastID") : "", s && !s.get("chatEnabled") && (s.updateBroadcastPreferences(!0, s.get("suggestionsEnabled")), r.trigger("guts:log", "broadcastEnableChatClicked", o))
                    },
                    onBroadcastUserOptionsClick: function(e) {
                        var t = $(e.currentTarget),
                            i = r.Models.User.getCached(t.data("userId")),
                            s = n.model.get("player").get("currentQueue"),
                            o = s ? s.get("currentBroadcast") : null;
                        o && t.jjmenu(e, i.getBroadcastOptionMenu(o), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            keepState: t
                        })
                    }
                }), r.Views.Modules.CalloutRow = r.Views.Modules.Base.extend({
                    className: "module module-row callout grid-item",
                    cacheKey: "CalloutRow",
                    templateFile: "calloutRow",
                    changeModelSelectors: {
                        "&": function(e, t) {},
                        ".title": function(e, t) {
                            _.$one(t).innerText(this.model.get("Name"))
                        },
                        ".play-btn-container": function(e, t) {
                            _.$one(t)[this.model.get("transcoded") ? "removeClass" : "addClass"]("hide")
                        },
                        ".spinner": function(e, t) {
                            _.$one(t)[this.model.get("transcoded") ? "addClass" : "removeClass"]("hide")
                        },
                        ".duration": function(e, t) {
                            _.$one(t).innerText(_.millisToMinutesSeconds(this.model.get("EstimateDuration") * 1e3))
                        },
                        ".module-progress": function(e, t) {
                            _.$one(t)[this.model.get("transcoded") ? "addClass" : "removeClass"]("hide")
                        },
                        ".progress-complete": function(e, t) {
                            _.$one(t).width(Math.min(this.model.get("uploadPercent") / 100, 1) * 100 + "%")
                        }
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments)));
                        var t = this.changeModelSelectors[".progress-complete"];
                        _.isFunction(t) && t.call(this, 0, this.$el.find(".progress-complete"))
                    }
                }), r.Views.Modules.TagDropdown = r.Views.Modules.Base.extend({
                    className: "module tag-dropdown",
                    cacheKey: "TagDropdown",
                    templateFile: "tagDropdown",
                    events: {
                        "click #broadcast-tag": "onBroadcastTagClick"
                    },
                    changeModelSelectors: {
                        "&": function(e, t) {},
                        "#broadcast-tag": function(e, t) {
                            this.updateSelectedTag()
                        }
                    },
                    initialize: function() {
                        $(document).click(_.bind(this.onDocumentClick, this)), this.model = _.orEqual(this.model, new Backbone.Model), this.options.saveOnSelection = _.orEqual(this.options.saveOnSelection, !0), this.options.onSelection = _.orEqual(this.options.onSelection, function() {}), this.options.defaultTagName = _.orEqual(this.options.defaultTagName, _.getString("BROADCAST_DEFAULT_TAG")), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    render: function() {
                        var e = this._super.apply(this, ["render"].concat(_.toArray(arguments)));
                        return e.done(_.bind(this.updateSelectedTag, this)), e
                    },
                    onDestroy: function() {
                        this.closeTooltip()
                    },
                    onDocumentClick: function(e) {
                        var t = this.$el.has(e.target).length > 0,
                            n = this.tagTooltip && this.tagTooltip.$el.has(e.target).length > 0;
                        !t && !n && this.closeTooltip()
                    },
                    closeTooltip: function() {
                        this.tagTooltip && this.tagTooltip.closeTooltip()
                    },
                    getNamedTag: function(e) {
                        if (e && this.tags && this.tags[e]) return {
                            n: e,
                            i: this.tags[e]
                        };
                        if (e === _.getString("BROADCAST_DEFAULT_TAG")) return null
                    },
                    getSelectedTag: function() {
                        var e = this.$el.find("#broadcast-tag").data("tag");
                        return this.getNamedTag(e)
                    },
                    updateSelectedTag: function() {
                        var e = this.model.get("Tag"),
                            t = e ? e.n : this.options.defaultTagName;
                        this.$el.find("#broadcast-tag").data("tag", t).find(".name").text(t)
                    },
                    showBroadcastTagTooltip: function(e, i) {
                        i = i ? _.extend({}, i) : {}, allTags = _.extend({}, i);
                        var s = n.model.get("player").get("currentQueue"),
                            o = s && s.get("songs"),
                            u = o && o.pluck("Tags"),
                            a = _.pluck(r.Models.Tag.topGenres, "tag"),
                            f = {},
                            l, c;
                        for (var h = 0, p = u.length, d, v; h < p; h++) for (d = 0, v = u[h] && u[h].models && u[h].models.length; d < v; d++) {
                            l = u[h].models[d];
                            if (!l) continue;
                            c = l.get("TagID"), f[c] ? f[c][1]++ : f[c] = [l, 1]
                        }
                        var m = new r.Models.Collections.Tags(_.pluck(_.sortBy(f, "1").slice(0, 3), "0")),
                            g = m.map(function(e) {
                                return String.prototype.toLowerCase.apply(e.get("Tag") || "")
                            });
                        this.options.defaultTagName !== _.getString("BROADCAST_DEFAULT_TAG") && g.push(this.options.defaultTagName), g.push(_.getString("BROADCAST_DEFAULT_TAG")), a.splice.apply(a, [0, 0].concat(g)), _.each(r.Models.Tag.topGenres, function(e) {
                            allTags[e.tag] = e.tagID
                        }), _.each(m, function(e) {
                            e && (allTags[e.get("Tag")] = e.get("TagID"))
                        });
                        var y = this.model instanceof r.Models.Broadcast ? this.model : t,
                            b = this.options.tooltipKey || "broadcast-tag-tooltip",
                            w = new r.Views.Tooltips.BroadcastTag({
                                model: y,
                                tooltipKey: b,
                                tags: i,
                                defaultTags: a,
                                submit: _.bind(this.onNewTagChosen, this)
                            }),
                            E = w.onDestroy;
                        w.onDestroy = _.bind(function() {
                            e.removeClass("active"), E.apply(w, _.toArray(arguments)), this.tagTooltip = null
                        }, this), this.tagTooltip = w, this.tags = allTags;
                        var S = {};
                        S.views = [w], S.$attached = e, S.persist = !0, S.y = "bottom", S.notch = "top", S.tooltipClass = b, S.tooltipKey = b, S.width = _.max([e.outerWidth(), 150]), r.trigger("tooltip:open", S), e.addClass("active")
                    },
                    onNewTagChosen: function(e) {
                        e = e.toLowerCase();
                        var t = this.getNamedTag(e);
                        t || console.log("tagID missing!", e, t, this.tags), this.options.saveOnSelection && this.model instanceof r.Models.Broadcast ? this.model.updateBroadcastDetails(null, this.getNamedTag(e)) : (this.$el.find("#broadcast-tag").data("tag", e).find(".name").text(e), this.options.onSelection(e))
                    },
                    onBroadcastTagClick: function(e) {
                        if (this.tagTooltip) {
                            this.tagTooltip.closeTooltip();
                            return
                        }
                        var t = $(e.currentTarget);
                        this.tagsDfd || (this.tagsDfd = r.Models.Tag.getTagList()), this.tagsDfd.done(_.bind(this.showBroadcastTagTooltip, this, t)).fail(function() {
                            r.trigger("notification:add", {
                                title: _.getString("POPUP_FAILED_TO_GET_TAGS"),
                                type: "error"
                            })
                        })
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Modules = t.Views.Modules || {}, t.Views.Modules.FeedEvent = t.Views.Modules.Base.extend({
                    className: "module-feed-event",
                    cacheKey: "FeedEvent",
                    templateFile: "feedEvent",
                    maxItems: 12,
                    canComment: !0,
                    useObjectNames: !1,
                    events: {
                        "click .feed-options": "onFeedOptionClick",
                        "click .feed-play": "onFeedPlayClick",
                        "click .feed-add": "onFeedAddClick",
                        "click .feed-content": "onFeedEventClick",
                        "click .feed-favorite": "onFeedFavoriteClick",
                        "click .feed-respond-cta": "feedCommentOpen",
                        "submit .module-item-respond": "commentSubmit",
                        "click .delete-response-cta": "deleteComment",
                        "click .delete-event-cta": "deleteEvent",
                        "click .open-user-profile": "openUser"
                    },
                    initialize: function(e) {
                        this.$el.data("event", this.model), this.user = e.user, this.maxItems = _.orEqual(e.maxItems, this.maxItems), this.canComment = _.orEqual(e.canComment, !0), this.canRemove = _.orEqual(e.canRemove, this.model.canRemove()), this.isArtistCommenting = _.orEqual(e.isArtistCommenting, !1), this.useObjectNames = _.orEqual(e.useObjectNames, this.useObjectNames), this.feedCommentsOpened = !1, this.isShare = !1;
                        var n = this.model.get("data");
                        if (this.model.get("activityName") == "broadcast" && n && (n.users || n.people)) {
                            var r = new t.Models.Collections.Users(n.users || n.people);
                            r.length == 1 && r.get(t.getLoggedInUserID()) && (this.isShare = !0)
                        }
                        this.model.on("change:comments", this.renderNewComment, this), this.model.on("destroy", this.destroy, this), t.on("locale:changed", this.render, this), (this.templateFile == "communityFeedEvent" || this.templateFile == "singleFeedEvent") && t.on("manatee:broadcastEnded", this.render, this)
                    },
                    destroy: function() {
                        t.off("locale:changed", null, this), t.off("manatee:broadcastEnded", null, this), this._super.apply(this, ["destroy"].concat(_.toArray(arguments)))
                    },
                    renderNewComment: function() {
                        this.render(), this.feedCommentsOpened && this.feedCommentOpen()
                    },
                    render: function() {
                        var e = _.toArray(arguments);
                        return this.model.getNormalizedObject(this.useObjectNames).done(_.bind(function(t) {
                            t && (this.templateData = t, this._super.apply(this, ["render"].concat(e)))
                        }, this))
                    },
                    completeRender: function(e) {
                        this.templateData.artistCommenting = this.isArtistCommenting ? t.Models.Artist.getCached(this.isArtistCommenting) : !1, this.templateData.maxItems = this.maxItems, this.templateData.addStreamType = "TYPE_ACTIVITY", this.isShare && (this.templateData.addStreamType += ",TYPE_SHARE"), n.model.get("user").getFollowers().done(_.bind(function() {
                            this.templateData.canComment = this.canComment && this.model.canComment(), this.templateData.canRemove = this.canRemove && this.model.canRemove(), this.$el.html(this.renderTemplate(e, this.templateData))
                        }, this))
                    },
                    feedCommentOpen: function(e) {
                        var t = this.$el.find(".module-item-respond").removeClass("hide");
                        e && (e.preventDefault(), $("input", t).focus(), this.feedCommentsOpened = !0)
                    },
                    commentSubmit: function(e) {
                        function u() {
                            s.storeComment(i, o).done(function() {
                                r.val(""), r.removeClass("pending")
                            })
                        }
                        e.preventDefault();
                        var n = $(e.currentTarget),
                            r = $("input", n),
                            i = r.val(),
                            s = this.model,
                            o = this.isArtistCommenting;
                        if (r.hasClass("pending") || !i) return;
                        t.getLoggedInUserID() > 0 ? u.call(this) : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_COMMENT"),
                            onLogin: _.bind(u, this),
                            onClose: function() {
                                r.removeClass("pending")
                            }
                        }), r.addClass("pending")
                    },
                    deleteEvent: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget);
                        this.model.hideEvent()
                    },
                    deleteComment: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.parents(".response-content").data("commentId");
                        this.model.hideComment(n)
                    },
                    openUser: function(e) {
                        var n = $(e.currentTarget).data("userId");
                        t.Models.User.get(n).done(function(e) {
                            t.router.setHash(e.toUrl())
                        })
                    },
                    onFeedFavoriteClick: function(e) {
                        var n = $(e.currentTarget),
                            r = n.data("playlistId"),
                            i = n.data("artistId"),
                            s = n.data("userId"),
                            o = function(e, t, n) {
                                var r = "";
                                if (t == "Playlist") n ? r = "SUBSCRIBED" : r = "SUBSCRIBE";
                                else if (t == "Artist" || t == "User") n ? r = "FOLLOWING" : r = "FOLLOW";
                                var i = e.find("span");
                                i.text(_.getString(r)), i.attr("data-translate-text", r), n ? (e.addClass("btn-success"), e.find(".icon").addClass("icon-check-white-active").removeClass("icon-plus-gray")) : (e.removeClass("btn-success"), e.find(".icon").removeClass("icon-check-white-active").addClass("icon-plus-gray"))
                            },
                            u, a;
                        r ? (u = "Playlist", a = r) : i ? (u = "Artist", a = i) : s && (u = "User", a = s), t.Models[u].get(a).done(_.bind(function(e) {
                            var t = "favorite";
                            e.get("isFavorite") && (t = "unfavorite"), this.user[t](u + "s", a).done(function() {
                                o(n, u, e.get("isFavorite"))
                            })
                        }, this))
                    },
                    onFeedOptionClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getOptionMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "feed-option",
                            keepState: t
                        })
                    },
                    onFeedAddClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getAddMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "feed-add",
                            keepState: t
                        })
                    },
                    onFeedPlayClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getPlayMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "feed-play",
                            keepState: t
                        })
                    },
                    getPlayMenu: function(e) {
                        var n = this.isShare,
                            r, i = _.bind(function() {
                                var e = $.Deferred();
                                if (this.templateData.itemType === "song") {
                                    var i = [],
                                        s = this.model.get("data").songs;
                                    for (var o = 0; o < s.length; o++) i.push(_.orEqual(s[o].SongID, s[o].songID));
                                    r = new t.Models.PlayContext, r.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), n && r.addStreamType(t.Models.PlayContext.TYPE_SHARE), e.resolve({
                                        songIDs: i,
                                        context: r
                                    })
                                } else if (this.templateData.itemType === "playlist") {
                                    if (this.model.get("data").playlists) {
                                        var u = t.Models.Playlist.wrapFeedData(this.model.get("data").playlists[0]);
                                        if (!u) return;
                                        r = new t.Models.PlayContext(u), r.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), n && r.addStreamType(t.Models.PlayContext.TYPE_SHARE), u.getSongs().done(function() {
                                            if (u.get("songs")) {
                                                var t = u.get("songs").pluck("SongID");
                                                e.resolve({
                                                    songIDs: t,
                                                    context: r
                                                })
                                            }
                                        })
                                    }
                                } else if (this.templateData.itemType === "album") {
                                    var a = t.Models.Album.getCached(this.templateData.item.id);
                                    if (!a) return;
                                    r = new t.Models.PlayContext(a), r.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), n && r.addStreamType(t.Models.PlayContext.TYPE_SHARE), a.getSongs().done(function() {
                                        if (a.get("songs")) {
                                            var t = a.get("songs").pluck("SongID");
                                            e.resolve({
                                                songIDs: t,
                                                context: r
                                            })
                                        }
                                    })
                                }
                                return e.promise()
                            }, this),
                            s = [];
                        return this.templateData.itemType === "song" ? s.push({
                            title: _.getString("PLAY_NOW"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:addSongs", e.songIDs, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play"
                        }, {
                            title: _.getString("PLAY_NEXT"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:addSongs", e.songIDs, t.Services.SWF.playSpecialIndexes.NEXT, !1, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play_next"
                        }, {
                            title: _.getString("PLAY_LAST"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:addSongs", e.songIDs, t.Services.SWF.playSpecialIndexes.LAST, !1, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play_last"
                        }) : this.templateData.itemType === "playlist" ? s.push({
                            title: _.getString("PLAY_PLAYLIST"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:addSongs", e.songIDs, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play"
                        }) : this.templateData.itemType === "album" && s.push({
                            title: _.getString("PLAY_ALBUM"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:addSongs", e.songIDs, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play"
                        }), s.push({
                            customClass: "separator"
                        }, {
                            title: _.getString("REPLACE_QUEUE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:addSongs", e.songIDs, t.Services.SWF.playSpecialIndexes.REPLACE, !0, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_replace_playlist"
                        }, {
                            title: _.getString("START_RADIO"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    i().done(function(e) {
                                        t.trigger("player:startRadioWithSongs", e.songIDs, e.context)
                                    })
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_sucks"
                        }), s
                    },
                    getAddMenu: function() {
                        var e = [],
                            n = this.model.get("data").songs,
                            r = t.Models.User.getCached(t.getLoggedInUserID()),
                            i = this.isShare;
                        for (var s = 0; s < n.length; s++) new t.Models.Song(n[s]), e.push(n[s].SongID || n[s].songID);
                        var o = [{
                            title: _.getString("CONTEXT_ADD_TO_QUEUE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    var n = new t.Models.PlayContext;
                                    n.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), i && n.addStreamType(t.Models.PlayContext.TYPE_SHARE), t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.LAST, !1, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_now_playing"
                        }, {
                            title: _.getString("ADD_TO_COLLECTION"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.addSongsToLibrary(e)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_music"
                        }];
                        return n.length == 1 && !n[0].isFavorite && o.push({
                            title: _.getString("CONTEXT_ADD_TO_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.favorite("Songs", e)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        }), o.push({
                            title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                            type: "sub",
                            src: r.getPlaylistsMenu(!1, !0, {
                                songs: e
                            }, function(t) {
                                t.addSongs(e, null, !0)
                            }),
                            customClass: "jj_menu_item_add_playlist jj_menu_item_more"
                        }), o
                    },
                    onFeedEventClick: function(e) {
                        var n = $(".module-feed-event").index($(e.target).closest(".module-feed-event")) + 1,
                            r = $(e.target).closest(".feed-content").data("type");
                        t.trigger("guts:log", "feedEventClick", {
                            rank: n,
                            eventType: r
                        })
                    },
                    getOptionMenu: function() {
                        var e = [],
                            n = this.isShare,
                            r;
                        return this.templateData.itemType === "song" ? e.push({
                            title: _.getString("SELECTION_PLAY_ALL"),
                            customClass: "jj_menu_item_play_all",
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    var e = [],
                                        i = this.model.get("data").songs;
                                    r = new t.Models.PlayContext, r.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), n && r.addStreamType(t.Models.PlayContext.TYPE_SHARE);
                                    for (var s = 0; s < i.length; s++) e.push(_.orEqual(i[s].SongID, i[s].songID));
                                    t.trigger("player:addSongs", e, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, r)
                                }, this)
                            }
                        }) : this.templateData.itemType === "album" ? e.push({
                            title: _.getString("PLAY_ALBUM"),
                            customClass: "jj_menu_item_play_all",
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    var e = t.Models.Album.getCached(this.templateData.item.id);
                                    if (!e) return;
                                    r = new t.Models.PlayContext(e), r.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), n && r.addStreamType(t.Models.PlayContext.TYPE_SHARE), e.getSongs().done(function() {
                                        if (e.get("songs")) {
                                            var n = e.get("songs").pluck("SongID");
                                            t.trigger("player:addSongs", n, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, r)
                                        }
                                    })
                                }, this)
                            }
                        }) : this.templateData.itemType === "playlist" && e.push({
                            title: _.getString("PLAY_PLAYLIST"),
                            customClass: "jj_menu_item_play_all",
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    if (this.model.get("data").playlists) {
                                        var e = t.Models.Playlist.wrapFeedData(this.model.get("data").playlists[0]);
                                        if (!e) return;
                                        r = new t.Models.PlayContext(e), r.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY), n && r.addStreamType(t.Models.PlayContext.TYPE_SHARE), e.getSongs().done(function() {
                                            if (e.get("songs")) {
                                                var n = e.get("songs").pluck("SongID");
                                                t.trigger("player:addSongs", n, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, r)
                                            }
                                        })
                                    }
                                }, this)
                            }
                        }), t.getLoggedInUserID() > 0 && e.push({
                            title: this.model.getIsUserOnEvent(t.getLoggedInUserID()) ? _.getString("REMOVE") : _.getString("HIDE"),
                            customClass: "jj_menu_item_delete",
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.model.hideEvent(this.model.get("EventID"))
                                }, this)
                            }
                        }), e
                    }
                }), t.Views.Modules.InterestingFeedEvent = t.Views.Modules.FeedEvent.extend({
                    className: "module-feed-event",
                    cacheKey: "CommunityFeedEvent",
                    templateFile: "communityFeedEvent",
                    maxItems: 20,
                    canComment: !1
                }), t.Views.Modules.CommunityFeedEvent = t.Views.Modules.FeedEvent.extend({
                    className: "module-feed-event",
                    cacheKey: "CommunityFeedEvent",
                    templateFile: "communityFeedEvent"
                }), t.Views.Modules.CommunityCommentTypeFeedEvent = t.Views.Modules.CommunityFeedEvent.extend({
                    className: "module-feed-event",
                    cacheKey: "CommunityCommentTypeFeedEvent",
                    templateFile: "communityCommentTypeFeedEvent"
                }), t.Views.Modules.SmallFeedEvent = t.Views.Modules.FeedEvent.extend({
                    className: "module-feed-event module-small-feed-event",
                    cacheKey: "SmallFeedEvent",
                    templateFile: "smallFeedEvent",
                    useObjectNames: !0,
                    feedCommentOpen: function(e) {
                        var t = this.$el.find(".feed-comments-container").removeClass("hide");
                        e && (e.preventDefault(), $("input", t).focus(), this.feedCommentsOpened = !0)
                    }
                }), t.Views.Modules.SingleFeedEvent = t.Views.Modules.FeedEvent.extend({
                    className: "module-feed-event",
                    cacheKey: "SingleFeedEvent",
                    templateFile: "singleFeedEvent",
                    initialize: function(e) {
                        this.$relatedContentEl = e.$relatedContentEl, this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    completeRender: function() {
                        this.loadRelatedContent(), this._super.apply(this, ["completeRender"].concat(_.toArray(arguments)))
                    },
                    loadRelatedContent: function() {
                        if (!this.templateData || !this.$relatedContentEl) return;
                        var e = $.Deferred(),
                            n = this.templateData,
                            r, i, s;
                        switch (n.itemType) {
                        case "playlist":
                            if (!n.items && n.item) {
                                var o = n.item.model;
                                if (o) {
                                    var u = new t.Models.User({
                                        UserID: o.get("UserID"),
                                        Name: o.get("UserName")
                                    });
                                    r = "playlist", s = u.getPlaylists(!1, 1e3), i = {
                                        playlist: o,
                                        owner: u
                                    }
                                }
                            }
                            break;
                        case "artist":
                            if (!n.items && n.item) {
                                var a = t.Models.Artist.getCached(n.item.id);
                                a && (r = "similarArtists", s = a.getSimilarArtists(), i = {
                                    artist: a
                                })
                            }
                            break;
                        case "album":
                            if (!n.items && n.item) {
                                var f = t.Models.Album.getCached(n.item.id);
                                f && (r = "topAlbumSongs", s = f.getSongs(), i = {
                                    album: f
                                })
                            }
                            break;
                        case "song":
                            if (!n.items && n.item) {
                                var l = t.Models.Song.getCached(n.item.id);
                                if (l) {
                                    var c = new t.Models.Artist({
                                        ArtistID: l.get("ArtistID"),
                                        ArtistName: l.get("ArtistName")
                                    });
                                    r = "topArtistSongs", s = c.getSongs(), i = {
                                        song: l,
                                        artist: c
                                    }
                                }
                            }
                        }
                        if ( !! r) {
                            var h = _.chainLoading();
                            h.push(this.fetchTemplate("/shared/digests/" + r + "Digest").done(h.bind(function(e) {
                                i.template = e
                            }))), h.push(s.done(h.bind(this.renderRelatedContent, this, r, i)))
                        }
                    },
                    renderRelatedContent: function(e, n, r) {
                        if (!n.template || !r || !this.$relatedContentEl) return;
                        switch (e) {
                        case "topArtistSongs":
                            var i = n.artist;
                            n.songs = _.toArray(i.get("songs")).sort(t.Models.Song.popularSort).slice(0, 3);
                            if (!n.songs.length) return;
                            break;
                        case "topAlbumSongs":
                            var s = n.album;
                            n.songs = _.toArray(s.get("songs")).sort(t.Models.Song.popularSort).slice(0, 3);
                            if (!n.songs.length) return;
                            break;
                        case "playlist":
                            var o = n.owner;
                            n.playlists = _.toArray(o.get("playlists")).slice(0, 3);
                            if (!n.playlists.length) return;
                            break;
                        case "similarArtists":
                            n.artists = _.toArray(n.artist.get("similarArtists")).slice(0, 3);
                            if (!n.artists.length) return
                        }
                        var u = n.template;
                        delete n.template, this.$relatedContentEl.html(this.renderTemplate(u, n))
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {};
                var i = function(e) {
                        var t = document.createElement("div").style,
                            n = ["ms", "Webkit", "Moz", "O"],
                            r = n.length,
                            i, s;
                        if (e in t) return e;
                        while (r--) {
                            i = n[r] + e;
                            if (i in t) {
                                s = i;
                                break
                            }
                        }
                        return s
                    },
                    s = i("Transform"),
                    o = {
                        dimension: ["width", "height"],
                        item: ["itemWidth", "itemHeight"],
                        outer: ["outerWidth", "outerHeight"],
                        inner: ["innerWidth", "innerHeight"],
                        direction: ["left", "top"],
                        scrollDir: ["scrollLeft", "scrollTop"]
                    },
                    u = .75;
                $.browser.msie && $.browser.version < 9 && (u = .4), r.Views.Grid = Backbone.View.extend({
                    templatePath: "grid",
                    events: {
                        "click .grid-column": "handleColumnClick",
                        "click .grid-resize.resizable": "handleResizeClick",
                        "click .grid-item": "handleItemClickProxy",
                        "dblclick .grid-item": "handleItemDblclick",
                        "selectstart .grid-column": "handleSelectStart",
                        "selectstart .grid-item": "handleSelectStart",
                        "mousedown .grid-resize.resizable": "handleResizeEvents",
                        "contextmenu .grid-item": "handleContextMenuClick"
                    },
                    defaults: {
                        axis: "y",
                        itemHeight: 15,
                        bufferBefore: u,
                        bufferAfter: u,
                        itemsPerRow: 1,
                        header: !0,
                        allowMultiSelect: !1,
                        pageEl: "#page-wrapper",
                        variableSize: !1
                    },
                    rendered: !1,
                    initialize: function() {
                        this.options = _.defaults(this.options, this.defaults), this.options.axis = this.options.axis == "x" ? "x" : "y";
                        var e = this.options.axis == "x" ? 0 : 1,
                            t = this.options.axis == "x" ? 1 : 0,
                            n = {},
                            i = {};
                        _.each(o, function(r, s) {
                            n[s] = r[e], i[s] = r[t]
                        }), this.axisTranslations = n, this.axisTranslationsAntonyms = i, this.createdHeaders = !1, this.renderers = [], this.selectedItems = new Backbone.Collection, this.$viewport = $('<div class="grid-viewport"></div>'), this.$canvas = $('<div class="grid-canvas"></div>'), this.options.header && (this.$header = $('<div class="grid-header module-row-header"></div>')), this.$el.addClass("grid-" + this.cid);
                        var s = Math.ceil(screen[this.axisTranslations.dimension] / this.options[this.axisTranslations.item] * this.options.itemsPerRow);
                        this.options.maximumVisibleItems ? (this.maximumVisibleItems = this.options.maximumVisibleItems, this.bufferBefore = 0, this.bufferAfter = 0, this.blockSize = this.options.maximumVisibleItems) : (this.maximumVisibleItems = Math.ceil(s * (1 + this.options.bufferBefore + this.options.bufferAfter)), this.bufferBefore = Math.floor(s * this.options.bufferBefore), this.bufferAfter = Math.floor(s * this.options.bufferAfter), this.blockSize = Math.floor((this.maximumVisibleItems - this.bufferBefore) / 2)), this.options.scrollElement ? this.$scrollElement = this.options.scrollElement : this.$scrollElement = _.getScrollableParent(this.$el), this.scrollOffset = 0, this.selectedItems.on("reset", function(e, t) {
                            var n, r;
                            if (t && t.removed && t.removed.length) for (n = 0, r = t.removed.length; n < r; n++) t.removed[n].trigger(this.cid + ":deselect");
                            for (n = 0, r = e.models.length; n < r; n++) e.models[n].trigger(this.cid + ":select")
                        }, this), this.selectedItems.on("add", function(e, t, n) {
                            e.trigger(this.cid + ":select")
                        }, this), this.selectedItems.on("remove", function(e, t, n) {
                            e.trigger(this.cid + ":deselect")
                        }, this), $(document).on("keydown." + this.cid, _.bind(this.handleKeydown, this)), $(this.options.pageEl).on("click." + this.cid, _.bind(this.handlePageElClick, this)), this.$scrollElement.on("scroll." + this.cid, _.animationThrottle(this.handleScroll, this)), this.visibleCollection = new this.collection.constructor(this.collection.models), this.collection.on("add", function(e, t, n) {
                            n.at = n.index, this.visibleCollection.add(e, n)
                        }, this), this.collection.on("remove", function(e, t, n) {
                            this.visibleCollection.remove(e, n)
                        }, this), this.collection.on("reset", function(e, t) {
                            this.visibleCollection.reset(e.models)
                        }, this), this.visibleCollection.on("reset", function(e, t) {
                            this.handleScroll({
                                force: !0
                            })
                        }, this), this.visibleCollection.on("remove reset", _.bind(function() {
                            var e = this.selectedItems.toArray(),
                                t = _.intersection(e, this.visibleCollection.toArray()),
                                n = _.difference(e, t);
                            this.selectedItems.remove(n)
                        }, this)), this.$el.data({
                            view: this
                        });
                        var u = this;
                        this.visibleCollection.on("add remove reset", _.debounce(_.bind(u.resize, u), 100), this), this.visibleCollection.on("add remove", _.debounce(_.bind(u.handleScroll, u, {
                            force: !0
                        }), 100), this), r.on("page:redrawUpdate", this.recalculateScrollOffset, this)
                    },
                    onDestroy: function() {
                        this.collection.off("add remove reset", null, this), this.visibleCollection.off("add remove reset", null, this), this.$el.removeClass("grid-" + this.cid), this.$style && this.$style.remove(), _.$one(document).off("keydown." + this.cid), _.$one(this.options.pageEl).off("click." + this.cid), this.$scrollElement.off("scroll." + this.cid), this.$el.data({
                            view: t
                        });
                        var e = this.options.variableSize;
                        _.each(this.renderers, function(t) {
                            e && t.off("resized." + this.cid), t.destroy()
                        }), _.$one(document).off("mousemove." + this.cid), _.$one(document).off("mouseup." + this.cid), _.$one(document).off("selectstart." + this.cid), r.off("page:redrawUpdate", null, this)
                    },
                    getRenderer: function(e, t) {
                        if (this.renderers[e]) return t && this.renderers[e].changeModel(t, {
                            selected: this.selectedItems.indexOf(t) !== -1
                        }), this.renderers[e];
                        if (t) {
                            var n = new this.options.itemRenderer({
                                grid: this,
                                model: t,
                                addClass: this.options.addRowClass
                            });
                            return this.options.variableSize && n.on("resized." + this.cid, _.debounce(_.bind(self.moduleResized, self), 100), this), this.renderers[e] = n, this.$canvas.append(n.$el), n.render(), n
                        }
                        return null
                    },
                    recalculateScrollOffset: function() {
                        if (this.destroyed) return;
                        try {
                            var e = 0,
                                t = this.$el,
                                n = this.$el,
                                r = 0;
                            do r++, t[0] && t[0] == n[0] && (e += t.position()[this.axisTranslations.direction], n = n.offsetParent()), t = t.parent();
                            while (t[0] != this.$scrollElement[0] && r < 1e4);
                            e += this.$scrollElement[this.axisTranslations.scrollDir](), this.scrollOffset = e
                        } catch (i) {
                            console.error("failed to recalculateScrollOffset: grid" + this.cid, this.$el[0].className, i)
                        }
                    },
                    render: function() {
                        var e = 0,
                            t = [],
                            n = null;
                        _.each(this.visibleCollection.first(this.maximumVisibleItems), _.bind(function(r) {
                            var i = this.getRenderer(e, r);
                            n || (n = i), t.push(i.renderDfd), e++
                        }, this)), this.firstRenderer = n, this.$viewport.css({
                            position: "relative"
                        }), this.$canvas.css({
                            position: "absolute"
                        }), this.recalculateScrollOffset(), this.options.header && this.$el.append(this.$header), this.$el.append(this.$viewport), this.resize(), this.createHeaders(), this.writeCSS(), $.after(t).done(_.bind(function() {
                            this.$viewport.append(this.$canvas), this.rendered || (this.rendered = !0, this.trigger("rendered"), this.writeCSS())
                        }, this))
                    },
                    refresh: function() {
                        var e = 0,
                            t = this.maximumVisibleItems,
                            n;
                        for (; e < t; e++) n = this.getRenderer(e), n && n.renderDfd.then(_.bind(n.handleModelChange, n))
                    },
                    resize: function() {
                        var e = Math.ceil(this.visibleCollection.length / this.options.itemsPerRow),
                            t = {
                                position: "relative"
                            },
                            n = 0;
                        if (this.options.variableSize) for (var r = 0, i = this.visibleCollection.length; r < i; r++) n += this.options.itemRenderer.estimateSize(this.visibleCollection.at(r), this);
                        else n = e * this.options[this.axisTranslations.item];
                        t[this.axisTranslations.dimension] = n + (this.options.header ? this.$header[this.axisTranslations.dimension]() : 0), this.$el.css(t), this.trigger("resized")
                    },
                    moduleResized: function() {
                        this.resize(), this.handleScroll({
                            force: !0
                        })
                    },
                    writeCSS: function() {
                        var e = [],
                            t = this.cid,
                            n = 0,
                            r = this.renderers.length && this.renderers[0].$el,
                            i = function(e, t) {
                                if ($("body").hasClass("is-ie7")) {
                                    if (!r) return;
                                    var n = (r.find(t).css("padding") || "").replace(/px/g, "").split(" ");
                                    switch (n.length) {
                                    case 1:
                                        e -= (n[0] - 0) * 2;
                                        break;
                                    case 2:
                                        e -= (n[1] - 0) * 2;
                                        break;
                                    case 4:
                                        e -= n[1] - 0 + (n[3] - 0)
                                    }
                                }
                                return e
                            };
                        if (this.$columns) this.$columns.each(function(r, s) {
                            var o = _.$one(s).data(),
                                u = _.$one(s).width(),
                                a = i(u, o.resizeSelector);
                            e.push([".grid-", t, " ", o.resizeSelector, " { width:", a, "px !important;left: " + n + "px !important; }"].join("")), n += u
                        });
                        else if (this.columns) {
                            var s;
                            _.each(this.columns, function(r) {
                                s = i(r.width, r.selector), e.push([".grid-", t, " ", r.selector, " { width:", s, "px !important;left: " + n + "px !important; }"].join("")), n += r.width
                            })
                        }
                        if (e.length || this.$style) {
                            this.$style || (this.$style = $('<style type="text/css"></style>'), $("head").append(this.$style));
                            var o = e.join("\n");
                            o != this._lastCSSRules && (this._lastCSSRules = o, this.$style[0].styleSheet ? this.$style[0].styleSheet.cssText = this._lastCSSRules : this.$style[0].appendChild(document.createTextNode(this._lastCSSRules)))
                        }
                    },
                    createHeaders: function() {
                        if (!this.options.columns || !this.options.columns.length || this.createdHeaders) return;
                        this.columns = [];
                        var e = this.options.header !== !1,
                            t = [],
                            n = [],
                            r = this.columns,
                            i = this.$el.width(),
                            s = 0,
                            o, u;
                        _.each(this.options.columns, function(e, t, n) {
                            e = _.clone(e), r[t] = e, e.resizable = e.resizable !== !1, e.minimumSize = e.minimumSize || 10, e.width = Math.max(e.minimumSize, e.width || e.percent * i || 10), s += e.width
                        }), o = Math.max(0, s - i), u = Math.abs(Math.min(0, s - i)), _.each(this.columns, function(r, i, s) {
                            var a = r.resizable,
                                f = r.minimumSize,
                                l = r.width,
                                c, h, p;
                            a && o && f < l ? (c = s[i + 1] || {}, h = o, p = Math.floor(h / 2), c.resizable && c.minimumSize < c.width - p && (h = Math.ceil(h / 2)), h > f && (h = l - f), l -= h, o -= h) : a && u && (c = s[i + 1] || {}, h = u, c.resizable && (h = Math.ceil(h / 2)), l += h, u -= h), r.width = l;
                            if (e) {
                                var d = '<div class="module-row-column grid-column" style="width:' + l + 'px;float:left;"><a class="header-link"><span>' + (r.title || "&nbsp;") + '<i class="caret"></i></span></a><div class="grid-resize drag-handle ' + (a ? "resizable" : "") + '"></div></div>',
                                    v = $(d);
                                v.data({
                                    columnKey: i,
                                    sortKey: r.sortKey,
                                    resizable: a,
                                    minimumSize: f,
                                    resizeSelector: r.selector
                                }), t.push(v), n.push(v[0])
                            }
                        }), e && (this.$columns = $(n), this.$header.append.apply(this.$header, t)), this.createdHeaders = !0
                    },
                    getScrollPositionToShowItem: function(e, t) {
                        t = _.orEqual(t, !1);
                        if (!this.visibleCollection) return -1;
                        e = this.visibleCollection.find(function(t) {
                            return t.id == e.id
                        });
                        var n = this.visibleCollection.indexOf(e);
                        if (n == -1) return -1;
                        this.options.itemsPerRow > 1 && (n += n % this.options.itemsPerRow);
                        var r = this.$scrollElement[this.axisTranslations.dimension](),
                            i = Math.max(0, this.options[this.axisTranslations.item] * this.visibleCollection.length - r),
                            s = Math.floor(r / this.options[this.axisTranslations.item]);
                        return t && (n = Math.max(0, n - s / 2)), Math.min(i, n * this.options[this.axisTranslations.item])
                    },
                    getMaxScrollPos: function() {
                        var e = this.$scrollElement[this.axisTranslations.dimension]();
                        return Math.max(0, this.options[this.axisTranslations.item] * this.visibleCollection.length - e)
                    },
                    indexFromScrollPosition: function(e) {
                        if (this.options.variableSize) {
                            var t = this.options.itemRenderer.estimateSize,
                                n = 0,
                                r = 0,
                                i = this.visibleCollection.length;
                            for (; r < i; r++) {
                                n += t(this.visibleCollection.at(r), this);
                                if (n >= e) return r
                            }
                        }
                        return Math.floor(e / this.options[this.axisTranslations.item]) * this.options.itemsPerRow
                    },
                    offsetFromIndex: function(e) {
                        if (this.options.variableSize) {
                            var t = this.options.itemRenderer.estimateSize,
                                n = 0,
                                r = 0;
                            for (; r < e; r++) n += t(this.visibleCollection.at(r), this);
                            return n
                        }
                        return Math.ceil(e * this.options[this.axisTranslations.item] / this.options.itemsPerRow)
                    },
                    handleScroll: function(e) {
                        var t = e && (e.overrideScrollPos || e.overrideScrollPos === 0 && .1) || this.$scrollElement[this.axisTranslations.scrollDir]() - this.scrollOffset,
                            n = this.indexFromScrollPosition(_.toInt(t)),
                            r, i, o;
                        n = Math.max(0, Math.floor(Math.min(n, this.visibleCollection.length - this.bufferAfter) / this.blockSize) * this.blockSize), this.options.itemsPerRow > 1 && (n -= n % this.options.itemsPerRow);
                        if (this.lastScrollIndex == n && (e && e.force !== !0 || !e)) return;
                        this.lastScrollIndex = n;
                        for (var u = 0, a = this.maximumVisibleItems, f = n; u < a; u++, f++) {
                            o = this.visibleCollection.models[f], r = this.getRenderer(u, o);
                            if (!r) continue;
                            i || (i = r), o ? r.show() : r.hide()
                        }
                        var l = this.offsetFromIndex(n);
                        if (l != this.lastOffset) {
                            if (s) {
                                var c;
                                this.axisTranslations.direction === "top" ? c = ["translate(0, ", this.offsetFromIndex(n), "px)"].join("") : c = ["translate(", this.offsetFromIndex(n), "px, 0)"].join(""), this.$canvas.css(s, c)
                            } else this.$canvas.css(this.axisTranslations.direction, this.offsetFromIndex(n));
                            this.lastOffset = l
                        }
                        this.visibleCollection.length && !this.rendered && (this.rendered = !0, this.trigger("rendered"))
                    },
                    handleItemClick: function(e) {
                        if (!$(e.target).is("a") && !$(e.target).parents("a").length) {
                            e.preventDefault();
                            var t = jQuery.data(e.currentTarget, "module"),
                                n = t.model;
                            this.handleItemEvent(e, n)
                        }
                    },
                    handleItemClickProxy: function(e) {
                        var t = jQuery.data(e.currentTarget, "module");
                        if (!this.lastClick || this.lastClick[0] != t || e.timeStamp - this.lastClick[1] > 300) this.lastClick = [t, e.timeStamp], this.handleItemClick(e)
                    },
                    handleItemDblclick: function() {},
                    handleColumnClick: function(e) {
                        e.stopPropagation(), e.preventDefault();
                        var t = $(e.currentTarget),
                            n = t.data(),
                            r = n.sortKey;
                        if (!r) return;
                        this.sort(r)
                    },
                    handleContextMenuClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("module"),
                            i = n.model,
                            s, o, u;
                        (!this.selectedItems.length || this.selectedItems.indexOf(i) == -1) && this.handleItemEvent(e, i), s = this.selectedItems.length;
                        if (t.hasClass("song")) o = "Song";
                        else if (t.hasClass("queue-item")) o = "QueueSong";
                        else if (t.hasClass("artist")) o = "Artist";
                        else if (t.hasClass("album")) o = "Album";
                        else if (t.hasClass("playlist")) o = "Playlist";
                        else {
                            if (!t.hasClass("user")) return !1;
                            o = "User"
                        }
                        u = this.selectedItems.map(function(e) {
                            return e.idAttribute == "playlistSongID" || e.idAttribute == "queueSongID" ? e.get("SongID") : e.id
                        });
                        var a = [],
                            f, l = {};
                        this.options.playContext && (l.playContext = this.options.playContext), this.contextMenuExtra && (l = _.extend(l, this.contextMenuExtra));
                        if (s == 1) {
                            f = i, o == "QueueSong" && (f = i, l.isQueue = !0, l.queueSongClickedID = i.get("queueSongID"), l.queueSongClickedQueueSongID = i.get("queueSongID"), l.autoplayEnabled = i.get("songQueueHelper").autoplayEnabled);
                            if (!f || !_.isFunction(f.getSingleItemContextMenu)) return !1;
                            this.options.playlist && (l.playlist = this.options.playlist, l.playlistSongID = f.get("playlistSongID")), a = f.getSingleItemContextMenu(l)
                        } else o == "Song" && (this.options.playContext && this.options.playContext.type == "playlist" && (l.playlist = this.options.playlist, l.playlistSongIDS = this.selectedItems.pluck("playlistSongID")), a = r.Models.Song.getMultiSongContextMenu(u, l));
                        return a && t.jjmenu(e, a, null, {
                            xposition: "mouse",
                            yposition: "mouse",
                            show: "show",
                            className: "contextmenu",
                            shouldLog: !0
                        }), !1
                    },
                    sort: function(e, t, n) {
                        this.lastSortColumn && ($(this.lastSortColumn).removeClass("desc asc"), this.lastSortColumn = null);
                        if (_.isArray(e)) {
                            this.visibleCollection.comparator = null, this.lastSortKey = null, this.visibleCollection.reset(e, {
                                sorted: !0
                            });
                            return
                        }!t && this.lastSortKey == e && this.lastSortDir == "desc" ? t = "asc" : !this.lastSortDir && this.lastSortKey != e && n ? t = n : t = "desc";
                        var r = t == "asc" ? -1 : 1,
                            i = t == "asc" ? 1 : -1,
                            s = this.options.sortType;
                        !s && e == "TrackNum" ? s = "number" : !s && e == "TSAdded" && (s = "date");
                        var o = function(t, n) {
                                var s = t.get(e),
                                    o = n.get(e);
                                return _.isString(s) && (s = s.toLowerCase()), _.isString(o) && (o = o.toLowerCase()), s > o ? r : i
                            },
                            u = function(t, n) {
                                var s = t.get(e),
                                    o = n.get(e);
                                return s = _.toInt(s), o = _.toInt(o), s > o ? r : i
                            },
                            a = function(t, n) {
                                var s = t.get(e),
                                    o = n.get(e);
                                return s < o ? r : i
                            };
                        s == "number" ? this.visibleCollection.comparator = u : s == "date" ? this.visibleCollection.comparator = a : this.visibleCollection.comparator = o;
                        var f = 0,
                            l = this.$columns && this.$columns.length,
                            c;
                        for (; f < l; f++) _.$one(this.$columns[f]).data("sortKey") == e && (c = $(this.$columns[f]));
                        c && (c.removeClass(t == "asc" ? "desc" : "asc").addClass(t), this.lastSortColumn = c[0]), this.lastSortKey = e, this.lastSortDir = t, this.visibleCollection.sort({
                            sorted: !0
                        })
                    },
                    resetSortCaret: function() {
                        $(".desc", this.$el).removeClass("desc"), $(".asc", this.$el).removeClass("asc"), this.lastSortDir = t, this.lastSortKey = t
                    },
                    filter: function(e, t) {
                        e = _.orEqual(e, "").toLowerCase(), t = _.defaults(_.orEqual(t, {}), {
                            sorted: !0
                        }), this.visibleCollection.reset(this.collection.filter(function(t) {
                            var n = t.get("searchText");
                            return n && n.indexOf(e) > -1
                        }), t)
                    },
                    handleResizeClick: function(e) {
                        e.stopPropagation()
                    },
                    handleKeydown: function(e) {
                        if (!this.selectedItems.length || $(e.target).is("input,textarea,select")) return !0;
                        var t = this.visibleCollection.indexOf(this.selectedItems.lastSelect),
                            n;
                        switch (e.which) {
                        case 8:
                        case 46:
                            if (_.isFunction(this.options.onDelete) && this.selectedItems.length) {
                                e.stopPropagation(), e.preventDefault(), this.options.onDelete(this.selectedItems);
                                return
                            }
                            break;
                        case 38:
                            !e.metaKey && !e.ctrlKey && (n = Math.max(0, t - 1));
                            break;
                        case 40:
                            !e.metaKey && !e.ctrlKey && (n = Math.min(this.visibleCollection.length, t + 1));
                            break;
                        case 65:
                            if (e.metaKey || e.ctrlKey) {
                                e.stopPropagation(), e.preventDefault(), this.selectedItems.reset(this.visibleCollection.models);
                                return
                            }
                        }
                        if (typeof n != "undefined") {
                            e.metaKey = e.ctrlKey = !1, e.stopPropagation(), e.preventDefault();
                            var r = this.visibleCollection.models[n],
                                i;
                            if (!r) return;
                            for (var s = 0, o = this.renderers.length; s < o; s++) if (this.renderers[s].model == r) {
                                i = this.renderers[s];
                                break
                            }
                            this.handleItemEvent(e, r);
                            if (i) {
                                var u = i.$el.offset()[this.axisTranslations.direction],
                                    a = i.$el[this.axisTranslations.dimension](),
                                    f = this.$scrollElement.offset()[this.axisTranslations.direction],
                                    l = this.$scrollElement[this.axisTranslations.outer](),
                                    c = u - f,
                                    h = u - f + a - l,
                                    p;
                                h > 0 ? (p = this.$scrollElement[this.axisTranslations.scrollDir](), this.$scrollElement[this.axisTranslations.scrollDir](p + h)) : c < 0 && (p = this.$scrollElement[this.axisTranslations.scrollDir](), this.$scrollElement[this.axisTranslations.scrollDir](p + c))
                            }
                        }
                    },
                    handleItemEvent: function(e, t) {
                        var n = this.visibleCollection.indexOf(t),
                            r = this.selectedItems.lastSelect;
                        this.selectedItems.lastSelect = t;
                        if ((e.metaKey || e.ctrlKey) && this.selectedItems.indexOf(t) !== -1) {
                            if (this.selectedItems.anchor) {
                                var i = this.visibleCollection.at(n + 1),
                                    s = this.visibleCollection.at(n - 1);
                                this.selectedItems.indexOf(i) !== -1 ? this.selectedItems.anchor = i : this.selectedItems.indexOf(s) !== -1 ? this.selectedItems.anchor = s : this.selectedItems.anchor = null
                            }
                            this.selectedItems.remove(t);
                            return
                        }
                        if (this.options.allowMultiSelect && e.shiftKey && this.selectedItems.anchor) {
                            var o = this.visibleCollection.indexOf(this.selectedItems.anchor),
                                u = this.visibleCollection.indexOf(r),
                                a = Math.min(n, o),
                                f = Math.max(n, o),
                                l;
                            if (u < o) for (l = u; l < o; l++) this.selectedItems.remove(this.visibleCollection.models[l]);
                            if (u > o) for (l = o + 1; l <= u; l++) this.selectedItems.remove(this.visibleCollection.models[l]);
                            for (l = a; l <= f; l++) this.selectedItems.add(this.visibleCollection.at(l));
                            return
                        }
                        e.shiftKey || (this.selectedItems.anchor = t), this.selectedItems.length && (!this.options.allowMultiSelect || !e.metaKey && !e.ctrlKey && !e.shiftKey) ? this.selectedItems.length > 1 || this.selectedItems.indexOf(t) == -1 ? this.selectedItems.reset(t, {
                            removed: [].concat(this.selectedItems.models)
                        }) : this.selectedItems.reset([], {
                            removed: [].concat(this.selectedItems.models)
                        }) : this.selectedItems.add(t)
                    },
                    handlePageElClick: function(e) {
                        if (!this.selectedItems.length) return;
                        var t = this.options.dontDeselectFor || [this.$el.parent()[0]],
                            n = $(e.target),
                            r = !0;
                        while (n.length) {
                            if (_.indexOf(t, n[0]) != -1) {
                                r = !1;
                                break
                            }
                            if (_.$one(n[0]).hasClass("grid-viewport") && n[0] != this.$viewport[0]) break;
                            n = n.parent()
                        }
                        r && this.selectedItems.reset([], {
                            removed: this.selectedItems.models
                        })
                    },
                    handleSelectStart: function(e) {
                        return e.preventDefault(), !1
                    },
                    handleResizeEvents: function() {
                        var e = arguments[arguments.length - 1],
                            t = arguments.length > 1 ? arguments[arguments.length - 2] : null,
                            n = t && $(t) || $(e.currentTarget),
                            r = n.parent(".grid-column"),
                            i = r.next();
                        switch (e.type) {
                        case "mousedown":
                            n.data({
                                resizeStart0: r.width(),
                                resizeStart1: i.width(),
                                resizeStartX: e.pageX
                            }), _.$one(document).on("mousemove." + this.cid, _.bind(this.handleResizeEvents, this, e.currentTarget)), _.$one(document).on("mouseup." + this.cid, _.bind(this.handleResizeEvents, this, e.currentTarget)), _.$one(document).on("selectstart." + this.cid, _.bind(this.handleSelectStart, this));
                            break;
                        case "mousemove":
                            var s = n.data();
                            if (!s.resizeStart0) return;
                            var o = e.pageX - s.resizeStartX,
                                u = s.resizeStart0 + o,
                                a = s.resizeStart1 - o,
                                f = r.data(),
                                l = i.data(),
                                c = f && f.minimumSize && f.minimumSize - u,
                                h = l && l.minimumSize && l.minimumSize - a,
                                p = Math.max(0, c) || Math.min(0, h * -1);
                            o += p, r.width(s.resizeStart0 + o), i.width(s.resizeStart1 - o), this.writeCSS();
                            break;
                        case "mouseup":
                            n.data("resizeStart0", null), _.$one(document).off("mousemove." + this.cid), _.$one(document).off("mouseup." + this.cid), _.$one(document).off("selectstart." + this.cid)
                        }
                    },
                    onActiveSongChange: function() {}
                });
                var a = {
                    events: $.extend({}, r.Views.Grid.prototype.events),
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        canDragFrom: !1,
                        canDragTo: !1,
                        dropIndicatorType: "betweenRows",
                        dropIsValid: null,
                        acceptDrop: null,
                        $dragListenOn: null,
                        $dropListenOn: null
                    }),
                    initialize: function() {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.$dragListenOn = this.options.dragListenOn || this.$el, this.$dropListenOn = this.options.dropListenOn || this.$el, this.$dragListenOn.on("draginit." + this.cid, _.bind(this.handleDragInit, this)), this.$dragListenOn.on("dragstart." + this.cid, _.bind(this.handleDragStart, this)), this.$dragListenOn.on("drag." + this.cid, _.bind(this.handleDrag, this)), this.$dragListenOn.on("dragend." + this.cid, _.bind(this.handleDragEnd, this)), this.$dropListenOn.on("dropinit." + this.cid, _.bind(this.handleDropInit, this)), this.$dropListenOn.on("dropstart." + this.cid, _.bind(this.handleDropStart, this)), this.$dropListenOn.on("drop." + this.cid, _.bind(this.handleDrop, this)), this.$dropListenOn.on("dropend." + this.cid, _.bind(this.handleDropEnd, this))
                    },
                    onDestroy: function() {
                        this._super.apply(this, ["onDestroy"].concat(_.toArray(arguments))), this.$dragListenOn.off("draginit." + this.cid), this.$dragListenOn.off("dragstart." + this.cid), this.$dragListenOn.off("drag." + this.cid), this.$dragListenOn.off("dragend." + this.cid), this.$dropListenOn.off("dropinit." + this.cid), this.$dropListenOn.off("dropstart." + this.cid), this.$dropListenOn.off("drop." + this.cid), this.$dropListenOn.off("dropend." + this.cid)
                    },
                    handleDragInit: function(e, t) {
                        var n = _.isFunction(this.options.canDragFrom) ? this.options.canDragFrom.call(this) : !! this.options.canDragFrom;
                        if (!n) return !1
                    },
                    handleDragStart: function(e, t) {
                        var n = $(e.target);
                        n.hasClass("grid-item") || (n = n.parents(".grid-item"));
                        if (n.length) {
                            var i = n.data("module").model;
                            this.selectedItems.indexOf(i) == -1 && n.click()
                        }
                        if (!this.selectedItems.length || !n.length) return !1;
                        t.draggedItemsContext = this.options.playContext, t.draggedItems = this.selectedItems.toArray(), t.draggedItemsSource = this.cid;
                        var s = $('<div class="grid-drag-proxy"/>').appendTo("body").mousewheel(_.globalDragProxyMousewheel);
                        return s.html(this.itemsToDragProxy(t.draggedItems)), r.trigger("drag:start", t), s
                    },
                    handleDrag: function(e, t) {
                        _.globalDragHandler(e, t)
                    },
                    handleDragEnd: function(e, t) {
                        _.globalDragCleanup(e, t), r.trigger("drag:end", t)
                    },
                    handleDropInit: function(e, t) {
                        e.currentTarget.updateDropOnDrag = _.bind(this.handleDragOver, this)
                    },
                    handleDropStart: function(e, t) {
                        var n = _.isFunction(this.options.canDragTo) ? this.options.canDragTo.call(this) : !! this.options.canDragTo;
                        if (!n || !t.draggedItems || t.draggedItems.length === 0) return delete e.currentTarget.updateDropOnDrag, !1;
                        if (this.options.dropIndicatorType == "betweenRows") {
                            var r = {
                                display: "none"
                            };
                            r[this.options.axis] = 0, r[this.axisTranslations.dimension] = 2, r[this.axisTranslationsAntonyms.dimension] = this.$canvas[this.axisTranslationsAntonyms.inner](), this.lastDropIndex = -1, this.$dropIndicator = $("<div class='grid-drop-indicator'/>").css(r).appendTo(this.$viewport)
                        }
                    },
                    handleDragOver: function(e, t) {
                        var n = this.dropIsValid(e, t);
                        this.$dropListenOn.data("valid-drop", n), this.updateDropIndicator(e, t, n)
                    },
                    dropIsValid: function(e, t) {
                        return _.isFunction(this.options.dropIsValid) ? this.options.dropIsValid.call(this, e, t) : !1
                    },
                    updateDropIndicator: function(e, n, r) {
                        if (!r) this.lastDropIndex = -1, this.$dropIndicator && this.$dropIndicator.hide();
                        else switch (this.options.dropIndicatorType) {
                        case "onRow":
                            $(".grid-item.drop-active", this.$viewport).removeClass("drop-active"), $(".grid-item", this.$viewport).within(e.clientX, e.clientY).eq(0).addClass("drop-active");
                            break;
                        case "betweenRows":
                            var i, s = this.axisTranslations.direction;
                            if (this.currentInsertIndex !== t) i = this.currentInsertIndex, delete this.currentInsertIndex;
                            else {
                                var o = "client" + this.options.axis.toUpperCase(),
                                    u = e[o] - this.$viewport.offset()[s];
                                i = Math.max(0, Math.min(Math.round(u / this.options[this.axisTranslations.item]), this.visibleCollection.length))
                            }
                            i !== this.lastDropIndex && (this.lastDropIndex = i, this.$dropIndicator && (this.$dropIndicator.css(s, i * this.options[this.axisTranslations.item]), this.$dropIndicator.show()))
                        }
                    },
                    handleDropEnd: function(e, t) {
                        switch (this.options.dropIndicatorType) {
                        case "onRow":
                            this.$viewport.find(".grid-item.drop-active").removeClass("drop-active");
                            break;
                        case "betweenRows":
                            this.$dropIndicator && (this.$dropIndicator.remove(), delete this.$dropIndicator)
                        }
                    },
                    handleDrop: function(e, t) {
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems);
                        var n = this.dropIsValid(e, t);
                        if (!n || t.dropHandled) return;
                        if (this.options.dropIndicatorType == "onRow") {
                            var r = $(".grid-item", this.$viewport).within(e.clientX, e.clientY).eq(0);
                            if (r.length) {
                                var i = r.data("module");
                                if (i && i.acceptDrop(t)) {
                                    t.dropHandled = !0;
                                    return
                                }
                            }
                        }
                        t.dropHandled = this.acceptDrop(t)
                    },
                    itemsToDragProxy: function(e) {
                        var t = "";
                        if (_.isArray(e) && e.length) {
                            var n = e[0];
                            e.length > 1 ? n instanceof r.Models.Song || n instanceof r.Models.PlaylistSong || n instanceof r.Models.QueueSong ? t = _.getString("SELECTION_SONGS_COUNT", {
                                count: e.length
                            }) : n instanceof r.Models.Playlist ? t = _.getString("SELECTION_PLAYLIST_COUNT", {
                                count: e.length
                            }) : n instanceof r.Models.Album ? t = _.getString("SELECTION_ALBUM_COUNT", {
                                count: e.length
                            }) : n instanceof r.Models.Artist ? t = _.getString("SELECTION_ARTIST_COUNT", {
                                count: e.length
                            }) : n instanceof r.Models.Broadcast ? t = _.getString("SELECTION_ARTIST_COUNT", {
                                count: e.length
                            }) : t = e.length + " Items" : _.isFunction(n.toProxyLabel) ? t = n.toProxyLabel() : t = n.toString()
                        } else t = e.toString();
                        return ['<div class="status"></div><span class="info"><span class="text">', t, "</span></span>"].join("")
                    },
                    acceptDrop: function(e) {
                        return _.isFunction(this.options.acceptDrop) ? this.options.acceptDrop.call(this, e) : !1
                    }
                },
                    f;
                f = $.extend({}, a), f.defaults.canDragFrom = !0, r.Views.DraggableGrid = r.Views.Grid.extend(f), f = $.extend({}, a), f.defaults.canDragTo = !0, r.Views.DroppableGrid = r.Views.Grid.extend(f), f = $.extend({}, a), f.defaults.canDragFrom = !0, f.defaults.canDragTo = !0, r.Views.DraggableDroppableGrid = r.Views.Grid.extend(f);
                var l = function(e) {
                        if (!$(e.target).is("a") && !$(e.target).parents("a").length) {
                            e.preventDefault();
                            var t = jQuery.data(e.currentTarget, "module"),
                                n = t.model;
                            r.trigger("player:addSongs", [n], -1, !0, this.options.playContext)
                        }
                        return !1
                    },
                    c = function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.Song.getCached(n),
                            s = t.closest(".grid-item"),
                            o;
                        return s && s[0] && (o = {
                            currentTarget: s[0]
                        }), {
                            songID: n,
                            song: i,
                            gridItem: s,
                            $el: t,
                            fakeEvent: o
                        }
                    },
                    h = function(e) {
                        var t = c(e);
                        t.song && !t.song.get("fromLibrary") && t.fakeEvent && r.trigger("guts:logsearch", "OLlibraryClick", this, t.fakeEvent)
                    },
                    p = function(e) {
                        var t = c(e);
                        t.fakeEvent && r.trigger("guts:logsearch", "OLartistPageLoad", this, t.fakeEvent)
                    },
                    d = function(e) {
                        var t = c(e);
                        t.fakeEvent && r.trigger("guts:logsearch", "OLalbumPageLoad", this, t.fakeEvent)
                    },
                    v = function(e) {
                        var t = c(e);
                        t.fakeEvent && r.trigger("guts:logsearch", "OLsongPageLoad", this, t.fakeEvent)
                    },
                    m = function(e) {
                        try {
                            var t = c(e),
                                i = n.model.get("player").get("currentQueue").get("songs").length;
                            t.fakeEvent && i === 0 ? r.trigger("guts:logsearch", "OLplayButton", this, t.fakeEvent) : t.fakeEvent && i === 0 && r.trigger("guts:logsearch", "OLaddButton", this, t.fakeEvent)
                        } catch (s) {
                            console.log(s)
                        }
                    },
                    g = function(e) {
                        var t = c(e);
                        t.fakeEvent && r.trigger("guts:logsearch", "OLshareClick", this, t.fakeEvent)
                    },
                    y = function(e) {
                        var t = c(e);
                        t.fakeEvent && r.trigger("guts:logsearch", "OLfavoriteClick", this, t.fakeEvent)
                    },
                    b = [{
                        title: "",
                        selector: ".primary",
                        minimumSize: 41,
                        visible: !1,
                        resizable: !1
                    }, {
                        title: "Song Name",
                        selector: ".module-row-cell.song",
                        minimumSize: 120,
                        sortKey: "SongName"
                    }, {
                        title: "Artist Name",
                        selector: ".artist",
                        minimumSize: 120,
                        sortKey: "ArtistName"
                    }, {
                        title: "Album Name",
                        selector: ".album",
                        minimumSize: 100,
                        sortKey: "AlbumName"
                    }, {
                        title: "Track",
                        selector: ".track-num",
                        minimumSize: 60,
                        resizable: !1,
                        sortKey: "TrackNum",
                        sortType: "number"
                    }, {
                        title: "",
                        selector: ".secondary",
                        minimumSize: 95,
                        visible: !1,
                        resizable: !1
                    }],
                    w = b.slice(0, 3).concat(b.slice(4)),
                    E = b.slice(0, 2).concat(b.slice(3)),
                    S = b.slice(0),
                    x = w.concat([]),
                    T = E.concat([]),
                    N = w.concat([]);
                x.splice(3, 1), T.splice(3, 1), S.splice(4, 1), N.splice(2, 1), r.Views.SongGrid = r.Views.DraggableDroppableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongRow,
                        itemHeight: 31,
                        itemsPerRow: 1,
                        allowMultiSelect: !0,
                        showCount: !0,
                        columns: b,
                        playlist: !1
                    }),
                    handleItemClick: function(e) {
                        this._super("handleItemClick", e)
                    },
                    handleItemDblclick: l,
                    onLibraryClick: h,
                    onArtistLinkClick: p,
                    onAlbumLinkClick: d,
                    onSongLinkClick: v,
                    onSongPlayClick: m,
                    onSongShareClick: g,
                    onSongFavoriteClick: y
                }), r.Views.SongGrid.columnsNoAlbum = w, r.Views.SongGrid.columnsNoArtist = E, r.Views.SongGrid.columnsNoTrack = S, r.Views.SongGrid.columnsNoAlbumTrack = x, r.Views.SongGrid.columnsNoArtistTrack = T, r.Views.SongGrid.columnsNoAlbumArtist = N, r.Views.SongGridTall = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        allowMultiSelect: !0,
                        showCount: !1
                    }),
                    handleItemDblclick: l,
                    onLibraryClick: h,
                    onArtistLinkClick: p,
                    onAlbumLinkClick: d,
                    onSongLinkClick: v,
                    onSongPlayClick: m,
                    onSongShareClick: g,
                    onSongFavoriteClick: y
                }), r.Views.SongGridBlock = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongCell,
                        itemHeight: 178,
                        itemsPerRow: 3,
                        header: !1
                    }),
                    handleItemDblclick: l,
                    onLibraryClick: h,
                    onArtistLinkClick: p,
                    onAlbumLinkClick: d,
                    onSongLinkClick: v,
                    onSongPlayClick: m,
                    onSongShareClick: g,
                    onSongFavoriteClick: y
                }), r.Views.CalloutGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.CalloutRow,
                        itemHeight: 32,
                        itemsPerRow: 1,
                        allowMultiSelect: !1,
                        header: !1
                    }),
                    handleItemClick: function() {}
                }), r.Views.ArtistDashboardSongsGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ArtistDashboardSongCell,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.SongSuggestGrid = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        allowMultiSelect: !0,
                        showCount: !1
                    }),
                    handleItemClick: function(e) {
                        this.options.isBroadcastOwner && this._super("handleItemClick", e)
                    },
                    handleItemDblclick: l
                }), r.Views.AlbumGrid = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.AlbumCellVertical,
                        itemHeight: 201,
                        itemsPerRow: 4,
                        header: !1
                    })
                }), r.Views.AlbumGridTall = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.AlbumRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.ArtistAlbumGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ArtistAlbumRow,
                        variableSize: !0,
                        itemHeight: 163,
                        itemsPerRow: 1,
                        header: !1
                    }),
                    onDestroy: function() {
                        this._super.apply(this, ["onDestroy"].concat(_.toArray(arguments)));
                        var e = this.cid;
                        this.collection.each(function(t) {
                            t._gridSelectedItems && t._gridSelectedItems.hasOwnProperty(e) && delete t._gridSelectedItems[e]
                        })
                    }
                }), r.Views.PromotionAlbumBlock = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.PromotionAlbumCell,
                        itemHeight: 178,
                        itemsPerRow: 3,
                        header: !1
                    })
                }), r.Views.PromotionSongBlock = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongCell,
                        itemHeight: 178,
                        itemsPerRow: 4,
                        header: !1
                    })
                }), r.Views.TagGridBlock = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.TagCellVertical,
                        itemHeight: 151,
                        itemsPerRow: 4,
                        header: !1
                    })
                }), r.Views.UserArtistGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.UserArtistCell,
                        itemHeight: 135,
                        itemsPerRow: 2,
                        header: !1
                    })
                }), r.Views.UserGridTall = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.UserRowTall,
                        itemHeight: 52,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.SuggestedUserGridTall = r.Views.UserGridTall.extend({
                    defaults: $.extend({}, r.Views.UserGridTall.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SuggestedUserRowTall
                    })
                }), r.Views.BroadcastUserGridTall = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.UserRowTall,
                        itemHeight: 52,
                        itemsPerRow: 1,
                        header: !1
                    }),
                    handleItemClick: function() {},
                    handleContextMenuClick: function() {}
                }), r.Views.ArtistDashboardTopFansGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ArtistDashboardTopFanCell,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.ArtistGrid = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ArtistCellVertical,
                        itemHeight: 172,
                        itemsPerRow: 4,
                        header: !1
                    })
                }), r.Views.ArtistGridTall = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ArtistRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.ArtistGridProfileCard = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ArtistProfileCard,
                        itemHeight: 162,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.PlaylistGrid = r.Views.DraggableDroppableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.PlaylistCell,
                        itemHeight: 140,
                        itemsPerRow: 2,
                        dropIndicatorType: "onRow"
                    }),
                    dropIsValid: function(e, t) {
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems);
                        var n = $(".grid-item", this.$viewport).within(e.clientX, e.clientY).eq(0);
                        if (n.length && t.draggedItemsType !== "playlist") {
                            var r = n.data("module").model;
                            if (r && r.isEditable()) return !0
                        }
                        return !1
                    }
                }), r.Views.PlaylistGridSmall = r.Views.DraggableDroppableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.PlaylistCellSmall,
                        itemHeight: 95,
                        itemsPerRow: 2,
                        dropIndicatorType: "onRow"
                    }),
                    dropIsValid: function(e, t) {
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems);
                        var n = $(".grid-item", this.$viewport).within(e.clientX, e.clientY).eq(0);
                        if (n.length && t.draggedItemsType !== "playlist") {
                            var r = n.data("module").model;
                            if (r && r.isEditable()) return !0
                        }
                        return !1
                    }
                }), r.Views.BroadcastGridSmall = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.BroadcastCellSmall,
                        itemHeight: 95,
                        itemsPerRow: 2
                    })
                }), r.Views.BroadcastRowTallGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.BroadcastRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    }),
                    handleItemClick: function() {},
                    handleContextMenuClick: function() {}
                }), r.Views.BroadcastSongRowTallGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    }),
                    handleContextMenuClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("module"),
                            r = n.model;
                        return r.get("isCallout") ? !1 : this._super.apply(this, ["handleContextMenuClick"].concat(_.toArray(arguments)))
                    }
                }), r.Views.BroadcastGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.BroadcastCell,
                        itemHeight: 180,
                        itemsPerRow: 3,
                        header: !1
                    }),
                    initialize: function() {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.collection.on("reset", _.bind(this.filterVisibleCollection, this))
                    },
                    filter: function(e) {
                        this.filterSearchText = _.orEqual(e, "").toLowerCase(), this.filterVisibleCollection()
                    },
                    filterByTag: function(e) {
                        this.filterTagName = e, this.filterVisibleCollection()
                    },
                    filterVisibleCollection: function() {
                        var e = {
                            silent: !! this.filterTagName
                        };
                        this._super.apply(this, ["filter", this.filterSearchText, e]), this.filterTagName && this.visibleCollection.reset(this.visibleCollection.getForTagName(this.filterTagName), {
                            sorted: !0
                        })
                    }
                }), r.Views.BroadcastsSidebarGrid = r.Views.DraggableDroppableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SidebarBroadcast,
                        itemHeight: 25,
                        itemsPerRow: 1,
                        dropIndicatorType: "onRow",
                        header: !1
                    }),
                    dropIsValid: function(e, t) {
                        return !1
                    },
                    handleDropInit: function(e, t) {
                        var n = "dropinitScrollbarHandler",
                            r = this.$el.parents(".scrollable"),
                            i = r.data(n);
                        t.$tinyScrollbars = t.$tinyScrollbars || [], r && (!i || t.drop !== i) && (t.$tinyScrollbars.push(r), r.data(n, t.drop)), this._super("handleDropInit", e, t)
                    }
                }), r.Views.UserSidebarGrid = r.Views.DroppableGrid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SidebarUser,
                        itemHeight: 40,
                        itemsPerRow: 1,
                        canDragTo: !0,
                        dropIndicatorType: "onRow",
                        header: !1,
                        variableSize: !0
                    }),
                    dropIsValid: function(e, t) {
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems);
                        var n = ["song", "artist", "album", "playlist"];
                        return t.draggedItems.length == 1 && _.indexOf(n, t.draggedItemsType) != -1
                    },
                    handleDropInit: function(e, t) {
                        var n = "dropinitScrollbarHandler",
                            r = this.$el.parents(".scrollable"),
                            i = r.data(n);
                        t.$tinyScrollbars = t.$tinyScrollbars || [], r && (!i || t.drop !== i) && (t.$tinyScrollbars.push(r), r.data(n, t.drop)), this._super("handleDropInit", e, t)
                    }
                }), r.Views.PlaylistsSidebarGrid = r.Views.DraggableDroppableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SidebarPlaylist,
                        itemHeight: 25,
                        itemsPerRow: 1,
                        dropIndicatorType: "onRow",
                        header: !1
                    }),
                    dropIsValid: function(e, t) {
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems);
                        var n = $(".grid-item", this.$viewport).within(e.clientX, e.clientY).eq(0);
                        if (n.length && t.draggedItemsType !== "playlist" && t.draggedItemsType !== "broadcast") {
                            var r = n.data("module").model;
                            if (r && r.isEditable()) return !0
                        }
                        return !1
                    },
                    handleDropInit: function(e, t) {
                        var n = "dropinitScrollbarHandler",
                            r = this.$el.parents(".scrollable"),
                            i = r.data(n);
                        t.$tinyScrollbars = t.$tinyScrollbars || [], r && (!i || t.drop !== i) && (t.$tinyScrollbars.push(r), r.data(n, t.drop)), this._super("handleDropInit", e, t)
                    }
                }), r.Views.PlaylistGridTall = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.PlaylistRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.PlaylistsFeaturedGrid = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.PlaylistCellBlock,
                        itemHeight: 140,
                        itemsPerRow: 7,
                        header: !1
                    })
                }), r.Views.EventGridTall = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.EventRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1
                    })
                }), r.Views.VideoGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.VideoCell,
                        itemHeight: 178,
                        itemsPerRow: 7,
                        header: !1
                    })
                }), r.Views.StationGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.StationRow,
                        itemHeight: 23,
                        itemsPerRow: 1,
                        header: !1
                    }),
                    handleItemClick: function() {},
                    handleContextMenuClick: function() {},
                    handleItemDblclick: function(e) {
                        var t = $(e.currentTarget).children(".module-row").attr("data-tagid");
                        r.trigger("player:radio", !0, t), r.trigger("lightbox:close")
                    }
                }), r.Views.TagGrid = r.Views.DraggableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.TagRow,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        header: !1,
                        hideRelatedGenresButton: !1
                    }),
                    dropIsValid: function(e, t) {
                        return t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems), console.log(e, t), !1
                    }
                }), r.Views.ThemeGrid = r.Views.Grid.extend({
                    defaults: $.extend({}, r.Views.Grid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.ThemeCell,
                        itemHeight: 115,
                        itemsPerRow: 4,
                        header: !1
                    })
                }), r.Views.QueueGrid = r.Views.DraggableDroppableGrid.extend({
                    defaults: $.extend({}, r.Views.DraggableDroppableGrid.prototype.defaults, {
                        axis: "x",
                        itemRenderer: r.Views.Modules.QueueSongCell,
                        itemWidth: 86,
                        header: !1
                    }),
                    isObjectDropable: function(e) {
                        var t = this.model,
                            n = t.get("currentQueue"),
                            i = n ? n.get("currentBroadcast") : null,
                            s = n ? n.get("isBroadcasting") : !1,
                            o = n && !0;
                        if (o && s && e) {
                            var u = t.get("position"),
                                a = t.get("duration");
                            i.get("listenersCount") > r.Services.SWF.largeBroadcastThreshold && n.get("nextSong") === e && a && a - u < r.Services.SWF.broadcastNextPreventPosition ? o = !1 : e.get("broadcastPlayed") && (o = !1)
                        }
                        return o
                    },
                    isPositionDropable: function(e) {
                        var t = this.model.get("currentQueue"),
                            n = t ? t.get("isBroadcasting") : !1;
                        if (n && e) {
                            var r = t.get("songs");
                            if (r && e <= r.lastIndexOf(t.get("activeSong"))) return !1
                        }
                        return !0
                    },
                    dropIsValid: function(e, t) {
                        t.draggedItemsType = t.draggedItemsType || _.getCollectionType(t.draggedItems);
                        if (t.draggedItemsType === "song" && t.draggedItems && t.draggedItems.length) {
                            if (!this.isObjectDropable(t.draggedItems[0])) return !1
                        } else if (!this.isObjectDropable()) return !1;
                        var n = "client" + this.options.axis.toUpperCase(),
                            r = this.axisTranslations.direction,
                            i = e[n] - this.$viewport.offset()[r];
                        return this.currentInsertIndex = Math.max(0, Math.min(Math.round(i / this.options[this.axisTranslations.item]), this.visibleCollection.length)), this.isPositionDropable(this.currentInsertIndex)
                    },
                    handleDropInit: function(e, t) {
                        var n = "dropinitScrollbarHandler",
                            r = this.$el.parents("#queue"),
                            i = r.data(n);
                        t.$tinyScrollbars = t.$tinyScrollbars || [], r && (!i || t.drop !== i) && (t.$tinyScrollbars.push(r), r.data(n, t.drop));
                        var s = $(e.srcElement).closest(".queue-item"),
                            o = this.isObjectDropable(s.length === 1 ? s.data("module").model : null);
                        this.$dropListenOn.data("valid-drop", o), this._super("handleDropInit", e, t)
                    },
                    acceptDrop: function(e) {
                        function u(e) {
                            return function(n) {
                                r.trigger("player:addSongs", n.toArray(), t + i, !1, e), i++
                            }
                        }
                        e.draggedItemsType = e.draggedItemsType || _.getCollectionType(e.draggedItems);
                        var t = this.lastDropIndex,
                            i = 0,
                            s, o;
                        switch (e.draggedItemsType) {
                        case "song":
                            e.draggedItemsSource == this.cid ? r.Services.SWF.moveSongsTo(_.pluck(e.draggedItems, "id"), t) : r.trigger("player:addSongs", e.draggedItems, t, !1, e.draggedItemsContext);
                            break;
                        case "tag":
                            var a = e.draggedItems[0];
                            n.playGenre(a.get("DisplayName"), a.get("TagID"));
                            break;
                        case "album":
                        case "artist":
                        case "playlist":
                            for (s = 0; s < e.draggedItems.length; s++) o = e.draggedItems[s], _.isFunction(o.getSongs) && o.getSongs().then(u(new r.Models.PlayContext(o)));
                            break;
                        case "user":
                            for (s = 0; s < e.draggedItems.length; s++) o = e.draggedItems[s], _.isFunction(o.getFavorites) && o.getFavorites("Songs").then(u(new r.Models.PlayContext(o)));
                            break;
                        default:
                            return !1
                        }
                        return !0
                    }
                }), r.Views.NowPlayingGrid = r.Views.QueueGrid.extend({
                    defaults: $.extend({}, r.Views.QueueGrid.prototype.defaults, {
                        itemRenderer: r.Views.Modules.SongRowTall,
                        itemHeight: 51,
                        itemsPerRow: 1,
                        allowMultiSelect: !0,
                        hidePlayButton: !0,
                        axis: "y",
                        itemWidth: null
                    }),
                    dropIsValid: function(e, t) {
                        return r.isBroadcaster() ? !1 : this._super("dropIsValid", e, t)
                    },
                    handleItemDblclick: function(e) {
                        if (!$(e.target).is("a") && !$(e.target).parents("a").length) {
                            var t = $.data(e.currentTarget, "queueSongId");
                            r.trigger("player:playSong", t)
                        }
                    },
                    onLibraryClick: h,
                    onArtistLinkClick: p,
                    onAlbumLinkClick: d,
                    onSongLinkClick: v,
                    onSongPlayClick: m,
                    onSongShareClick: g,
                    onSongFavoriteClick: y
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.GridToolbar = Backbone.View.extend({
                    templatePath: "shared",
                    sortResetObject: {},
                    events: {
                        "click .btn": "onButtonClick",
                        "click .play-button": "onPlayClick",
                        "click .play-menu": "onPlayMenuClick",
                        "click .add-button": "onAddClick",
                        "click .add-menu": "onAddMenuClick",
                        "click .sort-button": "onSortClick",
                        "click .playlist-new-button": "newPlaylist",
                        "click .all-music": "onAllMusicClick",
                        "click .favorites": "onFavoritesClick",
                        "keyup input.filter": "onFilterChange",
                        "submit form.search-bar": "onFilterSubmit",
                        "click .search-bar": "onSearchBarClick",
                        "click .clear-filter": "onClearFilterClick",
                        "focus input.search": "onFilterFocus",
                        "blur input.search": "onFilterBlur",
                        "click .delete-button": "onDeleteClick",
                        "click .invite-friends": "onInviteFriendsClick"
                    },
                    initialize: function() {
                        this.gridView = this.options.gridView, _.isArray(this.gridView) || (this.gridView = [this.gridView]), this.page = this.options.page, this.playContext = this.options.playContext, this.buttons = {}, _.isFunction(this.options.onButtonClick) && (this.onButtonClick = this.options.onButtonClick), this.lastSort = {
                            type: this.page != "album" ? "original" : "track",
                            dir: "asc"
                        };
                        switch (this.page) {
                        case "playlist":
                            this.lastSort.label = "PLAYLIST_ORDER";
                            break;
                        case "playlists":
                        case "subscribedPlaylists":
                            this.lastSort.label = "PLAYLIST_LAST_EDITED";
                            break;
                        case "artist":
                            this.lastSort.label = "POPULARITY";
                            break;
                        case "album":
                            this.lastSort.label = "TRACK_NUM";
                            break;
                        case "tag":
                        case "search":
                            this.lastSort.label = "RELEVANCE";
                            break;
                        case "userMusic":
                        case "userMusicFavorites":
                            this.lastSort.label = "DATE_ADDED";
                            break;
                        default:
                            this.lastSort.label = ""
                        }
                        var e = this.options.buttons,
                            n, r;
                        for (n = 0, r = e.length; n < r; n++) this.buttons[e[n]] = !0;
                        if (this.buttons.sort || this.buttons.filterSearch) for (n = 0, r = this.gridView.length; n < r; n++) {
                            var i = this.gridView[n];
                            this.currentOrder || (this.currentOrder = []), this.currentOrder.push(new i.collection.constructor(i.collection.models)), i.selectedItems.on("add remove reset", this.updateSelectionCount, this), i.visibleCollection.on("add remove reset", this.updateSortLabel, this), i.on("resized", function() {
                                t.trigger("page:resize")
                            }, this)
                        }
                        this.buttons.btnGroupNav && (this.btnGroupNavInfo = this.options.btnGroupNavInfo), this.buttons.primaryBtnGroupNav && (this.primaryBtnGroupNavInfo = this.options.primaryBtnGroupNavInfo), this.$scrollElem = $("#page-wrapper"), this.$scrollElem.on("scroll." + this.cid, _.animationThrottle(this.handleScroll, this)), t.on("page:redrawUpdate", this.calculateOffsetPosition, this)
                    },
                    onDestroy: function() {
                        for (var e = 0; e < this.gridView.length; e++) {
                            var n = this.gridView[e];
                            n.selectedItems.off(null, null, this), n.collection.off(null, null, this), n.off(null, null, this)
                        }
                        this.$scrollElem && this.$scrollElem.off("scroll." + this.cid), t.off("page:redrawUpdate", null, this)
                    },
                    render: function() {
                        this.fetchTemplate("gridToolbar").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, this)), this.options.page == "userMusicFavorites" && this.resetCollection(!0), this.buttons.tagDropdown && (this.tagDropdown = new t.Views.Modules.TagDropdown({
                            el: this.$el.find(".module.tag-dropdown")[0],
                            tooltipKey: "broadcast-tag-tooltip",
                            saveOnSelection: !1,
                            onSelection: _.bind(this.onTagFilterChange, this),
                            defaultTagName: _.getString("SEE_ALL_GENRES").toLowerCase()
                        }), this.tagDropdown.render()), this.updateSortLabel(), this.$el.show(), this.trigger("rendered"), this.calculateOffsetPosition(), this.trigger("rendered")
                    },
                    onTagFilterChange: function(e) {
                        e === this.tagDropdown.options.defaultTagName && (e = !1);
                        for (var t = 0, n = this.gridView.length; t < n; t++) this.gridView[t].filterByTag(e)
                    },
                    calculateOffsetPosition: function() {
                        if (!this.$el._isSticky) try {
                            var e = 0,
                                t = this.$el,
                                n = this.$el,
                                r = 0;
                            do r++, t[0] && t[0] == n[0] && (e += t.position().top, n = n.offsetParent()), t = t.parent();
                            while (t[0] != this.$scrollElem[0] && r < 1e4);
                            e += this.$scrollElem.scrollTop(), this.offset = e
                        } catch (i) {
                            console.error("failed to calculateOffsetPosition: gridToolbar" + this.cid, this.$el[0].className, i)
                        }
                    },
                    updateSelectionCount: function() {
                        var e = 0,
                            t, n, r, i, s;
                        for (var o = 0, u = this.gridView.length; o < u; o++) e += this.gridView[o].selectedItems.length;
                        var a = e ? " (" + e + ")" : "";
                        e ? (s = "EDIT_COUNT", t = _.getString("ADD"), n = _.getString("PLAY"), r = _.getString("EDIT_COUNT", {
                            count: e
                        }), i = _.getString("SELECTION_DELETE")) : (s = "EDIT_ALL", t = _.getString("SELECTION_ADD_ALL"), n = _.getString("SELECTION_PLAY_ALL"), r = _.getString("EDIT_ALL"), i = _.getString("SELECTION_DELETE_ALL"));
                        var f = $(".add-label"),
                            l = $(".play-label"),
                            c = $(".edit-label"),
                            h = $(".delete-label");
                        f.text(t + a), f.attr("data-translate-text", t), l.text(n + a), l.attr("data-translate-text", n), c.text(r), c.data({
                            translateText: s,
                            count: e
                        }), h.text(i + a), h.attr("data-translate-text", i), a ? $(".delete-button").removeClass("hide").addClass("show") : $(".delete-button").addClass("hide").removeClass("show")
                    },
                    updateSortLabel: function() {
                        if (this.gridView && this.gridView[0] && !this.bypassGridSort) switch (this.gridView[0].lastSortKey) {
                        case "SongName":
                            this.lastSort.label = "SONG";
                            break;
                        case "ArtistName":
                            this.lastSort.label = "ARTIST";
                            break;
                        case "AlbumName":
                            this.lastSort.label = "ALBUM";
                            break;
                        case "TrackNum":
                            this.lastSort.label = "TRACK_NUM"
                        }
                        var e = $(".sort-label"),
                            t = this.lastSort.label;
                        e.attr("data-translate-text", t), e.text(_.getString(t))
                    },
                    resetCollection: function(e) {
                        var t, n = _.isFunction(this.options.favFilterFunction) ? this.options.favFilterFunction : function(e) {
                                return e.get("isFavorite")
                            };
                        for (var r = 0, i = this.gridView.length; r < i; r++) e ? t = this.currentOrder[r].filter(n) : t = this.currentOrder[r].models, this.gridView[r].collection.reset(t);
                        var s = this.$el.find("input.filter").val("");
                        s.siblings(".clear-filter").css({
                            visibility: "hidden"
                        })
                    },
                    clearFilter: function() {
                        this.$el.find(".filter").val("").keyup()
                    },
                    onClearFilterClick: function(e) {
                        this.clearFilter()
                    },
                    onDeleteClick: function(e) {
                        for (var t = 0; t < this.gridView.length; t++) {
                            var n;
                            this.gridView[t].selectedItems.length ? n = this.gridView[t].selectedItems.toArray() : n = this.gridView[t].visibleCollection.toArray(), n.length && _.isFunction(this.gridView[t].options.onDelete) && this.gridView[t].options.onDelete(n)
                        }
                    },
                    newPlaylist: function(e) {
                        this.model.get("appModel").get("user").id > 0 ? t.trigger("lightbox:open", "createPlaylist") : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                            onLogin: function(e) {
                                t.trigger("lightbox:open", "createPlaylist")
                            }
                        })
                    },
                    onPlayClick: function(e) {
                        e.preventDefault();
                        var n = this.playContext ? this.playContext.clone() : new t.Models.PlayContext,
                            r = [],
                            i = !0;
                        for (var s = 0, o = this.gridView.length; s < o; s++) this.gridView[s].selectedItems.length ? (r = r.concat(this.gridView[s].selectedItems.toArray()), i = !1) : r = r.concat(this.gridView[s].visibleCollection.toArray());
                        var u = ["search", "artist", "tag", "popular"];
                        i && _.indexOf(u, n.type) != -1 && n.addStreamType(t.Models.PlayContext.TYPE_PLAY_ALL), t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, n)
                    },
                    onPlayMenuClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getPlayMenu(t), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        })
                    },
                    onAddClick: function(e) {
                        e.preventDefault();
                        var n = this.playContext,
                            r = _.getCollectionType(this.gridView[0].collection);
                        if (r != "song") return;
                        var i = [];
                        for (var s = 0; s < this.gridView.length; s++) this.gridView[s].selectedItems.length ? i = i.concat(this.gridView[s].selectedItems.toArray()) : i = i.concat(this.gridView[s].visibleCollection.toArray());
                        t.trigger("player:addSongs", i, t.Services.SWF.playSpecialIndexes.LAST, !1, n)
                    },
                    onAddMenuClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getAddMenu(t), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        })
                    },
                    onSortClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getSortMenu(t), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        })
                    },
                    onAllMusicClick: function(e) {
                        if (!this.currentOrder) return !1;
                        this.resetCollection(!1);
                        var t = $(e.currentTarget);
                        t.siblings().removeClass("active"), t.addClass("active")
                    },
                    onFavoritesClick: function(e) {
                        if (!this.currentOrder) return !1;
                        this.resetCollection(!0);
                        var t = $(e.currentTarget);
                        t.siblings().removeClass("active"), t.addClass("active")
                    },
                    onButtonClick: function() {},
                    onFilterChange: function(e) {
                        var n = e ? $(e.currentTarget) : this.$el.find("input.filter"),
                            r = n.val(),
                            i = !0;
                        n.siblings(".clear-filter").css({
                            visibility: r.length ? "visible" : "hidden"
                        });
                        for (var s = 0, o = this.gridView.length; s < o; s++) this.gridView[s].filter(r), this.gridView[s].visibleCollection.length && (i = !1);
                        this.trigger("filterChanged", r);
                        if (e && e.which == _.keyboard.ENTER && r.length && $.trim(r) !== "" && i) {
                            t.router.performSearch("", r);
                            return
                        }
                    },
                    onFilterSubmit: function(e) {
                        return !1
                    },
                    onSearchBarClick: function(e) {
                        $(".search-bar .placeholder", this.$el).hide(), $("#filter-search", this.$el).focus()
                    },
                    onFilterFocus: function(e) {
                        $(".search-bar .placeholder", this.$el).hide()
                    },
                    onFilterBlur: function(e) {
                        e.currentTarget.value === "" && $(".search-bar .placeholder", this.$el).show()
                    },
                    onSortItemClick: function(e, t, n) {
                        this.lastSort.label = t;
                        var r, i;
                        if (e === this.sortResetObject) {
                            this.bypassGridSort = !0;
                            for (r = 0, i = this.gridView.length; r < i; r++) this.gridView[r].visibleCollection.comparator = null, this.gridView[r].visibleCollection.reset(_.intersection(this.currentOrder[r].models, this.gridView[r].visibleCollection.models)), this.gridView[r].resetSortCaret();
                            this.updateSortLabel();
                            return
                        }
                        this.bypassGridSort = !1;
                        for (r = 0, i = this.gridView.length; r < i; r++) this.gridView[r].sort(e, null, n);
                        this.updateSortLabel()
                    },
                    handleScroll: function() {
                        if (!this.offset) return;
                        var e = this.$scrollElem.scrollTop(),
                            t = $("#header-container"),
                            n = t.outerHeight() + t.offset().top;
                        e > this.offset - 15 ? (this.$el._isSticky || (this.$el.addClass("sticky"), this.$el._isSticky = !0), this.$el[0].style.top = n + "px") : (this.$el.removeClass("sticky").css("top", "auto"), this.$el._isSticky = !1)
                    },
                    getPlayMenu: function(e) {
                        var n = this.playContext,
                            r = [];
                        for (var i = 0, s = this.gridView.length; i < s; i++) this.gridView[i].selectedItems.length ? r = r.concat(this.gridView[i].selectedItems.toArray()) : r = r.concat(this.gridView[i].visibleCollection.toArray());
                        var o = [{
                            title: _.getString("PLAY_NOW"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.DEFAULT, !0, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play"
                        }, {
                            title: _.getString("PLAY_NEXT"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.NEXT, !1, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play_next"
                        }, {
                            title: _.getString("PLAY_LAST"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.LAST, !1, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_play_last"
                        }, {
                            customClass: "separator"
                        }, {
                            title: _.getString("REPLACE_QUEUE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.REPLACE, !0, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_replace_playlist"
                        }, {
                            title: _.getString("START_RADIO"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:startRadioWithSongs", r, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_replace_playlist"
                        }];
                        return o
                    },
                    getAddMenu: function(e) {
                        var n = this.playContext,
                            r = this.model.get("appModel").get("user"),
                            i = _.getCollectionType(this.gridView[0].collection),
                            s = r.get("library") && r.get("library").models ? new Backbone.Collection(r.get("library").models) : new Backbone.Collection([]),
                            o = t.isBroadcastListener();
                        if (i != "song") return;
                        var u = [],
                            a = [];
                        for (var f = 0; f < this.gridView.length; f++) this.gridView[f].selectedItems.length ? (u = u.concat(this.gridView[f].selectedItems.toArray()), a = a.concat(this.gridView[f].selectedItems.toArray())) : u = u.concat(this.gridView[f].visibleCollection.toArray());
                        var l = [];
                        o || l.push({
                            title: _.getString("CONTEXT_ADD_TO_QUEUE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("player:addSongs", u, t.Services.SWF.playSpecialIndexes.LAST, !1, n)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_now_playing"
                        });
                        var c = [],
                            h = _.filter(u, function(e) {
                                return !s.where({
                                    SongID: e.get("SongID")
                                }).length
                            });
                        if (h.length) _.each(h, function(e, t) {
                            c.push(e.get("SongID"))
                        }), l.push({
                            title: _.getString("ADD_TO_COLLECTION"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.addSongsToLibrary(c)
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_music"
                        });
                        else {
                            var p = [];
                            _.each(_.difference(u, h), function(e, t) {
                                p.push(e.get("SongID"))
                            }), p.length && a.length && l.push({
                                title: _.getString("REMOVE_FROM_COLLECTION"),
                                action: {
                                    type: "fn",
                                    callback: function() {
                                        r.removeSongsFromLibrary(p)
                                    },
                                    log: function() {}
                                },
                                customClass: "jj_menu_item_music"
                            })
                        }
                        return u.length == 1 && !u[0].get("isFavorite") ? l.push({
                            title: _.getString("CONTEXT_ADD_TO_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.favorite("Songs", u[0].get("SongID"))
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        }) : u.length == 1 && l.push({
                            title: _.getString("CONTEXT_REMOVE_FROM_FAVORITES"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.unfavorite("Songs", u[0].get("SongID"))
                                },
                                log: function() {}
                            },
                            customClass: "jj_menu_item_favorites"
                        }), l.push({
                            title: _.getString("CONTEXT_ADD_TO_PLAYLIST"),
                            type: "sub",
                            src: r.getPlaylistsMenu(!1, !0, {
                                songs: u
                            }, function(e) {
                                e.addSongs(u, null, !0)
                            }),
                            customClass: "jj_menu_item_add_playlist jj_menu_item_more"
                        }), l
                    },
                    getSortMenu: function() {
                        switch (this.page) {
                        case "userMusic":
                        case "userMusicFavorites":
                            return this.getUserSortMenu();
                        case "playlist":
                            return this.getPlaylistSortMenu();
                        case "playlists":
                            return this.getPlaylistsSortMenu();
                        case "subscribedPlaylists":
                            return this.getSubscribedPlaylistsSortMenu();
                        case "artist":
                            return this.getArtistSortMenu();
                        case "album":
                            return this.getAlbumSortMenu();
                        case "tag":
                            return this.getTagSortMenu();
                        case "search":
                            return this.getSearchSortMenu();
                        default:
                            return []
                        }
                    },
                    getUserSortMenu: function() {
                        var e = this.getPlaylistSortMenu();
                        return e[0] = {
                            title: _.getString("DATE_ADDED"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "DATE_ADDED")
                            },
                            customClass: "jj_menu_item_blank"
                        }, e
                    },
                    getPlaylistSortMenu: function() {
                        return [{
                            title: _.getString("PLAYLIST_ORDER"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "PLAYLIST_ORDER")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("SONG"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "SongName", "SONG")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("ARTIST"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "ArtistName", "ARTIST")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("ALBUM"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "AlbumName", "ALBUM")
                            },
                            customClass: "jj_menu_item_blank"
                        }]
                    },
                    getPlaylistsSortMenu: function() {
                        return [{
                            title: _.getString("PLAYLIST_LAST_EDITED"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "PLAYLIST_LAST_EDITED")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("DATE_ADDED"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "TSAdded", "DATE_ADDED")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("PLAYLIST_NAME"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "PlaylistName", "PLAYLIST_NAME")
                            },
                            customClass: "jj_menu_item_blank"
                        }]
                    },
                    getSubscribedPlaylistsSortMenu: function() {
                        return [{
                            title: _.getString("PLAYLIST_LAST_EDITED"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "PLAYLIST_LAST_EDITED")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("DATE_SUBSCRIBED"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "TSFavorited", "DATE_SUBSCRIBED")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("PLAYLIST_NAME"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "PlaylistName", "PLAYLIST_NAME")
                            },
                            customClass: "jj_menu_item_blank"
                        }]
                    },
                    getArtistSortMenu: function() {
                        return [{
                            title: _.getString("POPULARITY"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "POPULARITY")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("SONG"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "SongName", "SONG")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("ALBUM"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "AlbumName", "ALBUM")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("TRACK_NUM"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "TrackNum", "TRACK_NUM")
                            },
                            customClass: "jj_menu_item_blank"
                        }]
                    },
                    getAlbumSortMenu: function() {
                        return [{
                            title: _.getString("TRACK_NUM"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "TrackNum", "TRACK_NUM")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("POPULARITY"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "POPULARITY")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("SONG"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "SongName", "SONG")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("ARTIST"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "ArtistName", "ARTIST")
                            },
                            customClass: "jj_menu_item_blank"
                        }]
                    },
                    getTagSortMenu: function() {
                        var e = _.getCollectionType(this.options.gridView.collection),
                            t = [];
                        t.push({
                            title: _.getString("RELEVANCE"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "RELEVANCE")
                            },
                            customClass: "jj_menu_item_blank"
                        });
                        switch (e) {
                        case "song":
                            t.push({
                                title: _.getString("SONG"),
                                action: {
                                    type: "fn",
                                    callback: _.bind(this.onSortItemClick, this, "SongName", "SONG")
                                },
                                customClass: "jj_menu_item_blank"
                            }, {
                                title: _.getString("ARTIST"),
                                action: {
                                    type: "fn",
                                    callback: _.bind(this.onSortItemClick, this, "ArtistName", "ARTIST")
                                },
                                customClass: "jj_menu_item_blank"
                            }, {
                                title: _.getString("ALBUM"),
                                action: {
                                    type: "fn",
                                    callback: _.bind(this.onSortItemClick, this, "AlbumName", "ALBUM")
                                },
                                customClass: "jj_menu_item_blank"
                            });
                            break;
                        case "album":
                            t.push({
                                title: _.getString("ALBUM"),
                                action: {
                                    type: "fn",
                                    callback: _.bind(this.onSortItemClick, this, "AlbumName", "ALBUM")
                                },
                                customClass: "jj_menu_item_blank"
                            });
                            break;
                        case "artist":
                            t.push({
                                title: _.getString("ARTIST"),
                                action: {
                                    type: "fn",
                                    callback: _.bind(this.onSortItemClick, this, "ArtistName", "ARTIST")
                                },
                                customClass: "jj_menu_item_blank"
                            })
                        }
                        return t
                    },
                    getSearchSortMenu: function() {
                        var e = _.getCollectionType(this.options.gridView.collection),
                            t = [];
                        t.push({
                            title: _.getString("RELEVANCE"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, this.sortResetObject, "RELEVANCE")
                            },
                            customClass: "jj_menu_item_blank"
                        });
                        if (e == "song") t.push({
                            title: _.getString("SONG"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "SongName", "SONG")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("ARTIST"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "ArtistName", "ARTIST")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("ALBUM"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "AlbumName", "ALBUM")
                            },
                            customClass: "jj_menu_item_blank"
                        }, {
                            title: _.getString("POPULARITY"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "Popularity", "POPULARITY", "asc")
                            },
                            customClass: "jj_menu_item_blank"
                        });
                        else if (e == "event") t.push({
                            title: _.getString("SOONEST_DATE"),
                            action: {
                                type: "fn",
                                callback: _.bind(this.onSortItemClick, this, "StartTime", "SOONEST_DATE")
                            },
                            customClass: "jj_menu_item_blank"
                        });
                        else {
                            var n = e.toUpperCase();
                            t.push({
                                title: _.getString(n),
                                action: {
                                    type: "fn",
                                    callback: _.bind(this.onSortItemClick, this, (e == "user" ? "F" : _.ucwords(e)) + "Name", n)
                                },
                                customClass: "jj_menu_item_blank"
                            })
                        }
                        return t
                    },
                    onInviteFriendsClick: function() {
                        t.trigger("lightbox:open", "invite")
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.FeedPost = Backbone.View.extend({
                    templatePath: "shared/feedPost",
                    events: {
                        "focus .post-feed-msg": "onPostFocus",
                        "blur .post-feed-msg": "onPostBlur",
                        "focus .post-item": "onSearchFocus",
                        "blur .post-item": "onSearchBlur",
                        "mousedown .attach-music": "onAttachMusicMouseDown",
                        "keydown .post-item-input": "onSearchKeydown",
                        "keyup .post-feed-msg": "onMessageKeyup",
                        "click .selected-item .icon": "clearSelectedItem",
                        "click .share-post": "postToFeed"
                    },
                    initialize: function(e) {
                        this.params = e, this.rendered = !1, this.postType = _.orEqual(e.postType, "feed"), this.posterType = e.posterType, this.poster = e.poster, this.closeTimeout = null, this.$postMsg = this.$el.find(".post-feed-msg"), this.model.on("change:collectionType", this.onTypeChange, this)
                    },
                    onDestroy: function() {
                        return this.clearTooltip(), this._super.apply(this, ["onDestroy"].concat(_.toArray(arguments)))
                    },
                    render: function() {
                        if (this.rendered) return;
                        switch (this.postType) {
                        case "share":
                            this.fetchTemplate("sharePost").done(_.bind(this.onTemplate, this));
                            break;
                        default:
                            this.fetchTemplate("feedPost").done(_.bind(this.onTemplate, this))
                        }
                    },
                    onTemplate: function(e) {
                        if (this.destroyed) return;
                        this.posterType === "artist" && this.postType == "feed" ? this.placeholderText = _.getString("PLACEHOLDER_ARTIST_FEED_SHARE") : this.postType == "feed" ? this.placeholderText = _.getString("PLACEHOLDER_USER_FEED_SHARE") : this.postType == "share" && (this.placeholderText = _.getString("PLACEHOLDER_SUGGEST_MUSIC_MSG")), this.$el.html(this.renderTemplate(e, this)), this.$attachBtn = _.orEqual(this.params.attachBtn, this.$el.find(".attach-music")), this.$attachBtn.on("click", _.bind(this.onAttachMusicClick, this)), this.rendered = !0
                    },
                    onPostFocus: function(e) {
                        var t = $(e.currentTarget);
                        t.val() === this.placeholderText && t.val(""), this.$el.addClass("stage-1")
                    },
                    onPostBlur: function(e) {
                        var t = $(e.currentTarget);
                        this.closeTimeout = setTimeout(_.bind(function() {
                            t.val() || (t.val(this.placeholderText), !this.attachMusicDown && !this.model.get("selectedItem") && this.$el.removeClass("stage-1"))
                        }, this), 300)
                    },
                    onMessageKeyup: function(e) {
                        this.model.set({
                            msg: $(e.currentTarget).val()
                        })
                    },
                    onAttachMusicMouseDown: function(e) {
                        e.preventDefault(), this.attachMusicDown = !0, clearTimeout(this.closeTimeout)
                    },
                    onAttachMusicClick: function(e) {
                        e.preventDefault(), this.attachMusicDown = !1;
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getItemTypeMenu(), null, {
                            xposition: "left",
                            yposition: "bottom",
                            orientation: "bottom",
                            show: "show",
                            className: "attach-music-menu",
                            keepState: t
                        })
                    },
                    onTypeChange: function() {
                        this.clearTooltip(), this.$search = $(".post-item-input"), this.$search.focus(), this.clearSelectedItem()
                    },
                    onSearchFocus: function(e) {
                        var t = $(e.currentTarget);
                        t.length && (t[0].selectionStart = -1, t[0].selectionEnd = -1), t.val() && setTimeout(function() {
                            t.select()
                        }, 50), this.doAutocomplete(t)
                    },
                    onSearchBlur: function(e) {
                        var n = $(e.currentTarget);
                        this.autocompleteTooltip && setTimeout(_.bind(function() {
                            this.autocompleteTooltip = null, t.trigger("tooltip:close")
                        }, this), 200)
                    },
                    onSearchKeydown: function(e) {
                        var n, r, i = $(e.currentTarget);
                        this.autocompleteTooltip && (n = this.autocompleteTooltip.$el, r = $("li.selected", n));
                        switch (e.which) {
                        case _.keyboard.ENTER:
                            r = r ? r.find(".autocomplete-item-link") : null;
                            if (r) return this.onSelectedItem(r), !1;
                            return;
                        case _.keyboard.UP:
                            e.preventDefault(), n && (!r.length || r.is(":first-child") ? $("li:last", n).addClass("selected") : r.prev().addClass("selected"), r.removeClass("selected"));
                            return;
                        case _.keyboard.DOWN:
                            e.preventDefault(), n && (!r.length || r.is(":last-child") ? $("li:first", n).addClass("selected") : r.next().addClass("selected"), r.removeClass("selected"));
                            return;
                        case _.keyboard.ESC:
                            e.preventDefault(), n && (this.autocompleteTooltip = null, t.trigger("tooltip:close"));
                            return
                        }
                        this.doAutocompleteDebounced(i)
                    },
                    doAutocompleteDebounced: _.debounce(function(e) {
                        return this.doAutocomplete(e)
                    }, 300),
                    doAutocomplete: function(e) {
                        var n = $.trim(e.val().toLowerCase());
                        if (n.length > 1 && this.autocompleteTooltip) this.autocompleteTooltip.changeQuery(n);
                        else if (n.length > 1) {
                            var r = {
                                sticky: !0,
                                notchX: 30,
                                notch: "top",
                                x: 0,
                                y: 31,
                                $attached: $(".post-item-search", this.$el),
                                tooltipKey: "autocomplete",
                                fixPosition: !1
                            },
                                i, s, o;
                            if (this.posterType === "user" && this.poster) switch (this.model.get("collectionType")) {
                            case "Songs":
                                i = this.poster.get("library"), s = "SongName";
                                break;
                            case "Playlists":
                                i = this.poster.get("playlists"), this.poster.get("subscribedPlaylists") && i.add(this.poster.get("subscribedPlaylists").models), s = "PlaylistName"
                            } else if (this.posterType === "artist" && this.poster) switch (this.model.get("collectionType")) {
                            case "Songs":
                                i = this.poster.get("songs"), s = "SongName"
                            }
                            i && i.length && s && (o = function(e) {
                                return i.filter(function(t) {
                                    return _.startsWith(t.attributes[s], e)
                                })
                            }), this.autocompleteTooltip = new t.Views.Tooltips.Autocomplete({
                                query: n,
                                showAllLink: !1,
                                sections: [{
                                    type: this.model.get("collectionType"),
                                    filterFunction: o,
                                    search: !0
                                }],
                                handleResultClick: _.bind(this.onSelectedItem, this)
                            }), r.views = [this.autocompleteTooltip], t.trigger("tooltip:open", r), r.dfd.done(_.bind(function() {
                                this.autocompleteTooltip = null
                            }, this))
                        } else this.clearTooltip()
                    },
                    clearTooltip: function() {
                        this.autocompleteTooltip && (this.autocompleteTooltip = null, t.trigger("tooltip:close"))
                    },
                    onSelectedItem: function(e) {
                        var n, r, i;
                        switch (this.model.get("collectionType")) {
                        case "Songs":
                            n = t.Models.Song.getCached(e.data("songId")), r = "song", i = e.data("songId");
                            break;
                        case "Artists":
                            n = t.Models.Artist.getCached(e.data("artistId")), r = "artist", i = e.data("artistId");
                            break;
                        case "Albums":
                            n = t.Models.Album.getCached(e.data("albumId")), r = "album", i = e.data("albumId");
                            break;
                        case "Playlists":
                            n = t.Models.Playlist.getCached(e.data("playlistId")), r = "playlist", i = e.data("playlistId")
                        }
                        if (!n) return;
                        this.clearTooltip(), this.model.set({
                            selectedItem: n,
                            selectedItemID: i,
                            selectedItemType: r
                        });
                        var s = $(".selected-item");
                        s.find(".item-image").attr("src", n.getImageURL(r === "playlist" ? 70 : 40)), s.find(".item-name").text(n.get(_.ucwords(r) + "Name")).removeClass("hide"), r === "playlist" ? s.find(".item-subtext").text(n.get("UserName")).removeClass("hide") : r === "song" ? s.find(".item-subtext").html(n.escape("ArtistName") + " &bull; " + n.escape("AlbumName")).removeClass("hide") : r === "album" ? s.find(".item-subtext").text(n.get("ArtistName")).removeClass("hide") : s.find(".item-subtext").addClass("hide"), this.$el.addClass("stage-3")
                    },
                    clearSelectedItem: function() {
                        this.model.unset("selectedItem"), this.$search && this.$search.val(""), this.$el.removeClass("stage-3").addClass("stage-2")
                    },
                    getItemTypeMenu: function() {
                        var e = [{
                            title: _.getString("SONG"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.model.set("collectionType", "Songs"), $(".label", this.$attachBtn).text(_.getString("SONG")).data("translateText", _.getString("SONG"))
                                }, this)
                            }
                        }, {
                            title: _.getString("ALBUM"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.model.set("collectionType", "Albums"), $(".label", this.$attachBtn).text(_.getString("ALBUM")).data("translateText", _.getString("ALBUM"))
                                }, this)
                            }
                        }, {
                            title: _.getString("ARTIST"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.model.set("collectionType", "Artists"), $(".label", this.$attachBtn).text(_.getString("ARTIST")).data("translateText", _.getString("ARTIST"))
                                }, this)
                            }
                        }, {
                            title: _.getString("PLAYLIST"),
                            action: {
                                type: "fn",
                                callback: _.bind(function() {
                                    this.model.set("collectionType", "Playlists"), $(".label", this.$attachBtn).text(_.getString("PLAYLIST")).data("translateText", _.getString("PLAYLIST"))
                                }, this)
                            }
                        }];
                        return e
                    },
                    postToFeed: function() {
                        var e = $.trim($(".post-feed-msg").val());
                        e == this.placeholderText && (e = "");
                        if (!this.model.get("selectedItem") && !e) return;
                        if (e.length > 3e3) {
                            t.trigger("notification:add", {
                                title: _.getString("POPUP_FEED_POST_TOO_LONG"),
                                type: "error"
                            });
                            return
                        }
                        this.posterType === "user" ? this.model.get("selectedItem") && this.model.get("selectedItemType") ? t.Services.API.sendFeedBroadcast(this.model.get("selectedItemType"), this.model.get("selectedItem").id, [], e).always(_.bind(this.onFeedSuccess, this)) : t.trigger("notification:add", {
                            title: _.getString("POPUP_FEED_POST_NO_ITEM_FAILED"),
                            type: "error"
                        }) : this.model.get("selectedItem") && this.model.get("selectedItemType") ? t.Services.API.sendArtistFansUpdate(this.poster.id, e, this.model.get("selectedItem").getDetailsForFeeds(), this.model.get("selectedItemType")).always(_.bind(this.onFeedSuccess, this)) : t.Services.API.sendArtistFansUpdate(this.poster.id, e).always(_.bind(this.onFeedSuccess, this))
                    },
                    onFeedSuccess: function(e) {
                        if (!e || e !== !0 && !e.Success) {
                            t.trigger("notification:add", {
                                title: _.getString("POPUP_FEED_POST_FAILED"),
                                type: "error"
                            });
                            return
                        }
                        this.clearTooltip(), this.clearSelectedItem(), $(".post-feed-msg").val(""), $(".post-item-input").val(""), this.$el.removeClass("stage-1 stage-2"), $(".title", this.$attachBtn).text(_.getString("ATTACH_MUSIC")).data("translateText", _.getString("ATTACH_MUSIC")), t.trigger("notification:add", {
                            title: _.getString("POPUP_FEED_POST_SUCCESS"),
                            type: "success"
                        })
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Tooltips = r.Views.Tooltips || {}, r.Views.ManagedTooltip = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "tooltip-container",
                    hideTimeout: null,
                    options: {
                        sensitivity: "normal",
                        hideDelay: 300,
                        sticky: !1,
                        persist: !1,
                        metadata: null,
                        views: null,
                        delay: 0,
                        zIndex: 99999,
                        width: 320,
                        x: 0,
                        y: "bottom",
                        notch: "top",
                        notchX: 12,
                        notchY: 12,
                        notchSize: 6,
                        notchBorder: 1,
                        notchBorderColor: !1,
                        notchBackgroundColor: !1,
                        tooltipClass: "",
                        destroyViewOnClose: !0,
                        closeOthers: !0,
                        fixPosition: !0
                    },
                    initialize: function(e) {
                        var t = e.dfd;
                        t || (t = $.Deferred(), e.dfd = t), this.dfd = t, this.options.metadata = [];
                        var n = _.defaults(e, this.options);
                        this.$caret0 = $(document.createElement("div")).addClass("tooltip-caret"), this.$caret1 = $(document.createElement("div")).addClass("tooltip-caret"), this.$contents = $(document.createElement("div")), this.$el.append([this.$caret0[0], this.$contents[0], this.$caret1[0]]), this.uniqueClass = "gs-tooltip" + Math.floor(Math.random() * 1e7), n.$attached || (console.log("Tooltip not attached to anything, attaching to body", e), n.$attached = $(document.body)), this.options = n
                    },
                    render: function() {
                        if (!this.options || this.destroyed) return;
                        this.lastTimeout = null, this.options.$attached.off("mouseleave.tooltips"), this.$contents.attr("class", "tooltip gs-tooltip " + this.options.tooltipClass + " " + this.uniqueClass);
                        if (this.options.views) {
                            var e = [],
                                t = [],
                                n, r;
                            for (var i = 0, s = this.options.views.length; i < s; i++) {
                                r = this.options.views[i], e.push(r.$el[0]), n = r.render(this);
                                if (!this.options) return;
                                if (!n || !n.done) {
                                    console.log("No dfd for tooltip view", this, r);
                                    continue
                                }
                                t.push(n)
                            }
                            var o = _.bind(function() {
                                this.$contents.empty().append(e), this.onRendered()
                            }, this);
                            this.dfd.notify("loading", this, t), t.length ? $.after(t).done(o).fail(_.bind(this.close, this)) : o()
                        }
                    },
                    onRendered: function() {
                        if (this.destroyed) return;
                        this.hideTimeout = null, $.browser.mozilla && _.toInt($.browser.version) < 6 ? $("#theme_home .flash object").each(function(e, t) {
                            t.style.visibility = "hidden"
                        }) : $("#theme_home .flash object").hide(), $("div.capital iframe").hide().parent().hide(), this.options.scrollable || (this.options.scrollable = _.getScrollableParent(this.options.$attached)), this.attachedToDOM || (this.options.scrollable.append(this.$el), this.attachedToDOM = !0), this.$el.css({
                            position: "absolute",
                            top: 0,
                            left: 0,
                            width: this.options.width
                        }), this.$contents.css({
                            width: this.options.width
                        }), this.adjustPosition(), this.$el.show(), this.dfd.notify("rendered", this), this.trigger("rendered")
                    },
                    onDestroy: function() {
                        if (this.options.views) for (var e = 0, t = this.options.views.length; e < t; e++) this.options.views[e].destroy(this.options.destroyViewOnClose);
                        clearTimeout(this.hideTimeout), clearTimeout(this.lastTimeout), this.hideTimeout = null, this.lastTimeout = null
                    },
                    adjustPosition: function() {
                        var e = this.options;
                        if (!e.$attached || !e.$attached.length) return;
                        var t = e.scrollable,
                            n = e.$attached.offset(),
                            r = t.offset(),
                            i = t.scrollTop(),
                            s = e.x,
                            o = e.y,
                            u = e.adjustX || 0,
                            a = e.adjustY || 0,
                            f = e.notchBorder || 0,
                            l = _.toInt(e.notchSize),
                            c, h, p, d, v, m = {
                                zIndex: e.zIndex
                            },
                            g = _.memoize(function(t, n) {
                                if (t == "height") return e.$attached.outerHeight();
                                if (t == "width") return e.$attached.outerWidth();
                                if (t == "offset") return e.$attached.offset();
                                if (t == "offsetTo") return e.$attached.offsetTo(n)
                            });
                        n = {
                            top: n.top - r.top + i,
                            left: n.left - r.left
                        };
                        if (e.fixPosition) {
                            v = g("offsetTo", t);
                            var y = v && v.top - i,
                                b = t.height(),
                                w = this.$contents.height();
                            p = y + w, o == "bottom" && e.notch == "top" && (p += f + l + g("height")), y <= 0 ? _.isNumber(o) ? (e.y = o = 3, e.notchY = 10) : o == "top" && (e.y = o = "bottom", e.notch == "bottom" && (e.notch = "top")) : p > b && (_.isNumber(o) ? (e.y = o = "top", e.notchY = w - 15, a = 20) : o == "bottom" && (e.y = o = "top", e.notch == "top" && (e.notch = "bottom")))
                        }
                        if (e.fixPosition) {
                            v = g("offsetTo", t);
                            var E = v && v.left,
                                S = this.$contents.width();
                            v && (d = E - S, d < 0 && _.isNumber(e.notchX) && (e.notchX = Math.max(11, e.notchX + d) - 4))
                        }
                        this.writeNotchCSS();
                        if (_.isNumber(o)) c = n.top + o + a;
                        else if (o == "bottom") c = n.top + g("height"), e.notch == "top" && (c += (e.notchInfluenceY || 0) + a);
                        else if (o == "middle" || o == "center") {
                            c = n.top + g("height") / 2 + a;
                            if (e.notch == "left" || e.notch == "right") c -= e.notchInfluenceY || 0
                        } else o == "top" && (c = n.top - this.$contents.height() + a, e.notch == "bottom" && (c += e.notchInfluenceY || 0));
                        if (_.isNumber(s)) h = n.left + s + u;
                        else if (s == "right") h = n.left + g("width"), e.notch == "left" && (h -= e.notchInfluenceX || 0);
                        else if (s == "center" || s == "middle") {
                            h = n.left + g("width") / 2 + u;
                            if (e.notch == "top" || e.notch == "bottom") h -= e.notchInfluenceX || 0
                        } else s == "left" && (h = n.left - this.$contents.width() + u, e.notch == "right" && (h -= e.notchInfluenceX || 0));
                        m.top = c, m.left = h, this.$el.css(m)
                    },
                    writeNotchCSS: function() {
                        var e = this.options,
                            t = e.notchBorder || 0,
                            n = _.toInt(e.notchSize),
                            r = {},
                            i = {},
                            s, o, u, a, f, l, c, h, p;
                        if (n && e.notch) {
                            var d = {
                                top: "bottom",
                                bottom: "top",
                                left: "right",
                                right: "left"
                            };
                            d[e.notch] && (s = d[e.notch], u = e.notch), s && (s == "bottom" || s == "top" ? (o = "left", this.options.notchInfluenceX = e.notchX + t, this.options.notchInfluenceY = (n + t) * (s == "bottom" ? 1 : -1)) : (o = "top", this.options.notchInfluenceX = (n + t) * (s == "left" ? 1 : -1), this.options.notchInfluenceY = e.notchY + t), c = o == "left" ? e.notchX : e.notchY, h = n * 2 - 1, a = _.ucwords(s), f = _.ucwords(o), l = _.ucwords(u), r[s] = "100%", r[o] = c + "px", r["border" + a + "Color"] = this.options.notchBackgroundColor || this.$contents.css("backgroundColor"), r.borderWidth = n + "px", r["margin" + f] = n * -1 + "px", r["margin" + a] = "-1px", r.zIndex = 99999999, t && (p = n + Math.round(t * 1.41421), i[s] = "100%", i[o] = c + "px", i["border" + a + "Color"] = this.options.notchBorderColor || this.$contents.css("border" + _.ucwords(u) + "Color"), i.borderWidth = p + "px", i["margin" + f] = p * -1 + "px", i["margin" + a] = "-1px"))
                        }
                        this.$caret0.css(r), this.$caret1.css(i)
                    }
                }), r.Views.Tooltip = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "tooltip-container",
                    initialize: function() {
                        this.tooltips = {}, this.model.set("tooltipOptionsCache", {}), r.on("tooltip:open", _.bind(this.open, this)), r.on("tooltip:close", _.bind(this.close, this)), r.on("router:change", _.bind(function() {
                            this.close()
                        }, this)), $(document).on("mouseenter.tooltips", "*", _.bind(this.onMouseEvent, this)), $(document).on("click.tooltips", "*", _.bind(this.onMouseEvent, this))
                    },
                    open: function(e) {
                        e.tooltipKey || (e.tooltipKey = +(new Date));
                        if (this.tooltips[e.tooltipKey]) return this.tooltips[e.tooltipKey].dfd;
                        var t = new r.Views.ManagedTooltip(e);
                        return t.options.closeOthers && this.close(), this.tooltips[e.tooltipKey] = t, t.options.delay ? (t.lastTimeout = setTimeout(_.bind(t.render, t), t.options.delay), !t.options.persist && !t.options.sticky && t.options.$attached.on("mouseleave.tooltips", _.bind(function() {
                            this.close(e.tooltipKey)
                        }, this))) : t.render(), t.dfd
                    },
                    close: function(e) {
                        _.each(this.tooltips, _.bind(function(t, n) {
                            if (e && n != e || !e && t.options.persist) return;
                            t.destroy(), t.options.$attached && t.options.$attached.off("mouseleave.tooltips"), t.dfd && t.dfd.state() != "resolved" && t.dfd.resolve(), delete this.tooltips[n], _.isNumber(t.lastTimeout) && clearTimeout(t.lastTimeout), _.isNumber(t.hideTimeout) && clearTimeout(t.hideTimeout)
                        }, this)), _.size(this.tooltips) || r.Models.Ad.showFlashElements()
                    },
                    onMouseEvent: function(e) {
                        _.each(this.tooltips, _.bind(function(t, n) {
                            if (t.options.persist || t.options.sticky && e.type == "mouseenter") return;
                            var r = t.options.$attached,
                                i = e.target === r[0],
                                s = t.options.sensitivity,
                                o = t.options.hideDelay,
                                u = [];
                            u.push(r[0]), s !== "mouseout" && (i = i || e.target === t.$el[0], u.push(t.$el[0]));
                            if (!i) {
                                var a = $(e.target).parents();
                                for (var f = 0, l = a.length; f < l; f++) if (_.indexOf(u, a[f]) != -1) {
                                    i = !0;
                                    break
                                }
                            }
                            t.hideTimeout && i ? (clearTimeout(t.hideTimeout), t.hideTimeout = null) : !t.hideTimeout && !i && !t.lastTimeout && !t.options.sticky ? t.hideTimeout = setTimeout(_.bind(this.close, this, n), o) : !t.hideTimeout && !i && this.close(n)
                        }, this))
                    }
                }, {
                    calculateTextWidth: function(e, t) {
                        var n = $("#page-wrapper"),
                            r = $("#tooltip-helper-text-sizing"),
                            i = {
                                zIndex: -1,
                                position: "absolute",
                                left: -5e4
                            },
                            s = $.extend({}, i, t);
                        r.length || (r = $(document.createElement("div")), r.attr("id", "tooltip-helper-text-sizing"), n.append(r)), r.css(s).html(e);
                        var o = r.width();
                        return r.removeAttr("style").css(i), o
                    }
                }), r.Views.Tooltips.Flattr = Backbone.View.extend({
                    templatePath: "tooltip",
                    events: {
                        "click .flattr-video": "onFlattrVideoClick"
                    },
                    render: function() {
                        return this.renderDfd = $.Deferred(), this.fetchTemplate("flattr").always(_.bind(this.onTemplate, this)), this.renderDfd
                    },
                    onTemplate: function(e) {
                        this.$el.html(this.renderTemplate(e, this.options)), this.renderDfd.resolve()
                    },
                    onFlattrVideoClick: function() {
                        r.trigger("lightbox:open", "video", {
                            videos: [{
                                type: "youtube",
                                title: "This is Flattr",
                                id: "9zrMlEEWBgY",
                                width: 640,
                                height: 360
                            }],
                            hideHeader: !0
                        })
                    }
                }), r.Views.Tooltips.SingleSong = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "single-song",
                    currentTooltip: {},
                    events: {
                        "click .song-add": "onLibraryClick"
                    },
                    render: function(e) {
                        if (this.destroyed) return;
                        return this.template ? (this.redraw(), this.renderDfd.resolve(), $.Deferred().resolve()) : (e && (this.currentTooltip = e.options), this.songDfd = $.Deferred(), this.dataDfd = $.Deferred(), this.renderDfd = $.Deferred(), r.Models.Song.get(this.options.songID).done(_.bind(function(e) {
                            this.song = e, this.songDfd.resolve(e), this.currentTooltip.mini || this.dataDfd.resolve(e)
                        }, this)), setTimeout(_.bind(this.getPageNameData, this), this.currentTooltip.pageNameWait || 450), this.fetchTemplate("song").always(_.bind(this.onTemplate, this)), this.renderDfd)
                    },
                    getPageNameData: function() {
                        if (this.destroyed) return;
                        if (!this.song) {
                            this.songDfd.done(_.bind(this.getPageNameData, this));
                            return
                        }
                        if (this.song && this.song.get("pageNameData")) {
                            this.currentTooltip.mini && this.dataDfd.resolve(this.song);
                            return
                        }
                        var e = _.chainLoading();
                        e.push(this.fetchTemplate("/shared/genreTags")), e.push(this.song.getPageNameData().done(e.bind(function() {
                            this.redraw(), this.currentTooltip.mini && this.dataDfd.resolve(this.song)
                        }, this)))
                    },
                    onTemplate: function(e) {
                        this.template = e, this.dataDfd.done(_.bind(function(e) {
                            e.on("change", function() {
                                this.render()
                            }, this);
                            if (this.currentTooltip.mini && this.dataDfd.state() == "pending") return;
                            this.redraw(), this.renderDfd.resolve()
                        }, this))
                    },
                    remove: function() {
                        return this.$el.remove(), this.destroyed = !0, this.song && (this.song.off(null, null, this), delete this.song), this._super.apply(this, ["remove"].concat(_.toArray(arguments)))
                    },
                    redraw: function() {
                        if (!this.song) return;
                        var e = this.song.get("Tags");
                        this.$el.html(this.renderTemplate(this.template, {
                            song: this.song,
                            mini: this.currentTooltip.mini,
                            addStreamType: this.options.addStreamType
                        })), e && this.fetchTemplate("/shared/genreTags").done(_.bind(function(t) {
                            setTimeout(_.bind(function() {
                                var n = this.$el.find(".tags-wrapper"),
                                    r, i, s;
                                n.html(this.renderTemplate(t, {
                                    tags: e
                                })), r = n.find(".genre-link"), r.length && n.removeClass("hide");
                                for (i = 0, s = r.length; i < s && n.height() > 20; i++) _.$one(r[s - i - 1]).remove()
                            }, this), 50)
                        }, this))
                    },
                    onLibraryClick: function(e) {
                        var t = $(e.currentTarget),
                            n = $(t).data(),
                            i = n && n.songId;
                        if (i && this.song) {
                            var s = r.getLoggedInUserID(),
                                o = r.Models.User.getCached(s);
                            this.song.get("fromLibrary") ? o.removeSongsFromLibrary([i]) : o.addSongsToLibrary([i])
                        }
                    }
                }), r.Views.Tooltips.User = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "user",
                    render: function() {
                        if (this.destroyed) return;
                        return this.template ? (this.redraw(), this.renderDfd.resolve(), $.Deferred().resolve()) : (this.dataDfd = $.Deferred(), this.renderDfd = $.Deferred(), r.Models.User.get(this.options.userID).done(_.bind(function(e) {
                            this.user = e, this.dataDfd.resolve(e)
                        }, this)), setTimeout(_.bind(this.getPageNameData, this), 450), this.fetchTemplate("user").always(_.bind(this.onTemplate, this)), this.renderDfd)
                    },
                    getPageNameData: function() {
                        if (this.destroyed) return;
                        if (!this.user) {
                            this.dataDfd.done(_.bind(this.getPageNameData, this));
                            return
                        }
                        if (this.user && this.user.get("pageNameData")) return;
                        this.user.getPageNameData().done(_.bind(function() {
                            this.redraw()
                        }, this))
                    },
                    onTemplate: function(e) {
                        this.template = e, this.dataDfd.done(_.bind(function(e) {
                            e.on("change", function() {
                                this.render()
                            }, this), this.redraw(), this.renderDfd.resolve()
                        }, this))
                    },
                    remove: function() {
                        return this.$el.remove(), this.destroyed = !0, this.user && (this.user.off(null, null, this), delete this.user), this._super.apply(this, ["remove"].concat(_.toArray(arguments)))
                    },
                    redraw: function() {
                        if (!this.user) return;
                        var e = this.user.get("pageNameData");
                        this.user.get("nowPlayingSong") && this.$el.addClass("is-playing-song"), this.$el.html(this.renderTemplate(this.template, {
                            user: this.user,
                            mini: !1
                        }))
                    }
                }), r.Views.Tooltips.Broadcast = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "broadcast",
                    events: {},
                    initialize: function() {
                        this.broadcastID = this.options.broadcastID, this.userID = this.options.userID, this.dataDfd = $.Deferred(), this.renderDfd = $.Deferred(), r.Models.Broadcast.fetchRealtimeBroadcast(this.broadcastID).done(_.bind(function(e) {
                            this.broadcast = e, this.user = r.Models.User.getCached(this.userID), this.user.on("change:isFavorite", this.updateFollowBtn, this), this.dataDfd.resolve()
                        }, this)).fail(_.bind(function() {
                            this.closeTooltip()
                        }, this)), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    updateFollowBtn: function() {
                        if (this.user) {
                            var e = this.$el.find(".btn.favorite");
                            this.user.get("isFavorite") ? (e.addClass("btn-success"), e.find(".icon").addClass("icon-plus-white-active").removeClass("icon-plus-gray"), e.find("span").text(_.getString("FOLLOWING_USER", {
                                user: this.user.getShortName()
                            }))) : (e.removeClass("btn-success"), e.find(".icon").removeClass("icon-plus-white-active").addClass("icon-plus-gray"), e.find("span").text(_.getString("LB_FOLLOW_USER_TITLE", {
                                user: this.user.getShortName()
                            })))
                        }
                    },
                    render: function() {
                        if (this.destroyed) return;
                        return this.template ? (this.redraw(), $.Deferred().resolve()) : (this.fetchTemplate("broadcast").done(_.bind(this.onTemplate, this)), this.renderDfd)
                    },
                    onTemplate: function(e) {
                        this.template = e, this.dataDfd.done(_.bind(function() {
                            this.user.getPageNameData(), this.redraw(), this.broadcastModule = new r.Views.Modules.BroadcastCell({
                                model: this.broadcast,
                                el: this.$el.find(".module.broadcast")[0]
                            }), this.broadcastModule.render(), this.renderDfd.resolve()
                        }, this))
                    },
                    remove: function() {
                        return this.$el.remove(), this.destroyed = !0, this.user && (this.user.off(null, null, this), delete this.user), this.renderDfd = $.Deferred(), this._super.apply(this, ["remove"].concat(_.toArray(arguments)))
                    },
                    redraw: function() {
                        if (!this.broadcast) return;
                        this.$el.html(this.renderTemplate(this.template, this))
                    },
                    closeTooltip: function() {
                        r.trigger("tooltip:close", this.options.tooltipKey)
                    }
                }), r.Views.Tooltips.QueueOptions = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "queue-options",
                    events: {
                        "click .toggle-radio": "onRadioClick",
                        "click .genre.tall": "onTagClick",
                        "click .menu-item": "onItemClick"
                    },
                    render: function(e) {
                        if (this.destroyed) return;
                        return this.template ? (this.redraw(), this.renderDfd.resolve(), $.Deferred().resolve()) : (e.on("rendered", function() {
                            this.tooltipRendered = !0, this.trigger("rendered")
                        }, this), this.sortedGenres = _.clone(r.Models.Tag.topGenres), this.sortedGenres.sort(function(e, t) {
                            return e.title > t.title ? 1 : e.title < t.title ? -1 : 0
                        }), this.model.set("genres", this.sortedGenres), this.childViews = [], this.renderDfd = $.Deferred(), this.fetchTemplate("queueOptions").always(_.bind(this.onTemplate, this)), this.renderDfd)
                    },
                    onTemplate: function(e) {
                        this.template = e;
                        var t = this.model.get("player"),
                            n, r = function() {
                                n && n.off("change", null, this), n = t.get("currentQueue"), n.on("change", function() {
                                    this.redraw()
                                }, this)
                            };
                        t.on("change:currentQueue", r, this), r.call(this), this.redraw(), this.renderDfd.resolve()
                    },
                    remove: function() {
                        this.$el.remove(), this.destroyed = !0;
                        for (var e = 0, t = this.childViews.length; e < t; e++) this.childViews.destroy();
                        var n = this.model.get("player"),
                            r = n.get("currentQueue");
                        return n.off("change:currentQueue", null, this), r.off("change", null, this), this._super.apply(this, ["remove"].concat(_.toArray(arguments)))
                    },
                    redraw: function() {
                        var e = this.model.get("player"),
                            t = e.get("currentQueue"),
                            n = this.model.get("user");
                        this.$el.html(this.renderTemplate(this.template, {
                            player: e,
                            queue: t
                        }))
                    },
                    onPlaylistSelected: function(e) {
                        e.getSongs().done(function(t) {
                            var n = new r.Models.PlayContext(e);
                            r.trigger("player:addSongs", t, r.Services.SWF.playSpecialIndexes.DEFAULT, !1, n), r.trigger("tooltip:close")
                        })
                    },
                    onItemClick: function(e) {
                        var t = $(e.currentTarget)
                    },
                    onRadioClick: function() {
                        var e = this.model.get("player").get("currentQueue"),
                            t = e.get("clientRadioEnabled");
                        t ? (e.get("clientRadio").disable(), r.trigger("guts:clearAllAutoplayContexts")) : r.trigger("player:radio")
                    },
                    onTagClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data(),
                            i = this.model.get("player");
                        r.Views.Application.prototype.playTagRadio(n.tag, n.tagId, i)
                    },
                    onLibraryClick: function(e) {
                        var t = $(e.currentTarget),
                            n = $(t).data(),
                            i = n && n.songId;
                        if (i && this.song) {
                            var s = r.getLoggedInUserID(),
                                o = r.Models.User.getCached(s);
                            this.song.get("fromLibrary") ? o.removeSongsFromLibrary([i]) : o.addSongsToLibrary([i])
                        }
                    }
                }), r.Views.Tooltips.Autocomplete = Backbone.View.extend({
                    templatePath: "tooltip",
                    events: {
                        "click .autocomplete-item-link": "onResultClick",
                        "click .see-all": "showSearchResults",
                        "click .btn.play": "onPlayClick",
                        "click .bc-add": "onSuggestClick"
                    },
                    initialize: function() {
                        this.sections = _.orEqual(this.options.sections, [{}]);
                        var e, t, n;
                        for (t = 0, n = this.sections.length; t < n; t++) e = this.sections[t], e.type = _.orEqual(e.type, "Artists"), e.filterFunction = _.orEqual(e.filterFunction, null), e.search = _.orEqual(e.search, !0);
                        this.showAllLink = _.orEqual(this.options.showAllLink, !0), this.handleResultClick = _.orEqual(this.options.handleResultClick, null), this.maxResults = _.orEqual(this.options.maxResults, 0), this.options.type == "broadcastSearch" && this.$el.addClass("broadcast-search"), this._super.apply(this, ["initialize"].concat(_.toArray(arguments)))
                    },
                    render: function(e) {
                        e && e.dfd && (this.tooltipDfd = e.dfd), this.renderDfd = $.Deferred();
                        var t, n, i;
                        for (n = 0, i = this.sections.length; n < i; n++) t = this.sections[n], t.type = _.orEqual(t.type, "Artists"), t.filterFunction = _.orEqual(t.filterFunction, null), t.search = _.orEqual(t.search, !0), t.filterResults = [], t.results = new r.Models.Collections[t.type]([]), t.results.on("add remove reset", this.onResultsChange, this, t.type), t.lastDfd = null;
                        return this.template = null, this.hasAnyResults = !1, this.changeQuery(this.options.query), this.renderDfd
                    },
                    changeQuery: function(e) {
                        function t() {
                            this.pendingResults--
                        }
                        function n(e) {
                            return e.toLowerCase().substr(0, e.length - 1)
                        }
                        e = $.trim(e), this.query = e, this.hasAnyResults = !1, this.pendingResults = 0, this.pendingTypes = this.sections.length;
                        var i, s, o, u, a, f, l = this.options.$searchIco;
                        l && l.addClass("searching");
                        for (s = 0, o = this.sections.length; s < o; s++) {
                            i = this.sections[s], i.lastDfd && i.lastDfd.abort(), u = i.search;
                            if (i.filterFunction) {
                                i.filterResults = i.filterFunction(e), i.filterResults.length && (this.hasAnyResults = !0);
                                if (i.filterResults.length > 5 || !u) i.results.reset(i.filterResults), u = !1
                            }
                            u && (a = _.isFunction(i.typeToSvcType) ? i.typeToSvcType(i.type) : n(i.type), f = _.orEqual(i.searchMethod, "getAutocomplete"), r.Services.API.hasOwnProperty(f) && (i.lastDfd = r.Services.API[f](e, a).done(_.bind(this.onAutocompleteResults, this, i)).fail(_.bind(t, this)), this.pendingResults++)), this.pendingTypes--
                        }
                        this.template || this.fetchTemplate("autocomplete").done(_.bind(this.onTemplate, this)), setTimeout(function() {
                            $(".autocomplete-list").length && r.Models.Ad.hideFlashElements()
                        }, 250)
                    },
                    onTemplate: function(e) {
                        this.template = e, this.hasAnyResults && this.onResultsChange()
                    },
                    onAutocompleteResults: function(e, t) {
                        this.pendingResults--, t = _.isArray(t.result) ? t.result : t, t.length && (this.hasAnyResults = !0), t = e.filterResults.concat(t), e.results.reset(t)
                    },
                    onResultsChange: function() {
                        if (!this.template) return;
                        var e = !1,
                            t = this.options.type == "broadcastSearch",
                            n = this.options.$searchIco;
                        n && n.removeClass("searching");
                        if (!this.hasAnyResults) {
                            !this.pendingResults && !this.pendingTypes && (t ? e = !0 : r.trigger("tooltip:close"));
                            if (!e) return
                        }
                        var i, s, o = 0,
                            u = 0;
                        if (this.maxResults) {
                            for (i = 0, s = this.sections.length; i < s; i++) this.sections[i].results.length && o++;
                            u = Math.round(this.maxResults / o)
                        }
                        this.$el.html(this.renderTemplate(this.template, {
                            sections: e ? !1 : this.sections,
                            showAll: e ? !1 : this.showAllLink,
                            maxPerType: u,
                            type: this.options.type
                        })), this.tooltipDfd && this.tooltipDfd.notify("resultsChanged", this), this.renderDfd.resolve()
                    },
                    showSearchResults: function() {
                        this.query && this.query.length && ($("input[name=q]", this.$attached).blur().val(""), r.trigger("tooltip:close"), r.router.performSearch("", this.query))
                    },
                    onResultClick: function(e) {
                        if (this.handleResultClick) return e.preventDefault(), e.stopImmediatePropagation(), this.handleResultClick($(e.currentTarget))
                    },
                    onPlayClick: function(e) {
                        e.stopImmediatePropagation();
                        var t = $(e.currentTarget).data("songId"),
                            i = r.Models.Song.getCached(t),
                            s = new r.Models.PlayContext,
                            o = n.model.get("player").get("currentQueue"),
                            u = o ? o.get("activeSong") : null;
                        return s.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), i && (u || r.isBroadcastListener()) ? r.trigger("lightbox:open", "previewSong", {
                            songs: [i],
                            playContext: s,
                            showPlayerControls: !0,
                            _showPlayerControls: !0
                        }) : r.trigger("player:addSongs", [t], r.Services.SWF.playSpecialIndexes.LAST, !1, s, !1, !0), r.trigger("tooltip:close"), !1
                    },
                    onSuggestClick: function(e) {
                        e.stopImmediatePropagation();
                        var t = $(e.currentTarget),
                            i = r.Models.Song.getCached(t.data("songId")),
                            s = n.model.get("player").get("currentQueue"),
                            o = s ? s.get("currentBroadcast") : {},
                            u = new r.Models.PlayContext;
                        return u.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), s && (s.get("isBroadcasting") ? r.trigger("player:addSongs", [i.get("SongID")], r.Services.SWF.playSpecialIndexes.LAST, !1, u, !1, !0) : o.suggestSong(i)), !1
                    }
                }), r.Views.Tooltips.Menu = Backbone.View.extend({
                    templatePath: "tooltip",
                    render: function(e) {
                        return this.tooltip = e, e && e.dfd && (this.tooltipDfd = e.dfd), this.$el.on("click", ".menu-item", _.bind(this.clickItem, this)), this.renderDfd = $.Deferred(), this.template = null, this.lastRequestDfd = null, this.updateVisibleOptions(), this.renderDfd.resolve(), this.renderDfd
                    },
                    updateVisibleOptions: function() {
                        var e = [],
                            t = 0,
                            n = this.options.items.length,
                            i = [],
                            s, o, u;
                        for (; t < n; t++) s = this.options.items[t], s.type && s.type == "divider" ? o = ['<div class="divider"></div>'] : s.type && s.type == "title" ? o = ['<div class="section-title">' + s.title + "</div>"] : s.type && s.type == "module" ? (u = "div", s.url && (u = "a"), o = ["<", u, ' class=" ', _.orEqual(s.itemClass, ""), " menu-item item-module-", i.length, '"', s.url ? 'href="' + s.url + '"' : "", ' data-menu-item-key="', t, '">', _.orEqual(s.beforeHTML, ""), "</", u, ">"], s.module.render(), i.push(s.module.$el[0])) : (o = ['<a class="', "menu-item ", _.orEqual(s.itemClass, ""), '" ', s.url ? 'href="' + s.url + '"' : "", ' data-menu-item-key="', t, '"><span class="menu-title"'], s.localeKey ? o.push('data-translate-text="', s.localeKey, '">', _.getString(s.localeKey)) : s.title && o.push(">", s.title), o.push("</span>"), o.push("</a>")), e.push(o.join(""));
                        r.Models.Ad.hideFlashElements(), this.$el.html(e.join(""));
                        for (t = 0, n = i.length; t < n; t++) this.$el.find(".item-module-" + t).append(i[t])
                    },
                    clickItem: function(e) {
                        var t = $(e.currentTarget),
                            n = this.options.items,
                            r = t.data(),
                            i = r.menuItemKey;
                        n && n[i] && n[i].click && this.options.items[i].click.apply(this, _.toArray(arguments))
                    },
                    updateMenuOptions: function(e) {
                        this.options.items = e, this.updateVisibleOptions()
                    }
                }), r.Views.Tooltips.Helper = Backbone.View.extend({
                    templatePath: "tooltip",
                    initialize: function() {
                        var e = r.Views.Tooltip.calculateTextWidth(this.options.text),
                            t = this.options.minWidth || e + 30;
                        this.tooltipOptions = {
                            delay: 500,
                            notchSize: 6,
                            notchX: t - 18,
                            notch: "top",
                            x: "center",
                            y: "bottom",
                            width: t,
                            tooltipClass: "dark " + this.options.extraClass,
                            sensitivity: "mouseout",
                            closeOthers: !1,
                            hideDelay: 0,
                            isHelper: !0
                        }, _.each(n.tooltip.tooltips, function(e, t) {
                            e.options.isHelper && !e.options.persist && r.trigger("tooltip:close", t)
                        })
                    },
                    render: function() {
                        var e = this.options.addClasses || "",
                            t = $('<div class="tooltip-helper-text ' + e + '">' + this.options.text + "</div>");
                        return this.options.minWidth && t.css({
                            minWidth: this.options.minWidth
                        }), this.options.width && t.css({
                            width: this.options.width
                        }), this.renderDfd = $.Deferred(), this.$el.append(t[0]), this.renderDfd.resolve(), this.renderDfd
                    }
                }, {
                    simpleTooltip: function(e, t) {
                        var n = $(e.currentTarget),
                            i = n.data();
                        i || (i = {}), i.tooltipKey || (i.tooltipKey = +(new Date));
                        var s = n.offset();
                        !t.tooltipOptions.notchX && s.left < t.tooltipOptions.width && (t.tooltipOptions.notchX = 18);
                        var o = t.tooltipOptions;
                        o.helperTooltip = !0, o.views = [t], o.$attached = n, o.zIndex = 999999, o.tooltipKey || (o.tooltipKey = i.tooltipKey), r.trigger("tooltip:open", o)
                    }
                }), r.Views.Tooltips.ReportAd = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "report-ad",
                    events: {
                        "click .feedback-placeholder": "clickFeedbackPlaceholder",
                        "click .cancel-report": "onCancel",
                        "blur .feedback": "showFeedbackTooltip",
                        "focus .feedback": "hideFeedbackTooltip",
                        "click .submit-report": "submitReport"
                    },
                    initialize: function(e) {
                        this.reportedAdInfo = e.info
                    },
                    render: function(e) {
                        if (this.destroyed) return;
                        return this.reported = !1, this.tooltip = e, this.template ? (this.redraw(), this.renderDfd.resolve(), $.Deferred().resolve()) : (this.renderDfd = $.Deferred(), this.fetchTemplate("reportAd").always(_.bind(this.onTemplate, this)), this.renderDfd)
                    },
                    onTemplate: function(e) {
                        this.template = e, this.redraw(), this.renderDfd.resolve()
                    },
                    redraw: function() {
                        this.$el.html(this.renderTemplate(this.template, {}))
                    },
                    clickFeedbackPlaceholder: function(e) {
                        $(e.currentTarget).addClass("hide"), $(".feedback", this.$el).focus()
                    },
                    hideFeedbackTooltip: function(e) {
                        $(".feedback-placeholder", this.$el).addClass("hide"), this.tooltip && (this.tooltip.options.persist = !0)
                    },
                    showFeedbackTooltip: function(e) {
                        $(e.currentTarget).val() || $(".feedback-placeholder", this.$el).removeClass("hide")
                    },
                    onCancel: function() {
                        this.tooltip && r.trigger("tooltip:close", this.tooltip.options.tooltipKey)
                    },
                    submitReport: function() {
                        if (!this.reportedAdInfo || !this.tooltip || this.reported) return;
                        var e = this.reportedAdInfo.unitName,
                            t = this.reportedAdInfo.itemID,
                            i = this.reportedAdInfo.extra ? this.reportedAdInfo.extra : "",
                            s = $(".feedback", this.$el).val(),
                            o = $(".ad-select-reason", this.$el).val();
                        r.Services.API.reportBadAd(e, s, i, o, t), this.reported = !0, this.onCancel(), r.Views.Ad.reportedAd(), n.ad.updateAds(), r.trigger("guts:forcelog", "reportedAd", {
                            placement: e,
                            country: gsConfig.country.ID
                        }), r.trigger("guts:gatrack", "site", "reportedAd", e + "_" + gsConfig.country.ID)
                    }
                }), r.Views.Tooltips.Tour = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "tooltip-tour",
                    events: {
                        "click .next": "showNextTourTooltip",
                        "click .signUp": "signUp",
                        "click .signIn": "signIn",
                        "click #tooltip-close": "endTour",
                        "click .more-broadcast": "openAboutBroadcastLB"
                    },
                    showNextTourTooltip: function() {
                        r.trigger("guts:log", "tourShowNext", {
                            tourType: this.tourType,
                            tourVisibleStep: this.current + 1
                        }), r.trigger("guts:gatrack", "site", "tour_" + this.tourType, "showNext_" + this.current + 1), this.current++, this.redraw()
                    },
                    initialize: function() {
                        var e = r.getLoggedInUserID(),
                            i = r.Models.User.getCached(e),
                            s;
                        r.on("router:change", this.onRouterChange, this), r.on("lightbox:ready", this.onLightboxOpen, this), r.on("lightbox:destroyed", this.onLightboxDestroyed, this), r.on("queue:setSize", function() {
                            this.endTour()
                        }, this), i.get("isLoggedIn") ? s = "LOGGEDIN" : s = "LOGGEDOUT";
                        var o = {};
                        o.homeIntro = {
                            name: "home",
                            title: _.getString("TOUR_TITLE_HOMEINTRO_" + s),
                            description: _.getString("TOUR_DESC_HOMEINTRO_" + s),
                            setup: function(e) {
                                var o = i.getLocalRecentListens(t, !0, !0) || [];
                                !o.length && s == "LOGGEDIN" && (this.title = _.getString("TOUR_TITLE_HOMEINTRO_LOGGEDOUT"), this.description = _.getString("TOUR_TITLE_HOMEINTRO_LOGGEDOUT")), n.page.currentPageView instanceof r.Views.Pages.Home ? (e.y = 0, e.x = 320, e.notch = "left", e.notchX = 0, e.notchY = 20, e.$attached = $($(".home-section")[0])) : (e.y = "bottom", e.x = "center", e.notch = "top", e.notchX = 20, e.notchY = 0, e.$attached = $("#logo"))
                            }
                        }, o.profileMusic = {
                            name: "profile",
                            title: _.getString("TOUR_TITLE_PROFILE"),
                            description: _.getString("TOUR_DESC_PROFILE"),
                            setup: function(e) {
                                e.y = "bottom", e.x = "center", e.notch = "top", e.notchX = 225, e.notchY = 0, e.$attached = $("#profile-button")
                            }
                        }, o.sidebar = {
                            name: "sidebar",
                            title: _.getString("TOUR_TITLE_SIDEBAR"),
                            description: _.getString("TOUR_DESC_SIDEBAR"),
                            setup: function(e) {
                                e.y = "middle", e.x = -265, e.notch = "right", e.notchX = 0, e.notchY = 40, e.$attached = $("#sidebar")
                            }
                        }, o.queue = {
                            name: "queue",
                            title: _.getString("TOUR_TITLE_QUEUE"),
                            description: _.getString("TOUR_DESC_QUEUE"),
                            setup: function(e) {
                                var i = [{
                                    A: 7183842,
                                    B: "Hundred Waters",
                                    C: 2198980,
                                    D: "Hundred Waters",
                                    E: "7183842.jpg",
                                    F: 0,
                                    H: 1231210954,
                                    I: 34804020,
                                    J: "Visitor",
                                    L: 2,
                                    M: "0",
                                    N: 0,
                                    P: [75, 678],
                                    G: 0
                                }, {
                                    A: 7183842,
                                    B: "Hundred Waters",
                                    C: 2198980,
                                    D: "Hundred Waters",
                                    E: "7183842.jpg",
                                    F: 0,
                                    H: 1231208126,
                                    I: 34804016,
                                    J: "Sonnet",
                                    L: 1,
                                    M: "0",
                                    N: 0,
                                    P: [75, 678, 3489, 7120, 7518],
                                    G: 0
                                }, {
                                    A: 7183842,
                                    B: "Hundred Waters",
                                    C: 2198980,
                                    D: "Hundred Waters",
                                    E: "7183842.jpg",
                                    F: 0,
                                    H: 1231206805,
                                    I: 34804044,
                                    J: "Gather",
                                    L: 11,
                                    M: "0",
                                    N: 0,
                                    P: [75],
                                    G: 0
                                }, {
                                    A: 7183842,
                                    B: "Hundred Waters",
                                    C: 2198980,
                                    D: "Hundred Waters",
                                    E: "7183842.jpg",
                                    F: 0,
                                    H: 1231206259,
                                    I: 34804023,
                                    J: "Me & Anodyne",
                                    L: 3,
                                    M: "0",
                                    N: 0,
                                    P: [75],
                                    G: 0
                                }],
                                    s = $("#now-playing"),
                                    o = n.model.get("player"),
                                    u = o.get("currentQueue"),
                                    a = u && u.get("songs");
                                e.y = "top", e.adjustY = -4, e.x = s.outerWidth() - 160, e.notch = "bottom", e.notchX = 100, e.notchY = 0, e.$attached = s;
                                var f = n.queue;
                                f.queueSize === "c" && (e.hadToOpenQueue = !0, e.hadOpenedOnce = f.openedOnce, r.trigger("queue:setSize", f.lastUserQueueSize || f.bestQueueSize, !1, !1)), a && !a.length && (i = new r.Models.Collections.Songs(i), e.addedSongs = i, r.trigger("player:addSongs", i, t, !1, {
                                    type: "tour"
                                }))
                            },
                            teardown: function(e) {
                                var t = n.queue,
                                    i = n.model.get("player"),
                                    s = i.get("currentQueue"),
                                    o = s && s.get("songs"),
                                    u = [];
                                if (e.addedSongs && i.get("playStatus") === 0 && o.length) {
                                    var a = e.addedSongs.pluck("SongID");
                                    u = o.filter(function(e) {
                                        return _.indexOf(a, e.get("SongID")) != -1
                                    })
                                }
                                e.hadToOpenQueue && u.length == o.length && (r.trigger("queue:setSize", "c", !1, !1), e.hadOpenedOnce || (t.openedOnce = !1)), u.length && r.trigger("player:removeSongs", u)
                            }
                        }, o.signUp = {
                            name: "signup",
                            title: _.getString("TOUR_TITLE_SIGNUP"),
                            description: _.getString("TOUR_DESC_SIGNUP"),
                            setup: function(e) {
                                e.y = "bottom", e.x = "center", e.notch = "top", e.notchX = 225, e.notchY = 0, e.$attached = $("#header-signup-btn")
                            }
                        }, this.renderDfd = $.Deferred(), (this.type = "broadcast") ? this.tour = [o.broadcast] : (this.tour = [o.homeIntro], s == "LOGGEDIN" ? (this.tour.push(o.profileMusic, o.sidebar, o.queue), this.tourType = "GENERAL_LOGGEDIN") : (this.tour.push(o.queue, o.signUp), this.tourType = "GENERAL_LOGGEDOUT")), this.current = 0, r.trigger("guts:log", "tourStart", {
                            tourType: this.tourType,
                            tourLength: this.tour.length
                        }), r.trigger("guts:gatrack", "site", "tour_" + this.tourType, "tourStart")
                    },
                    render: function(e) {
                        return this.manager = e, this.fetchTemplate("tour").always(_.bind(this.onTemplate, this)), this.renderDfd.promise()
                    },
                    redraw: function() {
                        var e = this.current - 1;
                        this.tour[e] && this.tour[e].teardown && this.tour[e].teardown(this.manager.options);
                        if (!this.tour[this.current]) {
                            this.endTour();
                            return
                        }
                        this.tour[this.current].setup && this.tour[this.current].setup(this.manager.options), this.$el.html(this.renderTemplate(this.template, {
                            title: this.tour[this.current].title,
                            description: this.tour[this.current].description,
                            step: this.current + 1,
                            steps: this.tour.length,
                            type: this.type
                        })), this.currentName = this.tour[this.current].name, this.hasDrawn && this.manager.onRendered(), this.hasDrawn = !0
                    },
                    onTemplate: function(e) {
                        this.template = e, this.redraw(), this.renderDfd.resolve()
                    },
                    onRouterChange: function() {
                        this.currentName && this.currentName == "home" && this.redraw()
                    },
                    onLightboxOpen: function() {
                        this.manager && this.manager.$el.addClass("hide")
                    },
                    onLightboxDestroyed: function() {
                        this.manager && this.manager.$el.removeClass("hide")
                    },
                    onDestroy: function() {
                        r.off("router:change", this.onRouterChange), r.off("lightbox:ready", this.onLightboxOpen), r.off("lightbox:destroyed", this.onLightboxDestroyed), r.off("queue:setSize", null, this)
                    },
                    endTour: function() {
                        r.trigger("tooltip:close", "tour"), _.defer(function() {
                            var e = new r.Views.Tooltips.Helper({
                                text: _.getString("TOUR_FOLLOWUP")
                            }),
                                t = {
                                    currentTarget: $("#settings-button")[0]
                                };
                            e.tooltipOptions.persist = !0, e.tooltipOptions.tooltipKey = "tourFollowup", r.Views.Tooltips.Helper.simpleTooltip(t, e), setTimeout(function() {
                                r.trigger("tooltip:close", "tourFollowup")
                            }, 6e3)
                        }), r.trigger("guts:log", "tourEnd", {
                            tourType: this.tourType
                        }), r.trigger("guts:gatrack", "site", "tour_" + this.tourType, "end_" + this.current)
                    },
                    signIn: function() {
                        r.trigger("tooltip:close", "tour"), r.trigger("lightbox:open", "login"), r.trigger("guts:log", "tourTriggerSignInLB", {
                            tourType: this.tourType
                        }), r.trigger("guts:gatrack", "site", "tour_" + this.tourType, "triggerSignInLB")
                    },
                    signUp: function() {
                        r.trigger("tooltip:close", "tour"), r.trigger("lightbox:open", "signup"), r.trigger("guts:log", "tourTriggerSignUpLB", {
                            tourType: this.tourType
                        }), r.trigger("guts:gatrack", "site", "tour_" + this.tourType, "triggerSignUpLB")
                    },
                    openAboutBroadcastLB: function() {
                        this.endTour(), r.trigger("lightbox:open", "broadcastAbout")
                    }
                }), r.Views.Tooltips.Tutorial = Backbone.View.extend({
                    templatePath: "tooltip",
                    className: "tooltip-tutorial-inner",
                    events: {
                        click: "doTutorialAction",
                        "click .close": "showNextTutorialTooltip"
                    },
                    showNextTutorialTooltip: function() {
                        return this.current++, this.redraw(), !1
                    },
                    initialize: function() {
                        r.on("router:change", this.onRouterChange, this), r.on("lightbox:ready", this.onLightboxOpen, this), r.on("lightbox:destroyed", this.onLightboxDestroyed, this), this.tutorial = this.options.tooltips, this.renderDfd = $.Deferred(), this.current = 0, this.on("all", function() {
                            var e = this.options.onTutorialAction;
                            e && e.apply(this, _.toArray(arguments));
                            var t = this.options.onTutorialActionComplete;
                            t && t.apply(this, _.toArray(arguments))
                        }, this)
                    },
                    render: function(e) {
                        return this.manager = e, this.fetchTemplate("tutorial").always(_.bind(this.onTemplate, this)), this.renderDfd.promise()
                    },
                    redraw: function() {
                        var e = this.current - 1;
                        this.manager && this.tutorial[e] && this.tutorial[e].teardown ? this.tutorial[e].teardown(this.manager.options) : this.manager || console.trace();
                        if (!this.tutorial[this.current]) {
                            this.endTutorial();
                            return
                        }
                        this.tutorial[this.current].setup && this.tutorial[this.current].setup(this.manager.options), this.$el.html(this.renderTemplate(this.template, {
                            title: this.tutorial[this.current].title
                        })), this.currentName = this.tutorial[this.current].name, this.hasDrawn && this.manager.onRendered(), this.hasDrawn = !0, this.manager.$el.removeClass("hide")
                    },
                    onTemplate: function(e) {
                        this.template = e, this.redraw(), this.renderDfd.resolve()
                    },
                    doTutorialAction: function() {
                        this.tutorial[this.current].action && this.tutorial[this.current].action(), this.showNextTutorialTooltip()
                    },
                    onRouterChange: function() {
                        this.redraw()
                    },
                    onLightboxOpen: function() {
                        this.manager && this.manager.$el.addClass("hide")
                    },
                    onLightboxDestroyed: function() {
                        this.manager && this.manager.$el.removeClass("hide")
                    },
                    onDestroy: function() {
                        r.off("router:change", this.onRouterChange), r.off("lightbox:ready", this.onLightboxOpen), r.off("lightbox:destroyed", this.onLightboxDestroyed)
                    },
                    endTutorial: function() {
                        r.Services.Local.set("broadcastTutorialComplete", !0), r.trigger("tooltip:close", "tutorial")
                    },
                    closeTooltip: function() {
                        r.trigger("tooltip:close", "tutorial")
                    }
                }), r.Views.Tooltips.Comment = Backbone.View.extend({
                    templatePath: "tooltip",
                    events: {
                        "submit #tooltip-comment-submit": "onSubmit",
                        "click .tooltip-comment-placeholder": "onPlaceholderClick",
                        "blur .tooltip-comment-input": "onInputBlur",
                        "click .btn.close": "closeTooltip"
                    },
                    initialize: function(e) {
                        this.options = e, this.model = e.model || {}, this.placeholderTextKey = e.placeholderTextKey || "COMMENT_TOOLTIP_SONG", this.originalSongId = this.model.get("player").get("currentQueue").get("activeSong").get("SongID"), this.userID = this.model.get("user").get("UserID"), r.on("app:resize", this.closeTooltip, this)
                    },
                    render: function() {
                        return this.renderDfd = $.Deferred(), this.fetchTemplate("comment").always(_.bind(this.onTemplate, this)), this.renderDfd
                    },
                    onDestroy: function() {
                        r.off("app:resize", null, this)
                    },
                    onTemplate: function(e) {
                        this.$el.html(this.renderTemplate(e, this)), this.renderDfd.resolve()
                    },
                    onPlaceholderClick: function(e) {
                        $(".tooltip-comment-input").focus(), $(".tooltip-comment-placeholder").hide()
                    },
                    onInputBlur: function(e) {
                        $(e.currentTarget).val() || $(".tooltip-comment-placeholder").show()
                    },
                    onSubmit: function(e) {
                        function u() {
                            r.Models.Comment.storeComment("song", i, n, s).always(function() {
                                r.trigger("tooltip:close", o)
                            })
                        }
                        e.stopPropagation(), e.preventDefault();
                        var t = $("input", e.currentTarget),
                            n = t.val(),
                            i = this.originalSongId,
                            s = null,
                            o = this.options.tooltipKey;
                        this.userID > 0 ? u() : r.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_COMMENT"),
                            onLogin: _.bind(u, this)
                        })
                    },
                    closeTooltip: function() {
                        r.trigger("tooltip:close", this.options.tooltipKey)
                    }
                }), r.Views.Tooltips.BroadcastTag = Backbone.View.extend({
                    templatePath: "tooltip",
                    events: {
                        "keyup .tag-filter": "filterTagsDebounced",
                        "click .tag-item": "onClickTag"
                    },
                    initialize: function(e) {
                        this.options = e, this.filteredResults = {};
                        if (typeof this.options.tags == "object") {
                            var t = [];
                            for (var n in this.options.tags) this.options.tags.hasOwnProperty(n) && t.push(n);
                            this.options.tags = t
                        }
                        if (this.options.defaultTags === "object") {
                            var i = [];
                            for (var s in this.options.tags) this.options.tags.hasOwnProperty(s) && i.push(s);
                            this.options.defaultTags = i
                        }
                        this.filterTagsDebounced = _.debounce(_.bind(this.filterTags, this), 5), r.on("app:resize", this.closeTooltip, this)
                    },
                    onDestroy: function() {
                        r.off("app:resize", null, this)
                    },
                    render: function() {
                        return this.renderDfd = $.Deferred(), this.fetchTemplate("broadcastTag").always(_.bind(this.onTemplate, this)), this.renderDfd
                    },
                    onTemplate: function(e) {
                        this.$el.html(this.renderTemplate(e, this)), this.displayTags(this.options.tags, !0);
                        var t = this.$el.find(".tag-filter"),
                            n = this.$el.find(".tag-list");
                        _.delay(function() {
                            n.tinyscrollbar()
                        }, 10), this.renderDfd.resolve()
                    },
                    displayTags: function(e, t) {
                        var n = this.$el.find(".tag-list-overview").empty(),
                            r;
                        t && this.options.defaultTags && (e = this.options.defaultTags);
                        for (var i = 0, s = e.length; i < s; i++) r = document.createElement("a"), r.className = "tag-item", r.innerHTML = _.escape(e[i]), n.append(r);
                        this.$el.find(".tag-list").tinyscrollbar_update()
                    },
                    filterTags: function(e) {
                        var t = $(e.currentTarget),
                            n = t.val().toLowerCase(),
                            r = n.length;
                        if (!n || !r) {
                            this.displayTags(this.options.tags, !0);
                            return
                        }
                        if (this.filteredResults[n]) {
                            this.displayTags(this.filteredResults[n]);
                            return
                        }
                        var i = [],
                            s = [],
                            o, u;
                        for (var a = 0, f = this.options.tags.length; a < f; a++) o = this.options.tags[a], u = o.toLowerCase().indexOf(n), u > 0 ? i.push(o) : u === 0 && s.push(o);
                        s = _.sortBy(s, function(e) {
                            return e.length
                        }), i = s.concat(i), this.filteredResults[n] = i, this.displayTags(i)
                    },
                    filterTagsDebounced: function() {},
                    onClickTag: function(e) {
                        var t = $(e.currentTarget),
                            n = t.text();
                        this.options.submit && this.options.submit(n), this.closeTooltip()
                    },
                    closeTooltip: function() {
                        r.trigger("tooltip:close", this.options.tooltipKey)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Notifications = t.Views.Notifications || {};
                var n = 1,
                    r = Backbone.Model.extend({
                        defaults: {
                            notifID: 0,
                            name: "generic",
                            type: "",
                            duration: 6500,
                            slots: [1],
                            timeout: !1,
                            listenersSet: !1,
                            timestamp: null,
                            priority: 5,
                            template: "generic",
                            title: "",
                            description: "",
                            image: "",
                            url: "",
                            className: "",
                            target: "_self",
                            options: null,
                            data: {}
                        }
                    });
                t.Views.Notification = Backbone.View.extend({
                    el: document.getElementById("notifications"),
                    events: {
                        mouseover: "stopTimers",
                        mouseout: "startTimers"
                    },
                    initialize: function() {
                        this.notifications = [], this.notifsQueue = [], this.maxOpenNotifs = 3, this.pauseNotifications = !1, t.on("notification:add", this.addNotification, this), t.on("notification:close", this.closeNotification, this)
                    },
                    addNotification: function(e) {
                        var n = new t.Views.Notifications.Base({
                            model: new r(e)
                        });
                        this.notifsQueue.push(n), this.notifsQueue.sort(function(e, t) {
                            return t.model.get("priority") - e.model.get("priority")
                        }), this.renderNotification(), t.trigger("notification:opened", n)
                    },
                    renderNotification: _.throttle(function() {
                        if (this.notifications.length >= this.maxOpenNotifs || this.pauseNotifications) {
                            setTimeout(_.bind(this.renderNotification, this), 1e3);
                            return
                        }
                        var e = this.notifsQueue.shift();
                        if (!e) return;
                        e.on("notification:rendered", function() {
                            this.$el.prepend(e.$el), e.$el.fadeTo(650, 1), this.startTimers([e])
                        }, this), e.render(), this.notifications.push(e), e.trigger("notification:rendered", e), this.notifsQueue.length && this.renderNotification()
                    }, 2e3),
                    startTimers: function(e) {
                        this.pauseNotifications = !1;
                        var t = e && e.length ? e : this.notifications;
                        for (var n = 0; n < t.length; n++) t[n].model.get("duration") && (t[n].timeout = setTimeout(_.bind(this.closeNotification, this, t[n]), t[n].model.get("duration")))
                    },
                    stopTimers: function(e) {
                        e.length || (this.pauseNotifications = !0);
                        var t = e.length ? e : this.notifications;
                        for (var n = 0; n < t.length; n++) clearTimeout(t[n].timeout)
                    },
                    closeNotification: function(e) {
                        if (!e.closing) {
                            e.closing = !0;
                            var t = null,
                                n = this,
                                r = _.once(function() {
                                    clearTimeout(t);
                                    var r = _.indexOf(n.notifications, e);
                                    n.notifications.splice(r, 1), e.destroy(), n.startTimers(), n.renderNotification()
                                });
                            e.$el.fadeOut(400, r), t = setTimeout(r, 1e3)
                        }
                    }
                }, {}), t.Views.Notifications.Base = Backbone.View.extend({
                    templatePath: "notifications",
                    tagName: "div",
                    className: "notification",
                    events: {
                        "click .close": "close",
                        "click .action": "onHandleClick"
                    },
                    initialize: function() {
                        var e = this.generateNotificationID();
                        this.model.set("notifID", e), this.model.set("timestamp", new Date), this.$el.attr("id", "notif-" + e), this.$el.data("view", this), this.$el.data(this.model.get("data")), this.model.get("className") && this.$el.addClass(this.model.get("className")), this.model.get("click") && this.$el.on("click", _.bind(function(e) {
                            this.model.get("url") || e.preventDefault(), this.model.get("click")(this), this.close()
                        }, this));
                        var t = this.model.get("initFunc");
                        _.isFunction(t) && t(this)
                    },
                    onDestroy: function() {
                        this.model.get("closeAction") && this.model.get("closeAction")()
                    },
                    render: function() {
                        var e = this.model.get("template") ? this.model.get("template") : this.model.get("name");
                        this.fetchTemplate(e).done(_.bind(this.openNotification, this))
                    },
                    openNotification: function(e) {
                        this.$el.append(this.renderTemplate(e));
                        var t = this.model.get("onOpened");
                        t && t(this)
                    },
                    generateNotificationID: function() {
                        return n++
                    },
                    onHandleClick: function(e) {
                        this.model.get("clickAction") ? this.model.get("clickAction")(this, e) : this.close()
                    },
                    close: function(e) {
                        e && (e.preventDefault(), e.stopPropagation()), t.trigger("notification:close", this)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Theme = t.Views.Theme || {}, t.Views.Theme = Backbone.View.extend({
                    themes: null,
                    currentTheme: null,
                    lastTheme: null,
                    themesLocation: "themes",
                    templatePathBase: "themes/",
                    templatePath: null,
                    themeRegex: /^#!\/(theme)\/(.*)\/?/,
                    promoRegex: /^#!\/(promotion)\/(.*)\/?/,
                    defaultID: 814,
                    premiumID: 814,
                    themeNotifRateLimit: 864e5,
                    lastThemeNotification: null,
                    themeSetByURL: !1,
                    isFirstVisit: !1,
                    currentPage: null,
                    isFirstVisitPending: !1,
                    themePreferences: {},
                    activeSong: null,
                    user: null,
                    getFromServerTimeoutID: null,
                    takeoverPreview: null,
                    themePending: !1,
                    lastPage: null,
                    isPremium: !1,
                    initializaed: !1,
                    isHome: !1,
                    isTemporary: !1,
                    events: {},
                    initialize: function() {
                        this.themes = t.Models.Themes.themes, this.$pageWrapper = $("#page-wrapper"), t.on("theme:set", _.bind(this.getFromServer, this)), this.model.on("change:user", this.onUserChange, this), this.model.get("player").on("change:currentQueue", function() {
                            this.model.get("player").get("currentQueue").on("change:activeSong", this.onActiveSongChange, this)
                        }, this), t.on("notification:opened", _.bind(this.onOpenNotification, this)), t.on("theme:notification", _.bind(this.onHandleNotification, this)), t.on("locale:change", _.bind(this.onLocaleChange, this)), t.on("theme:click", _.bind(this.onThemeClick, this)), t.on("theme:video", _.bind(this.onPlayVideo, this)), t.on("theme:videoheader", _.bind(this.onVideoHeader, this)), t.on("theme:interactiontimeout", _.bind(this.onInteractionTimeout, this)), t.on("theme:userchange", _.bind(this.onThemeUserChange, this)), this.themePreferences = t.Services.Local.get("themePreferences") || {}, t.ready.done(_.bind(this.onAppReady, this))
                    },
                    onAppReady: function() {
                        location.hash && (location.hash.match(this.themeRegex) || location.hash.match(this.promoRegex)) && (this.themeSetByURL = !0), this.onUserChange()
                    },
                    onUserChange: function() {
                        var e = !this.user;
                        this.user = this.model.get("user"), this.isPremium = this.user.get("subscription").isPremium(), this.onThemeUserChange();
                        if (this.isPremium) this.initialized = !0, this.isFirstVisit = !1, this.setLastOrDefault();
                        else if (e) {
                            var n = $.Deferred();
                            this.themeSetByURL ? (t.Services.Local.set("isFirstVisit", !1), t.Services.Local.set("firstVisitCount", 5), this.isFirstVisit = !1, this.initialized = !0, t.Services.API.isFirstVisit().always(function() {}, this, n)) : (this.isFirstVisit = !(this.user.get("UserID") > 0 || _.defined(t.Services.Local.get("isFirstVisit")) && t.Services.Local.get("firstVisitCount") >= 2), this.isFirstVisit ? t.Services.API.isFirstVisit().always(_.bind(this.onIsFirstVisitCheck, this, n)) : (t.Services.Local.set("isFirstVisit", !1), t.Services.Local.set("firstVisitCount", 5), this.currentPage && (this.currentPage.canTheme ? this.getFromServer() : this.hideThemeComponents()), this.initialized = !0))
                        } else this.themeChangeGracePeriod() && !this.isFirstVisit && (this.currentPage.canTheme ? this.getFromServer() : this.hideThemeComponents());
                        e && (t.on("change:page", _.bind(this.onPageChange, this)), this.user.on("change:subscription", _.bind(function() {
                            this.isPremium = this.user.get("subscription").isPremium(), this.isPremium && this.setLastOrDefault()
                        }, this)))
                    },
                    onIsFirstVisitCheck: function(e, n) {
                        this.isFirstVisit = n, t.Services.Local.set("isFirstVisit", !1);
                        if (this.isFirstVisit) _.defined(t.Services.Local.get("firstVisitCount")) || t.Services.Local.set("firstVisitCount", 1), this.canShowThemeByID(this.defaultID) && !this.currentTheme && this.setCurrentTheme(this.defaultID), this.trackFirstVisit(), t.Services.GUTS.beginContext({
                            isFirstVisit: !0
                        }), t.Services.GUTS.gaSetCustomVariable(1, "User", this.user.getUserStringForAnalytics() + ",N:Y");
                        else {
                            if (!_.defined(t.Services.Local.get("firstVisitCount"))) t.Services.Local.set("firstVisitCount", 5);
                            else {
                                var r = t.Services.Local.get("firstVisitCount");
                                this.isFirstVisit = ++r < 2, t.Services.Local.set("firstVisitCount", r)
                            }
                            this.themeChangeGracePeriod() && !this.isFirstVisit && (this.currentPage && (this.currentPage.canTheme ? this.getFromServer() : this.hideThemeComponents()), this.initialized = !0)
                        }
                    },
                    setLastOrDefault: function() {
                        if (this.themeSetByURL) return;
                        if (this.isPremium) {
                            var e = this.getLastTheme();
                            this.themes[e] ? this.setCurrentTheme(e, {
                                savePreference: !0
                            }) : this.setCurrentTheme(this.premiumID, {
                                savePreference: !0
                            })
                        } else this.canShowThemeByID(this.defaultID) && this.isHome && this.setCurrentTheme(this.defaultID)
                    },
                    onPremiumPageChange: function(e, t, n) {
                        !this.currentTheme || this.currentTheme && this.currentTheme.get("promotion") || this.isTemporary ? (this.setLastOrDefault(), this.isTemporary = !1) : this.currentTheme.trigger("theme:pageChange", this.currentPage)
                    },
                    onPageChange: function(e, n, r) {
                        this.lastPage = this.currentPage, this.currentPage = {
                            type: e,
                            params: n,
                            view: r,
                            subpage: r.currentPageView.model.get("subpage"),
                            section: r.currentPageView.model.get("section"),
                            canTheme: t.Models.Theme.themePageCheck(e)
                        }, this.currentPage.key = this.currentPage.type + this.currentPage.subpage + this.currentPage.section, this.isHome = this.currentPage.type == "home";
                        if (this.lastPage && this.lastPage.key == this.currentPage.key || this.themeSetByURL) return;
                        if (this.isPremium) {
                            this.onPremiumPageChange(e, n, r);
                            return
                        }
                        if (this.currentTheme) {
                            if (this.currentPage.canTheme && this.getTime() - this.takeoverPreview < 18e4) {
                                this.currentTheme.trigger("theme:pageChange", this.currentPage);
                                return
                            }
                            this.takeoverPreview = null;
                            if (!this.isHome && this.currentPage.canTheme && this.currentTheme.get("sitetakeover")) {
                                this.currentTheme.trigger("theme:pageChange", this.currentPage), this.loadThemeImpression();
                                return
                            }
                            this.currentPage.type == "tag" && (this.currentPage.tagID = n.tagID), this.currentPage.type == "artist" && (this.currentPage.artistID = n.id);
                            if (this.currentTheme.get("artist") && this.currentTheme.get("artistID") == this.currentPage.artistID) {
                                this.currentTheme.trigger("theme:pageChange", this.currentPage), this.loadThemeImpression();
                                return
                            }
                        }
                        this.currentPage.canTheme && this.initialized ? this.getFromServer() : this.hideThemeComponents()
                    },
                    getFromServer: function(e) {
                        var n = $.Deferred(),
                            r;
                        if (!this.currentPage) r = "grooveshark.home";
                        else switch (this.currentPage.type) {
                        case "home":
                            r = "grooveshark.home";
                            break;
                        default:
                            r = "grooveshark.ros"
                        }
                        if (e) {
                            if (e.last) this.setLastOrDefault();
                            else if ((e.manual || e.temporary) && e.themeID) {
                                this.currentPage = {
                                    type: "home"
                                }, this.themeSetByURL = !0;
                                var i = ["id=" + e.themeID, "m=1", "dcmt=text/json", "sz=777x777", this.getTime() + "=" + this.getTime()],
                                    s = ";" + i.join(";");
                                t.Services.API.getThemeFromDFP(r, s).done(_.bind(this.onHandleFromServer, this, n, e))
                            }
                        } else {
                            e = e || {};
                            var o = {
                                failed: !0
                            };
                            $.extend(o, e), this.getFromServerTimeoutID = setTimeout(_.bind(function() {
                                this.setLastOrDefault()
                            }, this), 12e3), t.Services.API.getThemeFromDFP(r, this.getParams(e)).done(_.bind(this.onHandleFromServer, this, n, e)).fail(_.bind(this.onHandleFromServer, this, n, o))
                        }
                        this.isHome && t.trigger("theme:pending", !0)
                    },
                    onHandleFromServer: function(e, t, n) {
                        clearTimeout(this.getFromServerTimeoutID);
                        if (t.failed) {
                            this.setLastOrDefault();
                            return
                        }
                        if (!n) {
                            this.setLastOrDefault();
                            return
                        }
                        try {
                            n = $.parseJSON(n)
                        } catch (r) {
                            console.log("Invalid JSON from theme server", r);
                            if (!t || t && !t.manual) {
                                this.setLastOrDefault();
                                return
                            }
                        }
                        if (t && (t.manual || t.temporary)) {
                            if (!this.themes[t.themeID] && t.themeID == n.themeID) this.themes[t.themeID] = n;
                            else if (!this.themes[t.themeID]) {
                                console.log("Theme: Could not find theme"), this.setLastOrDefault();
                                return
                            }
                            if (t.themeID && t.themeID != n.themeID) {
                                this.setCurrentTheme(t.themeID, t);
                                return
                            }
                        } else if (n.themeID < 0) {
                            this.trackDefault(n.themeID, n.tracking), this.setLastOrDefault();
                            return
                        }
                        this.themes[n.themeID] ? $.extend(this.themes[n.themeID], n) : this.themes[n.themeID] = n, this.themes[n.themeID].tracking && this.themes[n.themeID].tracking.length && (this.themes[n.themeID].sponsored = !0), (this.canShowThemeByID(n.themeID) || t && (t.manual || t.temporary)) && this.setCurrentTheme(n.themeID, t)
                    },
                    getParams: function() {
                        var e = ["dcmt=text/json", "sz=777x777"],
                            n = ";",
                            r = ";";
                        return t.Models.Ad.getParams(e, n, r, this)
                    },
                    setCurrentTheme: function(e, n) {
                        this.lastTheme = this.currentTheme, this.lastTheme && this.lastTheme.trigger("theme:destroy"), this.currentTheme = new t.Models.Theme(this.themes[e]), this.model.get("theme").off(), this.model.set({
                            theme: this.currentTheme
                        }), this.currentTheme.set("view", this);
                        if (this.isHome || this.themePending) this.themePending = !1, t.trigger("theme:change", this.currentTheme);
                        this.templatePath = this.templatePathBase + this.currentTheme.get("location"), this.render(), n && (n.savePreference && !n.temporary && this.setLastTheme(e), this.isTemporary = n.temporary, n.name == "sitetakeover" && !this.isPremium && (this.takeoverPreview = this.getTime())), this.themeSetByURL = !1, this.loadThemeImpression()
                    },
                    render: function() {
                        if (this.currentTheme) {
                            $("#themeStyleSheet").attr("href", [gsConfig.assetHost, this.themesLocation, this.currentTheme.get("location"), "theme.css"].join("/") + "?ver=" + _.orEqual(this.currentTheme.get("version"), 1)), $(".theme-component").html(""), this.showThemeComponents();
                            var e = this.currentTheme.get("sections"),
                                t, n = e.length,
                                r;
                            for (t = 0; t < n; t++) r = e[t], r != "#theme-videoheader" && r != "#theme-notif" && r != "#theme-interactiontimeout" && this.renderSection(r)
                        }
                    },
                    renderSection: function(e) {
                        $(e).show();
                        var t = e.replace("#theme-", "");
                        this.fetchTemplate(t).always(_.bind(function(n) {
                            if (this.destroyed) return;
                            var r = $(e);
                            if (r.length) {
                                var i = {
                                    view: this,
                                    section: e,
                                    currentTemplate: t
                                };
                                r.html(this.renderTemplate(n, i))
                            }
                            this.currentTheme.trigger("theme:" + t)
                        }, this))
                    },
                    canShowThemeByID: function(e) {
                        return e && this.themes[e] && this.currentPage ? this.currentPage.canTheme || this.currentPage.isThemeSubPage : !1
                    },
                    themeChangeGracePeriod: function() {
                        if (this.currentTheme) {
                            var e = this.currentTheme.get("gracePeriod");
                            if (e) return this.getTime() - e.timeOfAction > e.period
                        }
                        return !0
                    },
                    trackDefault: function(e, n) {
                        this.currentPage && this.currentPage.type == "home" && (t.Models.Ad.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.home/;id=" + e + ";d=1;sz=1x1;ord=" + this.getTime()]), t.Models.Ad.loadTracking(n), t.Services.API.logTargetedThemeImpression(e), t.Services.GUTS.logEvent("trackDefaultTheme", {
                            id: e
                        }))
                    },
                    trackFirstVisit: function() {},
                    onLocaleChange: function(e) {
                        this.currentTheme && this.currentTheme.trigger("locale:change", e)
                    },
                    onThemeClick: function(e) {
                        e && e.currentTarget && this.currentTheme && (e.data = {
                            currentTheme: this.currentTheme
                        }, t.Models.Theme.handleClick(e))
                    },
                    onPlayVideo: function(e) {
                        this.currentTheme && (index = _.orEqual(e.index, 0), t.trigger("lightbox:open", "video", {
                            videos: this.currentTheme.get("videos"),
                            index: index
                        }))
                    },
                    onVideoHeader: function() {
                        this.currentTheme.trigger("theme:videoheader"), this.currentTheme && this.currentTheme.get("videoheader") && this.currentTheme.get("videoheader").tracking && t.Models.Ad.loadTracking(this.currentTheme.get("videoheader").tracking)
                    },
                    onInteractionTimeout: function() {
                        this.currentTheme.trigger("theme:interactiontimeout"), this.currentTheme && this.currentTheme.get("interactiontimeout") && this.currentTheme.get("interactiontimeout").tracking && t.Models.Ad.loadTracking(this.currentTheme.get("interactiontimeout").tracking)
                    },
                    onThemeUserChange: function() {
                        this.currentTheme && this.currentTheme.trigger("theme:user")
                    },
                    onActiveSongChange: function() {
                        var e = this.model.get("player").get("currentQueue").get("activeSong");
                        this.currentThemeNotification && (t.trigger("notification:close", this.currentThemeNotification), this.currentThemeNotification = null), e && this.onHandleNotification({
                            artistID: e.get("ArtistID"),
                            artistName: e.get("ArtistName")
                        })
                    },
                    onHandleNotification: function(e) {
                        var n = this.getTime();
                        e.artistID && t.Models.Theme.notification && t.Models.Theme.notification.options.artistIDs && _.indexOf(t.Models.Theme.notification.options.artistIDs, e.artistID) >= 0 && (!this.lastThemeNotification || n - this.lastThemeNotification > this.themeNotifRateLimit) && (!$(".theme-component:visible").length || !this.currentTheme || !this.currentTheme.get("sponsored")) && (t.Models.Theme.notification.themeID != this.currentTheme.get("themeID") || t.Models.Theme.notification.selfOverride) && setTimeout(_.bind(function() {
                            this.notifReplacements(t.Models.Theme.notification, e), t.trigger("notification:add", t.Models.Theme.notification), this.lastThemeNotification = n, t.Models.Theme.notification = null
                        }, this), e.timeout || 0)
                    },
                    notifReplacements: function(e, t) {
                        e.title && (e.title = e.title.replace("{artistName}", t.artistName)), e.description && (e.description = e.description.replace("{artistName}", t.artistName))
                    },
                    onOpenNotification: function(e) {
                        e.model.get("type") && e.model.get("type") == "theme" && (this.currentThemeNotification = e, t.Models.Ad.loadTracking(e.model.get("options").tracking))
                    },
                    setLastTheme: function(e) {
                        var t = this.user.get("UserID");
                        this.themePreferences[t] ? this.themePreferences[t].lastTheme = e : this.themePreferences[t] = {
                            lastTheme: e,
                            lastSeen: {}
                        }, this.savePreferences()
                    },
                    getLastTheme: function() {
                        var e = this.user.get("UserID");
                        return this.themePreferences[e] && this.themePreferences[e].lastTheme ? this.themePreferences[e].lastTheme : null
                    },
                    loadThemeImpression: function() {
                        this.currentTheme && this.currentTheme.get("sponsored") && this.currentTheme.get("tracking") && (t.Services.API.logTargetedThemeImpression(this.currentTheme.get("themeID")), t.Models.Ad.loadTracking(this.currentTheme.get("tracking")))
                    },
                    showThemeComponents: function() {
                        this.$pageWrapper.addClass("theme"), $(".theme-component").show()
                    },
                    hideThemeComponents: function() {
                        this.$pageWrapper.removeClass("theme"), $(".theme-component").hide()
                    },
                    savePreferences: function() {
                        t.Services.Local.set("themePreferences", this.themePreferences)
                    },
                    getTime: function() {
                        return (new Date).getTime()
                    }
                }), t.Views.Theme.Base = Backbone.View.extend({})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Ad = t.Views.Ad || {};
                var r = 0,
                    i = 0;
                t.Views.Ad = Backbone.View.extend({
                    rotateTimer: 0,
                    lastRotation: null,
                    rotationCount: 0,
                    defaultRotationTime: 3e4,
                    maxIdleTime: 18e4,
                    currentPage: null,
                    currentPageView: null,
                    lastPage: null,
                    currentTheme: null,
                    themePending: !1,
                    visitCount: 0,
                    IS_IDLE: !1,
                    IDLE_COUNT: 3e4,
                    theme: null,
                    user: null,
                    initialImpression: !0,
                    pageBasedImpression: !0,
                    isFirst: !1,
                    events: {},
                    initialize: function() {
                        t.on("page:ready", _.bind(this.onPageReady, this)), t.on("theme:pending", _.bind(this.onThemePending, this)), t.on("theme:change", _.bind(this.onThemeChange, this)), t.on("ad:createPlacements", _.bind(this.createPlacements, this)), t.on("ad:killRotation", _.bind(this.killRotation, this)), this.model.on("change:user", this.onUserChange, this), $(e).resize(_.bind(this.updatePositions, this)), t.on("authUser:personalizedSongsLoaded", _.bind(this.setGenreTagsForUser, this)), t.on("ad:updatePositions", _.bind(this.updatePositions, this)), t.Services.Local.get("visitCount") ? (this.visitCount = t.Services.Local.get("visitCount"), t.Services.Local.set("visitCount", this.visitCount <= 5 ? ++this.visitCount : 6)) : t.Services.Local.set("visitCount", ++this.visitCount), t.ready.done(_.bind(this.onAppReady, this)), gsConfig.country.ID == 177 && (this.defaultRotationTime = this.IDLE_COUNT = 12e4)
                    },
                    onAppReady: function() {
                        this.onUserChange(), gsConfig.assetHost && $.receiveMessage(gsConfig.assetHost).progress(_.bind(this.handlePostMessage, this)), $.receiveMessage(e.location.protocol + "//" + e.location.host).progress(_.bind(this.handlePostMessage, this))
                    },
                    handlePostMessage: function(n) {
                        _.each(n, _.bind(function(n, r) {
                            switch (n.action) {
                            case "loadTracking":
                                t.Models.Ad.loadTracking(n.tracking);
                                break;
                            case "location":
                                e.location.hash = n.hash;
                                break;
                            case "lightbox":
                                t.trigger("lightbox:open", n.name, n.options);
                                break;
                            case "adLoaded":
                                n.itemID && n.unitDimensions && $("iframe", "#capital-" + n.unitDimensions).data("adInfo", n);
                                break;
                            case "logOutbound":
                                t.Services.API.logThemeOutboundLinkClick(n.themeID, n.clickID);
                                break;
                            case "theme":
                                var i = $("<a></a>").attr("data-click-id", n.clickID).attr("data-click-action", n.themeAction).attr("data-" + n.themeAction + "-id", n.themeActionID);
                                n.themeID && i.attr("data-theme-id", n.themeID), t.Models.Theme.handleClick({
                                    currentTarget: i[0],
                                    data: {
                                        currentTheme: this.currentTheme
                                    }
                                })
                            }
                        }, this))
                    },
                    onUserChange: function() {
                        this.user && (this.user.off(null, null, this), this.user.get("subscription").off(null, null, this)), this.user = this.model.get("user");
                        var e = this,
                            t = function() {
                                e.user.get("subscription").canHideAds() && (clearInterval(e.rotateTimer), e.rotateTimer = null, $("body").off("mousemove." + e.cid), $("#page-wrapper").off("scroll." + e.cid), e.removePlacements(), $(".capital").height(0), e.currentPage && e.currentPage.type == "home" && ($("#column1").removeClass("has-capital"), $("#column1 .first-home-section").removeClass("small-home-section")))
                            };
                        this.user.on("change:subscription", function(e, n) {
                            n.on("adUpdate", t, this), t()
                        }, this), this.user.get("subscription").on("adUpdate", t, this), this.user.get("subscription").canHideAds() ? (clearInterval(this.rotateTimer), this.rotateTimer = null, $("body").off("mousemove." + this.cid), $("#page-wrapper").off("scroll." + this.cid), this.removePlacements(), $(".capital").height(0)) : ($("#page-wrapper").on("scroll." + this.cid, _.bind(this.onScroll, this)), this.currentPage && (this.removePlacements(), this.currentPage = null))
                    },
                    onPageReady: function(e) {
                        this.currentPageView = e;
                        if (this.currentPage && this.currentPage.id == e.id && this.currentPage.type == e.pageType && this.currentPage.subpage == e.model.get("subpage") && this.currentPage.section == e.model.get("section")) {
                            var n = $(".capital:visible");
                            n.width(_.toInt(n.attr("data-capital-width"))), n.height(_.toInt(n.attr("data-capital-height")) + 20);
                            return
                        }
                        this.lastPage = this.currentPage, this.currentPage = {
                            type: e.pageType,
                            subpage: e.pageType == "search" ? e.searchType : e.model.get("subpage"),
                            section: e.model.get("section"),
                            isThemePage: t.Models.Theme.themePageCheck(e.pageType)
                        };
                        if (this.currentPage.type == "home" && (!this.currentTheme || this.isFirst)) return;
                        if (this.user && !this.user.get("subscription").canHideAds()) {
                            if (e instanceof t.Views.Pages.Broadcast) {
                                var r = e.model.get("broadcast");
                                if (r && r.get("activeStatus")) {
                                    this.removePlacements();
                                    return
                                }
                            }
                            this.updatePositions();
                            if (this.themePending) {
                                this.removePlacements();
                                return
                            }
                            this.currentPage.type == "home" && this.removePlacements(), this.render()
                        }
                    },
                    onThemeChange: function(e) {
                        this.currentTheme = this.model.get("theme"), this.onThemePending(!1)
                    },
                    onThemePending: function(e) {
                        this.themePending = e;
                        if (!this.themePending) {
                            this.isFirst = !_.defined(t.Services.Local.get("isFirstVisit")) || !(gsConfig.country.ID == 223 && t.Services.Local.get("firstVisitCount") >= 2 || gsConfig.country.ID != 223 && t.Services.Local.get("firstVisitCount") >= 2);
                            if (this.currentPage && this.currentPage.type == "home" && this.isFirst) {
                                $("#column1").removeClass("has-capital"), $("#column1 .small-home-section").removeClass("small-home-section"), $(".home-capital").remove();
                                return
                            }
                            this.user && !this.user.get("subscription").canHideAds() && this.currentPage && (this.currentPage.type == "home" && $("#column1 .first-home-section").removeClass("small-home-section").addClass("small-home-section"), this.render())
                        }
                    },
                    onScroll: function() {
                        this.updatePositions()
                    },
                    updatePositions: function() {
                        _.each($(".capital"), _.bind(function(e, t) {
                            var e = $(e),
                                n = $("#" + e.attr("data-capital-id"));
                            this.currentPage && this.currentPage.type != "home" ? this.makeSticky(e, n) : n.css("position", "absolute").offset($(".capital:visible").offset())
                        }, this))
                    },
                    makeSticky: function(e, t) {
                        var n = $("#column1"),
                            r = $("#column2"),
                            i = $("#footer"),
                            s = $("#top-hat-notif").outerHeight() || 0;
                        if (!e.length || !t.length || !n.length || !r.length || !i.length) return;
                        if (r.outerHeight(!0) > t.outerHeight(!0) + 30) if (e.offset().top + e.outerHeight(!0) < 0) {
                            if (n.height() - r.outerHeight(!0) > t.outerHeight(!0)) {
                                if (!$("#" + e.attr("id") + "-fold").length) {
                                    var o = $('<div id="' + e.attr("id") + '-fold"></div>').height(e.height());
                                    r.append(o)
                                } else $("#" + e.attr("id") + "-fold").height(e.height());
                                if (t.offset().top <= 60 + s && $("#" + e.attr("id") + "-fold").offset().top <= 60 + s) {
                                    var u = t.outerHeight(!0) + 40 + s,
                                        a = i.offset().top,
                                        f = a < u ? (u - a) * -1 : 60 + s;
                                    t.css({
                                        position: "fixed",
                                        left: e.offset().left,
                                        top: f
                                    })
                                } else t.css("position", "absolute").offset($("#" + e.attr("id") + "-fold").offset())
                            }
                        } else $("#" + e.attr("id") + "-fold").height(0), t.css("position", "absolute").offset(e.offset());
                        else if (t.offset().top <= 60 + s && e.offset().top <= 60 + s) {
                            var u = t.outerHeight(!0) + 40 + s,
                                a = i.offset().top,
                                f = a < u ? (u - a) * -1 : 60 + s;
                            t.css({
                                position: "fixed",
                                left: e.offset().left,
                                top: f
                            })
                        } else t.css({
                            position: "absolute"
                        }).offset(e.offset())
                    },
                    capitalSwap: function() {
                        if (this.currentPageView instanceof t.Views.Pages.Broadcast) {
                            var e = this.currentPageView.model.get("broadcast");
                            if (e && e.get("activeStatus")) {
                                this.removePlacements();
                                return
                            }
                        }
                        var n, r, i;
                        if ($("#stage").width() <= 1400 && $("#capital-300x250-placeholder").length) n = 160, r = 600, i = $("#capital-300x250-placeholder");
                        else {
                            if (!($("#stage").width() > 1400 && $("#capital-160x600-placeholder").length)) return;
                            n = 300, r = 250, i = $("#capital-160x600-placeholder")
                        }
                        var s = $("<div></div>").attr("id", "capital-" + n + "x" + r + "-placeholder").attr("class", "capital").attr("data-capital-width", n).attr("data-capital-height", r).attr("data-capital-id", "capital-" + n + "x" + r).css({
                            position: "relative"
                        });
                        i.after(s).remove(), this.removePlacements(), this.render()
                    },
                    hidePlacements: function(e) {
                        e || (e = $(".decoupledCapital")), e.hide()
                    },
                    removePlacements: function(e) {
                        e || (e = $(".decoupledCapital")), e.remove()
                    },
                    campaignAdSpecCheck: function() {
                        if (this.currentPage && (this.currentPage.type == "home" || this.currentPage.type == "tag") && this.currentTheme && this.currentTheme.get("capital")) {
                            var e, t = this.currentTheme.get("capital") == "default" ? 250 : this.currentTheme.get("capital").height;
                            e = $("<div></div>").attr("id", "capital-300x" + t + "-placeholder").attr("class", "capital").attr("data-capital-width", 300).attr("data-capital-height", t).attr("data-capital-id", "capital-300x" + t).addClass("home-capital"), $(".home-capital").after(e).remove()
                        }
                    },
                    createPlacements: function(e) {
                        this.campaignAdSpecCheck();
                        var e = e ? e : $(".capital");
                        _.each(e, _.bind(function(e, t) {
                            var e = $(e),
                                n = parseFloat(e.attr("data-capital-width")),
                                s = parseFloat(e.attr("data-capital-height")),
                                o = e.attr("data-capital-id"),
                                u = $("#" + o);
                            if (this.currentPage && this.currentPage.type == "home" && this.currentTheme) if (this.currentTheme.get("capital")) this.currentTheme.get("capital") != "default" ? this.currentTheme.get("capital").height == 600 ? this.currentPageView.setAdSize("tall") : this.currentPageView.setAdSize("") : this.currentPageView.setAdSize("");
                            else if (this.currentTheme && this.currentTheme.get("sponsored")) {
                                this.removePlacements(), $("#column1").removeClass("has-capital"), $("#column1 .first-home-section").removeClass("small-home-section"), $(".home-capital").remove(), this.currentPageView.setAdSize("none");
                                return
                            }
                            e.height(parseFloat(e.attr("data-capital-height")) + 20).width(parseFloat(e.attr("data-capital-width")));
                            if (u.length) this.updatePositions(), u.show(), this.updatePlacements([e]);
                            else {
                                var a = e.offset(),
                                    f = $("#page"),
                                    l = f.offset(),
                                    c = {
                                        top: a.top - l.top,
                                        left: a.left - l.left
                                    },
                                    h = 20;
                                n <= 160 && (h = 40), u = $(document.createElement("div")).attr("id", o).attr("class", "decoupledCapital").attr("data-user-activity", null).css({
                                    top: c.top,
                                    left: c.left,
                                    position: "absolute",
                                    width: n,
                                    height: s + h,
                                    overflow: "hidden",
                                    zIndex: 350
                                }).on("mouseover." + this.cid, _.bind(function(e) {
                                    this.updatePositions(), $(e.currentTarget).attr("data-user-activity", (new Date).getTime() + 9e4)
                                }, this)).on("mouseout." + this.cid, _.bind(function(e) {
                                    this.updatePositions(), $(e.currentTarget).attr("data-user-activity", null)
                                }, this));
                                var p = $(document.createElement("div")).addClass("capital-footer").css("top", s + "px");
                                h == 40 && p.addClass("vertical"), $.now() - i > 54e6 && (i = 0, r = 0), r < 3 && p.append($(document.createElement("a")).addClass("capital-ad-report").attr("data-capital-id", o).attr("data-translate-text", "REPORT_AD").text(_.getString("REPORT_AD"))), p.append($(document.createElement("a")).addClass("capital-ad-upgrade").attr("data-translate-text", "REMOVE_AD").attr("href", "/#!/settings/subscription").text(_.getString("REMOVE_AD"))), u.append(p), f.append(u), this.updatePositions(), this.updatePlacements([e])
                            }
                        }, this))
                    },
                    getUnitName: function(e) {
                        return e.currentPage.type == "home" ? "jawharp_hp" : t.Models.Theme.themePageCheck(e.currentPage.type) ? "jawharp_tl" : "jawharp_ros"
                    },
                    getSource: function() {},
                    updatePlacements: function(e) {
                        e || (e = $(".capital:visible"));
                        if (e.length) {
                            if (this.currentPage && this.currentPage.type != "home") {
                                var n = this.getTime(),
                                    s = t.Services.Local.get("adRotationData");
                                s ? (this.rotationCount = s.count, n - s.ts >= 864e5 ? t.Models.Ad.adRotationCount = this.rotationCount = 1 : (this.rotationCount++, t.Models.Ad.adRotationCount = this.rotationCount), t.Services.Local.set("adRotationData", {
                                    count: this.rotationCount,
                                    ts: n
                                })) : (this.rotationCount++, t.Models.Ad.adRotationCount = this.rotationCount, t.Services.Local.set("adRotationData", {
                                    count: this.rotationCount,
                                    ts: n
                                }))
                            }
                            t.trigger("guts:log", "adRotation")
                        }
                        _.each(e, _.bind(function(e, n) {
                            var e = $(e),
                                s = e.attr("data-capital-width"),
                                o = e.attr("data-capital-height"),
                                u = e.attr("data-capital-id"),
                                a = $("#" + u),
                                f = this.getTime(),
                                l = this.getUnitName({
                                    width: s,
                                    height: o,
                                    currentPage: this.currentPage
                                }),
                                c = gsConfig.assetHost + "/dfpAds.html",
                                h = ["p=" + l, "w=" + s, "h=" + o];
                            this.initialImpression ? (h.push("23=0"), this.initialImpression = !1) : this.pageBasedImpression ? (h.push("23=1"), this.pageBasedImpression = !1) : this.IS_IDLE ? h.push("23=3") : h.push("23=2"), this.currentPage && (this.currentPage.type == "home" || this.currentTheme && this.currentTheme.get("tag") && this.currentPage.type == "tag" || this.currentTheme && this.currentTheme.get("artist") && this.currentPage.type == "artist") && this.currentTheme && this.currentTheme.get("capital") && this.currentTheme.get("capital") != "default" && (h.push("themeID=" + this.currentTheme.get("themeID")), this.currentTheme.get("capital").click && h.push("capitalClick=" + this.currentTheme.get("capital").click), h.push(this.currentTheme.get("capital").extraParams || ""), c = "themes/" + this.currentTheme.get("location") + "/" + this.currentTheme.get("capital").source);
                            var p = t.Models.Ad.getParams(h, null, null, this);
                            if (!a.attr("data-user-activity") || a.data("data-user-activity") < f) {
                                var d = a.children("iframe.gsCapital"),
                                    v = $("<iframe></iframe>").attr("width", s).attr("height", o).attr("class", "gsCapital").attr("frameborder", 0).attr("allowTransparency", !0).css({
                                        overflow: "hidden",
                                        position: "absolute",
                                        top: 0,
                                        visibility: d.length ? "hidden" : "visible"
                                    }).on("load." + this.cid, _.bind(function() {
                                        d.off("load." + this.cid).remove();
                                        var e = v.width(),
                                            t = v.height();
                                        $('.capital[data-capital-width="' + e + '"]').width(e), $('.capital[data-capital-height="' + t + '"]').height(t + 20), v.width(0), v.width(e).css("visibility", "visible"), $("#lightbox-inner").children().length && _.each($(".capital"), function(e, t) {
                                            $("#" + $(e).attr("data-capital-id")).hide()
                                        }), this.updatePositions(), this.resetAdTimer()
                                    }, this));
                                v.data("adInfo", {
                                    unitName: l + "_" + s + "x" + o,
                                    itemID: "unknown",
                                    extra: ""
                                }), v.attr("src", c + p), a.append(v), $.now() - i > 54e6 && (i = 0, r = 0, a.find(".capital-ad-report").removeClass("hide")), r >= 3 && a.find(".capital-ad-report").addClass("hide")
                            }
                        }, this))
                    },
                    updateAds: function() {
                        this.lastRotation = this.getTime(), this.updatePlacements()
                    },
                    resetAdTimer: function() {
                        clearInterval(this.rotateTimer), this.currentPage.type != "home" && gsConfig.country.ID != 106 && !(this.currentPage.type == "tag" && this.currentTheme && $(".theme-component:visible").length && this.currentTheme.get("tag")) && !(this.currentPage.type == "artist" && this.currentTheme && $(".theme-component:visible").length && this.currentTheme.get("artist")) && (this.rotateTimer = setInterval(_.bind(this.onRotateTimer, this), this.defaultRotationTime))
                    },
                    onRotateTimer: function(e) {
                        var t = this.getTime(),
                            r = t - n.lastActive,
                            i = t - (this.lastRotation ? this.lastRotation : 0);
                        r <= this.maxIdleTime && (this.IS_IDLE = r >= this.IDLE_COUNT, this.updateAds())
                    },
                    killRotation: function() {
                        clearInterval(this.rotateTimer)
                    },
                    render: function() {
                        this.pageBasedImpression = !0, clearInterval(this.rotateTimer), this.rotateTimer = setInterval(_.bind(this.onRotateTimer, this), this.defaultRotationTime), this.lastRotation = this.getTime(), this.hidePlacements(), this.createPlacements(), this.updatePositions()
                    },
                    getTime: function() {
                        return (new Date).getTime()
                    },
                    setGenreTagsForUser: function() {
                        if (!this.user) return;
                        this.user.getPersonalizedTags({}).done(_.bind(function(e) {
                            if (e && e.length) {
                                var n = t.Services.Local.get("personalizedTags") || {};
                                n[this.user.get("UserID").toString()] = _.pluck(e, "0").splice(0, 5), t.Models.Ad.personalizedTags = n, t.Services.Local.set("personalizedTags", n)
                            }
                        }, this))
                    }
                }, {
                    reportedAd: function() {
                        r++, i || (i = $.now())
                    }
                }), t.Views.Ad.Base = Backbone.View.extend({})
            }(), function() {
                function n(e) {
                    if (e && e.item === this.itemID && e.type === this.typeID && e.result) {
                        var n = e.result.comment;
                        t.Models.Comment.handleUsersArtistsInResult([e.result.comment], e.result.users, e.result.artists), n = new t.Models.Comment(n), n.UserID !== t.getLoggedInUserID() && this.collection.unshift(n);
                        if (n.get("ParentID")) {
                            var r = t.Models.Artist.getCached(n.get("ParentID"));
                            r && r.get("comments") && r.get("comments").unshift(n)
                        }
                    }
                }
                function r(e) {
                    if (e && e.item === this.itemID && e.type === this.typeID && e.result) {
                        var n = this.collection.get(e.commentID),
                            r = e.result.response;
                        if (r.UserID === t.getLoggedInUserID()) return;
                        t.Models.Comment.handleUsersArtistsInResult([e.result.response], e.result.users, e.result.artists), n.addResponse(r)
                    }
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Comments = Backbone.View.extend({
                    events: {
                        "submit #comment-submit": "commentSubmit",
                        "keypress .comment-input": "onCommentInputKeyBlur",
                        "click .form-placeholder-comments": "focusOnCommentInput",
                        "blur .comment-input": "onCommentInputKeyBlur",
                        "submit .module-item-respond": "responseSubmit"
                    },
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.commentModules = [], this.subscribed = !1, this.highlightComment = null, this.commentStyleType = this.options.commentStyleType, this.isDashboard = _.orEqual(this.options.isDashboard, !1), this.options.comment ? (this.subscribed = !0, this.collection = new t.Models.Collections.Comments(this.options.comment)) : this.options.highlightComment && (this.highlightComment = this.options.highlightComment), this.item = this.options.item, this.itemID = _.toInt(this.options.itemID), this.typeID = _.toInt(this.options.typeID), this.fromArtistID = _.orEqual(this.options.fromArtistID, !1), this.showPostBox = _.orEqual(this.options.showPostBox, !0), this.itemName = _.orEqual(this.options.itemName, "");
                        if (this.fromArtistID) {
                            var e = t.Models.Artist.getCached(this.fromArtistID);
                            this.getUserPicture = _.bind(e.getImageURL, e)
                        } else this.getUserPicture = _.bind(t.getLoggedInUserPicture, t);
                        this.visibleComments = 0, this.modelBindings.push(this.collection.on("add", this.renderNewComment, this)), this.modelBindings.push(this.collection.on("remove", this.removeCommentFromPage, this)), this.modelBindings.push(t.on("manatee:newComment", n, this)), this.modelBindings.push(t.on("manatee:newResponse", r, this))
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this)), _.each(this.commentModules, function(e) {
                            e.destroy()
                        }), this.subscribed
                    },
                    subscribe: function() {
                        if (this.subscribed) return;
                        this.subscribed = !0
                    },
                    render: function() {
                        if (this.rendered) return;
                        this.subscribe(), this.fetchTemplate("shared/comments").always(_.bind(this.renderComments, this))
                    },
                    renderComments: function(e) {
                        if (this.destroyed) return;
                        this.rendered = !0;
                        var n = [],
                            r = this.highlightComment ? this.highlightComment.id : 0,
                            i = 0,
                            s = this.isDashboard,
                            o;
                        this.collection.each(_.bind(function(e) {
                            if (!e.get("author") || e.get("Reports") >= 3 && !s) return;
                            if (e.id === r) {
                                i++;
                                return
                            }
                            var o = new t.Views.Modules.Comment({
                                model: e,
                                pageItemID: this.itemID,
                                pageTypeID: this.typeID,
                                commentStyleType: this.commentStyleType,
                                getUserPicture: this.getUserPicture
                            });
                            this.commentModules.push(o), o.render(), n.push(o.$el[0]), i++
                        }, this)), this.visibleComments = i, this.$el.html(this.renderTemplate(e, this)), !i && s && this.$el.find(".empty-page").removeClass("hide");
                        if (this.highlightComment !== -1 && this.highlightComment) {
                            var u = new t.Views.Modules.Comment({
                                model: this.highlightComment,
                                highlighted: !0,
                                pageItemID: this.itemID,
                                pageTypeID: this.typeID,
                                commentStyleType: this.commentStyleType,
                                getUserPicture: this.getUserPicture
                            });
                            this.commentModules.unshift(u), u.render(), o = u.$el, n.unshift(o[0]), o.addClass("highlight")
                        }
                        this.$el.find(".page-loading").remove(), this.$commentsEl = this.$el.find("#comments-grid"), this.$commentsEl.append(n), o && setTimeout(function() {
                            o.stop().animate({
                                backgroundColor: "#fff"
                            }, 5e3)
                        }, 1e3)
                    },
                    renderNewComment: function(e) {
                        if (!this.rendered || !this.$commentsEl) return;
                        if (!e.get("author")) return;
                        var n = new t.Views.Modules.Comment({
                            model: e,
                            pageItemID: this.itemID,
                            pageTypeID: this.typeID,
                            commentStyleType: this.commentStyleType,
                            getUserPicture: this.getUserPicture
                        });
                        this.commentModules.push(n), n.render(), this.$commentsEl.prepend(n.$el[0]), $(".first-comment-message").hide()
                    },
                    removeCommentFromPage: function(e) {
                        _.each(this.commentModules, function(t) {
                            t.model.id === e.id && t.destroy()
                        })
                    },
                    responseSubmit: function(e) {
                        e.preventDefault();
                        var n = $("input", e.currentTarget),
                            r = n.val();
                        if (n.hasClass("pending") || !r) return;
                        var i = $(e.currentTarget).data("parentId"),
                            s = t.Models.Comment.getCached(i);
                        s.storeResponse(r, this.fromArtistID).done(function() {
                            n.val(""), n.removeClass("pending")
                        }).fail(function() {
                            n.removeClass("pending")
                        }), n.addClass("pending")
                    },
                    commentSubmit: function(e) {
                        function u() {
                            t.Services.API.storeCommentForItem(this.itemID, this.typeID, r, o, s).done(function(e) {
                                e && e.CommentID ? (s ? e.artist = t.Models.Artist.getCached(s) : e.user = t.Models.User.getCached(t.getLoggedInUserID()), i.unshift(e), n.val("")) : (t.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_COMMENT_FAILED"),
                                    type: "error",
                                    duration: 5e3
                                }), t.trigger("guts:log", "commentFailNoComment"), t.trigger("guts:gatrack", "site", "commentFailNoComment")), n.removeClass("pending")
                            }).fail(function() {
                                t.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_COMMENT_FAILED"),
                                    type: "error",
                                    duration: 5e3
                                }), n.removeClass("pending"), t.trigger("guts:log", "commentFailDeferred"), t.trigger("guts:gatrack", "site", "commentFailDeferred")
                            })
                        }
                        e.preventDefault();
                        var n = $("input", e.currentTarget),
                            r = n.val(),
                            i = this.collection,
                            s = this.fromArtistID;
                        if (n.hasClass("pending") || !r) return;
                        var o = null;
                        typeof this.item.getDetailsForFeeds == "function" && (o = this.item.getDetailsForFeeds()), t.getLoggedInUserID() > 0 ? u.call(this) : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_COMMENT"),
                            onLogin: _.bind(u, this),
                            onClose: function() {
                                n.removeClass("pending")
                            }
                        }), n.addClass("pending")
                    },
                    onCommentInputKeyBlur: function(e) {
                        var t = $("#comment-submit");
                        e.which ? t.addClass("focused") : $(e.currentTarget).val() || t.removeClass("focused")
                    },
                    focusOnCommentInput: function(e) {
                        $("#comments .comment-input").focus()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.ActivityFeed = Backbone.View.extend({
                    events: {},
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.feedEventModules = [], this.highlightFeedEvent = null, this.options.highlightFeedEvent && (this.highlightFeedEvent = this.options.highlightFeedEvent), this.collection = new t.Models.Collections.FeedEvents(this.collection.models, {
                            feedType: "model",
                            model: this.model
                        }), this.modelBindings.push(this.collection.on("remove", this.removeFeedEventFromPage, this))
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this)), _.each(this.feedEventModules, function(e) {
                            e.destroy()
                        })
                    },
                    render: function() {
                        if (this.rendered) return;
                        var e = _.chainLoading();
                        e.push(this.collection.setPerPage(10)), e.push(this.fetchTemplate("shared/smallActivityFeed").always(_.bind(this.renderFeed, this)))
                    },
                    renderFeed: function(e) {
                        if (this.destroyed) return;
                        this.rendered = !0;
                        var n = [],
                            r = this.feedEventModules,
                            i = this.highlightFeedEvent ? this.highlightFeedEvent.id : 0,
                            s;
                        this.collection.getCurrentPage().each(function(e) {
                            if (!e.getNormalizedObject() || e.id === i) return;
                            var s = new t.Views.Modules.SmallFeedEvent({
                                model: e
                            });
                            r.push(s), s.render(), n.push(s.$el[0])
                        }), this.$el.html(this.renderTemplate(e));
                        if (this.highlightFeedEvent !== -1 && this.highlightFeedEvent) {
                            var o = new t.Views.Modules.SmallFeedEvent({
                                model: this.highlightFeedEvent,
                                highlighted: !0
                            });
                            r.unshift(o), o.render(), s = o.$el, n.unshift(s[0]), s.addClass("highlight"), s.find(".feed-comments-container").removeClass("hide")
                        }
                        this.$el.find(".page-loading").remove(), this.$feedEventsEl = this.$el.find("#small-activity-grid"), this.$feedEventsEl.append(n), s && setTimeout(function() {
                            s.stop().animate({
                                backgroundColor: "#fff"
                            }, 5e3)
                        }, 1e3)
                    },
                    removeFeedEventFromPage: function(e) {
                        _.each(this.feedEventModules, function(t) {
                            t.model.id === e.id && t.destroy()
                        })
                    }
                })
            }(), function() {
                function s() {
                    (r.height() - e.scrollTop() < i || this.renderedSections && this.renderedSections.length < 2) && this.attemptRenderSections(!0)
                }
                function o() {
                    e[0].scrollHeight <= e[0].clientHeight + 120 && this.attemptRenderSections(!0)
                }
                function u(e, t) {
                    var n = new GS.Models.Collections.Songs(e),
                        r = new GS.Models.Collections.Songs(t),
                        i = _.difference(n.pluck("SongID"), r.pluck("SongID"));
                    return _.filter(e, function(e) {
                        return _.contains(i, e.get("SongID"))
                    })
                }
                GS.Views = GS.Views || {}, GS.Views.Pages = GS.Views.Pages || {};
                var e, r, i, a = Backbone.View.extend({
                    className: "content home-section",
                    events: {
                        mouseenter: "onMouseenter",
                        mouseleave: "onMouseleave",
                        "mouseenter .home-content": "onMouseenterContent",
                        "mouseleave .home-content": "onMouseleaveContent",
                        "click .play-section": "playSection",
                        "click .previous-pageable-nav": "pageablePrevious",
                        "click .next-pageable-nav": "pageableNext",
                        "click .broadcast-about-link": "onBroadcastAboutClick",
                        "selectstart .home-pageable-nav": "cancelSelect"
                    },
                    initialize: function(e) {
                        var t = {
                            addClass: "",
                            title: "",
                            titleKey: "",
                            taglineKey: "",
                            titleOptions: {},
                            taglineOptions: {},
                            canPlay: !1,
                            pageable: !1
                        };
                        this.options = _.defaults(e, t), this.currentPage = 0
                    },
                    render: function(e, t) {
                        this.options.addClass && this.$el.addClass(this.options.addClass), this.$el[0].innerHTML = this.renderTemplate(this.template, this.options);
                        if (this.options.pageable || e === 0) {
                            var n = this.$el.find(".home-grid-container");
                            n.addClass("pagable")
                        }
                        _.isFunction(this.options.render) && this.options.render.call(this, e, t), this.grid && (this.grid.$scrollElement.off("scroll." + this.grid.cid), this.$gridContainer = this.grid.$el.parent(), this.pageableAdjust())
                    },
                    onMouseenter: function() {
                        this.$el.addClass("focused")
                    },
                    onMouseleave: function() {
                        this.$el.removeClass("focused")
                    },
                    onMouseenterContent: function() {
                        this.$el.addClass("attention")
                    },
                    onMouseleaveContent: function() {
                        this.$el.removeClass("attention")
                    },
                    pageablePrevious: function(e) {
                        this.pageableNext(e, -1)
                    },
                    pageableNext: function(e, t) {
                        if (this.grid) {
                            t = t || 1;
                            var n = this.$gridContainer.width(),
                                r = this.grid.options.itemWidth,
                                i = this.grid.$el.width() / r,
                                s = Math.floor((n + 20) / r),
                                o = Math.ceil(i / s),
                                u = this.grid,
                                a = this.currentPage;
                            this.currentPage = this.currentPage + t, this.currentPage < 0 && (this.currentPage = o - 1), this.currentPage > o - 1 && (this.currentPage = 0);
                            if (a == this.currentPage) return;
                            var f = this.currentPage * s * r;
                            s < 7 && (f = Math.floor(f / r) * r), u.blockSize = Math.max(u.blockSize, (this.currentPage + 1) * 7), u.maximumVisibleItems = u.blockSize, u.handleScroll({
                                force: !0,
                                overrideScrollPos: f
                            }), u.$el.stop(!0).animate({
                                left: f * -1
                            }, {
                                duration: 275
                            })
                        }
                    },
                    pageableAdjust: function() {
                        var e = this.$gridContainer.width(),
                            t = this.grid.options.itemWidth,
                            n = Math.floor((e + 20) / t);
                        $(".home-pageable-nav", this.el)[this.grid.collection.length <= n ? "addClass" : "removeClass"]("hide")
                    },
                    playSection: function() {
                        var e = this.$gridContainer.width(),
                            r = this.grid.options.itemWidth,
                            i = this.grid.$el.width() / r,
                            s = (e + 20) / r,
                            o = Math.ceil(i / s),
                            a = this.grid,
                            f = this.currentPage,
                            l = [];
                        if (GS.isBroadcastListener()) {
                            var c = n.model.get("player"),
                                h = c.get("currentQueue"),
                                p = !1,
                                d = _.bind(this.playSection, this),
                                v = function() {
                                    var e = function() {
                                            if (p) return;
                                            p = !0, c.off("change:currentQueue", e), h.off("change", e), d()
                                        };
                                    GS.Services.SWF.stopSong(), GS.Services.SWF.clearQueue(), c.on("change:currentQueue", e), h.on("change", e)
                                };
                            GS.trigger("lightbox:open", "radioClearQueue", {
                                startRadio: v,
                                inBroadcast: !0
                            });
                            return
                        }
                        if (this.grid.collection instanceof GS.Models.Collections.Songs) {
                            var m = new GS.Models.PlayContext({
                                contextType: "clientRadio"
                            });
                            m.addStreamType(GS.Models.PlayContext.TYPE_HOME_RADIO_SEEDS), l = this.grid.collection.models.slice(s * this.currentPage, s * (this.currentPage + 1)), GS.trigger("player:addSongs", l, GS.Services.SWF.playSpecialIndexes.DEFAULT, !0, m);
                            if (GS.isBroadcaster()) return;
                            _.isFunction(this.options.getClientRadioSongs) || GS.trigger("guts:startNewAutoplayContext", "autoplay", 0, "song", _.map(l, function(e) {
                                return e.get("SongID")
                            }).toString())
                        }
                        _.delay(_.bind(function() {
                            _.isFunction(this.options.getClientRadioSongs) && this.options.getClientRadioSongs().done(_.bind(function(e) {
                                var r = n.model.get("player"),
                                    i = r && r.get("currentQueue"),
                                    s = i && i.get("clientRadio");
                                l = (l || []).concat(i.get("songs").models), e = u(e.models, l), s.disable().reset(e).enable(), s.onActiveSongChange(i, i.get("activeSong")), s.on("needSongs", function(e, t) {
                                    var n = e.pluck("ArtistID"),
                                        r = e.frowns.pluck("ArtistID"),
                                        i = {
                                            secondaryArtistWeightModifier: .1,
                                            seedArtistWeightRange: [80, 90],
                                            weightModifierRange: [-9, 9],
                                            seeds: n,
                                            frowns: r
                                        };
                                    GS.trigger("guts:forcelog", "clientRadioFallbackToServer", {
                                        fallbackSeedArtistIDs: n.toString(),
                                        fallbackSeedFrownArtistIDs: r.toString()
                                    }), GS.trigger("guts:startAutoplayFallbackContext", "autoplay", 0, "artist", n.toString()), GS.Services.SWF.setAutoplay(!0, 0, i, "autoplayGetSongEx")
                                }, this), GS.trigger("guts:startNewAutoplayContext", this.options.gutsType, this.options.gutsID, l.length ? "song" : t, l.length ? _.map(l, function(e) {
                                    return e.get("SongID")
                                }).toString() : t)
                            }, this))
                        }, this), 750), this.options.section == "tag" ? (GS.trigger("guts:gatrack", "site", "onPlaySectionTag", this.options.tag.tagID), GS.trigger("guts:log", "homepageClick", {
                            homepageAction: "onPlaySection",
                            positionOnPage: this.options.positionOnPage,
                            playSectionTagID: this.options.tag.tagID,
                            playSectionPage: this.currentPage,
                            playSectionItemsPerPage: s,
                            playSectionNumberOfItems: i
                        })) : (GS.trigger("guts:gatrack", "site", "onPlaySection", this.options.section.toLowerCase()), GS.trigger("guts:log", "homepageClick", {
                            homepageAction: "onPlaySection",
                            positionOnPage: this.options.positionOnPage,
                            playSectionSection: this.options.section.toLowerCase(),
                            playSectionPage: this.currentPage,
                            playSectionItemsPerPage: s,
                            playSectionNumberOfItems: i
                        }))
                    },
                    cancelSelect: function(e) {
                        return e.preventDefault(), !1
                    },
                    onBroadcastAboutClick: function(e) {
                        e.preventDefault(), GS.trigger("lightbox:open", "broadcastAbout")
                    }
                }),
                    f = ["ownerSubscribed"];
                GS.Views.Pages.Home = GS.Views.Pages.Base.extend({
                    templatePath: "home",
                    pageType: "home",
                    currentTrendingGenre: "",
                    currentPopularType: "daily",
                    getMoreSectionsPos: 0,
                    defaultTags: [3773, 156, 2856, 1748, 1933, 75, 10, 750, 156, 424, 2360, 7512],
                    blacklist: [6994, 8488],
                    subscribedBroadcasts: null,
                    events: {
                        "click .listen-again-options": "onListenAgainOptions"
                    },
                    initialize: function() {
                        this.rendered = !1, this.childViews = [], this.subscribedBroadcasts = new GS.Models.Collections.Broadcasts([]), e = $("#page-wrapper"), r = $("#page"), i = (Math.ceil(e.height() / 235) + 1) * 235, e.on("scroll." + this.cid, _.throttle(_.bind(s, this), 50)), this.throttledOnResize = _.throttle(_.bind(o, this), 50), GS.on("app:resize", this.throttledOnResize), GS.on("locale:change", this.setWelcomeMessage, this), this.model.get("appModel").on("change:user", function() {
                            if (this.destroyed) return;
                            this.pageReady = _.once(function() {
                                GS.trigger("page:ready", this)
                            }), this.pageReady(), this.cleanupChildViews(), this.render()
                        }, this), this.pageReady = _.once(function() {
                            GS.trigger("page:ready", this)
                        });
                        var t = this.model.get("appModel").get("tooltipOptionsCache");
                        t && (t.songMini = {
                            mini: !0,
                            pageNameWait: 0,
                            delay: 250,
                            notch: "left",
                            notchSize: 4,
                            notchY: 15,
                            x: 126,
                            y: 30,
                            beforeRender: function(e, t, n) {
                                var r = 0,
                                    i = e,
                                    s = e,
                                    o = _.getScrollableParent(e),
                                    u = 0;
                                do u++, i[0] == s[0] && (r += i.position().left, s = s.offsetParent()), i = i.parent();
                                while (i[0] != o[0] && u < 1e4);
                                r += o.scrollLeft();
                                var a = o.width();
                                r + 320 + 120 >= a && (n.x = "left", n.notch = "right")
                            }
                        })
                    },
                    onDestroy: function() {
                        GS.off("app:resize", this.throttledOnResize), GS.off(null, null, this), e.off("scroll." + this.cid), this.model.get("appModel").off("change:user", null, this), this.subscribedBroadcasts.length && (this.subscribedBroadcasts.unsubscribe(), this.subscribedBroadcasts.reset([]), this.subscribedBroadcasts.off())
                    },
                    render: function() {
                        var e = this;
                        this.rendered = !1, this.sections = [], this.renderedSections = [], this.timeoutExpired = !1, this.chain = _.chainLoading({
                            ignoreFails: !0
                        });
                        var t = function() {
                                e.timeoutExpired || (e.timeoutExpired = !0, _.bind(s, e)())
                            },
                            n = this.chain,
                            r = _.debounce(t, 1e3);
                        if (this.options.params.notFound) n.push(this.fetchTemplate("not_found").always(n.bind(this.onTemplate, this)));
                        else {
                            var i = this.model.get("appModel").get("user");
                            i.on("change", this.updateUserStats), n.push(this.fetchTemplate("section").done(n.bind(this.onSectionTemplate, this))), n.push(this.fetchTemplate("index").always(n.bind(this.onTemplate, this)).done(n.bind(this.updateUserStats, this, i, {
                                force: !0
                            }))), n.done(n.bind(this.renderSection, this));
                            var o, u, a = function(e) {
                                    o = e
                                };
                            n.push(i.getPersonalizedSongs(!0).done(n.bind(this.onPersonalizedSongs, this)).done(n.bind(a)).done(n.bind(this.attemptRenderSections, this, !0, !0))), n.done(n.bind(function() {
                                r();
                                var u = i.getPersonalizedTags({
                                    defaultTags: e.defaultTags,
                                    blacklist: e.blacklist
                                });
                                u.done(function(t) {
                                    var r = ["bcast"];
                                    _.each(t, function(e) {
                                        return e[1] && e[1].length > 2 && r.push("bcast_genre_" + e[0]), r.length < 5
                                    }), n.add(GS.Models.Broadcast.getTopBroadcastsForTags(r).done(n.bind(e.onTopBroadcastsForTags, e))), n.add(e.onRecentListens(n, t))
                                });
                                if (o) {
                                    var a = i.get("dominateRecentArtistsSorted");
                                    if (a && a.length) {
                                        var f = _.pluck(a, 0);
                                        n.add(GS.Services.API.getRecommendedSongs(_.first(f, 6), _.first(f, 12)).always(n.bind(function(t) {
                                            e.onRecommendedSongs(t)
                                        })))
                                    }
                                }
                                n.done(function() {
                                    setTimeout(t, 100), _.bind(s, e)()
                                })
                            }, this)), u = GS.Services.API.featuredGetCurrentFeatured(), n.add(u.done(n.bind(this.onFeaturedContent, this))), u = GS.Services.API.popularGetSongsPreview(), n.add(u.done(n.bind(this.onPopularSongs, this)))
                        }
                        this.setTitle("Listen to Free Music Online - Internet Radio - Free MP3 Streaming", !1)
                    },
                    getMoreSections: function() {
                        if (this.getMoreSectionsDfd && this.getMoreSectionsDfd.state() == "pending") return this.getMoreSectionsDfd;
                        this.getMoreSectionsDfd = $.Deferred(), this.getMoreSectionsPos++;
                        var e = this.model.get("appModel").get("user");
                        if (this.getMoreSectionsPos == 1) {
                            var t = _.bind(function(t) {
                                if (!t || !t.length) {
                                    this.getMoreSectionsDfd.reject();
                                    return
                                }
                                var n = {};
                                t.each(function(e) {
                                    var t = e.getSongsPlayed(),
                                        r = e.get("UserID") - 0,
                                        i = (new GS.Models.Collections.Songs(t)).pluck("AlbumID");
                                    for (var s = 0, o = i.length, u; s < o; s++) u = i[s], n[u] ? _.indexOf(n[u][1], r) == -1 && n[u][1].push(r) : n[u] = [u, [r]]
                                });
                                var r = function(e) {
                                        return e[1].length * -1
                                    },
                                    i = _.first(_.sortBy(n, r), 14),
                                    s = [];
                                for (var o = 0, u = i.length, f; o < u; o++) f = GS.Models.Album.getCached(i[o][0]), f && s.push(f);
                                this.sections.push(new a({
                                    titleKey: "TOP_COMMUNITY_ALBUMS",
                                    weight: 200,
                                    taglineKey: "TAGLINE_COMMUNITY",
                                    section: "topAlbums",
                                    canPlay: !1,
                                    pageable: !0,
                                    user: e,
                                    render: function(e, t) {
                                        var n = new GS.Models.Collections.Albums(s),
                                            r = this.$el.find(".home-content");
                                        r.empty(), this.grid = new GS.Views.AlbumGrid({
                                            itemsPerRow: 1,
                                            axis: "x",
                                            itemWidth: 140,
                                            maximumVisibleItems: 7,
                                            el: r[0],
                                            collection: n,
                                            mediumGrid: !0,
                                            showArtist: !0,
                                            addStreamType: "TYPE_RECOMMENDED"
                                        }), this.options.positionOnPage = e, t.childViews.push(this.grid), this.grid.render()
                                    }
                                })), this.getMoreSectionsDfd.resolve()
                            }, this);
                            e.get("isLoggedIn") ? e.getFavoritesByType("Users").done(_.bind(function(n) {
                                n.length && e.loadCommunityFeed().always(t)
                            }, this)).fail(_.bind(function() {
                                this.getMoreSectionsDfd.reject()
                            }, this)) : this.getMoreSectionsDfd.reject()
                        } else {
                            if (this.getMoreSectionsPos != 2) return;
                            if (!this.moreGenreTags) return;
                            var n = _.bind(function(t) {
                                if (t && t.length > 1) {
                                    var n = e.getLocalRecentListens(),
                                        r = n && n.length ? "TAGLINE_MORE_GENRES" : "TAGLINE_MORE_GENRES_GENERIC";
                                    this.sections.push(new a({
                                        titleKey: "MORE_GENRES",
                                        weight: -1,
                                        taglineKey: r,
                                        section: "otherTags",
                                        canPlay: !1,
                                        pageable: !0,
                                        user: e,
                                        render: function(e, n) {
                                            var r = new GS.Models.Collections.Tags(t),
                                                i = this.$el.find(".home-content");
                                            this.$el.find(".home-grid-container").addClass("home-grid-short"), i.empty(), this.grid = new GS.Views.TagGridBlock({
                                                itemsPerRow: 1,
                                                axis: "x",
                                                itemWidth: 140,
                                                maximumVisibleItems: 7,
                                                el: i[0],
                                                collection: r,
                                                mediumGrid: !0,
                                                showArtist: !0
                                            }), this.options.positionOnPage = e, n.childViews.push(this.grid), this.grid.render()
                                        }
                                    }))
                                }
                                this.getMoreSectionsDfd.resolve()
                            }, this);
                            GS.Models.Tag.getMetaMulti(this.moreGenreTags).done(n)
                        }
                        return this.getMoreSectionsDfd
                    },
                    setWelcomeMessage: function() {
                        var e = GS.Models.AuthUser.getCached(GS.getLoggedInUserID()),
                            t = e.get("FName");
                        e.get("isLoggedIn") && $(".welcome-message").text(_.getString("WELCOME_BACK", {
                            user: t
                        }))
                    },
                    attemptRenderSections: function(t, n) {
                        var r = this.renderedSections.length == 1 && _.indexOf(this.renderedSections, this.fakeListenAgain) != -1;
                        if (this.renderedSections.length > 0 && !r && this.sections.length < 3 && this.timeoutExpired === !1) return !1;
                        if (!this.sectionTemplate || this.destroyed || this.sections.length === 0) {
                            if (!this.destroyed && this.sections.length === 0) {
                                var i = this.getMoreSections();
                                i && i.always(_.bind(this.attemptRenderSections, this))
                            }
                            return !1
                        }
                        return !t && this.renderedSections.length < 2 ? (s.call(this), !1) : (this.renderSection(), (_.isUndefined(t) || t) && !n && this.attemptRenderSections(e[0].scrollHeight <= e[0].clientHeight), !0)
                    },
                    renderSection: function() {
                        if (!this.sections.length || this.destroyed) return !1;
                        var e = this.model.get("appModel").get("user"),
                            t = this.$el.find("#column1"),
                            n = this.sections,
                            r, i, s;
                        r = _.sortBy(n, function(e) {
                            return e.options && e.options.alwaysFirst ? -1e5 : Math.random() * (e.options && e.options.weight) * -1
                        }), i = r[0], i.template = this.sectionTemplate, s = i.options && i.options.alwaysFirst;
                        if ((s || this.missingPersonalizedSongs) && this.fakeListenAgain && i != this.fakeListenAgain) {
                            var o = _.indexOf(this.sections, this.fakeListenAgain);
                            o != -1 ? this.sections.splice(o, 1) : (o = _.indexOf(this.renderedSections, this.fakeListenAgain), o != -1 && this.renderedSections.splice(o, 1)), this.fakeListenAgain.destroy(), delete this.fakeListenAgain, s = !0
                        }
                        t[s ? "prepend" : "append"](i.el);
                        if (this.adSize != "none" && !e.get("subscription").canHideAds() && (s || this.adSize == "tall" && this.renderedSections.length == 1)) {
                            i.el.className += s ? " first-home-section" : " spaced-home-section";
                            var s = !_.defined(GS.Services.Local.get("isFirstVisit")) || !(gsConfig.country.ID == 223 && GS.Services.Local.get("firstVisitCount") >= 2 || gsConfig.country.ID != 223 && GS.Services.Local.get("firstVisitCount") >= 2);
                            if (e.get("UserID") > 0 || !s) i.el.className += " small-home-section"
                        }
                        return i.render(this.renderedSections.length, this), n.splice(_.indexOf(n, i), 1), this.renderedSections.push(i), this.childViews.push(i), this.pageReady(), GS.on("page:resize"), !0
                    },
                    updatePageParams: function(e) {
                        var t = this.options.params;
                        this.options.params = e, t.notFound !== e.notFound && (this.cleanupChildViews(), this.render())
                    },
                    updateUserStats: function(e, t) {
                        t = t || {};
                        var n = t && t.changes || {},
                            r = e.attributes;
                        if (n.library || t.force && r.library) $("#user-songs").text(r.library.length), $("#user-songs").siblings(".label").text(_.getString(r.library.length === 1 ? "SONG" : "SONGS"));
                        if (n.favoriteSongs || t.force && r.favoriteSongs) $("#user-favorites").text(r.favoriteSongs.length), $("#user-favorites").siblings(".label").text(_.getString(r.favoriteSongs.length === 1 ? "FAVORITE" : "FAVORITES"));
                        if (n.playlists || t.force && r.playlists) $("#user-playlists").text(r.playlists.length), $("#user-playlists").siblings(".label").text(_.getString(r.playlists.length === 1 ? "PLAYLIST" : "PLAYLISTS"));
                        (n.favoriteUsers || t.force && r.favoriteUsers) && $("#user-following").text(r.favoriteUsers.length);
                        if (n.followers || t.force && r.followers) $("#user-followers").text(r.followers.length), $("#user-followers").siblings(".label").text(_.getString(r.followers.length === 1 ? "FOLLOWER" : "FOLLOWERS"))
                    },
                    onSectionTemplate: function(e) {
                        this.sectionTemplate = e;
                        var t = this.model.get("appModel").get("user");
                        this.fakeListenAgain = new a({
                            titleKey: "LISTEN_AGAIN",
                            weight: 1e3,
                            taglineKey: "TAGLINE_LISTEN_AGAIN",
                            section: "music",
                            canPlay: !0,
                            pageable: !0,
                            alwaysFirst: !0,
                            user: t,
                            render: function(e, t) {
                                this.options.positionOnPage = e
                            }
                        }), this.sections.push(this.fakeListenAgain)
                    },
                    onTemplate: function(e) {
                        if (this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this.rendered = !0, setTimeout(_.bind(this.setWelcomeMessage, this), 100), this.focusSearch()
                    },
                    onPersonalizedSongs: function(e) {
                        var n = this.model.get("appModel").get("user");
                        if (!e || !e.length) this.missingPersonalizedSongs = !0;
                        var r = n.getLocalRecentListens(t, t, !0);
                        r.length && (e = new GS.Models.Collections.Songs(_.intersection(e.models, r.models))), e && e.length && e.length >= 4 ? (this.personalizedSongs = e, this.sections.push(new a({
                            titleKey: "LISTEN_AGAIN",
                            weight: 1e3,
                            taglineKey: "TAGLINE_LISTEN_AGAIN",
                            section: "music",
                            canPlay: !0,
                            pageable: !0,
                            alwaysFirst: !0,
                            user: n,
                            gutsType: "userRecent",
                            gutsID: n.get("UserID"),
                            getClientRadioSongs: function() {
                                var t = $.Deferred();
                                return t.resolve(e), t
                            },
                            render: function(e, t) {
                                var n = new GS.Models.Collections.Songs(t.personalizedSongs.models),
                                    r = this.$el.find(".home-content"),
                                    i = new GS.Models.PlayContext;
                                i.addStreamType(GS.Models.PlayContext.TYPE_RECOMMENDED), n = GS.Models.Queue.sortSongsForRadio(n, {
                                    shuffle: !1
                                }), r.empty(), this.grid = new GS.Views.SongGridBlock({
                                    itemsPerRow: 1,
                                    axis: "x",
                                    itemWidth: 140,
                                    maximumVisibleItems: 7,
                                    el: r[0],
                                    collection: n,
                                    playContext: i,
                                    mediumGrid: !0
                                }), this.options.positionOnPage = e, t.childViews.push(this.grid), this.grid.render()
                            }
                        }))) : this.missingPersonalizedSongs = !0
                    },
                    onPopularSongs: function(e) {
                        if (!e || !e.Songs || !e.Songs.length) return;
                        var t = new GS.Models.Collections.Songs(e.Songs),
                            n = this.model.get("appModel").get("user");
                        this.sections.push(new a({
                            titleKey: "POPULAR",
                            weight: n.get("UserID") ? 30 : 80,
                            taglineKey: "TAGLINE_POPULAR",
                            section: "popular",
                            canPlay: !0,
                            pageable: !0,
                            user: n,
                            gutsType: "popular",
                            gutsID: 0,
                            getClientRadioSongs: function() {
                                var e = $.Deferred();
                                return GS.Services.API.popularGetSongs().done(_.bind(function(t) {
                                    var n = GS.Models.Collections.Songs(t && t.Songs || []);
                                    e.resolve(n)
                                }, this)), e
                            },
                            render: function(e, n) {
                                var r = this.$el.find(".home-content"),
                                    i = new GS.Models.PlayContext({
                                        contextType: "popular"
                                    });
                                r.empty(), this.grid = new GS.Views.SongGridBlock({
                                    itemsPerRow: 1,
                                    axis: "x",
                                    itemWidth: 140,
                                    maximumVisibleItems: 7,
                                    el: r[0],
                                    collection: t,
                                    playContext: i,
                                    mediumGrid: !0
                                }), this.options.positionOnPage = e, n.childViews.push(this.grid), this.grid.render()
                            }
                        }))
                    },
                    onRecommendedSongs: function(e) {
                        if (!e || !e.length) return;
                        e = new GS.Models.Collections.Songs(e);
                        var t = this.model.get("appModel").get("user");
                        this.sections.push(new a({
                            titleKey: "RECOMMENDED",
                            weight: 300,
                            taglineKey: "TAGLINE_RECOMMENDED",
                            section: "recommended",
                            canPlay: !0,
                            pageable: !0,
                            user: t,
                            gutsType: "userRecommended",
                            gutsID: t.get("UserID"),
                            getClientRadioSongs: function() {
                                var e = $.Deferred();
                                return e.resolve([]), e
                            },
                            render: function(t, n) {
                                var r = this.$el.find(".home-content"),
                                    i = new GS.Models.PlayContext;
                                i.addStreamType(GS.Models.PlayContext.TYPE_RECOMMENDED), r.empty(), this.grid = new GS.Views.SongGridBlock({
                                    itemsPerRow: 1,
                                    axis: "x",
                                    itemWidth: 140,
                                    maximumVisibleItems: 7,
                                    el: r[0],
                                    collection: e,
                                    playContext: i,
                                    mediumGrid: !0
                                }), this.options.positionOnPage = t, n.childViews.push(this.grid), this.grid.render()
                            }
                        }))
                    },
                    onTopBroadcastsForTags: function(e) {
                        if (this.destroyed || !e || _.isEmpty(e)) return;
                        var t = this,
                            n = [],
                            r = [],
                            i = [];
                        _.each(e, function(e, t) {
                            e && e.length && (n.push.apply(n, e), t != "bcast" && e[0].Tag && e[0].Tag.i && i.push(new GS.Models.Tag({
                                TagID: e[0].Tag.i,
                                Tag: e[0].Tag.n
                            })))
                        }), n = new GS.Models.Collections.Broadcasts(n), n.filterBestBroadcasts();
                        if (n.length > 0) {
                            var s = n.first(10);
                            s = _.first(_.shuffle(_.first(s, 6)), 3);
                            var o = new GS.Models.Collections.Broadcasts(s);
                            n.remove(s), this.topBroadcasts = o;
                            var u = {
                                genres: []
                            },
                                f = "TAGLINE_TOP_BROADCASTS";
                            for (var l = 0, c = i.length, h; l < c; l++) h = ['<a href="', i[l].toUrl(), '" class="tagline-link">', i[l].escape("Tag"), "</a>"].join(""), l === 0 ? u.genre = h : u.genres.push(h);
                            u.genres.length && u.genres.join(", "), i.length == 1 ? f = "TAGLINE_TOP_BROADCASTS_GENRE" : i.length !== 0 && (f = "TAGLINE_TOP_BROADCASTS_GENRES"), this.sections.push(new a({
                                titleKey: "LIVE_BROADCASTS",
                                weight: 4e3,
                                taglineKey: f,
                                taglineOptions: u,
                                section: "topBroadcasts",
                                canPlay: !1,
                                pageable: !1,
                                addClass: "broadcasts",
                                render: function(e, t) {
                                    var n = this.$el.find(".home-content");
                                    n.empty(), this.fetchTemplate("home/broadcastsSection").done(_.bind(function(e) {
                                        this.$el.html(this.renderTemplate(e, this)), this.rendered = !0
                                    }, this)), this.options.positionOnPage = e
                                }
                            }))
                        }
                    },
                    onFeaturedContent: function(e) {
                        if (!e || !e.Contents) return;
                        var t = e.Contents,
                            n = this.model.get("appModel").get("user"),
                            r = 0,
                            i = t.length,
                            s, o, u;
                        for (; r < i; r++) {
                            s = t[r].items, !o && s && s.length && s[0] && s[0].VideoID && (o = new GS.Models.Collections.Videos(s)), !u && s && s.length && s[0] && t[r].name == "New Releases" && (u = new GS.Models.Collections.Albums(s));
                            if (o && u) break
                        }
                        o && this.sections.push(new a({
                            titleKey: "FEATURED_VIDEOS",
                            weight: 40,
                            taglineKey: "TAGLINE_FEATURED_VIDEOS",
                            section: "featured-videos",
                            canPlay: !1,
                            pageable: !0,
                            user: n,
                            render: function(e, t) {
                                var n = this.$el.find(".home-content");
                                n.empty(), this.grid = new GS.Views.VideoGrid({
                                    itemsPerRow: 1,
                                    axis: "x",
                                    itemWidth: 140,
                                    maximumVisibleItems: 7,
                                    el: n[0],
                                    collection: o,
                                    mediumGrid: !0
                                }), this.options.positionOnPage = e, t.childViews.push(this.grid), this.grid.render()
                            }
                        })), u && this.sections.push(new a({
                            titleKey: "NEW_RELEASES",
                            weight: 40,
                            taglineKey: "TAGLINE_NEW_RELEASES",
                            section: "new-releases",
                            canPlay: !1,
                            pageable: !0,
                            user: n,
                            render: function(e, t) {
                                var n = this.$el.find(".home-content");
                                n.empty(), this.grid = new GS.Views.AlbumGrid({
                                    itemsPerRow: 1,
                                    axis: "x",
                                    itemWidth: 140,
                                    maximumVisibleItems: 7,
                                    el: n[0],
                                    collection: u,
                                    mediumGrid: !0,
                                    showArtist: !0,
                                    addStreamType: "TYPE_RECOMMENDED"
                                }), this.options.positionOnPage = e, t.childViews.push(this.grid), this.grid.render()
                            }
                        }))
                    },
                    onRecentListens: function(e, t) {
                        var r = this.model.get("appModel").get("user"),
                            i = this.defaultTags,
                            s = i.slice(0),
                            o = 15,
                            f = 5,
                            l, c, h;
                        c = t.length;
                        while (c < o && s.length) t.push([s.shift(), []]), c++;
                        var p = _.first(t, 20),
                            d = [],
                            v = [];
                        for (l = 0, c = p.length; l < c; l++) {
                            h = p[l][0];
                            if (!(l < f)) break;
                            d[h] = p[l], v.push(h)
                        }
                        this.moreGenreTags = v.splice(5);
                        var m = _.bind(function(e, t) {
                            if (e && e.get("Songs") && e.get("Songs").length) {
                                var r = this.model.get("appModel").get("user"),
                                    i = d[e.id] && d[e.id][1].length,
                                    s = 0,
                                    o = {
                                        artists: []
                                    },
                                    f = "",
                                    l = {
                                        3773: "TAGLINE_TAG_INDIE",
                                        156: "TAGLINE_TAG_ELECTRONIC",
                                        2856: "TAGLINE_TAG_ROCK",
                                        1748: "TAGLINE_TAG_RAP"
                                    },
                                    c = {},
                                    h, p, v;
                                typeof l[e.id] != "undefined" && (f = l[e.id]);
                                for (var m = 0, g = i || 0; m < g; m++) {
                                    p = d[e.id][1][m], h = p.get("ArtistName");
                                    if (c[h]) continue;
                                    v = ['<a href="', p.toArtistUrl(), '" class="tagline-link">', p.escape("ArtistName"), "</a>"].join(""), m === 0 ? o.artist = v : o.artists.push(v), s++, c[h] = 1
                                }
                                s == 1 ? f = "TAGLINE_BASED_ON_ARTIST" : s && (f = "TAGLINE_BASED_ON_ARTISTS", o.artists = _.first(o.artists, 4).join(", "), s > 2 && (o.artists += ", "));
                                var y = {
                                    title: e.get("DisplayName"),
                                    weight: 30 + Math.max(i * 50, 600),
                                    taglineKey: f,
                                    taglineOptions: o,
                                    section: "tag",
                                    addClass: "tag" + e.id,
                                    tag: {
                                        tagID: e.id,
                                        tagName: e.get("DisplayName")
                                    },
                                    canPlay: !0,
                                    pageable: !0,
                                    user: r,
                                    gutsType: "tag",
                                    gutsID: e.id,
                                    getClientRadioSongs: function() {
                                        var t = $.Deferred(),
                                            r = e.get("Songs");
                                        if (!r) return t;
                                        r = GS.Models.Queue.shuffleSongsForRadio(r);
                                        var i = n.model.get("player"),
                                            s = i.get("currentQueue"),
                                            o = s.get("clientRadio");
                                        return r = u(r.models, s.get("songs").models), o.setTypeTypeID("tag", e.id), o.disable().reset(r).enable(), o.onActiveSongChange(s, s.get("activeSong")), o.on("needSongs", function(e, t) {
                                            e.switchToAutoplay({
                                                secondaryArtistWeightModifier: .7,
                                                seedArtistWeightRange: [80, 100],
                                                weightModifierRange: [-14, 9]
                                            }), GS.trigger("guts:startAutoplayFallbackContext", "autoplay", 0)
                                        }), GS.trigger("guts:startNewAutoplayContext", "tag", e.id, "song", s.get("songs").pluck("SongID").toString()), t.reject(), t
                                    },
                                    render: function(t, n) {
                                        var r = e.get("Songs");
                                        if (!r || !r.length) return;
                                        r = r.toArray();
                                        if (r.length > 3) {
                                            var i = [],
                                                s = Math.ceil(r.length / 3),
                                                o = 0,
                                                u = r.length;
                                            for (; o < u; o += s) i = i.concat(_.shuffle(r.slice(o, o + s)));
                                            r = i
                                        }
                                        var a = new GS.Models.Collections.Songs(_.first(r, 50)),
                                            f = this.$el.find(".home-content"),
                                            l = new GS.Models.PlayContext;
                                        l.addStreamType(GS.Models.PlayContext.TYPE_RECOMMENDED), f.empty(), a = GS.Models.Queue.sortSongsForRadio(a, {
                                            shuffle: !1
                                        }), this.grid = new GS.Views.SongGridBlock({
                                            itemsPerRow: 1,
                                            axis: "x",
                                            itemWidth: 140,
                                            maximumVisibleItems: 7,
                                            el: f[0],
                                            collection: a,
                                            playContext: l,
                                            mediumGrid: !0
                                        }), this.options.positionOnPage = t, n.childViews.push(this.grid), this.grid.render()
                                    }
                                };
                                this.sections.push(new a(y))
                            }
                        }, this),
                            g = $.Deferred(),
                            y = $.Deferred();
                        y.done(e.bind(function(e) {
                            for (var t = 0, n = e.length; t < n; t++) m(e[t], t)
                        })), g.fail(_.bind(function() {
                            GS.Models.Tag.getMulti(v).done(_.bind(function(e) {
                                y.resolve(e)
                            }))
                        }, this));
                        if (_.intersection(v, _.first(i, f)).length == f) {
                            v = _.first(i, 4), this.moreGenreTags = i.slice(4);
                            var b = setTimeout(function() {
                                g.reject()
                            }, 2500),
                                w = function(e) {
                                    clearTimeout(b);
                                    if (!e.defaultTagSet) {
                                        g.reject();
                                        return
                                    }
                                    var t = GS.Models.Tag.convertPageNamesToTags(e.defaultTagSet);
                                    y.resolve(t), delete e.defaultTagSet
                                };
                            typeof preloadedData != "undefined" ? w(preloadedData) : GS.on("preloadedData", w)
                        } else g.reject();
                        return y
                    },
                    onListenAgainOptions: function(e) {
                        var t = $(e.currentTarget),
                            r = [];
                        r.push({
                            title: _.getString("EDIT_COLLECTION"),
                            customClass: "jj_menu_item_gear",
                            action: {
                                type: "fn",
                                callback: function() {
                                    var e = n.model.get("user");
                                    GS.router.setHash(e.toUrl("collection"))
                                }
                            }
                        }, {
                            title: _.getString("EDIT_LISTENS"),
                            customClass: "jj_menu_item_gear",
                            action: {
                                type: "fn",
                                callback: function() {
                                    var e = n.model.get("user");
                                    GS.router.setHash(e.toUrl("listens"))
                                }
                            }
                        }), t.jjmenu(e, r, null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        }), t.addClass("active-context")
                    },
                    setAdSize: function(e) {
                        this.adSize = e;
                        if (this.renderedSections <= 1 || !this.renderedSections[1]) return;
                        this.renderedSections[1].$el[e == "tall" ? "addClass" : "removeClass"]("small-home-section spaced-home-section"), e == "none" && this.renderedSections[0].$el.removeClass("small-home-section spaced-home-section")
                    },
                    focusSearch: function() {
                        GS.Views.Lightbox.isOpen || $("#header-search .search").focus()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var n = "",
                    r = "";
                t.Views.Pages.Static = t.Views.Pages.Base.extend({
                    templatePath: "static",
                    pageType: "static",
                    events: {
                        "mouseenter .menu-dropdown": "showMenuDropdown",
                        "mouseleave .menu-dropdown": "hideMenuDropdown",
                        "submit #advertising-contact": "submitAdvertising"
                    },
                    initialize: function() {
                        this.rendered = !1, this.menuTimer = {}, $(document.body).on("mouseenter.about-dropdown", ".menu-dropdown", _.bind(this.stayShowingMenuDropdown, this, this.menuTimer)), $(document.body).on("mouseleave.about-dropdown", ".menu-dropdown", _.bind(this.hideMenuDropdown, this, this.menuTimer)), this.model.set({
                            subpage: _.orEqual(this.options.params.subpage, r),
                            section: _.orEqual(this.options.params.section, n)
                        })
                    },
                    onDestroy: function() {
                        $(document.body).off(".about-dropdown")
                    },
                    render: function() {
                        this.options.params.notFound ? this.fetchTemplate("not_found").always(_.bind(this.onTemplate, this)) : this.options.params.section && this.options.params.subpage ? this.fetchTemplate(this.options.params.section + "/" + this.options.params.subpage).done(_.bind(this.onTemplate, this)).fail(_.bind(function() {
                            this.model.get("subpage") && t.router.setHash("/" + this.model.get("section"))
                        }, this)) : this.options.params.section && this.fetchTemplate(this.options.params.section).always(_.bind(this.onTemplate, this)), this.setTitle(_.ucwords((this.options.params.section || "").toLowerCase())), this.rendered = !0
                    },
                    updatePageParams: function(e) {
                        var t = this.options.params;
                        this.options.params = e;
                        var i = _.orEqual(e.subpage, r),
                            s = _.orEqual(e.section, n);
                        t.notFound !== e.notFound && this.render();
                        if (i != t.subpage || s != t.section) this.model.set({
                            subpage: _.orEqual(e.subpage, r),
                            section: _.orEqual(e.section, n)
                        }), this.render()
                    },
                    onTemplate: function(e) {
                        if (this.destroyed) return;
                        if (!e) {
                            t.router.notFound();
                            return
                        }
                        this.$el.html(this.renderTemplate(e, {
                            subpage: _.orEqual(this.model.get("subpage"), r),
                            section: _.orEqual(this.model.get("section"), n),
                            pageNavOptions: this.getPageNavOptions()
                        })), $(".about-slider").tinycarousel({
                            interval: !0,
                            duration: 750,
                            intervaltime: 5e3,
                            pager: !0
                        })
                    },
                    showMenuDropdown: function(e) {
                        var t = $(e.currentTarget);
                        this.menuTimer && this.menuTimer.timer && (clearTimeout(this.menuTimer.timer), this.menuTimer.timer = null), t.jjmenu(e, this.getMenuOptions(t), null, {
                            xposition: "left",
                            yposition: "bottom",
                            show: "default",
                            spill: "right",
                            keepState: t,
                            append: document.body,
                            className: "menu-dropdown",
                            shouldLog: !0
                        })
                    },
                    hideMenuDropdown: function(e) {
                        this.menuTimer && this.menuTimer.timer && clearTimeout(this.menuTimer.timer), this.menuTimer.timer = setTimeout(_.bind(this.closeMenuDropDown, this), 200)
                    },
                    stayShowingMenuDropdown: function(e) {
                        e && e.timer && clearTimeout(e.timer)
                    },
                    getPageNavOptions: function() {
                        var e = this.model.get("subpage"),
                            t = this.model.get("section");
                        return {
                            navItems: [{
                                url: "#!/about",
                                isActive: t === "about" || t === "",
                                locale: "NAV_ABOUT",
                                className: "menu-dropdown about"
                            }, {
                                url: "#!/careers",
                                isActive: t === "careers",
                                locale: "NAV_CAREERS",
                                className: "menu-dropdown careers"
                            }, {
                                url: "#!/artists",
                                isActive: t === "artists",
                                locale: "NAV_ARTISTS"
                            }, {
                                url: "#!/press",
                                isActive: t === "press" || t == "logo",
                                locale: "NAV_PRESS",
                                className: "menu-dropdown press"
                            }, {
                                url: "#!/contact",
                                isActive: t === "contact",
                                locale: "NAV_CONTACT"
                            }, {
                                url: "#!/legal",
                                isActive: t === "legal",
                                locale: "NAV_LEGAL",
                                className: "menu-dropdown legal"
                            }]
                        }
                    },
                    getMenuOptions: function(e) {
                        return e.hasClass("about") ? this.menu = [{
                            title: "The Team",
                            action: {
                                type: "gourl",
                                url: "#!/about/team"
                            }
                        }, {
                            title: "Grooveshark University",
                            action: {
                                type: "gourl",
                                url: "#!/about/university"
                            }
                        }, {
                            title: "Advertising",
                            action: {
                                type: "gourl",
                                url: "#!/about/advertising"
                            }
                        }, {
                            title: "Grooveshark API",
                            action: {
                                type: "gourl",
                                url: "http://developers.grooveshark.com/",
                                target: "_blank"
                            }
                        }] : e.hasClass("careers") ? this.menu = [{
                            title: "Apply",
                            action: {
                                type: "gourl",
                                url: "#!/careers/apply"
                            }
                        }] : e.hasClass("legal") ? this.menu = [{
                            title: "Terms",
                            action: {
                                type: "gourl",
                                url: "#!/legal/terms"
                            }
                        }, {
                            title: "Artist Profile Terms",
                            action: {
                                type: "gourl",
                                url: "#!/legal/artist_terms"
                            }
                        }, {
                            title: "Privacy",
                            action: {
                                type: "gourl",
                                url: "#!/legal/privacy"
                            }
                        }, {
                            title: "DMCA Policy",
                            action: {
                                type: "gourl",
                                url: "#!/legal/dmca"
                            }
                        }, {
                            title: "DMCA Form",
                            action: {
                                type: "gourl",
                                url: "http://www.grooveshark.com/dmca_form",
                                target: "_blank"
                            }
                        }] : e.hasClass("press") && (this.menu = [{
                            title: "Media Resources",
                            action: {
                                type: "gourl",
                                url: "#!/logo"
                            }
                        }]), this.menu
                    },
                    closeMenuDropDown: function(e) {
                        $(".menu-dropdown").trigger("contextmenu")
                    },
                    submitAdvertising: function(e) {
                        e.preventDefault();
                        var n = $(e.currentTarget),
                            r = n.serializeArray(),
                            i = {},
                            s = [];
                        _.each(r, function(e) {
                            i[e.name] = e.value
                        }), i["full-name"] == "" && s.push("full-name"), i.email == "" && s.push("email"), i.phone == "" && s.push("phone"), $(".control.error", n).removeClass("error");
                        var o = $(".error-message");
                        o.addClass("hide");
                        if (s.length) {
                            _.each(s, function(e) {
                                $("#advertising-" + e, n).parent().addClass("error")
                            });
                            return
                        }
                        var u = function() {
                                var e = $(".error-message");
                                e.html("There was an error sending the email - please retry or contact us at advertising@grooveshark.com if this problem persists!"), e.removeClass("hide")
                            };
                        t.Services.API.sendAdvertisingEmail(i).done(function(e) {
                            if (!e) {
                                u();
                                return
                            }
                            n.html('<p class="advertising-success">Sent! Look out for an email from us soon with more information.</p>')
                        }).fail(u)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {}, defaultSection = "", defaultSubpage = "", t.Views.Pages.Artists = t.Views.Pages.Base.extend({
                    templatePath: "artists",
                    pageType: "artists",
                    events: {},
                    initialize: function() {
                        this.rendered = !1, this.model.set({
                            subpage: _.orEqual(this.options.params.subpage, defaultSubpage),
                            section: _.orEqual(this.options.params.section, defaultSection)
                        })
                    },
                    render: function() {
                        this.options.params.notFound ? this.fetchTemplate("not_found").always(_.bind(this.onTemplate, this)) : this.options.params.section && this.options.params.subpage ? this.fetchTemplate(this.options.params.section + "/" + this.options.params.subpage).always(_.bind(this.onTemplate, this)) : this.options.params.section ? this.fetchTemplate(this.options.params.section).always(_.bind(this.onTemplate, this)) : this.fetchTemplate("index").always(_.bind(this.onTemplate, this)), this.setTitle("Artists"), this.rendered = !0
                    },
                    updatePageParams: function(e) {
                        var t = this.options.params;
                        this.options.params = e;
                        var n = _.orEqual(e.subpage, defaultSubpage),
                            r = _.orEqual(e.section, defaultSection);
                        t.notFound !== e.notFound && this.render();
                        if (n != t.subpage || r != t.section) this.model.set({
                            subpage: _.orEqual(e.subpage, defaultSubpage),
                            section: _.orEqual(e.section, defaultSection)
                        }), this.render()
                    },
                    onTemplate: function(e) {
                        if (this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {
                            subpage: _.orEqual(this.model.get("subpage"), defaultSubpage),
                            section: _.orEqual(this.model.get("section"), defaultSection)
                        }))
                    }
                })
            }(), function() {
                function s(e) {
                    return _.ucwords(e) + "s"
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var n = "song",
                    r = {
                        song: !0,
                        playlist: !0,
                        user: !0,
                        event: !0,
                        album: !0,
                        artist: !0
                    },
                    i = ["Songs", "Artists", "Albums"];
                t.Views.Pages.Search = t.Views.Pages.Base.extend({
                    templatePath: "search",
                    pageType: "search",
                    events: {
                        "click #did-you-mean-search-link": "trackSuggestionClick",
                        "click #did-you-mean-remove": "removeSuggestion",
                        "click .play-station": "onPlayStationClick"
                    },
                    initialize: function() {
                        this.indexRendered = !1, this.prefetchedStreamKeys = !1, this.childViews = [], this.results = {}, this.searchType = this.options.params.type, this.query = _.orEqual(this.options.params.query, ""), this.searchLoggingDFD = $.Deferred();
                        if (!this.searchType || !r[this.searchType]) this.searchType = n;
                        var e = this.options.model.get("appModel");
                        this.ppOverride = _.orEqual(_.orEqual(e.get("user").get("searchVersion"), e.get("searchVersion")), !1), this.ppOverride && (this.overrideSearchVersion = this.ppOverride);
                        var i = t.Services.GUTS.currentTest;
                        if (i && i.name) {
                            var s = i.name;
                            s.indexOf("Interleaving_") == 0 && (this.ppOverride = s, this.overrideSearchVersion = this.ppOverride)
                        }
                        if (this.query.indexOf("ppVersion:", 0) === 0) {
                            var o = this.query.split(/\s+/);
                            this.ppOverride = o[0].split(":")[1], this.overrideSearchVersion = this.ppOverride, this.query = o.splice(1, o.length).join(" ")
                        }
                        this.query = $.trim(this.query.replace(/\s+/g, " ")), this.cleanQuery = _.escape(this.query), this.queryAsTag = this.query.replace(/[\-\s]*/g, "").toLowerCase(), this.isTagSearch = !1, this.searchLoggingDFD.always(_.bind(function(e) {
                            this.reportGutsInformation(e)
                        }, this))
                    },
                    updatePageParams: function(e) {
                        var t = this.searchType;
                        this.searchType = e.type || n, this.searchType !== t && (this.cleanupChildViews(), this.render())
                    },
                    render: function() {
                        this.indexRendered = !1, this.leftToFetch = ["Songs", "Artists", "Albums", "Videos", "Playlists", "Users", "Events"];
                        var e = _.indexOf(this.leftToFetch, s(this.searchType));
                        if (e != -1) {
                            var n = this.leftToFetch.splice(e, 1);
                            this.leftToFetch.unshift(n[0])
                        }
                        this.pendingOutCalls = 0;
                        var r = _.chainLoading(),
                            i;
                        r.push(this.fetchTemplate("index").done(r.bind(this.renderIndex, this)));
                        while (this.pendingOutCalls < 3) {
                            i = this.fetchNext(r);
                            if (!i) break;
                            r.push(i)
                        }
                        r.push(t.Services.API.getGoogleSuggest(this.query).done(r.bind(this.showSuggestion, this))), this.searchType && this.searchType != "digest" ? this.setTitle("All " + _.ucwords(this.searchType) + " Results: " + this.query) : this.setTitle("Search: " + this.query)
                    },
                    renderIndex: function(e) {
                        if (this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {
                            searchType: this.searchType,
                            cleanQuery: this.cleanQuery,
                            getUrl: _.bind(this.getUrl, this)
                        })), this.indexRendered = !0, t.trigger("page:ready", this), t.on("manatee:broadcastEnded", this.render, this)
                    },
                    renderResults: function(e) {
                        if (this.destroyed || !this.indexRendered) return;
                        s(this.searchType) === e ? this.renderGrid(e) : this.searchType === "digest" && _.contains(i, e) && this.renderDigestView(e), e !== "Songs" && this.renderSnapshot(e)
                    },
                    renderDigestView: function(e) {
                        var t = e.toLowerCase().substr(0, e.length - 1);
                        this.fetchTemplate("digestSection").then(_.bind(function(n) {
                            var r = $(".content", "#column1");
                            r.append(this.renderTemplate(n, {
                                type: t,
                                cleanQuery: this.cleanQuery
                            })), this.renderGrid(e, "#" + t + "-grid")
                        }, this))
                    },
                    renderSnapshot: function(e) {
                        var t = e.toLowerCase();
                        this.fetchTemplate("top" + e).always(_.bind(function(n) {
                            if (this.destroyed || !this.indexRendered) return;
                            var r = $("#" + t + "-snapshot");
                            if (r.length) {
                                var i = {
                                    cleanQuery: this.cleanQuery
                                };
                                i[t] = this.results[e] && this.results[e].length ? this.results[e].toArray().slice(0, 3) : [], r.html(this.renderTemplate(n, i))
                            }
                        }, this))
                    },
                    renderGrid: function(e, n) {
                        n = n || "#grid";
                        var r = $(n),
                            i, o = $(".grid-toolbar"),
                            u = this.results[e],
                            a, f = new t.Models.PlayContext({
                                contextType: "search",
                                query: this.query
                            });
                        f.addStreamType(t.Models.PlayContext.TYPE_DEFAULT);
                        if (this.searchType == "digest") {
                            var l = e == "Songs" ? 15 : 4;
                            u = new t.Models.Collections[e](_.first(u.models, l))
                        }
                        e == s(this.searchType) && this.showHideNoResults(!u.length), r.empty();
                        switch (e) {
                        case "Songs":
                            var c = t.Views.SongGridTall,
                                h = {
                                    el: $(n)[0],
                                    collection: u,
                                    header: !1,
                                    playContext: f
                                };
                            this.searchType == "digest" && (c = t.Views.SongGrid);
                            var p = {
                                searchContext: !0
                            },
                                d = c.extend({
                                    handleItemDblclick: function(e) {
                                        return t.trigger("guts:logsearch", "dblClick", this, e), this._super.apply(this, ["handleItemDblclick"].concat(_.toArray(arguments)))
                                    },
                                    handleDragEnd: function(e, n) {
                                        return t.trigger("guts:logsearch", "drag", this, e), this._super.apply(this, ["handleDragEnd"].concat(_.toArray(arguments)))
                                    },
                                    contextMenuExtra: p
                                });
                            i = new d(h), p.grid = i;
                            break;
                        case "Albums":
                            a = this.searchType == "digest" ? "AlbumGrid" : "AlbumGridTall", i = new t.Views[a]({
                                el: $(n)[0],
                                collection: u,
                                header: !1
                            });
                            break;
                        case "Artists":
                            a = this.searchType == "digest" ? "ArtistGrid" : "ArtistGridTall", i = new t.Views[a]({
                                el: $(n)[0],
                                collection: u,
                                header: !1
                            });
                            break;
                        case "Playlists":
                            i = new t.Views.PlaylistGridTall({
                                el: $(n)[0],
                                collection: u,
                                header: !1
                            });
                            break;
                        case "Users":
                            i = new t.Views.UserGridTall({
                                el: $(n)[0],
                                collection: u,
                                header: !1
                            });
                            break;
                        case "Events":
                            i = new t.Views.EventGridTall({
                                el: $(n)[0],
                                collection: u,
                                header: !1
                            })
                        }
                        if (i) {
                            this.searchType != "digest" && i.$el.addClass("medium"), this.childViews.push(i), i.render();
                            if (o.length) {
                                var v = new t.Views.GridToolbar({
                                    el: o[0],
                                    model: this.model,
                                    gridView: i,
                                    playContext: f,
                                    page: "search",
                                    buttons: e == "Songs" ? ["play", "add", "sort", "filterSearch"] : ["sort", "filterSearch"]
                                });
                                this.childViews.push(v), v.render()
                            }
                        }
                    },
                    fetchNext: function(e) {
                        if (!this.leftToFetch.length) return;
                        var n = this.leftToFetch.shift();
                        n != "Videos" && this.pendingOutCalls++;
                        if (n == "Videos") return $.Deferred().resolve([]);
                        if (n == "Songs" && this.isTagSearch) {
                            var r = t.Views.Pages.Search.GENRE_TAGS[this.queryAsTag];
                            return t.Services.API.tagRadioGetAllSongs(r).done(e.bind(this.handleSearchResults, this, "SongsByTag")).fail(e.bind(this.handleSearchResults, this, "SongsByTag"))
                        }
                        return !!this.isTagSearch || n != "Songs" && n != "Artists" && n != "Albums" ? t.Services.API.getResultsFromSearch(this.query, n, this.ppOverride).done(e.bind(this.handleSearchResults, this, n)).fail(e.bind(this.handleSearchResults, this, n)) : (this.leftToFetch = _.without(this.leftToFetch, "Songs", "Artists", "Albums"), t.Services.API.getResultsFromSearch(this.query, ["Songs", "Artists", "Albums"], this.ppOverride).always(e.bind(this.handleMultiResults, this)))
                    },
                    orderDigest: function(e) {
                        var t = [];
                        e.Songs[0] ? t.push({
                            name: e.Songs[0].SongName.toLowerCase(),
                            verified: e.Songs[0].IsVerified,
                            type: "Songs"
                        }) : t.push({
                            name: "",
                            verified: 0,
                            type: "Songs"
                        }), e.Artists[0] ? t.push({
                            name: e.Artists[0].ArtistName.toLowerCase(),
                            verified: e.Artists[0].IsVerified,
                            type: "Artists"
                        }) : t.push({
                            name: "",
                            verified: 0,
                            type: "Artists"
                        }), e.Albums[0] ? t.push({
                            name: e.Albums[0].AlbumName.toLowerCase(),
                            verified: e.Albums[0].IsVerified,
                            type: "Albums"
                        }) : t.push({
                            name: "",
                            verified: 0,
                            type: "Albums"
                        });
                        var n = 0,
                            r = t.length,
                            i = this.query.toLowerCase(),
                            s = i.indexOf(" by "),
                            o = e.Tags && e.Tags[0] ? e.Tags[0].Tag.toLowerCase() : "",
                            u = o ? $.trim(i.replace(o, "")) : i,
                            a, f, l, c = !1;
                        if (u !== "") for (; n < r; n++) {
                            f = t[n].name == i || t[n].name == u, n != 1 && s > 0 ? l = t[n].name == i.substring(0, s) : l = !1;
                            if (f || l) {
                                a = t[n].type;
                                if (t[n].verified) break
                            } else!c && i.indexOf(t[n].name) !== -1 && t[n].verified && (c = t[n].type)
                        }
                        var h = ["Songs", "Albums", "Artists"];
                        return a ? (a != "Songs" ? h.splice(_.indexOf(h, a), 1) : a = "FeatureSong", h.unshift(a)) : e.Tags ? h.unshift("Tags") : c && (h.splice(_.indexOf(h, c), 1), h.unshift(c)), console.log("order of digest", h), h
                    },
                    getUrl: function(e) {
                        e = e || "", e = e.toLowerCase();
                        var t = encodeURIComponent(this.query);
                        return t = t.replace(/%20/g, "+"), e ? "/#!/search/" + e + "?q=" + t : "/#!/search?q=" + t
                    },
                    showHideNoResults: function(e) {
                        function t(e) {
                            e.removeClass("hide")
                        }
                        function n(e) {
                            e.addClass("hide")
                        }
                        e ? (n($("#search-type-header")), n($("#grid-toolbar-container")), n($("#grid")), t($("#search-no-match-header")), t($("#grid-no-results"))) : (t($("#search-type-header")), t($("#grid-toolbar-container")), t($("#grid")), n($("#search-no-match-header")), n($("#grid-no-results")))
                    },
                    handleMultiResults: function(e) {
                        if (!e || !e.result) {
                            this.showHideNoResults(!0);
                            return
                        }
                        var n = this.orderDigest(e.result);
                        if (this.searchType == "song" && _.indexOf(n, "Songs") > 0) {
                            var r = n[0];
                            r = r == "FeatureSong" ? "Songs" : r;
                            var i = e.result[r];
                            if (i && i.length) {
                                var s;
                                r == "Artists" ? s = new t.Models.Artist(i[0]) : r == "Albums" ? s = new t.Models.Album(i[0]) : r == "Tags" ? s = new t.Models.Tag($.extend({}, i[0])) : r == "Songs" && (s = new t.Models.Song($.extend({}, i[0]))), this.featureItem(s, r)
                            }
                            n.shift()
                        }
                        for (var o = 0, u; u = n[o]; o++) this.handleSearchResults(u, {
                            result: e.result[u],
                            version: e.version,
                            assignedVersion: e.assignedVersion
                        })
                    },
                    featureItem: function(e, n) {
                        var r = $("#featured-item"),
                            i = $(".featured-type-title", r[0]),
                            s = $("a.view-more", r[0]),
                            o;
                        switch (n) {
                        case "Songs":
                            i.attr("data-translate-text", "TOP_SONG_RESULT").text(_.getString("TOP_SONG_RESULT")), s.addClass("hide"), o = new t.Views.Modules.SongProfileCard({
                                model: e,
                                addClass: "featured",
                                hideSuggestTags: !0
                            }), this.searchType == "song" && $("#search-type-header").attr("data-translate-text", "ALL_SONG_MATCHES").text(_.getString("ALL_SONG_MATCHES"));
                            break;
                        case "Artists":
                            i.attr("data-translate-text", "TOP_ARTIST_RESULT").text(_.getString("TOP_ARTIST_RESULT")), s.find(".see-all-text").attr("data-translate-text", "SEE_ALL_ARTIST_RESULTS").text(_.getString("SEE_ALL_ARTIST_RESULTS")), s.attr("href", this.getUrl("artist")), o = new t.Views.Modules.ArtistProfileCard({
                                model: e,
                                addClass: "featured",
                                hideSuggestTags: !0
                            });
                            break;
                        case "Albums":
                            i.attr("data-translate-text", "TOP_ALBUM_RESULT").text(_.getString("TOP_ALBUM_RESULT")), s.find(".see-all-text").attr("data-translate-text", "SEE_ALL_ALBUM_RESULTS").text(_.getString("SEE_ALL_ALBUM_RESULTS")), s.attr("href", this.getUrl("album")), o = new t.Views.Modules.AlbumProfileCard({
                                model: e,
                                addClass: "featured",
                                hideSuggestTags: !0
                            });
                            break;
                        case "Tags":
                            i.attr("data-translate-text", "TOP_TAG_RESULT").text(_.getString("TOP_TAG_RESULT")), s.addClass("hide"), o = new t.Views.Modules.TagProfileCard({
                                model: e,
                                addClass: "featured",
                                hideSuggestTags: !0
                            });
                            break;
                        default:
                            return
                        }
                        this.featuredItem = {
                            item: e,
                            type: n
                        }, n !== "Tags" && (o.$el.addClass("small"), o.small = !0), r.removeClass("hide"), r.append(o.$el), o.render(), o.on("rendered", function() {
                            t.trigger("page:redrawUpdate")
                        }), this.childViews.push(o), e && e.getPageNameData && e.getPageNameData(), e.get("ArtistID") && t.trigger("theme:notification", {
                            artistID: e.get("ArtistID"),
                            timeout: 750
                        })
                    },
                    onPlayStationClick: function(e) {
                        t.trigger("player:radio", !0, null, {
                            seeds: [$(e.currentTarget).data("artistId")],
                            seedArtistWeightRange: [110, 130],
                            secondaryArtistWeightModifier: .75
                        }), t.trigger("guts:gatrack", "player", "autoplayOn", "artist"), t.trigger("guts:forcelog", "autoplayOn", {
                            autoplay: 0,
                            autoplayType: "artist"
                        }), t.trigger("guts:begincontext", {
                            autoplay: 0,
                            autoplayType: "artist"
                        })
                    },
                    handleSearchResults: function(e, n) {
                        e = e == "FeatureSong" ? "Songs" : e;
                        var r = n && $.isArray(n.result) ? n.result : [],
                            i = n.version,
                            o = s(this.searchType);
                        e === "SongsByTag" && (e = "Songs", r = $.isArray(n) ? n : []), e === "Videos" && (r = $.isArray(n) ? n : []), this.results[e] = new t.Models.Collections[e](r), i && e == s(this.searchType) && (this.model.get("appModel").set("searchVersion", i), this.searchLoggingDFD.resolve(this.model.get("appModel").get("searchVersion")));
                        if (this.searchType == "digest" || e == o) if (e === "Songs" && !this.prefetchedStreamKeys) {
                            var u = Math.min(this.results.Songs.length, 3);
                            if (u) {
                                var a = [];
                                for (var f = 0; f < u; f++) a.push(this.results.Songs.at(f).get("SongID"));
                                t.dispatcher.trigger("swf:prefetchStreamKeys", a), this.prefetchedStreamKeys = !0
                            }
                        }
                        this.renderResults(e), this.pendingOutCalls--;
                        var l = _.chainLoading(),
                            c;
                        while (this.pendingOutCalls < 3) {
                            if (!(c = this.fetchNext(l))) break;
                            l.push(c)
                        }
                    },
                    showSuggestion: function(e) {
                        if (e == this.query) return;
                        var n = $("#did-you-mean");
                        n.find("a.search-link").text(e).attr("title", e).data({
                            searchquery: e,
                            suggestionSource: "eg",
                            searchtype: this.searchType ? this.searchType : ""
                        }), n.removeClass("hide");
                        var r = this.searchType == "digest" ? "Songs" : this.searchType,
                            i = this.results[r] ? this.results[r].length : 0;
                        t.trigger("guts:gatrack", "search", "suggest", this.suggestSource), t.trigger("guts:log", "suggest", {
                            suggest: e,
                            source: "eg",
                            numSongs: i
                        })
                    },
                    trackSuggestionClick: function(e) {
                        var n = $(e.currentTarget),
                            r = n.data("suggestionSource"),
                            i = n.data("suggestion"),
                            s = this.searchType == "digest" ? "Songs" : this.searchType,
                            o = this.results[s] ? this.results[s].length : 0;
                        t.trigger("guts:gatrack", "search", "suggestClick", r, o), t.trigger("guts:log", "suggestClick", {
                            suggest: i,
                            source: r,
                            numSongs: o
                        })
                    },
                    reportGutsInformation: function(e) {
                        e = _.orEqual(e, this.overrideSearchVersion);
                        var n = {
                            type: this.searchType || "song",
                            searchString: this.query,
                            searchVersion: e
                        };
                        this.isTagSearch && (n.isTagSearch = !0, n.tagID = this.tagID), t.trigger("guts:log", "search", n);
                        var r = {
                            mostRecentSearch: this.query,
                            mostRecentSearchType: this.searchType || "song",
                            mostRecentSearchVersion: e
                        };
                        this.isTagSearch && (r.mostRecentTagSearched = this.tagID), t.trigger("guts:begincontext", r), !this.isTagSearch && t.Services.GUTS && t.Services.GUTS.context.hasOwnProperty("mostRecentTagSearched") && t.trigger("guts:endcontext", "mostRecentTagSearched")
                    },
                    removeSuggestion: function(e) {
                        $("#did-you-mean").slideUp("fast")
                    },
                    onDestroy: function() {
                        t.off("manatee:broadcastEnded", null, this)
                    }
                }, {
                    GENRE_TAGS: {
                        "40s": 2837,
                        "50s": 1087,
                        "60s": 266,
                        "70s": 588,
                        "80s": 55,
                        "8bit": 2145,
                        "90s": 9,
                        acapella: 4263,
                        acidjazz: 3519,
                        acoustic: 105,
                        alternativerock: 1259,
                        ambient: 75,
                        americana: 922,
                        anime: 120,
                        banda: 4264,
                        bass: 585,
                        beach: 912,
                        beat: 1475,
                        bhangra: 130,
                        blackmetal: 4265,
                        bluegrass: 96,
                        blues: 230,
                        bluesrock: 1106,
                        britpop: 534,
                        celtic: 513,
                        chanson: 3692,
                        chillout: 251,
                        chinese: 4266,
                        christian: 439,
                        christianmetal: 4267,
                        christianrock: 4268,
                        christmas: 703,
                        classical: 750,
                        classiccountry: 4269,
                        classicrock: 3529,
                        club: 1038,
                        contemporarychristian: 4270,
                        country: 80,
                        crunk: 748,
                        cumbia: 4271,
                        dance: 71,
                        dancehall: 269,
                        darkwave: 2139,
                        dcima: 4272,
                        deathmetal: 4273,
                        desi: 2512,
                        disco: 899,
                        disney: 623,
                        dnb: 273,
                        downtempo: 153,
                        dub: 3501,
                        dubstep: 2563,
                        electro: 162,
                        electronic: 123,
                        electronica: 67,
                        electropop: 893,
                        emo: 131,
                        eurodance: 4028,
                        experimental: 191,
                        flamenco: 85,
                        folk: 122,
                        folkrock: 925,
                        funk: 397,
                        funky: 398,
                        goa: 2556,
                        gospel: 1489,
                        grime: 268,
                        grunge: 134,
                        hardcore: 245,
                        hardstyle: 4274,
                        heavymetal: 1054,
                        hiphop: 29,
                        house: 48,
                        indie: 136,
                        indiefolk: 1221,
                        indiepop: 573,
                        indierock: 1138,
                        industrial: 275,
                        island: 2294,
                        jazz: 43,
                        jazzblues: 4275,
                        jazzfusion: 4276,
                        jesus: 1356,
                        jpop: 568,
                        jrock: 434,
                        jungle: 248,
                        kpop: 1765,
                        lounge: 765,
                        mathrock: 4277,
                        medieval: 2585,
                        meditation: 700,
                        melodic: 929,
                        merengue: 84,
                        metal: 17,
                        metalcore: 705,
                        minimal: 2177,
                        motown: 4278,
                        mpb: 819,
                        neofolk: 1139,
                        neosoul: 4279,
                        noise: 171,
                        nujazz: 3518,
                        numetal: 1103,
                        oi: 4280,
                        oldies: 102,
                        opera: 1535,
                        orchestra: 2760,
                        pagode: 3606,
                        pop: 56,
                        poppunk: 1333,
                        poprock: 3468,
                        posthardcore: 1332,
                        postrock: 422,
                        powermetal: 4063,
                        progressive: 97,
                        progressiverock: 4137,
                        psychedelic: 1168,
                        psychobilly: 3909,
                        punkrock: 1754,
                        ragga: 4281,
                        rap: 3,
                        rave: 271,
                        rb: 4282,
                        reggae: 160,
                        reggaeton: 940,
                        relax: 1941,
                        rnb: 877,
                        "r&b": 877,
                        rock: 12,
                        rockabilly: 1086,
                        rocksteady: 4283,
                        rootsreggae: 4284,
                        rumba: 3454,
                        salsa: 81,
                        samba: 4285,
                        schlager: 3162,
                        screamo: 166,
                        sertanejo: 4286,
                        singersongwriter: 923,
                        ska: 100,
                        skapunk: 1110,
                        smoothjazz: 3855,
                        softrock: 1311,
                        soul: 520,
                        soundtrack: 72,
                        southernrock: 1298,
                        surf: 1408,
                        swing: 1032,
                        symphonicmetal: 4287,
                        synthpop: 163,
                        tango: 2868,
                        techno: 47,
                        tejano: 789,
                        texascountry: 4288,
                        thrashmetal: 4289,
                        trance: 69,
                        triphop: 158,
                        turkish: 689,
                        underground: 468,
                        vallenato: 89,
                        videogame: 115,
                        vocal: 6,
                        world: 313,
                        zydeco: 4290
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var n = null,
                    r;
                t.Views.Pages.Song = t.Views.Pages.ItemPage.extend({
                    templatePath: "song",
                    pageType: "song",
                    defaultSubpage: "overview",
                    events: {
                        "click .suggest-tags": "onSuggestTagsClick",
                        "click .add-song": "onAddSongClick",
                        "click .play-station": "onPlayStation",
                        "click .play-song-more-options": "onPlayMoreOptions",
                        "click .select-all": "selectAllInputText",
                        "click .share-btn": "shareBtnClick",
                        "click .edit-song": "editBtnClick"
                    },
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.childViews = [], this.clipboardHandlers = [], this.songSubscribed = !1, this.playOnLoad = !1, this.model.set({
                            token: this.options.params.id,
                            subpage: _.orEqual(this.options.params.subpage, this.defaultSubpage)
                        }), r = this.model.get("appModel"), t.Models.Song.getByToken(this.model.get("token")).done(_.bind(this.onSongLoad, this)).fail(function() {
                            t.router.notFound()
                        }), $("#page-wrapper").scroll(this.onScroll), r.on("change:user", this.onUserChange, this), (gsConfig.runMode == "dev" || gsConfig.runMode == "staging") && this.model.get("appModel").get("user").get("subscription").canHideAds() && ($("#live-user-count").text(0), t.on("manatee:pageCurrentVisitorCount", _.bind(this.updateLiveUserCount, this)), t.Services.SWF.ready.done(_.bind(function() {
                            t.Services.SWF.getPageCurrentVisitorCount(this.options.params.id, t.Models.Comment.COMMENT_PAGE_TYPES.SONG)
                        }, this)))
                    },
                    wasFirstPage: function() {
                        this.playOnLoad = !0
                    },
                    onScroll: function() {
                        n && clearTimeout(n), n = setTimeout(function() {
                            n = null, _.resizeClipboardHandler(!0)
                        }, 20)
                    },
                    updatePageParams: function(e) {
                        var t = _.orEqual(e.subpage, this.defaultSubpage);
                        t !== this.model.get("subpage") && (this.model.set({
                            subpage: t
                        }), this.cleanupChildViews(), this.render())
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this)), _.each(this.clipboardHandlers, function(e) {
                            e.destroy()
                        }), $("#page-wrapper").off("scroll", this.onScroll), t.off("manatee:broadcastEnded", null, this)
                    },
                    onSongLoad: function(e) {
                        if (this.destroyed) return;
                        var n = this.model.get("subpage");
                        this.correctUrl(e, n == "profile" || n == "overview" ? "" : n), this.model.set({
                            song: e,
                            artist: new t.Models.Artist({
                                ArtistID: e.get("ArtistID"),
                                ArtistName: e.get("ArtistName")
                            }),
                            songID: e.id,
                            fbCommentsUrl: "http://listen.grooveshark.com/" + e.toUrl().replace("#!/", ""),
                            fbUrl: "http://grooveshark.com/" + e.toUrl().replace("#!/", ""),
                            albumImage: e.getImageURL(200)
                        }), this.playOnLoad && (this.playOnLoad = !1, t.Services.SWF.ready.done(function() {
                            var n = new t.Models.PlayContext;
                            n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", [e], t.Services.SWF.playSpecialIndexes.DEFAULT, !0, n)
                        })), this.render()
                    },
                    onUserChange: function() {
                        this.rendered && (this.rendered = !1, this.render())
                    },
                    subscribeSongChanges: function() {
                        var e = this.model.get("song");
                        e && !this.songSubscribed && (this.modelBindings.push(e.on("change", this.onUserChange, this)), this.songSubscribed = !0)
                    },
                    render: function() {
                        if (!this.model.get("songID") || this.rendered === this.model.get("subpage")) return;
                        this.indexRendered = !1, this.headerInfoRendered = !1;
                        var e = this.model.get("song"),
                            t = this.model.get("song").get("Artists").at(0),
                            n = _.chainLoading(),
                            i = this.handleCommentSubpage();
                        n.push(r.get("user").getOwnedArtists()), n.push(this.fetchTemplate("index").always(n.bind(this.renderIndex, this))), n.push(e.getPageNameData().done(n.bind(this.updateCounts, this))), n.add(t.getTopSongs()), n.add(t.getSongs().done(n.bind(this.renderArtistTopSongs, this))), this.loadComments(this.model.get("songID"), n, i), n.done(_.bind(this.subscribeSongChanges, this)), this.rendered = this.model.get("subpage"), this.model.get("song") && this.setTitle([this.model.get("song").getTitle(!0), _.ucwords(this.model.get("subpage"))])
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || !this.model.get("song")) return;
                        this.$el.html(this.renderTemplate(e));
                        var n = this.model.get("song"),
                            r = this.clipboardHandlers = [];
                        _.defer(function() {
                            r.push(_.setClipboardHandler($("#copy-song-embed"), n.getWidgetCode(), 1))
                        }), this.indexRendered = !0, t.trigger("page:ready", this), t.on("manatee:broadcastEnded", this.onBroadcastChange, this)
                    },
                    onBroadcastChange: function() {
                        this.rendered = !1, this.render()
                    },
                    renderVideos: function(e) {},
                    renderArtistTopSongs: function() {
                        if (this.destroyed || !this.model.get("song")) return;
                        var e = this.model.get("artist"),
                            n = _.toArray(e.get("songs")).sort(t.Models.Song.popularSort).slice(0, 10);
                        if (!n.length) return;
                        this.fetchTemplate("/shared/digests/topArtistSongsDigest").done(_.bind(function(e) {
                            $("#artist-top-songs").html(this.renderTemplate(e, {
                                songs: n,
                                song: this.model.get("song"),
                                artist: this.model.get("artist")
                            }))
                        }, this))
                    },
                    updateCounts: function(e) {
                        e || (e = {});
                        var n = Math.max(_.toInt(e.LibraryCount), 0),
                            r = Math.max(_.toInt(e.FavoriteCount), 0),
                            i = this.model.get("song");
                        !n && !r && (i.get("isFavorite") || i.get("fromLibrary")) && (n = 1), (n || r) && $("#fans-count").text(n + r), this.renderTags(), this.headerInfoRendered || this.model.get("artist").getPageNameData().done(_.bind(function(e) {
                            e.MusicBrainzID ? (t.Services.Flattr.renderEmbedButton($(".flattr-artist-button"), e.MusicBrainzID), $(".flattr-artist-button").mouseover(_.bind(function(n) {
                                var r = $(n.currentTarget),
                                    i = [new t.Views.Tooltips.Flattr({
                                        mbID: e.MusicBrainzID,
                                        artistName: this.model.get("artist").get("ArtistName")
                                    })],
                                    s = "flattr:artist",
                                    o = {
                                        delay: 300,
                                        notchSize: 6,
                                        sticky: !1
                                    };
                                i.length && (o.views = i, o.$attached = r, o.tooltipKey = s, o.tooltipClass = "flattr-tip", t.trigger("tooltip:open", o))
                            }, this))) : $(".social-digest-button").addClass("shift-mid"), t.Services.Twitter.getTwitterShareMessage("song", this.model.get("song"), "http://grooveshark.com/" + this.model.get("song").toUrl().replace("#!/", ""), !0).then(_.bind(function(e, n) {
                                $(".twitter-share-button").attr("data-text", e).attr("data-url", n).attr("data-via", "grooveshark"), t.Services.Twitter.parseWidgets()
                            }, this)), t.Services.Facebook.parseWidgets(), t.Services.Google.parseWidgets()
                        }, this)), this.headerInfoRendered = !0
                    },
                    onSuggestTagsClick: function() {
                        var e = this.model.get("song");
                        t.trigger("lightbox:open", "suggestTags", {
                            id: e.get("SongID"),
                            type: "song"
                        })
                    },
                    onAddSongClick: function(e) {
                        var n = $(e.currentTarget),
                            r = new t.Models.PlayContext;
                        return r.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), n.jjmenu(e, this.model.get("song").getAddContextMenu({
                            playContext: r
                        }), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: n
                        }), !1
                    },
                    onPlayMoreOptions: function(e) {
                        var n = $(e.currentTarget),
                            r = new t.Models.PlayContext;
                        return r.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), n.jjmenu(e, this.getPlayMenu([this.model.get("songID")], {
                            playContext: r
                        }), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: n
                        }), !1
                    },
                    onPlayStation: function(e) {
                        var n = this.model.get("songID");
                        t.trigger("player:startRadioWithSongs", [n]), t.trigger("guts:gatrack", "player", "autoplayOn", "song"), t.trigger("guts:forcelog", "autoplayOn", {
                            autoplay: 0,
                            autoplayType: "song"
                        }), t.trigger("guts:begincontext", {
                            autoplay: 0,
                            autoplayType: "song"
                        })
                    },
                    renderTags: function() {
                        this.fetchTemplate("/shared/genreTags").done(_.bind(this.onTagsTemplate, this))
                    },
                    onTagsTemplate: function(e) {
                        if (this.destroyed) return;
                        $("#page-header").find(".tags").html(this.renderTemplate(e, {
                            tags: this.model.get("song").get("Tags")
                        }));
                        var t = $("#page-header .stat-summary"),
                            n = $("#page-header").find(".genre-link"),
                            r = n.length - 1;
                        while (r > 0 && t.height() > 35) _.$one(n.get(r--)).remove();
                        $(".tags").css("visibility", "visible")
                    },
                    selectAllInputText: function(e) {
                        $(e.currentTarget).select()
                    },
                    shareBtnClick: function(e) {
                        var n = $(e.currentTarget).data("service");
                        t.trigger("lightbox:open", "share", {
                            type: "song",
                            id: this.model.get("songID"),
                            service: n
                        })
                    },
                    editBtnClick: function() {
                        t.trigger("lightbox:open", "editSongs", {
                            songs: [this.model.get("song")]
                        })
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var r;
                t.Views.Pages.Artist = t.Views.Pages.ItemPage.extend({
                    templatePath: "artist",
                    pageType: "artist",
                    defaultSubpage: "profile",
                    events: {
                        "click .dropdown": "onDropdownClick",
                        "click .suggest-tags": "onSuggestTagsClick",
                        "click .play-top-songs": "onPlayTopSongsClick",
                        "click .play-station": "onPlayStationClick",
                        "click .description-more": "onBioMoreClick",
                        "click .actions-primary .edit": "onEditClick",
                        "click .actions-primary .upload": "onUploadClick",
                        "click .sample-artist": "onSampleClick",
                        "click #artist-image": "loadImageAttribution",
                        "click #show-more-albums": "toggleExtraAlbums"
                    },
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.childViews = [], this.model.set({
                            artistID: this.options.params.id,
                            subpage: _.orEqual(this.options.params.subpage, this.defaultSubpage),
                            subpageData: this.options.params.subpageData
                        }), r = this.model.get("appModel"), t.Models.Artist.get(this.options.params.id).done(_.bind(this.onArtistLoad, this)).fail(_.bind(this.pageLoadFailed, this)), this.modelBindings.push(r.on("change:user", this.onUserChange, this)), t.on("manatee:broadcastInfo", this.onBroadcastInfo, this), (gsConfig.runMode == "dev" || gsConfig.runMode == "staging") && this.model.get("appModel").get("user").get("subscription").canHideAds() && ($("#live-user-count").text(0), t.on("manatee:pageCurrentVisitorCount", _.bind(this.updateLiveUserCount, this)), t.Services.SWF.ready.done(_.bind(function() {
                            t.Services.SWF.getPageCurrentVisitorCount(this.options.params.id, t.Models.Comment.COMMENT_PAGE_TYPES.ARTIST)
                        }, this)))
                    },
                    wasFirstPage: function() {
                        this.model.get("subpage") == "broadcast" && (this.playOnLoad = !0)
                    },
                    updatePageParams: function(e) {
                        var t = _.orEqual(e.subpage, this.defaultSubpage),
                            n = e.subpageData;
                        if (t === "broadcast" && this.broadcastView && this.broadcastView.broadcastID === n) this.broadcastView.broadcastID && (this.rendered = "broadcast-" + this.broadcastView.broadcastID);
                        else if (t !== this.model.get("subpage") || t == "broadcast") this.model.set({
                            subpage: t,
                            subpageData: n
                        }), this.cleanupChildViews(), this.render()
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this));
                        var e = this.model.get("artist");
                        e && t.Services.SWF.chatReady.done(function() {
                            e.unsubscribeFromStatus("artistPage")
                        }), this.broadcastView && (this.broadcastView.cleanupChildViews(), this.broadcastView.destroy(!1))
                    },
                    onArtistLoad: function(e) {
                        if (this.destroyed) return;
                        var n = this.model.get("subpage");
                        n !== "comment" && n !== "activity" && n !== "broadcast" && this.correctUrl(e, n == "profile" ? "" : n), e.subscribeToStatus("artistPage"), this.model.set({
                            artist: e,
                            fbUrl: "http://grooveshark.com/" + e.toUrl().replace("#!/", ""),
                            artistImage: e.getImageURL(200)
                        }), this.render(), e.on("change", _.bind(this.onArtistChange, this)), e.on("change:currentBroadcastID", this.onCurrentBroadcastChange, this);
                        var r = this.model.get("appModel").get("user");
                        r.getFavoritesByType("Artists"), e.get("currentBroadcastID") === null && this.playOnLoad && (this.playOnLoad = !1, t.Services.SWF.ready.then(function() {
                            t.Services.SWF.attemptAutoRestoreQueue()
                        }))
                    },
                    onArtistChange: function() {
                        var e = this.model.get("artist"),
                            t = e.changedAttributes();
                        if (t.hasOwnProperty("CoverArtFilename")) {
                            var n = this.model.get("subpage") === "profile" ? 120 : 40;
                            $("#page-cover-art").attr("src", e.getImageURL(n)), $("#artist-image").removeClass("default-art")
                        }
                        t.hasOwnProperty("isFavorite") && this.handleFavoriteButtonChange(e), t.hasOwnProperty("pageNameData") && this.updateHeaderInfo(!0)
                    },
                    onUserChange: function() {
                        this.rendered = !1, this.render()
                    },
                    subscribeSongChanges: function() {
                        var e = this.model.get("artist"),
                            t = e.get("songs");
                        t && (t.off("add remove", this.onSongsChange, this), t.on("add remove", this.onSongsChange, this), this.modelBindings.push(t))
                    },
                    onSongsChange: function() {
                        if (this.model.get("subpage") === "songs") {
                            this.songsRendered = !1;
                            var e = _.chainLoading(),
                                t = this.model.get("artist");
                            e.push(t.getAllAlbums()), e.push(t.getSongs().done(e.bind(this.renderSongs, this)))
                        } else if (this.model.get("subpage") === "profile") {
                            var n = this.model.get("artist").get("songs"),
                                r = n && n.length ? n.length : "-";
                            $("#song-count").text(r)
                        }
                    },
                    subscribeAlbumChanges: function() {
                        var e = this.model.get("artist"),
                            t = e.get("albums");
                        this.currentAlbumsLength = t.length, t && (t.off("add remove", this.onAlbumsChange, this), t.on("add remove", this.onAlbumsChange, this), this.modelBindings.push(t))
                    },
                    onAlbumsChange: function() {
                        var e = this.model.get("artist").get("albums");
                        if (this.model.get("subpage") === "albums" && e.length !== this.currentAlbumsLength) this.albumsRendered = !1, this.renderAlbums(e);
                        else if (this.model.get("subpage") === "profile") {
                            var t = e && e.length ? e.length : "-";
                            $("#album-count").text(t);
                            var n = _.chainLoading();
                            this.loadDigest(n, "topAlbums")
                        }
                        this.currentAlbumsLength = e.length
                    },
                    onCurrentBroadcastChange: function(e, n) {
                        if (this.destroyed) return;
                        n && e.get("isOwnerOfCurrentBroadcast") ? !this.model.get("section") && this.model.get("subpage") === "profile" && t.Models.Broadcast.fetchRealtimeBroadcast(n) : (this.showCurrentBroadcast(), this.playOnLoad && (this.playOnLoad = !1, t.Services.SWF.ready.then(function() {
                            t.Services.SWF.attemptAutoRestoreQueue()
                        })))
                    },
                    showCurrentBroadcast: function() {
                        if (this.destroyed || !this.indexRendered) return;
                        var e = this.$el.find(".current-artist-broadcast"),
                            r = this.model.get("artist"),
                            i = r.get("currentBroadcastID"),
                            s = r.get("isOwnerOfCurrentBroadcast"),
                            o = n.model.get("user"),
                            u = t.isLoggedInUserOwnerOfArtist(r.get("ArtistID")) && o.get("Context").type == "artist" && o.get("Context").artist === r;
                        if (i && s) {
                            var a = t.Models.Broadcast.getCached(i);
                            a ? this.fetchTemplate("/user/now_broadcasting").done(_.bind(function(t) {
                                if (!this.destroyed) {
                                    var i = n.model.get("player").get("currentQueue"),
                                        s = i ? i.get("currentBroadcast") : null;
                                    e.find("#current-broadcast").html(this.renderTemplate(t, {
                                        artist: r,
                                        broadcast: a,
                                        isLoggedInOwner: u,
                                        currentBroadcast: s
                                    })), e.removeClass("hide")
                                }
                            }, this)) : t.Models.Broadcast.fetchRealtimeBroadcast(i)
                        } else e.addClass("hide")
                    },
                    render: function() {
                        if (!this.model.get("artist") || this.rendered === this.model.get("subpage")) return;
                        this.indexRendered = !1, this.songsRendered = !1, this.albumsRendered = !1, this.headerInfoRendered = !1;
                        var e = _.chainLoading(),
                            n = this.model.get("artist"),
                            i = this.handleCommentSubpage(),
                            s = this.handleFeedEventSubpage(),
                            o = this.model.get("subpage"),
                            u = o,
                            a = this.model.get("subpageData");
                        this.broadcastView && o !== "broadcast" && (this.broadcastView.cleanupChildViews(), this.broadcastView.destroy(!1), this.broadcastView = null), e.push(r.get("user").getOwnedArtists()), o !== "singleFeedEvent" && o !== "broadcast" && (e.add(n.getArtistDetails()), e.push(this.fetchTemplate("index").done(e.bind(this.renderIndex, this))));
                        switch (o) {
                        case "albums":
                            e.push(n.getAllAlbums()), e.push(n.getAlbums().done(e.bind(function() {
                                this.renderAlbums(n.get("albums")), this.subscribeAlbumChanges()
                            }, this)));
                            break;
                        case "followers":
                            e.push(n.getFollowers().done(e.bind(this.renderFollowers, this)));
                            break;
                        case "similar-artists":
                            e.push(n.getSimilarArtists().done(e.bind(this.renderSimilar, this)));
                            break;
                        case "events":
                            e.push(n.getSongkickEvents().done(e.bind(this.renderEvents, this)));
                            break;
                        case "singleFeedEvent":
                            this.highlightSingleFeedEvent(s, e);
                            break;
                        case "broadcast":
                            var f = n.get("currentBroadcastID");
                            if (!this.broadcastView || a && this.broadcastView.broadcastID !== a || this.broadcastView.broadcastID !== f) {
                                this.broadcastView && (this.broadcastView.cleanupChildViews(), this.broadcastView.destroy(!1), this.broadcastView = null);
                                var l = new Backbone.Model({
                                    appModel: this.model.get("appModel"),
                                    owner: n
                                });
                                this.broadcastView = new t.Views.Pages.Broadcast({
                                    el: this.el,
                                    broadcastID: a,
                                    model: l
                                }), this.broadcastView.render()
                            } else u = "broadcast-" + this.broadcastView.broadcastID;
                            break;
                        default:
                            e.push(n.getSongs().done(e.bind(this.renderSongs, this)).done(e.bind(this.subscribeSongChanges, this))), e.push(n.getPageNameData().always(e.bind(this.updateHeaderInfo, this)).done(e.bind(this.subscribeSongChanges, this))), t.Services.GUTS && t.Services.GUTS.currentGroup !== 1 && e.done(e.bind(function() {
                                if (n.get("hasReleaseTypes") && n.get("IsVerified")) {
                                    function e(e) {
                                        return e.attributes.CoverArtFilename && e.attributes.ReleaseType == 1 && e.attributes.songs && e.attributes.songs.length
                                    }
                                    function r(e) {
                                        return e.attributes.CoverArtFilename && (e.attributes.ReleaseType == 2 || e.attributes.ReleaseType == 3) && e.attributes.songs && e.attributes.songs.length
                                    }
                                    var i = n.get("albums").filter(e);
                                    i.length < 6 && i.concat(n.get("albums").filter(r));
                                    if (i.length > 1) {
                                        var s = $("#artist-albums"),
                                            o = $("#artist-albums-header"),
                                            u, a;
                                        u = new t.Models.Collections.Albums(_.first(i, 6)), o.removeClass("hide"), a = new t.Views.AlbumGrid({
                                            el: s[0],
                                            collection: u,
                                            itemsPerRow: 6,
                                            smallGrid: !0,
                                            itemHeight: 142,
                                            addStreamType: "TYPE_DEFAULT"
                                        }), this.childViews.push(a), a.on("rendered", function() {
                                            t.trigger("page:redrawUpdate")
                                        }), a.render()
                                    }
                                }
                            }, this)), e.done(_.bind(n.getCurrentStatus, n)), this.loadDigest(e, "similarArtists"), this.loadDigest(e, "topAlbums"), this.loadComments(this.model.get("artistID"), e, i), this.loadActivity(e)
                        }
                        this.setTitle([this.model.get("artist").getTitle(!0), _.ucwords(o)]), this.rendered = u
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || !this.model.get("artist")) return;
                        this.$el.html(this.renderTemplate(e)), this.indexRendered = !0;
                        if (this.model.get("subpage") == "profile" || this.model.get("subpage") == "albums") {
                            var n = $("<div></div>").attr("id", "capital-300x250-placeholder").attr("class", "capital").attr("data-capital-width", 300).attr("data-capital-height", 250).attr("data-capital-id", "capital-300x250").css({
                                position: "relative"
                            });
                            $("#capital-160x600-placeholder").after(n).remove()
                        }
                        t.trigger("page:ready", this), this.showCurrentBroadcast(), this.model.get("defaultSidebarTab") === "activity" && this.showActivity()
                    },
                    updateHeaderInfo: function(e) {
                        var n = this.model.get("artist"),
                            r = n.get("albums"),
                            i = n.get("songs"),
                            s = n.get("pageNameData"),
                            o = $("#artist-bio"),
                            u = '<a class="description-more" data-translate-text="MORE_ELLIPSIS" data-artist-id="' + n.get("ArtistID") + '">' + _.getString("MORE_ELLIPSIS") + "</a>",
                            a = t.Services.GUTS && t.Services.GUTS.currentTest && t.Services.GUTS.currentTest.name == "profileCard",
                            f = a ? 90 : 40;
                        if (this.destroyed || !this.indexRendered || !this.model.get("artist") || !s || this.headerInfoRendered && e !== !0) return;
                        if (s.hasOwnProperty("Bio") && (e || o.text() === "")) {
                            var l = s.Bio;
                            o.text(l);
                            while (o.height() > f) o.text(l = l.substr(0, l.lastIndexOf(" "))), o.append(" " + u);
                            o.css("visibility", "visible"), $("#artist-bio-test").removeClass("hide")
                        }
                        var c = s.FavoriteCount > 0 ? s.FavoriteCount : "-",
                            h = r && r.length > 0 ? r.length : "-",
                            p = i && i.length ? i.length : "-";
                        c === "-" ? $("#follower-count").parents("li").hide() : $("#follower-count").text(c), $("#album-count").text(h), $("#song-count").text(p), this.renderTags(), s.URLs && (s.URLs.fb && $("#artist-facebook").removeClass("hide").attr("href", "http://facebook.com/" + encodeURI(s.URLs.fb)), s.URLs.tw && $("#artist-twitter").removeClass("hide").attr("href", "http://twitter.com/" + encodeURI(s.URLs.tw)), s.URLs.wp && $("#artist-wikipedia").removeClass("hide").attr("href", encodeURI(s.URLs.wp)), s.URLs.site && $("#artist-site").removeClass("hide").attr("href", function() {
                            var e = encodeURI(s.URLs.site);
                            return e = e.length && e.indexOf("http://") != 0 && e.indexOf("https://") != 0 ? "http://" + e : e, e
                        }())), this.headerInfoRendered || (s.MusicBrainzID ? (t.Services.Flattr.renderEmbedButton($(".flattr-artist-button"), s.MusicBrainzID), $(".flattr-artist-button").mouseover(_.bind(function(e) {
                            var n = $(e.currentTarget),
                                r = [new t.Views.Tooltips.Flattr({
                                    mbID: s.MusicBrainzID,
                                    artistName: this.model.get("artist").get("ArtistName")
                                })],
                                i = "flattr:artist",
                                o = {
                                    delay: 300,
                                    notchSize: 6,
                                    sticky: !1,
                                    notchX: 26
                                };
                            r.length && (o.views = r, o.$attached = n, o.tooltipKey = i, o.tooltipClass = "flattr-tip", t.trigger("tooltip:open", o))
                        }, this))) : $(".social-digest-button").addClass("shift-mid"), t.Services.Twitter.getTwitterShareMessage("artist", n, "http://grooveshark.com/" + n.toUrl().replace("#!/", ""), !0).then(_.bind(function(e, n) {
                            $(".twitter-share-button").attr("data-text", e + " " + n).attr("data-url", n).attr("data-via", "grooveshark"), t.Services.Twitter.parseWidgets()
                        }, this)), t.Services.Facebook.parseWidgets(), t.Services.Google.parseWidgets()), this.headerInfoRendered = !0
                    },
                    renderTags: function() {
                        this.fetchTemplate("/shared/genreTags").done(_.bind(this.onTagsTemplate, this))
                    },
                    onTagsTemplate: function(e) {
                        if (this.destroyed) return;
                        $("#page-header").find(".tags").html(this.renderTemplate(e, {
                            tags: this.model.get("artist").get("Tags")
                        }));
                        var t = $("#page-header .stat-summary"),
                            n = $("#page-header").find(".genre-link"),
                            r = n.length - 1;
                        while (r > 0 && t.height() > 35) _.$one(n.get(r--)).remove();
                        $(".tags").css("visibility", "visible")
                    },
                    loadDigest: function(e, t) {
                        var n = e.bind(this.renderDigest, this, t),
                            r = this.model.get("artist"),
                            i = !0;
                        switch (t) {
                        case "similarArtists":
                            e.add(r.getSimilarArtists());
                            break;
                        case "topAlbums":
                            e.add(r.getAlbums().done(e.bind(this.subscribeAlbumChanges, this)));
                            break;
                        default:
                            i = !1
                        }
                        i && e.push(this.fetchTemplate("/shared/digests/" + t + "Digest").done(n))
                    },
                    renderDigest: function(e, n) {
                        if (this.destroyed || !this.indexRendered) return;
                        var r = $("#" + e + "-digest");
                        if (r.length) {
                            var i = {
                                artist: this.model.get("artist")
                            };
                            switch (e) {
                            case "topAlbums":
                                i.albums = _.toArray(i.artist.get("albums")).sort(t.Models.Album.popularSort).slice(0, 10).sort(t.Models.Album.prettySort).slice(0, 3);
                                break;
                            case "similarArtists":
                                i.artists = _.toArray(i.artist.get("similarArtists")).slice(0, 3)
                            }
                            r.html(this.renderTemplate(n, i))
                        }
                    },
                    renderSongs: function(e) {
                        function h(e) {
                            a = e;
                            if (e) r.addClass("hide"), n.removeClass("hide"), d.length && (d.find(".play-button").closest("li").removeClass("hide"), d.find(".add-button").closest("li").removeClass("hide"), d.find(".sort-button").closest("li").removeClass("hide"), d.find(".edit-button").closest("li").removeClass("hide"), d.find(".songs").addClass("active"), d.find(".albums").removeClass("active"));
                            else {
                                if (!i) {
                                    var s = new t.Models.Collections.Albums([]);
                                    s.add(u.get("fullAlbums").models.concat().sort(_.getModelSort("Year")));
                                    var o = _.first(u.get("songs").models.concat().sort(_.getModelSort("Popularity")), 10),
                                        f = new t.Models.Album({
                                            _noCache: !0,
                                            AlbumName: "Popular Songs",
                                            AlbumID: -1,
                                            ArtistName: u.get("ArtistName"),
                                            ArtistID: u.get("ArtistID"),
                                            songs: new t.Models.Collections.Songs(o),
                                            songsLoaded: !0
                                        });
                                    s.unshift(f), i = new t.Views.ArtistAlbumGrid({
                                        el: r[0],
                                        collection: s
                                    }), l.childViews.push(i), i.render()
                                }
                                r.removeClass("hide"), n.addClass("hide"), d.length && (d.find(".play-button").closest("li").addClass("hide"), d.find(".add-button").closest("li").addClass("hide"), d.find(".sort-button").closest("li").addClass("hide"), d.find(".edit-button").closest("li").addClass("hide"), d.find(".songs").removeClass("active"), d.find(".albums").addClass("active"))
                            }
                            e || d.find("input.filter").val("")
                        }
                        if (this.destroyed || !this.indexRendered || !this.model.get("artist") || !e || this.songsRendered) return;
                        var n = $("#grid.profile"),
                            r = $("#secondaryGrid"),
                            i, s, o, u = this.model.get("artist"),
                            a = !1,
                            f = !1,
                            l = this,
                            c = new t.Models.PlayContext(this.model.get("artist"));
                        c.addStreamType(t.Models.PlayContext.TYPE_DEFAULT);
                        if (n.length) {
                            n.empty();
                            var p = new t.Models.Collections.Songs(e.models);
                            p.comparator = _.getModelSort("Popularity"), p.sort(), s = new t.Views.SongGrid({
                                el: n[0],
                                collection: p,
                                columns: t.Views.SongGrid.columnsNoArtistTrack,
                                excludeCells: ["artist", "track-num"],
                                playContext: new t.Models.PlayContext(this.model.get("artist"))
                            }), this.childViews.push(s), _.defer(_.bind(s.render, s));
                            var d = $(".grid-toolbar");
                            if (s && d.length) {
                                var v = ["play", "add", "sort"],
                                    m = t.isLoggedInUserOwnerOfArtist(this.model.get("artist").get("ArtistID"));
                                m && v.unshift("edit"), f && v.push("switchView"), v.push("filterSearch"), o = new t.Views.GridToolbar({
                                    el: d[0],
                                    model: this.model,
                                    gridView: s,
                                    page: "artist",
                                    buttons: v,
                                    playContext: c
                                }), m && this.$el.on("click", ".edit-button", _.bind(function() {
                                    var e = s.selectedItems.models;
                                    e.length || (e = s.visibleCollection.models), t.trigger("lightbox:open", "editSongs", {
                                        songs: e
                                    })
                                }, this)), f && (d.on("click", ".albums", _.bind(function() {
                                    h.call(this, !1)
                                }, this)), d.on("click", ".songs", _.bind(function() {
                                    h.call(this, !0)
                                }, this)), o.on("filterChanged", _.bind(function(e) {
                                    e.length && !a && h.call(this, !0)
                                }, this))), this.childViews.push(o), o.on("rendered", function() {
                                    h.call(this, !f), o.off("rendered")
                                }), o.render()
                            }
                        }
                        $("#song-count").text(e.length), this.songsRendered = !0, this.updateHeaderInfo()
                    },
                    renderAlbums: function(e) {
                        var n = this.model.get("artist");
                        e = e || n.get("albums");
                        if (this.destroyed || !this.indexRendered || !this.model.get("artist") || !e || this.albumsRendered) return;
                        if (!e.length) {
                            this.fetchTemplate("empty_albums").done(_.bind(function(e) {
                                $("#column1").html(this.renderTemplate(e))
                            }, this));
                            return
                        }
                        var r = [],
                            i = [],
                            s = $("#grid.albums"),
                            o = $("#artist-albums"),
                            u = t.Models.User.getCached(t.getLoggedInUserID()),
                            a = u.get("subscription").canHideAds() ? 6 : 4,
                            f, l, c, h;
                        s.length && s.empty(), o.empty();
                        if (n.get("hasReleaseTypes")) {
                            var p = function(e, n, s) {
                                    var u, f, l;
                                    return u = $(document.createElement("div")), f = $(document.createElement("h2")), f.attr("DATA-TRANSLATE-TEXT", e), f.html(_.getString(e)), l = document.createElement("div"), l.className = "grid-albums-vertical", u.append(f[0]), u.append(l), s && o.append(['<div class="show-more-albums-wrapper">', '<a id="show-more-albums" data-translate-text="SHOW_MORE_ALBUMS">', _.getString("SHOW_MORE_ALBUMS"), "</a></div>"].join("")), o.append(u[0]), c = new t.Views.AlbumGrid({
                                        el: l,
                                        collection: n,
                                        itemsPerRow: a,
                                        addStreamType: "TYPE_DEFAULT",
                                        showYear: !0
                                    }), i.push(f), r.push(c), {
                                        gridView: c,
                                        header: f
                                    }
                                };

                            function d(e) {
                                var t = e.attributes.Year;
                                return t ? 1e4 - t : 0
                            }
                            var v = new t.Models.Collections.Albums(n.get("fullAlbums").filter(t.Models.Album.hasSongsFilter)),
                                m = new t.Models.Collections.Albums(n.get("singlesEPs").filter(t.Models.Album.hasSongsFilter)),
                                g = new t.Models.Collections.Albums(n.get("others").filter(t.Models.Album.hasSongsFilter));
                            v.length && (v.comparator = d, v.sort(), p("FULL_ALBUMS", new t.Models.Collections.Albums(v.models))), m.length && (m.comparator = d, m.sort(), p("SINGLES_EPS", new t.Models.Collections.Albums(m.models)));
                            if (g.length) {
                                this.extraGridContents = g.models;
                                var y = p("OTHERS", new t.Models.Collections.Albums(this.extraGridContents), v.length || m.length);
                                this.extraGridView = y.gridView, this.extraGridViewHeader = y.header
                            }
                        } else e = _.filter(e.filter(t.Models.Album.verifiedishFilter), t.Models.Album.hasSongsFilter), h = new t.Models.Collections.Albums(e), h.comparator = t.Models.Album.experimentalNiftyComparator, h.sort(), c = new t.Views.AlbumGrid({
                            el: s[0],
                            collection: h,
                            itemsPerRow: a,
                            addStreamType: "TYPE_DEFAULT",
                            showYear: !0
                        }), r.push(c), o.hide(), s.removeClass("hide");
                        var b = $(".grid-toolbar"),
                            w = this;
                        if (r.length && b.length) {
                            var E = new t.Views.GridToolbar({
                                el: b[0],
                                gridView: r[0],
                                page: "artist",
                                buttons: ["filterSearch"]
                            });
                            E.on("filterChanged", function(e) {
                                e.length && w.showExtraAlbums(!0), r[1] instanceof t.Views.Grid && (i[0][(r[0].visibleCollection.length ? "remove" : "add") + "Class"]("hide"), r[1].filter(e), i[1][(r[1].visibleCollection.length ? "remove" : "add") + "Class"]("hide"), r[2] instanceof t.Views.Grid && (r[2].filter(e), i[2][(r[2].visibleCollection.length ? "remove" : "add") + "Class"]("hide")))
                            }), r.push(E)
                        }
                        if (r.length) {
                            for (f = 0, l = r.length; f < l; f++) this.childViews.push(r[f]), r[f].render();
                            r.length > 2 ? this.showExtraAlbums(!1) : this.showExtraAlbums(!0)
                        }
                        $("#album-count").text(this.model.get("artist").get("albums").length), this.albumsRendered = !0
                    },
                    renderEvents: function() {
                        if (this.destroyed || !this.model.get("artist") || !this.indexRendered || this.model.get("subpage") !== "events") return;
                        var e = $("#grid.events"),
                            n;
                        if (e.length) {
                            e.empty();
                            var r = this.model.get("artist").get("songkickEvents");
                            n = new t.Views.EventGridTall({
                                el: e[0],
                                collection: new t.Models.Collections.Events(r.models),
                                header: !1
                            }), this.childViews.push(n), n.render()
                        }
                        var i = $(".grid-toolbar");
                        if (n && i.length) {
                            var s = new t.Views.GridToolbar({
                                el: i[0],
                                model: this.model,
                                gridView: n,
                                page: "artist",
                                buttons: ["filterSearch"]
                            });
                            this.childViews.push(s), s.render()
                        }
                    },
                    renderVideos: function() {},
                    renderFollowers: function() {
                        if (this.destroyed || !this.model.get("artist") || !this.indexRendered || this.model.get("subpage") !== "followers") return;
                        var e = this.model.get("artist").get("followers"),
                            n = this.model.get("appModel").get("user");
                        if (!e) return;
                        $("#grid").empty();
                        var r = n.get("subscription").canHideAds() ? 3 : 2,
                            i = new t.Views.UserArtistGrid({
                                el: $("#grid")[0],
                                itemsPerRow: r,
                                collection: e
                            });
                        this.childViews.push(i), i.render(), $("#comments").hide()
                    },
                    onDropdownClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getOptionMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            keepState: t
                        })
                    },
                    renderSimilar: function() {
                        if (this.destroyed || !this.model.get("artist") || !this.indexRendered || this.model.get("subpage") !== "similar-artists") return;
                        $("#grid").empty();
                        var e = this.model.get("artist").get("similarArtists");
                        if (!e.length) {
                            this.fetchTemplate("empty_similar").done(_.bind(function(e) {
                                $("#grid").html(this.renderTemplate(e))
                            }, this));
                            return
                        }
                        var n = new t.Views.ArtistGridProfileCard({
                            el: $("#grid")[0],
                            collection: e
                        });
                        this.childViews.push(n), n.render()
                    },
                    onBioMoreClick: function(e) {
                        var n = t.Models.Artist.getCached($(e.currentTarget).data("artistId")),
                            r = n.get("pageNameData");
                        t.trigger("lightbox:open", "bio", {
                            artist: n,
                            profileData: r
                        })
                    },
                    onPlayStationClick: function(e) {
                        t.trigger("player:radio", !0, null, {
                            seeds: [this.model.get("artistID")],
                            seedArtistWeightRange: [110, 130],
                            secondaryArtistWeightModifier: .75
                        }), t.trigger("guts:gatrack", "player", "autoplayOn", "artist"), t.trigger("guts:forcelog", "autoplayOn", {
                            autoplay: 0,
                            autoplayType: "artist"
                        }), t.trigger("guts:begincontext", {
                            autoplay: 0,
                            autoplayType: "artist"
                        })
                    },
                    onPlayTopSongsClick: function(e) {
                        if (this.destroyed || !this.indexRendered || !this.model.get("artist") || !this.model.get("artist").get("topSongs")) return;
                        t.trigger("player:addSongs", this.model.get("artist").get("topSongs").first(6), -3, !0, null, !1)
                    },
                    onSampleClick: function(e) {
                        var n = $(e.currentTarget),
                            r = t.Models.Artist.getCached(n.data("artistId"));
                        r.getTopSongs().done(_.bind(function(e) {
                            var n = !this.model.get("appModel").get("player").get("currentQueue").get("activeSong");
                            t.trigger("player:addSongs", e.first(3), t.Services.SWF.playSpecialIndexes.LAST, n, null, !1)
                        }, this))
                    },
                    toggleExtraAlbums: function(e) {
                        return this.extraAlbumsOpen ? this.showExtraAlbums(!1) : this.showExtraAlbums(!0), this.extraGridView && this.extraGridView.recalculateScrollOffset(), !1
                    },
                    showExtraAlbums: function(e) {
                        if (!this.extraGridView || !this.extraGridViewHeader) return;
                        e ? ($("#show-more-albums").data("translateText", "SHOW_LESS_ALBUMS").text(_.getString("SHOW_LESS_ALBUMS")), this.extraGridView.collection.reset(this.extraGridContents), this.extraGridView.$el.removeClass("hide"), this.extraGridViewHeader.removeClass("hide")) : ($("#show-more-albums").data("translateText", "SHOW_MORE_ALBUMS").text(_.getString("SHOW_MORE_ALBUMS")), this.extraGridView.collection.reset([]), this.extraGridView.$el.addClass("hide"), this.extraGridViewHeader.addClass("hide")), this.extraAlbumsOpen = e
                    },
                    getOptionMenu: function() {
                        var e = this.model.get("artist"),
                            r = n.model.get("user"),
                            i = [];
                        return t.isLoggedInUserOwnerOfArtist(e.get("ArtistID")) || i.push({
                            title: _.getString("CLAIM_ARTIST"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    r.claimArtist(e)
                                }
                            }
                        }), i
                    },
                    onSuggestTagsClick: function() {
                        var e = this.model.get("artist");
                        t.trigger("lightbox:open", "suggestTags", {
                            id: e.get("ArtistID"),
                            type: "artist"
                        })
                    },
                    onEditClick: function() {
                        t.trigger("lightbox:open", "editArtist", {
                            artist: this.model.get("artist")
                        })
                    },
                    onUploadClick: function() {
                        t.trigger("lightbox:open", "upload", {
                            artist: this.model.get("artist")
                        })
                    },
                    loadImageAttribution: function() {
                        var e = this.model.get("artist");
                        if (!e.attributes.hasOwnProperty("CoverArtFilename")) return;
                        e.getImageAttribution().done(function(n) {
                            var r = '<div id="artist-art-attribution"><img src="' + e.getImageURL(500) + '"></div>';
                            n && n.URL && (r += '<p><a href="' + n.URL + '" target="_blank" data-translate-text="IMAGE_SOURCE">' + _.getString("IMAGE_SOURCE") + "</a></p>"), t.trigger("lightbox:open", {
                                _type: "artistAttribution",
                                view: {
                                    headerHTML: e.escape("ArtistName"),
                                    messageHTML: r
                                }
                            })
                        })
                    },
                    onBroadcastInfo: function(e, t) {
                        var r = this.model.get("artist");
                        if (!e || !e.get("activeStatus") || (r && r.get("currentBroadcastID")) !== t || r && !r.get("isOwnerOfCurrentBroadcast")) return;
                        this.showCurrentBroadcast(), this.playOnLoad && (this.playOnLoad = !1, n.model.get("user").joinBroadcast(t, r))
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var n;
                t.Views.Pages.Album = t.Views.Pages.ItemPage.extend({
                    templatePath: "album",
                    pageType: "album",
                    defaultSubpage: "profile",
                    events: {
                        "click .suggest-tags": "onSuggestTagsClick",
                        "click .actions-primary .edit": "onEditClick",
                        "click #show-more-songs": "toggleExtraSongs",
                        "click .actions-primary .upload": "onUploadClick"
                    },
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.childViews = [], this.extraGridView = null, this.extraSongsOpen = !1, this.model.set({
                            albumID: this.options.params.id,
                            subpage: _.orEqual(this.options.params.subpage, this.defaultSubpage)
                        }), n = this.model.get("appModel"), t.Models.Album.get(this.model.get("albumID")).done(_.bind(this.onAlbumLoad, this)).fail(_.bind(this.pageLoadFailed, this)), n.on("change:user", this.onUserChange, this), (gsConfig.runMode == "dev" || gsConfig.runMode == "staging") && this.model.get("appModel").get("user").get("subscription").canHideAds() && ($("#live-user-count").text(0), t.on("manatee:pageCurrentVisitorCount", this.updateLiveUserCount, this), t.Services.SWF.ready.done(_.bind(function() {
                            t.Services.SWF.getPageCurrentVisitorCount(this.options.params.id, t.Models.Comment.COMMENT_PAGE_TYPES.ALBUM)
                        }, this)))
                    },
                    updatePageParams: function(e) {
                        var t = _.orEqual(e.subpage, this.defaultSubpage);
                        t !== this.model.get("subpage") && (this.model.set({
                            subpage: t
                        }), this.cleanupChildViews(), this.render())
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this)), t.off("manatee:pageCurrentVisitorCount", null, this)
                    },
                    onAlbumLoad: function(e) {
                        if (this.destroyed) return;
                        var n = this.model.get("subpage");
                        this.correctUrl(e, n == "profile" ? "" : n), this.model.set({
                            album: e,
                            artist: new t.Models.Artist({
                                ArtistID: e.get("ArtistID"),
                                ArtistName: e.get("ArtistName")
                            }),
                            fbUrl: "http://grooveshark.com/" + e.toUrl().replace("#!/", ""),
                            albumImage: e.getImageURL(200)
                        }), e.on("change:CoverArtFilename", _.bind(function() {
                            var t = this.model.get("subpage") === "profile" ? 80 : 40;
                            $("#page-cover-art").attr("src", e.getImageURL(t))
                        }, this)), e.on("change:AlbumName", _.bind(function() {
                            $("h1", "#page-header").attr("title", e.get("AlbumName")).text(e.get("AlbumName"))
                        }, this)), this.render()
                    },
                    onUserChange: function() {
                        this.rendered = !1, this.render()
                    },
                    subscribeSongChanges: function() {
                        var e = this.model.get("album"),
                            t = e.get("songs");
                        t && (t.off("add remove", this.onSongsChange, this), t.on("add remove", this.onSongsChange, this))
                    },
                    onSongsChange: function() {
                        console.log("got songs change on album page", this.model.get("subpage"), this.model.get("album").get("songs")), this.model.get("subpage") === "profile" && (this.songsRendered = !1, this.model.get("album").getSongs().always(_.bind(this.renderSongs, this)).always(_.bind(this.updateSongCount, this)))
                    },
                    render: function() {
                        if (!this.model.get("album") || this.rendered === this.model.get("subpage")) return;
                        this.indexRendered = !1, this.headerInfoRendered = !1;
                        var e = _.chainLoading(),
                            t = this.model.get("album"),
                            r = this.model.get("artist"),
                            i = this.handleCommentSubpage();
                        e.push(n.get("user").getOwnedArtists()), e.push(this.fetchTemplate("index").always(e.bind(this.renderIndex, this)));
                        switch (this.model.get("subpage")) {
                        case "fans":
                            this.renderFans();
                            break;
                        case "videos":
                        case "related-albums":
                            e.push(r.getAlbums()), e.add(r.getAllAlbums().done(e.bind(function(e) {
                                this.renderAlbums(e), this.subscribeAlbumChanges()
                            }, this)));
                            break;
                        case "merch":
                            break;
                        default:
                            e.push(t.getSongs().always(e.bind(this.renderSongs, this)).always(e.bind(this.updateSongCount, this)).done(e.bind(this.subscribeSongChanges, this))), r.get("songs") && this.loadDigest(e, "topArtistSongs"), this.loadDigest(e, "similarArtists"), this.loadComments(this.model.get("albumID"), e, i)
                        }
                        e.add(t.getPageNameData().always(e.bind(this.updateCounts, this))), this.rendered = this.model.get("subpage"), this.model.get("album") && this.setTitle([this.model.get("album").getTitle(!0), _.ucwords(this.model.get("subpage"))])
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || !this.model.get("album")) return;
                        var n = this.model.get("album");
                        this.$el.html(this.renderTemplate(e)), this.indexRendered = !0, this.songsRendered = !1, this.albumsRendered = !1, t.trigger("page:ready", this)
                    },
                    renderSongs: function(e) {
                        if (this.destroyed || !this.indexRendered || !this.model.get("album") || !e || this.model.get("subpage") != "profile" || this.songsRendered) return;
                        var n = this.model.get("album"),
                            r, i = $("#grid.profile"),
                            s = n.get("ArtistID"),
                            o = n.get("songs"),
                            u = n.get("extraSongs"),
                            a = new t.Models.PlayContext(n);
                        a.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), o ? o = new t.Models.Collections.Songs(o.models) : o = new t.Models.Collections.Songs([]), t.isLoggedInUserOwnerOfArtist(s) && u && u.length && (o.add(u.models), u = new t.Models.Collections.Songs([])), i.length && (i.empty(), r = new t.Views.SongGrid({
                            el: i[0],
                            collection: o,
                            columns: t.Views.SongGrid.columnsNoAlbum,
                            excludeCells: ["album"],
                            playContext: a
                        }), this.childViews.push(r), r.render());
                        var f = $("#extra-grid.profile");
                        f.length && u && u.length && (this.extraGridView = new t.Views.SongGrid({
                            el: f[0],
                            collection: new t.Models.Collections.Songs([]),
                            header: !1,
                            columns: t.Views.SongGrid.columnsNoAlbum,
                            excludeCells: ["album"],
                            playContext: a
                        }), this.childViews.push(this.extraGridView), this.extraGridView.render(), $("#show-more-songs").removeClass("hide"), this.showExtraSongs(this.extraSongsOpen));
                        var l = $(".grid-toolbar");
                        if (r && l.length) {
                            var c = new t.Views.GridToolbar({
                                el: l[0],
                                model: this.model,
                                gridView: u && u.length ? [r, this.extraGridView] : [r],
                                page: "album",
                                buttons: ["play", "add", "sort", "filterSearch"],
                                playContext: a
                            });
                            this.childViews.push(c), c.render()
                        }
                        this.songsRendered = !0
                    },
                    renderAlbums: function(e) {
                        e = e || this.model.get("artist").get("albums");
                        if (this.destroyed || !this.indexRendered || !this.model.get("artist") || !e || this.albumsRendered) return;
                        var n = [],
                            r = [],
                            i = $("#grid.albums"),
                            s = $("#artist-albums"),
                            o = t.Models.User.getCached(t.getLoggedInUserID()),
                            u = o.get("subscription").canHideAds() ? 6 : 4,
                            a, f, l, c;
                        i.length && i.empty(), s.empty();
                        var h = e.any(function(e) {
                            return e.get("ReleaseType") > 0
                        });
                        if (h) {
                            var p = function(e, i) {
                                    var o, a, f;
                                    o = $(document.createElement("div")), a = $(document.createElement("h2")), a.attr("DATA-TRANSLATE-TEXT", e), a.html(_.getString(e)), f = document.createElement("div"), f.className = "grid-albums-vertical", o.append(a[0]), o.append(f), s.append(o[0]), l = new t.Views.AlbumGrid({
                                        el: f,
                                        collection: i,
                                        itemsPerRow: u,
                                        addStreamType: "TYPE_DEFAULT"
                                    }), r.push(a), n.push(l)
                                },
                                d, v, m;
                            e.comparator = function(e) {
                                return m = e.get("Year"), m ? 1e4 - m : 0
                            }, e.sort();
                            var g = e.filter(function(e) {
                                return v = e.get("Flags") || 0, e.attributes.ReleaseType == 1 && e.attributes.ReleaseStatus == 1 && e.attributes.IsVerified && (v >= 512 || v === 0)
                            }),
                                y = e.filter(function(e) {
                                    return d = e.attributes.ReleaseType, v = e.attributes.Flags || 0, (d == 2 || d == 3) && e.attributes.IsVerified && e.attributes.ReleaseStatus == 1 && (v >= 512 || v === 0)
                                }),
                                b = e.filter(function(e) {
                                    return d = e.get("ReleaseType"), v = e.get("Flags"), d > 3 || !d || !e.get("IsVerified") || v < 512 && v > 0
                                });
                            g.length && p("FULL_ALBUMS", new t.Models.Collections.Albums(g)), y.length && p("SINGLES_EPS", new t.Models.Collections.Albums(y)), b.length && !g.length && !y.length && p("OTHERS", new t.Models.Collections.Albums(b))
                        } else e = e.filter(t.Models.Album.verifiedishFilter), c = new t.Models.Collections.Albums(e), c.comparator = t.Models.Album.experimentalNiftyComparator, c.sort(), l = new t.Views.AlbumGrid({
                            el: i[0],
                            collection: c,
                            itemsPerRow: u,
                            addStreamType: "TYPE_DEFAULT"
                        }), n.push(l), s.hide(), i.removeClass("hide");
                        var w = $(".grid-toolbar");
                        if (n.length && w.length) {
                            var E = new t.Views.GridToolbar({
                                el: w[0],
                                gridView: n[0],
                                page: "artist",
                                buttons: ["filterSearch"]
                            });
                            E.on("filterChanged", function(e) {
                                n[1] instanceof t.Views.Grid && (r[0][(n[0].visibleCollection.length ? "remove" : "add") + "Class"]("hide"), n[1].filter(e), r[1][(n[1].visibleCollection.length ? "remove" : "add") + "Class"]("hide"), n[2] instanceof t.Views.Grid && (n[2].filter(e), r[2][(n[2].visibleCollection.length ? "remove" : "add") + "Class"]("hide")))
                            }), n.push(E)
                        }
                        if (n.length) for (a = 0, f = n.length; a < f; a++) this.childViews.push(n[a]), n[a].render();
                        $("#album-count").text(e.length), this.albumsRendered = !0
                    },
                    subscribeAlbumChanges: function() {
                        var e = this.model.get("artist"),
                            t = e.get("albums");
                        t && (t.off("add remove", this.onAlbumsChange, this), t.on("add remove", this.onAlbumsChange, this))
                    },
                    renderFans: function(e) {
                        if (this.destroyed || !this.indexRendered || !this.model.get("album")) return;
                        var n = this.model.get("album");
                        n.getFans().always(_.bind(function() {
                            var e = $("#grid");
                            e.empty();
                            var r = new t.Views.UserArtistGrid({
                                el: e[0],
                                collection: n.get("fans")
                            });
                            this.childViews.push(r), r.render()
                        }, this))
                    },
                    loadDigest: function(e, t) {
                        var n = e.bind(this.renderDigest, this, t),
                            r = this.model.get("album"),
                            i = this.model.get("artist"),
                            s = !0;
                        switch (t) {
                        case "similarArtists":
                            e.add(i.getSimilarArtists());
                            break;
                        case "topArtistSongs":
                            e.add(i.getSongs());
                            break;
                        default:
                            s = !1
                        }
                        s && e.push(this.fetchTemplate("/shared/digests/" + t + "Digest").done(n))
                    },
                    renderDigest: function(e, n) {
                        if (this.destroyed || !this.indexRendered) return;
                        var r = $("#" + e + "-digest");
                        if (r.length) {
                            var i = {
                                album: this.model.get("album"),
                                artist: this.model.get("artist")
                            };
                            switch (e) {
                            case "topArtistSongs":
                                var s = this.model.get("artist");
                                i.songs = _.toArray(s.get("songs")).sort(t.Models.Song.popularSort).slice(0, 3);
                                break;
                            case "similarArtists":
                                i.artists = _.toArray(this.model.get("artist").get("similarArtists")).slice(0, 3)
                            }
                            r.html(this.renderTemplate(n, i))
                        }
                    },
                    renderVideos: function(e) {},
                    updateSongCount: function(e) {
                        if (!e) return;
                        $("#song-count").text(e.length ? e.length : "-")
                    },
                    updateCounts: function(e) {
                        e || (e = {}), this.renderTags(), this.headerInfoRendered || this.model.get("artist").getPageNameData().done(_.bind(function(e) {
                            e.MusicBrainzID ? (t.Services.Flattr.renderEmbedButton($(".flattr-artist-button"), e.MusicBrainzID), $(".flattr-artist-button").mouseover(_.bind(function(n) {
                                var r = $(n.currentTarget),
                                    i = [new t.Views.Tooltips.Flattr({
                                        mbID: e.MusicBrainzID,
                                        artistName: this.model.get("artist").get("ArtistName")
                                    })],
                                    s = "flattr:artist",
                                    o = {
                                        delay: 300,
                                        notchSize: 6,
                                        sticky: !1
                                    };
                                i.length && (o.views = i, o.$attached = r, o.tooltipKey = s, o.tooltipClass = "flattr-tip", t.trigger("tooltip:open", o))
                            }, this))) : $(".social-digest-button").addClass("shift-mid"), t.Services.Twitter.getTwitterShareMessage("album", this.model.get("album"), "http://grooveshark.com/" + this.model.get("album").toUrl().replace("#!/", ""), !0).then(_.bind(function(e, n) {
                                $(".twitter-share-button").attr("data-text", e).attr("data-url", n).attr("data-via", "grooveshark"), t.Services.Twitter.parseWidgets()
                            }, this)), t.Services.Facebook.parseWidgets(), t.Services.Google.parseWidgets()
                        }, this)), this.headerInfoRendered = !0
                    },
                    toggleExtraSongs: function(e) {
                        return this.extraSongsOpen ? this.showExtraSongs(!1) : this.showExtraSongs(!0), this.extraGridView && this.extraGridView.recalculateScrollOffset(), !1
                    },
                    showExtraSongs: function(e) {
                        if (!this.extraGridView) return;
                        e ? ($("#show-more-songs").data("translateText", "SHOW_LESS_SONGS").text(_.getString("SHOW_LESS_SONGS")), this.extraGridView.collection.reset(this.model.get("album").get("extraSongs").toArray()), $("#extra-grid").removeClass("hide")) : ($("#show-more-songs").data("translateText", "SHOW_MORE_SONGS").text(_.getString("SHOW_MORE_SONGS")), this.extraGridView.collection.reset([]), $("#extra-grid").addClass("hide")), this.extraSongsOpen = e
                    },
                    renderTags: function() {
                        this.fetchTemplate("/shared/genreTags").done(_.bind(this.onTagsTemplate, this))
                    },
                    onSuggestTagsClick: function() {
                        var e = this.model.get("album");
                        t.trigger("lightbox:open", "suggestTags", {
                            id: e.get("AlbumID"),
                            type: "album"
                        })
                    },
                    onTagsTemplate: function(e) {
                        if (this.destroyed) return;
                        $("#page-header").find(".tags").prepend(this.renderTemplate(e, {
                            tags: this.model.get("album").get("Tags")
                        }));
                        var t = $("#page-header .stat-summary"),
                            n = $("#page-header").find(".genre-link"),
                            r = n.length - 1;
                        console.log(n);
                        while (r > 0 && t.height() > 35) _.$one(n.get(r--)).remove();
                        $(".tags").css("visibility", "visible")
                    },
                    onEditClick: function() {
                        t.trigger("lightbox:open", "editAlbum", {
                            album: this.model.get("album")
                        })
                    },
                    onUploadClick: function() {
                        t.trigger("lightbox:open", "upload", {
                            artist: this.model.get("artist"),
                            album: this.model.get("album")
                        })
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var r = "";
                t.Views.Pages.User = t.Views.Pages.ItemPage.extend({
                    templatePath: "user",
                    pageType: "user",
                    defaultSubpage: "profile",
                    events: {
                        "click .dropdown": "onDropdownClick",
                        "click .play-recent-songs": "onPlayRecentSongsClick",
                        "click .edit-profile": "openEditProfile",
                        "click .extra-options": "showExtraOptions",
                        "click .upload-music": "onUploadClick",
                        "click .create-playlist": "onCreatePlaylistClick",
                        "click .play-station": "onPlayStationClick"
                    },
                    initialize: function() {
                        var e = this.options.params.id;
                        if (e === 0) {
                            t.router.setHash("notFound");
                            return
                        }
                        this.rendered = !1, this.firstRender = !1, this.modelBindings = [], this.childViews = [], this.currentSong = null, this.playOnLoad = !1, this.currentAuthUser = n.model.get("user"), this.model.set({
                            userID: _.toInt(this.options.params.id),
                            subpage: _.orEqual(this.options.params.subpage, this.defaultSubpage),
                            section: _.orEqual(this.options.params.section, r),
                            recentSongs: []
                        }), t.Models.User.get(this.options.params.id).done(_.bind(this.onUserLoad, this)).fail(_.bind(this.pageLoadFailed, this)), n.model.on("change:user", _.bind(this.onUserChange, this, !0), this), this.currentAuthUser.on("change:currentBroadcastID", this.onAuthUserBroadcastChange, this), t.on("manatee:broadcastInfo", this.onBroadcastInfo, this), (gsConfig.runMode == "dev" || gsConfig.runMode == "staging") && this.model.get("appModel").get("user").get("subscription").canHideAds() && ($("#live-user-count").text(0), t.on("manatee:pageCurrentVisitorCount", _.bind(this.updateLiveUserCount, this)), t.Services.SWF.ready.done(_.bind(function() {
                            t.Services.SWF.getPageCurrentVisitorCount(this.options.params.id, t.Models.Comment.COMMENT_PAGE_TYPES.USER)
                        }, this)))
                    },
                    wasFirstPage: function() {
                        this.playOnLoad = !0
                    },
                    updatePageParams: function(e) {
                        var t = this.model.get("subpage"),
                            n = this.model.get("section"),
                            i = _.orEqual(e.subpage, this.defaultSubpage),
                            s = e.section == "follow" ? r : _.orEqual(e.section, r),
                            o = s !== n,
                            u = i !== t;
                        if (u || o) {
                            this.model.set({
                                subpage: i,
                                section: s
                            });
                            var a = ["", "favorites", "profile"],
                                f = ["playlists", "subscribed"],
                                l = !o && s == "collection" && _.indexOf(a, i) != -1 && _.indexOf(a, i) != -1,
                                c = !u && _.indexOf(f, s) != -1 && _.indexOf(f, n) != -1;
                            l && this.gridToolbarView ? i == "favorites" ? this.$el.find(".btn.favorites").trigger("click") : this.$el.find(".btn.all-music").trigger("click") : c ? this.handlePlaylistSubpageChange(o) : s === "broadcast" && this.broadcastView && this.broadcastView.broadcastID === i ? this.broadcastView.broadcastID && (this.rendered = "broadcast-" + this.broadcastView.broadcastID) : (this.cleanupChildViews(), this.render())
                        }
                    },
                    showPlayingSong: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        var n = $("#current-user-song");
                        return
                    },
                    onCurrentBroadcastChange: function(e, n) {
                        if (this.destroyed) return;
                        n && e.get("isOwnerOfCurrentBroadcast") ? !this.model.get("section") && this.model.get("subpage") === "profile" && t.Models.Broadcast.fetchRealtimeBroadcast(n) : (this.showCurrentBroadcast(), this.playOnLoad && (this.playOnLoad = !1, t.Services.SWF.ready.then(function() {
                            t.Services.SWF.attemptAutoRestoreQueue()
                        })))
                    },
                    showCurrentBroadcast: function() {
                        if (this.destroyed || !this.indexRendered) return;
                        var e = this.$el.find(".current-user-broadcast"),
                            r = this.model.get("user"),
                            i = t.getLoggedInUserID() == r.id,
                            s = r.get("currentBroadcastID");
                        if (s) {
                            var o = t.Models.Broadcast.getCached(s);
                            o ? this.fetchTemplate("now_broadcasting").done(_.bind(function(t) {
                                if (!this.destroyed) {
                                    var s = n.model.get("player").get("currentQueue"),
                                        u = s ? s.get("currentBroadcast") : null;
                                    $("#current-broadcast").html(this.renderTemplate(t, {
                                        user: r,
                                        broadcast: o,
                                        isLoggedInOwner: i,
                                        currentBroadcast: u
                                    })), e.removeClass("hide")
                                }
                            }, this)) : t.Models.Broadcast.fetchRealtimeBroadcast(s)
                        } else e.addClass("hide")
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this)), t.off("manatee:friendsStatus", null, this), n.model.off("change:user", null, this);
                        var e = this.model.get("userID");
                        t.Services.SWF.chatReady.done(function() {});
                        var r = this.model.get("user");
                        r && (r.off(null, null, this), r.unsubscribeFromStatus("userPage")), this.broadcastView && (this.broadcastView.cleanupChildViews(), this.broadcastView.destroy(!1))
                    },
                    onUserLoad: function(e) {
                        var n = !this.model.get("section") && this.model.get("subpage") == "profile";
                        if (this.destroyed) return;
                        var i = this.model.get("section") == "follow",
                            s = this.model.get("subpage"),
                            o = this.model.get("section") == "follow" ? r : this.model.get("section"),
                            u = o;
                        o == "music" && (u = "collection");
                        if (o == "collection" && s == "favorites" || o == "playlists" && s == "subscribed") u += "/" + s;
                        u !== "comment" && u !== "activity" && u !== "broadcast" && !i && this.correctUrl(e, n ? "" : u), e.subscribeToStatus("userPage"), this.model.set({
                            user: e
                        }), this.firstRender && this.render(), t.getLoggedInUserID() === this.model.get("userID") && this.onUserChange(!1), e.on("change:isFavorite", this.handleFavoriteButtonChange, this), e.on("change:nowPlayingSong", this.showPlayingSong, this), e.on("change:currentBroadcastID", this.onCurrentBroadcastChange, this);
                        var a = e.get("currentBroadcastID"),
                            f = e.get("isOwnerOfCurrentBroadcast"),
                            l = !1;
                        if (a && f) {
                            var c = t.Models.Broadcast.getCached(a);
                            if (!c || !c.get("capacityLimitReached")) l = !0
                        } else l = !0;
                        var h = gsConfig.specialBroadcastUserID && e.get("UserID") === gsConfig.specialBroadcastUserID;
                        h && (l = !1), l ? t.Services.SWF.chatReady.done(function() {
                            e.subscribeToStatus("userPage")
                        }) : e.getCurrentStatus(), i && e.get("isLoggedIn") && t.trigger("lightbox:open", {
                            _type: "followUser",
                            view: {
                                headerHTML: _.getString("LB_FOLLOW_USER_TITLE", {
                                    user: e.escape("Name")
                                }),
                                messageHTML: _.getString("LB_FOLLOW_USER_DESC", {
                                    user: e.escape("Name")
                                }),
                                buttonsRight: [{
                                    label: "FOLLOW",
                                    className: "follow btn-primary"
                                }]
                            },
                            callbacks: {
                                ".follow": function() {
                                    t.Models.User.get(this.model.get("userID")).done(function(e) {
                                        toggleFavorite(e.get("isFavorite"), "User"), t.trigger("lightbox:close")
                                    })
                                }
                            }
                        }), e.get("currentBroadcastID") === null && this.playOnLoad && (this.playOnLoad = !1, t.Services.SWF.ready.then(function() {
                            t.Services.SWF.attemptAutoRestoreQueue()
                        }))
                    },
                    updateSongCount: function() {
                        var e = this.model.get("user"),
                            t = e.get("library");
                        $("#song-count").text(t ? t.length : 0)
                    },
                    onUserChange: function(e) {
                        var t = this.model.get("appModel"),
                            n = t.get("user");
                        n !== this.currentAuthUser && (this.currentAuthUser.off(null, null, this), this.currentAuthUser = n, n.on("change:broadcast", this.onAuthUserBroadcastChange, this), this.onAuthUserBroadcastChange()), n.get("UserID") === this.model.get("userID") && n.on("change:library", this.updateSongCount, this), e && (this.rendered = !1, this.renderedSubpage = !1, this.firstRender && this.render())
                    },
                    onAuthUserBroadcastChange: function() {
                        this.showCurrentBroadcast()
                    },
                    render: function() {
                        this.firstRender = !0;
                        var e = this.model.get("user"),
                            n = this.model.get("section"),
                            r = this.model.get("subpage");
                        if (!e || this.rendered === n && this.renderedSubpage === r) return;
                        this.broadcastView && n !== "broadcast" && (this.broadcastView.cleanupChildViews(), this.broadcastView.destroy(!1), this.broadcastView = null);
                        if (r === "fans" || r === "following" || r === "followers" || r === "notifications") {
                            this.correctUrl(this.model.get("user"), r);
                            return
                        }
                        if (this.model.get("section") === "community" && r === "profile") {
                            this.correctUrl(this.model.get("user"), "");
                            return
                        }
                        var i = this.handleCommentSubpage(),
                            s = this.handleFeedEventSubpage();
                        n = this.model.get("section"), r = this.model.get("subpage"), this.indexRendered = !1, this.collectionRendered = !1, this.playlistsRendered = !1;
                        var o = _.chainLoading();
                        n !== "singleFeedEvent" && n !== "broadcast" && o.push(this.fetchTemplate("index").done(o.bind(this.renderIndex, this)));
                        switch (n) {
                        case "playlists":
                            r == "subscribed" ? o.push(e.getFavoritesByType("Playlists").done(o.bind(this.renderPlaylists, this))) : o.push(e.getPlaylists().done(o.bind(this.renderPlaylists, this)));
                            break;
                        case "collection":
                            o.push(e.getLibrary().done(o.bind(this.renderCollection, this)));
                            break;
                        case "followers":
                            o.push(e.getFollowers().done(o.bind(this.renderFollowers, this)));
                            break;
                        case "following":
                            r == "artists" ? o.push(e.getFavoritesByType("Artists").done(o.bind(this.renderFollowing, this))) : o.push(e.getFavoritesByType("Users").done(o.bind(this.renderFollowing, this)));
                            break;
                        case "notifications":
                            o.push(this.fetchTemplate("notifications")), o.push(e.getNotifications().done(o.bind(this.renderNotifications, this)));
                            break;
                        case "listens":
                            o.push(this.fetchTemplate("listens")), o.push(e.getListens().done(o.bind(this.renderListens, this)));
                            break;
                        case "singleFeedEvent":
                            this.highlightSingleFeedEvent(s, o);
                            break;
                        case "broadcast":
                            if (!r || r === "profile") r = null;
                            if (!this.broadcastView || r && this.broadcastView.broadcastID !== r || this.broadcastView.broadcastID !== e.get("currentBroadcastID")) {
                                this.broadcastView && (this.broadcastView.cleanupChildViews(), this.broadcastView.destroy(!1), this.broadcastView = null);
                                var u = new Backbone.Model({
                                    appModel: this.model.get("appModel"),
                                    owner: this.model.get("user")
                                });
                                this.broadcastView = new t.Views.Pages.Broadcast({
                                    el: this.el,
                                    broadcastID: r,
                                    model: u
                                }), this.broadcastView.render()
                            } else n = "broadcast-" + this.broadcastView.broadcastID;
                            break;
                        default:
                            o.push(e.getRecentListens().done(o.bind(this.renderRecentListens, this))), o.add(e.getPageNameData().done(o.bind(this.updateHeaderInfo, this))), o.push(e.getPlaylists(!1, 1e3).done(o.bind(this.renderTopPlaylists, this))), o.add(e.getTopArtists()), o.push(this.fetchTemplate("/shared/topArtists").done(o.bind(this.renderTopArtists, this))), this.loadComments(this.model.get("userID"), o, i), this.loadActivity(o)
                        }
                        this.setTitle([this.model.get("user").getTitle(!0), _.ucwords(this.model.get("section"))]), this.rendered = n, this.renderedSubpage = r
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || !this.model.get("user")) return;
                        var n = this.model.get("appModel"),
                            r = this.model.get("user"),
                            i = this.model.get("subpage"),
                            s = this.model.get("section");
                        this.$el.html(this.renderTemplate(e)), this.indexRendered = !0, this.capitalSwap(), this.model.get("defaultSidebarTab") === "activity" && this.showActivity(), this.showPlayingSong(), this.showCurrentBroadcast(), setTimeout(_.bind(function() {
                            t.trigger("page:ready", this)
                        }, this), 0)
                    },
                    renderRecentListens: function(e) {
                        var n = $("#recent-songs-grid"),
                            r = this.model.get("user"),
                            i = new t.Models.PlayContext(r);
                        i.addStreamType(t.Models.PlayContext.TYPE_ACTIVITY);
                        if (e && e.length && n.length) {
                            n.empty();
                            var s = e.first(10),
                                o = new t.Views.SongGridTall({
                                    el: n[0],
                                    collection: new t.Models.Collections.Songs(s),
                                    header: !1,
                                    playContext: i
                                });
                            this.childViews.push(o), o.render(), this.model.set("recentSongs", s), this.showPlayingSong()
                        } else $(".play-recent-songs", "#column1").hide(), this.getEmptySuggestions("empty/listens", n)
                    },
                    renderTopArtists: function(e) {
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || this.model.get("subpage") !== "profile") return;
                        var t = _.toArray(this.model.get("user").get("topArtists")),
                            n = $("#page-header"),
                            r = n.find(".top-artists").prepend(this.renderTemplate(e, {
                                artists: t
                            })),
                            i = n.find(".stat-summary"),
                            s = n.find(".top-artist-container"),
                            o = s.length - 1;
                        if (!t.length) {
                            $("#user-top-artists").remove();
                            return
                        }
                        while (o > 0 && i.height() > 40) _.$one(s.get(o--)).remove();
                        $(".top-artist-container:last").find("span").remove(), r.css("visibility", "visible")
                    },
                    renderFollowing: function(e) {
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || this.model.get("section") !== "following") return;
                        var n = this.model.get("section"),
                            r = this.model.get("user"),
                            i = this.model.get("appModel").get("user"),
                            s = $("#user-profile-grid"),
                            o = i.get("subscription").canHideAds() ? 3 : 2;
                        s.length && (s.empty(), this.followingGridView = new t.Views.UserArtistGrid({
                            el: s[0],
                            collection: e,
                            itemsPerRow: o
                        }), this.childViews.push(this.followingGridView), this.followingGridView.render());
                        var u = $(".grid-toolbar");
                        u.length && (this.gridToolbarView = new t.Views.GridToolbar({
                            el: u[0],
                            model: this.model,
                            gridView: this.followingGridView,
                            page: this.model.get("subpage") == "profile" ? "following" : "artists",
                            buttons: this.model.get("user").id == t.getLoggedInUserID() ? ["inviteFriends", "btnGroupNav", "filterSearch"] : ["btnGroupNav", "filterSearch"],
                            btnGroupNavInfo: {
                                pages: ["following", "artists"],
                                labels: ["FRIENDS", "ARTISTS"],
                                classNames: ["friends", "artists"]
                            },
                            onButtonClick: function(e) {
                                var n = $(e.currentTarget);
                                return n.hasClass("friends") ? t.router.setHash(r.toUrl("following")) : n.hasClass("artists") && t.router.setHash(r.toUrl("following/artists")), !1
                            }
                        }), this.childViews.push(this.gridToolbarView), this.gridToolbarView.render());
                        if (!e || !e.length) {
                            this.fetchTemplate("empty/following").done(_.bind(this.renderGenericEmpty, this, {
                                user: r,
                                subpage: this.model.get("subpage")
                            }));
                            return
                        }
                    },
                    renderFollowers: function() {
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || this.model.get("section") !== "followers") return;
                        $("#comments").hide();
                        var e = this.model.get("appModel").get("user"),
                            n = this.model.get("user"),
                            r = n.get("followers"),
                            i;
                        if (!r) return;
                        r.length || this.fetchTemplate("empty/followers").done(_.bind(this.renderGenericEmpty, this, {
                            titleLocale: "EMPTY_FOLLOWERS",
                            descLocale: "EMPTY_FOLLOWERS_DESC",
                            user: n
                        }));
                        var s = $("#user-profile-grid");
                        if (s.length) {
                            s.empty();
                            var o = e.get("subscription").canHideAds() ? 3 : 2;
                            i = new t.Views.UserArtistGrid({
                                el: s[0],
                                itemsPerRow: o,
                                collection: r
                            }), this.childViews.push(i), i.render()
                        }
                        var u = $(".grid-toolbar");
                        u.length && i && (this.gridToolbarView = new t.Views.GridToolbar({
                            el: u[0],
                            model: this.model,
                            gridView: i,
                            page: "followers",
                            buttons: ["filterSearch"]
                        }), this.childViews.push(this.gridToolbarView), this.gridToolbarView.render())
                    },
                    renderNotifications: function() {
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || this.model.get("section") !== "notifications") return;
                        $("#comments").hide();
                        var e = this.model.get("user").get("notifications");
                        if (!e) return;
                        e = e.getNormalized(this.model.get("user"));
                        var t = this.getTimeBasedGroups();
                        for (var n = 0, r = e.length; n < r; n++) {
                            while (e[n].timestamp < t[0].time) t.shift();
                            e[n].group = t[0].localeKey
                        }
                        var i = $("#user-profile-grid");
                        i.length && (i.empty(), this.fetchTemplate("notifications").always(_.bind(function(t) {
                            i.html(this.renderTemplate(t, {
                                notifications: e
                            }))
                        }, this)))
                    },
                    renderListens: function() {
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || this.model.get("section") !== "listens") return;
                        var e = this.model.get("user").get("listens");
                        if (!e) return;
                        var r = this.getTimeBasedGroups(),
                            i = [],
                            s = {},
                            o = {},
                            u = 0,
                            a = e.length,
                            f = !0,
                            l = null;
                        for (; u < a && r.length; u++) {
                            while (e[u].listenTime < r[0].time) r.shift(), f = !0;
                            f ? (i.push(r[0]), l = r[0], s[l.gridClass] = [e[u]], o[l.gridClass] = []) : s[l.gridClass].push(e[u]), o[l.gridClass][e[u].SongID] ? o[l.gridClass][e[u].SongID].push(e[u].listenDataKey) : o[l.gridClass][e[u].SongID] = [e[u].listenDataKey], f = !1
                        }
                        var c = $("#user-profile-grid"),
                            h = [];
                        if (c.length) {
                            var p = this.model.get("user");
                            c.empty(), this.fetchTemplate("listens").done(_.bind(function(r) {
                                c.html(this.renderTemplate(r, {
                                    groups: i,
                                    listens: e
                                })), _.each(s, _.bind(function(r, i) {
                                    r = new t.Models.Collections.Songs(r);
                                    var s = function(r) {
                                            var s = n.model.get("user");
                                            if (s && p.get("UserID") == s.get("UserID")) {
                                                var u = [],
                                                    f = {},
                                                    l, c;
                                                r.each(function(e) {
                                                    u = u.concat(o[i][e.get("SongID")])
                                                }), t.Services.API.deleteUserListens(u), a.collection.remove(r.models);
                                                for (l = 0, c = u.length; l < c; l++) f[u[l]] = 1;
                                                for (l = 0; l < e.length; l++) f[e[l].listenDataKey] && e.splice(l--, 1)
                                            }
                                        },
                                        u = this.$el.find("." + i),
                                        a = new t.Views.SongGrid({
                                            el: u[0],
                                            collection: r,
                                            header: !1,
                                            canDelete: !0,
                                            onDelete: s,
                                            columns: t.Views.SongGrid.columnsNoTrack,
                                            excludeCells: ["track-num"]
                                        }),
                                        f = function(e) {
                                            var n = new t.Models.Collections.Songs;
                                            _.each(e, function(e) {
                                                n.push(t.Models.Song.getCached(e))
                                            }), a.collection.remove(n.models), s(n)
                                        };
                                    a.contextMenuExtra = {
                                        deleteListens: f
                                    };
                                    var l = [],
                                        c = _.debounce(function() {
                                            s(new t.Models.Collections.Songs(l)), l = []
                                        }, 2e3);
                                    a.$el.on("click", ".song-row-delete", function(e) {
                                        var n = $(e.currentTarget),
                                            r = n.data();
                                        if (r && r.songId) {
                                            var i = t.Models.Song.getCached(r.songId);
                                            l.push(i), a.collection.remove(i), c()
                                        }
                                    }), a.options.columns[4].minimumSize = 113, this.childViews.push(a), h.push(a), a.render()
                                }, this))
                            }, this))
                        }
                        var d = $(".grid-toolbar");
                        if (h.length && d.length) {
                            var v = new t.Views.GridToolbar({
                                el: d[0],
                                gridView: h[0],
                                page: "userListens",
                                buttons: ["filterSearch", "extraOptions"]
                            });
                            v.on("filterChanged", function(e) {
                                _.each(h, function(n) {
                                    n instanceof t.Views.Grid && (n.filter(e), n.$el.parent()[(n.visibleCollection.length ? "remove" : "add") + "Class"]("hide"))
                                })
                            }), this.childViews.push(v), v.render()
                        }
                    },
                    renderTopPlaylists: function() {
                        var e = !this.model.get("section") && this.model.get("subpage") == "profile";
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || !e) return;
                        var n = this.model.get("user"),
                            r = new t.Models.Collections.Playlists(n.get("playlists").toArray().sort(t.Models.Playlist.modifiedSort).slice(0, 4)),
                            i = $("#top-playlists-grid"),
                            s;
                        if (!r.length) return;
                        s = new t.Views.PlaylistGridSmall({
                            el: i[0],
                            collection: r,
                            header: !1
                        }), this.childViews.push(s), s.render(), $("#top-playlists").removeClass("hide")
                    },
                    renderBroadcasts: function(e) {
                        var n = !this.model.get("section") && this.model.get("subpage") == "profile";
                        if (this.destroyed || !this.model.get("user") || !this.indexRendered || !n) return;
                        var r = this.model.get("user"),
                            i = new t.Models.Collections.Broadcasts(r.get("broadcasts").toArray().sort(t.Models.Broadcast.recentSort).slice(0, 4)),
                            s = $("#recent-broadcasts-grid"),
                            o;
                        if (!i.length) return;
                        o = new t.Views.BroadcastGridSmall({
                            el: s[0],
                            collection: i,
                            header: !1
                        }), this.childViews.push(o), o.render(), $("#recent-broadcasts").removeClass("hide")
                    },
                    renderCollection: function(e) {
                        var n = this.model.get("user"),
                            r, i, s, o;
                        if (this.destroyed || this.collectionRendered || !n || !e || this.model.get("section") != "collection" && this.model.get("subpage") != "favorites") return;
                        if (!e.length) {
                            this.getEmptySuggestions();
                            return
                        }
                        var u = new t.Models.PlayContext(n);
                        n.id == t.getLoggedInUserID() && u.addStreamType(t.Models.PlayContext.TYPE_LIBRARY), r = $("#user-profile-grid");
                        if (r.length) {
                            r.empty();
                            var a = new t.Models.Collections.Songs(e.models);
                            a.comparator = _.getModelSort("TSAdded"), a.sort(), i = new t.Views.SongGrid({
                                el: r[0],
                                collection: a,
                                playContext: u
                            }), this.childViews.push(i), i.render()
                        }
                        o = $(".grid-toolbar");
                        if (i && o.length) {
                            this.gridToolbarView = new t.Views.GridToolbar({
                                el: o[0],
                                model: this.model,
                                gridView: i,
                                page: this.model.get("subpage") != "favorites" ? "userMusic" : "userMusicFavorites",
                                buttons: ["play", "add", "sort", "btnGroupNav", "filterSearch"],
                                btnGroupNavInfo: {
                                    pages: ["userMusic", "userMusicFavorites"],
                                    labels: ["ALL_MUSIC", "FAVORITES"],
                                    classNames: ["all-music", "favorites"]
                                },
                                onButtonClick: function(e) {
                                    var r = $(e.currentTarget);
                                    r.hasClass("favorites") ? t.router.setHash(n.toUrl("collection/favorites")) : r.hasClass("all-music") && t.router.setHash(n.toUrl("collection"))
                                },
                                playContext: u
                            });
                            if (n.id !== t.getLoggedInUserID()) {
                                var f = n.get("favoriteSongs");
                                if (!f || !f.length) f = [];
                                f instanceof Backbone.Collection && (f = f.models), this.gridToolbarView.options.favFilterFunction = function(e) {
                                    return _.indexOf(f, e) !== -1
                                }
                            }
                            this.childViews.push(this.gridToolbarView), this.gridToolbarView.render(), this.subpage == "favorites" && this.gridToolbarView.resetCollection(!0)
                        }
                        this.collectionRendered = !0
                    },
                    getEmptySuggestions: function(e, n) {
                        e = _.orEqual(e, "empty/collection"), n = _.orEqual(n, $("#column1"));
                        var r = this.model.get("user");
                        t.getLoggedInUserID() == r.get("UserID") ? r.getPersonalizedSongs(!0).done(_.bind(function(t) {
                            if (!t.length) {
                                this.getPopularSuggestions(e, n);
                                return
                            }
                            this.fetchTemplate(e).done(_.bind(this.renderEmptySuggestions, this, t, n))
                        }, this)) : this.fetchTemplate(e).done(_.bind(this.renderEmptySuggestions, this, [], n))
                    },
                    getPopularSuggestions: function(e, n) {
                        t.Services.API.popularGetSongsPreview().done(_.bind(function(r) {
                            var i = new t.Models.Collections.Songs(r.Songs.slice(0, 5));
                            this.fetchTemplate(e).done(_.bind(this.renderEmptySuggestions, this, i, n))
                        }, this))
                    },
                    renderEmptySuggestions: function(e, n, r) {
                        n.html(this.renderTemplate(r, {
                            user: this.model.get("user")
                        }));
                        if (!e || !e.length) return;
                        var i = 5;
                        this.model.get("section") !== "collection" && (i = 4);
                        var s = new t.Views.SongGridBlock({
                            itemsPerRow: 1,
                            axis: "x",
                            itemWidth: 140,
                            maximumVisibleItems: i,
                            el: n.find(".empty-suggestions"),
                            collection: new t.Models.Collections.Songs(e.first(i)),
                            mediumGrid: !0
                        });
                        this.childViews.push(s), s.render()
                    },
                    renderGenericEmpty: function(e, t) {
                        $("#column1").append(this.renderTemplate(t, e))
                    },
                    handlePlaylistSubpageChange: function(e) {
                        if (!e || !this.playlistsGridView) return !1;
                        var n = this.model.get("user"),
                            r = this.model.get("subpage"),
                            i = _.bind(function(e) {
                                if (this.destroyed || !this.model.get("user") || !e) return !1;
                                e = new t.Models.Collections.Playlists(e.models), e.comparator = t.Models.Playlist.modifiedSort, e.sort(), this.playlistsGridView.collection.reset(e.models)
                            }, this),
                            s = _.bind(function() {
                                if (this.destroyed) return !1;
                                r == "subscribed" ? ($(".grid-toolbar .btn.my-playlists").removeClass("active"), $(".grid-toolbar .btn.subscribed").addClass("active")) : ($(".grid-toolbar .btn.my-playlists").addClass("active"), $(".grid-toolbar .btn.subscribed").removeClass("active"))
                            }, this);
                        r == "subscribed" ? n.getFavoritesByType("Playlists").done(i).done(s) : n.getPlaylists().done(i).done(s)
                    },
                    renderPlaylists: function(e) {
                        var n = this.model.get("section"),
                            r = this.model.get("user"),
                            i = this.model.get("appModel").get("user"),
                            s, o;
                        if (this.destroyed || !this.model.get("user") || this.playlistsRendered || n != "playlists") return;
                        e = new t.Models.Collections.Playlists(e.models), e.comparator = t.Models.Playlist.modifiedSort, e.sort();
                        var u = i.get("subscription").canHideAds() ? 3 : 2;
                        s = $("#user-profile-grid"), s.length && (s.empty(), this.playlistsGridView = new t.Views.PlaylistGridSmall({
                            el: s[0],
                            collection: e,
                            itemsPerRow: u,
                            header: !1
                        }), this.childViews.push(this.playlistsGridView), this.playlistsGridView.render()), o = $(".grid-toolbar"), o.length && (this.gridToolbarView = new t.Views.GridToolbar({
                            el: o[0],
                            model: this.model,
                            gridView: this.playlistsGridView,
                            page: this.model.get("subpage") == "subscribed" ? "subscribedPlaylists" : "playlists",
                            buttons: this.model.get("user").id == t.getLoggedInUserID() ? ["newPlaylist", "btnGroupNav", "filterSearch", "sort"] : ["btnGroupNav", "filterSearch"],
                            btnGroupNavInfo: {
                                pages: ["playlists", "subscribedPlaylists"],
                                labels: ["MY_PLAYLISTS", "SUBSCRIBED"],
                                classNames: ["my-playlists", "subscribed"]
                            },
                            onButtonClick: function(e) {
                                var n = $(e.currentTarget);
                                return n.hasClass("my-playlists") ? t.router.setHash(r.toUrl("playlists")) : n.hasClass("subscribed") && t.router.setHash(r.toUrl("playlists/subscribed")), !1
                            }
                        }), this.childViews.push(this.gridToolbarView), this.gridToolbarView.render());
                        if (!e || !e.length) {
                            this.fetchTemplate("empty/playlists").done(_.bind(this.renderGenericEmpty, this, {
                                user: r,
                                subpage: this.model.get("subpage")
                            }));
                            return
                        }
                        this.playlistsRendered = !0
                    },
                    updateHeaderInfo: function(e) {
                        e || (e = {});
                        var t = this.model.get("user"),
                            n = e.LibrarySongCount > 0 ? e.LibrarySongCount : "0",
                            r = e.FollowedCount > 0 ? e.FollowedCount : "0",
                            i = e.PlaylistCount > 0 ? e.PlaylistCount : "0";
                        t.get("library") && (n = t.get("library").length), n === 1 ? $("#song-count").text(n).parent().find(".label").text(_.getString("SONG")).data("translateText", "SONG") : $("#song-count").text(n), t.get("playlists") && (i = t.get("playlists").length), i === 1 ? $("#playlist-count").text(i).parent().find(".label").text(_.getString("PLAYLIST")).data("translateText", "PLAYLIST") : $("#playlist-count").text(i)
                    },
                    onDropdownClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("userId");
                        t.jjmenu(e, this.getOptionsMenu(n), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        })
                    },
                    getOptionsMenu: function(e) {
                        var n = t.getLoggedInUserID(),
                            r = [];
                        return n == e && r.push({
                            title: _.getString("EDIT_PROFILE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.router.setHash("#!/settings")
                                }
                            },
                            customClass: "jj_menu_item_edit"
                        }), r
                    },
                    getTimeBasedGroups: function() {
                        var e = new Date,
                            t = [];
                        return e.setHours(0, 0, 0), t.push({
                            time: Math.floor(e.getTime() / 1e3),
                            localeKey: "TODAY",
                            gridClass: "today"
                        }), e.setDate(e.getDate() - 1), t.push({
                            time: Math.floor(e.getTime() / 1e3),
                            localeKey: "YESTERDAY",
                            gridClass: "yesterday"
                        }), e.setDate(e.getDate() - 6), t.push({
                            time: Math.floor(e.getTime() / 1e3),
                            localeKey: "LAST_WEEK",
                            gridClass: "last-week"
                        }), e = new Date, e.setHours(0, 0, 0), e.setMonth(e.getMonth() - 1), t.push({
                            time: Math.floor(e.getTime() / 1e3),
                            localeKey: "LAST_MONTH",
                            gridClass: "last-month"
                        }), t.push({
                            time: 0,
                            localeKey: "LONG_AGO",
                            gridClass: "long-ago"
                        }), t
                    },
                    onPlayRecentSongsClick: function(e) {
                        if (this.destroyed || !this.indexRendered || !this.model.get("recentSongs")) return;
                        var n = new t.Models.PlayContext;
                        n.addStreamType(t.Models.PlayContext.TYPE_DEFAULT), t.trigger("player:addSongs", this.model.get("recentSongs"), -3, !0, n, !1)
                    },
                    capitalSwap: function() {
                        var e = !this.model.get("section") && this.model.get("subpage") == "profile";
                        if (e) {
                            var t = $("<div></div>").attr("id", "capital-300x250-placeholder").attr("class", "capital").attr("data-capital-width", 300).attr("data-capital-height", 250).attr("data-capital-id", "capital-300x250").css({
                                position: "relative"
                            });
                            $("#capital-160x600-placeholder").after(t).remove()
                        }
                    },
                    openEditProfile: function() {
                        t.router.setHash("/settings")
                    },
                    showExtraOptions: function(e) {
                        var n = $(e.currentTarget),
                            r = [];
                        r.push({
                            title: _.getString("PLAYER_SHOW_SETTINGS"),
                            customClass: "jj_menu_item_gear",
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.router.setHash("/settings/preferences")
                                }
                            }
                        }), n.jjmenu(e, r, null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: n
                        }), n.addClass("active-context")
                    },
                    onUploadClick: function() {
                        this.model.get("user").id > 0 ? t.trigger("lightbox:open", "upload", {
                            userDefault: !0
                        }) : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_UPLOAD"),
                            onLogin: function() {
                                t.trigger("lightbox:open", "upload", {
                                    userDefault: !0
                                })
                            }
                        })
                    },
                    onCreatePlaylistClick: function() {
                        this.model.get("user").id > 0 ? t.trigger("lightbox:open", "createPlaylist") : t.trigger("lightbox:open", "login", {
                            message: _.getString("LB_LOGIN_MUST_LOGIN_TO_CREATE_PLAYLIST"),
                            onLogin: function() {
                                t.trigger("lightbox:open", "createPlaylist")
                            }
                        })
                    },
                    onPlayStationClick: function(e) {
                        $(e.currentTarget).data("artistId") && (t.trigger("player:radio", !0, null, {
                            seeds: [$(e.currentTarget).data("artistId")],
                            seedArtistWeightRange: [110, 130],
                            secondaryArtistWeightModifier: .75
                        }), t.trigger("guts:gatrack", "player", "autoplayOn", "artist"), t.trigger("guts:forcelog", "autoplayOn", {
                            autoplay: 0,
                            autoplayType: "artist"
                        }), t.trigger("guts:begincontext", {
                            autoplay: 0,
                            autoplayType: "artist"
                        }))
                    },
                    onBroadcastInfo: function(e, t) {
                        var r = this.model.get("user");
                        if (!e || !e.get("activeStatus") || (r && r.get("currentBroadcastID")) !== t || r && !r.get("isOwnerOfCurrentBroadcast")) return;
                        this.showCurrentBroadcast(), this.playOnLoad && (this.playOnLoad = !1, n.model.get("user").joinBroadcast(t, r))
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {}, t.Views.Pages.Playlist = t.Views.Pages.ItemPage.extend({
                    templatePath: "playlist",
                    pageType: "playlist",
                    defaultSubpage: "profile",
                    events: {
                        "click .dropdown": "onDropDownClick"
                    },
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.childViews = [], this.model.set({
                            playlistID: this.options.params.id,
                            subpage: _.orEqual(this.options.params.subpage, this.defaultSubpage)
                        }), t.Models.Playlist.get(this.options.params.id).done(_.bind(this.onPlaylistLoad, this)).fail(function() {
                            t.router.notFound()
                        }), (gsConfig.runMode == "dev" || gsConfig.runMode == "staging") && this.model.get("appModel").get("user").get("subscription").canHideAds() && ($("#live-user-count").text(0), t.on("manatee:pageCurrentVisitorCount", _.bind(this.updateLiveUserCount, this)), t.Services.SWF.ready.done(_.bind(function() {
                            t.Services.SWF.getPageCurrentVisitorCount(this.options.params.id, t.Models.Comment.COMMENT_PAGE_TYPES.PLAYLIST)
                        }, this)))
                    },
                    updatePageParams: function(e) {
                        var t = _.orEqual(e.subpage, this.defaultSubpage);
                        t !== this.model.get("subpage") && (this.model.set({
                            subpage: t
                        }), this.cleanupChildViews(), this.render())
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this))
                    },
                    onPlaylistLoad: function(e) {
                        if (this.destroyed) return;
                        var t = this.model.get("subpage");
                        this.correctUrl(e, t == "profile" ? "" : t), this.model.set({
                            playlist: e,
                            fbUrl: "http://grooveshark.com/" + e.toUrl().replace("#!/", ""),
                            playlistImage: e.getImageURL(200)
                        }), this.modelBindings.push(e), this.render();
                        var n = this.model.get("appModel").get("user");
                        e.on("change", this.playlistPropChange, this), e.on("change:isFavorite", _.bind(this.handleFavoriteButtonChange, this))
                    },
                    updatePlaylistName: function() {
                        var e = this.model.get("playlist"),
                            t = this.model.get("subpage");
                        $("#playlist-title").text(e.get("PlaylistName")), this.correctUrl(e, t == "profile" ? "" : t)
                    },
                    updatePlaylistDelete: function() {
                        this.model.get("playlist").get("isDeleted") ? $("#playlist-title").addClass("deleted") : $("#playlist-title").removeClass("deleted")
                    },
                    playlistPropChange: function(e) {
                        this.updatePlaylistSummary(), this.updatePlaylistDelete(), this.updatePlaylistName()
                    },
                    render: function() {
                        if (!this.model.get("playlist") || this.rendered === this.model.get("subpage")) return;
                        this.indexRendered = !1;
                        var e = _.chainLoading(),
                            n = this.model.get("playlist"),
                            r = this.handleCommentSubpage();
                        e.push(this.fetchTemplate("index").done(e.bind(this.renderIndex, this)));
                        switch (this.model.get("subpage")) {
                        case "subscribers":
                            e.push(n.getFans().done(e.bind(this.renderFans, this)));
                            break;
                        default:
                            e.push(n.getSongs().done(e.bind(this.renderSongs, this))), this.loadComments(this.model.get("playlistID"), e, r)
                        }
                        e.add(t.Models.User.get(n.get("UserID")).done(e.bind(function(t) {
                            this.model.set("owner", t), this.loadDigest(e, "playlist")
                        }, this))), this.loadDigest(e, "subscriber"), this.rendered = this.model.get("subpage"), this.setTitle([this.model.get("playlist").getTitle(!0), _.ucwords(this.model.get("subpage"))])
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || !this.model.get("playlist")) return;
                        var n = this.model.get("playlist");
                        this.$el.html(this.renderTemplate(e)), this.indexRendered = !0, this.songsRendered = !1, t.trigger("page:ready", this)
                    },
                    updatePlaylistSummary: function() {
                        if (!this.indexRendered) return;
                        var e = this.model.get("playlist"),
                            t = 0,
                            n = 0,
                            r = 0,
                            i = 0;
                        if (!e) return;
                        var s = e.get("songs");
                        s && (t = s.length), e.get("fans") && (r = e.get("fans").length), e.get("Collaborators") && (i = e.get("Collaborators").length), $("#subscribers-count").text(r), $("#collaborators-count").text(i)
                    },
                    loadDigest: function(e, n) {
                        var r = e.bind(this.renderDigest, this, n),
                            i = this.model.get("playlist"),
                            s = this.model.get("owner"),
                            o = !0;
                        switch (n) {
                        case "playlist":
                            e.add(s.getPlaylists(!1, 1e3));
                            break;
                        case "subscriber":
                            e.add(i.getFans());
                            break;
                        case "collaborators":
                            if (!s) e.add(t.Models.User.get(i.get("UserID")).done(e.bind(function(e) {
                                this.model.set("owner", e)
                            }, this)));
                            else {
                                var u = new $.Deferred;
                                e.add(u), u.resolve()
                            }
                        }
                        o && e.push(this.fetchTemplate("/shared/digests/" + n + "Digest").done(r))
                    },
                    renderDigest: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        var n = $("#" + e + "_digest");
                        if (n.length) {
                            var r = {
                                playlist: this.model.get("playlist")
                            },
                                i = this.model.get("owner");
                            switch (e) {
                            case "playlist":
                                r.playlists = _.toArray(i.get("playlists")).slice(0, 5), r.owner = i;
                                break;
                            case "subscriber":
                                r.users = _.toArray(r.playlist.get("fans")).slice(0, 5);
                                break;
                            case "collaborators":
                                r.isOwner = this.model.get("playlist").get("UserID") == this.model.get("appModel").get("user").id, r.owner = i, r.collaborators = _.toArray(this.model.get("playlist").get("Collaborators")).slice(0, 5)
                            }
                            n.html(this.renderTemplate(t, r))
                        }
                    },
                    renderSongs: function(e) {
                        if (this.destroyed || !this.indexRendered || !this.model.get("playlist") || !e || this.songsRendered || this.model.get("subpage") !== "profile") return;
                        var n, r = $("#grid.profile"),
                            i = this.model.get("playlist");
                        r.length && (r.empty(), n = new t.Views.SongGrid({
                            el: r[0],
                            collection: i.get("songs"),
                            playlist: i,
                            playContext: new t.Models.PlayContext(i),
                            canDragTo: function(e, t) {
                                return i.isEditable()
                            },
                            dropIsValid: function(e, t) {
                                return i.isEditable()
                            },
                            acceptDrop: function(e) {
                                var r = e.draggedItemsSource === this.cid;
                                return t.Models.Playlist.acceptDrop(i, e, n.lastDropIndex, r)
                            },
                            onDelete: function(e) {
                                if (i.isEditable()) {
                                    var t = [];
                                    _.forEach(e, function(e) {
                                        var n = i.get("songs").indexOf(e);
                                        n != -1 && t.push(n)
                                    }), t.length && i.removeSongs(t)
                                }
                            }
                        }), this.childViews.push(n), n.render());
                        var s = $(".grid-toolbar");
                        if (n && s.length) {
                            var o = i.isEditable() ? ["play", "add", "delete", "sort", "filterSearch"] : ["play", "add", "sort", "filterSearch"],
                                u = new t.Views.GridToolbar({
                                    el: s[0],
                                    model: this.model,
                                    gridView: n,
                                    page: "playlist",
                                    buttons: o,
                                    playContext: new t.Models.PlayContext(i)
                                });
                            this.childViews.push(u), u.render()
                        }
                        $("#song-count").text(e.length), this.songsRendered = !0
                    },
                    renderAlbums: function() {
                        if (this.destroyed || !this.indexRendered || !this.model.get("playlist") || !this.model.get("playlist").get("albums")) return;
                        var e = $("#grid.albums");
                        if (e.length) {
                            e.empty();
                            var n = new t.Views.AlbumGrid({
                                el: e[0],
                                collection: this.model.get("playlist").get("albums")
                            });
                            this.childViews.push(n), n.render()
                        }
                    },
                    renderFans: function() {
                        if (this.destroyed || !this.indexRendered || !this.model.get("playlist") || !this.model.get("playlist").get("fans")) return;
                        var e = $("#grid.subscribers");
                        if (e.length) {
                            e.empty();
                            var n = new t.Views.UserArtistGrid({
                                el: e[0],
                                itemsPerRow: 2,
                                collection: this.model.get("playlist").get("fans")
                            });
                            this.childViews.push(n), n.render()
                        }
                    },
                    onDropDownClick: function(e) {
                        var t = $(e.currentTarget);
                        t.jjmenu(e, this.getOptionsMenu(), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "contextmenu",
                            keepState: t
                        })
                    },
                    getOptionsMenu: function() {
                        var e = this.model.get("playlist"),
                            n = this.model.get("appModel").get("user"),
                            r = [];
                        if (!e) return;
                        var i = e.get("playlistID"),
                            s = e.get("PlaylistName");
                        return e.get("UserID") == n.get("UserID") && (r.push({
                            title: _.getString("RENAME"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "rename", {
                                        playlist: e
                                    })
                                }
                            },
                            customClass: "jj_menu_item_edit"
                        }), e.get("isDeleted") ? r.push({
                            title: _.getString("RESTORE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    n.restorePlaylist(e.get("PlaylistID"), !0)
                                }
                            },
                            customClass: "jj_menu_item_undo"
                        }) : r.push({
                            title: _.getString("DELETE"),
                            action: {
                                type: "fn",
                                callback: function() {
                                    t.trigger("lightbox:open", "delete", {
                                        playlist: e
                                    })
                                }
                            },
                            customClass: "jj_menu_item_delete"
                        })), r
                    }
                }, {})
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {};
                var n = "songs",
                    r = "daily";
                t.Views.Pages.Popular = t.Views.Pages.Base.extend({
                    templatePath: "popular",
                    pageType: "popular",
                    events: {
                        "click .today, .week, .month, .year": "onButtonGroupClick"
                    },
                    initialize: function() {
                        this.rendered = !1, this.modelBindings = [], this.childViews = [], this.gridView = null, this.model.on("change", this.onModelChange, this), this.model.on("change:type", this.onTypeChange, this), this.updatePageParams(this.options.params)
                    },
                    updatePageParams: function(e) {
                        var t = _.orEqual(e.subpage, n),
                            i = _.orEqual(e.type, r),
                            s = {};
                        t !== this.model.get("subpage") && (s.subpage = t), i !== this.model.get("type") && (s.type = i), _.keys(s).length && this.model.set(s)
                    },
                    onModelChange: function() {
                        var e = this.model.get("subpage"),
                            n = this.model.get("type");
                        switch (e) {
                        case "songs":
                            t.Services.API.popularGetSongs(n).done(_.bind(function(e) {
                                this.popularSongs = new t.Models.Collections.Songs(e && e.Songs || []), this.songsRendered ? this.gridView.collection.reset(this.popularSongs.models, {
                                    sorted: !0
                                }) : this.render()
                            }, this));
                            break;
                        case "artists":
                        case "playlists":
                        case "people":
                            break;
                        default:
                            t.router.notFound();
                            return
                        }
                    },
                    onDestroy: function() {
                        _.each(this.modelBindings, _.bind(function(e) {
                            e.off(null, null, this)
                        }, this))
                    },
                    onButtonGroupClick: function(e) {
                        var t = $(e.currentTarget),
                            n = {
                                subpage: this.model.get("subpage")
                            };
                        t.hasClass("today") ? n.type = "daily" : t.hasClass("week") ? n.type = "weekly" : t.hasClass("month") ? n.type = "monthly" : t.hasClass("year") && (n.type = "yearly"), this.updatePageParams(n)
                    },
                    onTypeChange: function() {
                        var e = this.model.get("type");
                        e == "daily" ? ($(".today").addClass("active"), $(".today").siblings().removeClass("active")) : e == "weekly" ? ($(".week").addClass("active"), $(".week").siblings().removeClass("active")) : e == "monthly" ? ($(".month").addClass("active"), $(".month").siblings().removeClass("active")) : e == "yearly" && ($(".year").addClass("active"), $(".year").siblings().removeClass("active"))
                    },
                    render: function() {
                        this.indexRendered = !1, this.songsRendered = !1, this.fetchTemplate("index").always(_.bind(this.renderIndex, this)), this.rendered = !0, this.setTitle(["Popular", _.ucwords(this.model.get("subpage"))])
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || !this.popularSongs || this.indexRendered) return;
                        this.childViews && _.each(this.childViews, function(e) {
                            _.isFunction(e.close) && e.destroy()
                        }), this.childViews = [], this.$el.html(this.renderTemplate(e, {
                            subpage: this.model.get("subpage")
                        })), this.indexRendered = !0;
                        switch (this.model.get("subpage")) {
                        case "artists":
                            this.renderArtists();
                            break;
                        case "playlists":
                            this.renderPlaylists();
                            break;
                        case "people":
                            this.renderPeople();
                            break;
                        case "songs":
                        default:
                            this.renderSongs()
                        }
                        t.trigger("page:ready", this)
                    },
                    renderSongs: function() {
                        if (this.destroyed || !this.indexRendered || !this.popularSongs || !this.popularSongs.length || this.model.get("subpage") != "songs") return;
                        var e = $("#grid.popular");
                        if (e.length) {
                            if (this.gridView) {
                                this.gridView.destroy();
                                var n = _.indexOf(this.childViews, this.gridView);
                                n != -1 && this.childViews.splice(n, 1)
                            }
                            this.gridView = new t.Views.SongGridTall({
                                el: e,
                                collection: this.popularSongs,
                                showCount: !0,
                                header: !1,
                                playContext: new t.Models.PlayContext({
                                    contextType: "popular"
                                })
                            }), this.childViews.push(this.gridView), this.gridView.render()
                        }
                        var r = $(".grid-toolbar");
                        if (e.length && r.length) {
                            if (this.gridToolbarView) {
                                this.gridToolbarView.destroy();
                                var n = _.indexOf(this.childViews, this.gridToolbarView);
                                n != -1 && this.childViews.splice(n, 1)
                            }
                            this.gridToolbarView = new t.Views.GridToolbar({
                                el: r[0],
                                model: this.model,
                                gridView: this.gridView,
                                page: "popular",
                                buttons: ["play", "add", "popular", "filterSearch"],
                                playContext: new t.Models.PlayContext({
                                    contextType: "popular"
                                })
                            }), this.childViews.push(this.gridToolbarView), this.gridToolbarView.render()
                        }
                        this.songsRendered = !0
                    },
                    renderArtists: function() {},
                    renderPlaylists: function() {},
                    renderPeople: function() {}
                })
            }(), function() {
                var e = null;
                GS.Views.Pages.Broadcasts = GS.Views.Pages.Base.extend({
                    pageType: "broadcasts",
                    events: {
                        "click .start-broadcasting": "onStartBroadcastingClick",
                        "click .broadcast-about-link": "onAboutBroadcastClick",
                        "click .reconnect-to-chat": "onReconnectToChatClick"
                    },
                    initialize: function() {
                        this.rendered = !1, this.childViews = [], this.gridView = null, this.emptyPageOn = !1, this.broadcasts = new GS.Models.Collections.Broadcasts([]), this.broadcasts.comparator = function(e) {
                            return e.attributes.listenersCount * -1
                        }, this.broadcasts.on("reset", function() {
                            if (!this.indexRendered || this.destroyed) return;
                            this.broadcasts.length === 0 && !this.emptyPageOn ? (this.indexRendered = !1, this.render()) : this.broadcasts.length !== 0 && this.emptyPageOn && (this.indexRendered = !1, this.render())
                        }, this), GS.on("manatee:disconnected", this.onManateeDisconnected, this), GS.on("manatee:connected", this.onManateeConnected, this), this.updatePageParams(this.options.params), this.model.on("change", this.onModelChange, this)
                    },
                    updatePageParams: function(e) {
                        var t = e.subpage || "index",
                            n = {},
                            r = e.getParams;
                        r && r.hasOwnProperty("down") ? t = "down" : r && r.hasOwnProperty("empty") && (t = "empty"), t !== this.model.get("subpage") && (n.subpage = t, this.model.set(n))
                    },
                    onModelChange: function() {
                        var e = this.model.get("subpage"),
                            t = this.model.get("type");
                        e != this.subpage && this.render()
                    },
                    onDestroy: function() {
                        GS.off("manatee:disconnected", null, this), GS.off("manatee:connected", null, this), this.broadcasts.off(), this.stopTopBroadcastsCombinedLoop()
                    },
                    render: function() {
                        this.indexRendered = !1, this.songsRendered = !1, this.rendered = !0, this.subpage = this.model.get("subpage"), this.stopTopBroadcastsCombinedLoop();
                        var e = _.chainLoading({
                            ignoreFails: !0
                        }),
                            t = _.toInt(this.subpage),
                            n = [];
                        e.push(GS.Services.API.getTagList().done(e.bind(this.setTagList, this))), t ? (n.push("bcast_genre_" + t), e.push(GS.Models.Broadcast.getTopBroadcastsForTags(n).done(e.bind(this.onTopBroadcastsForTags, this)))) : this.subpage == "index" && e.push(this.startTopBroadcastsCombinedLoop()), e.push(this.fetchTemplate("broadcasts").always(e.bind(this.renderIndex, this))), this.setTitle(["Broadcasts"])
                    },
                    renderIndex: function(e) {
                        if (this.destroyed || this.indexRendered) return;
                        this.childViews && _.each(this.childViews, function(e) {
                            _.isFunction(e.close) && e.destroy()
                        }), this.childViews = [], this.emptyPageOn = !1, this.$el.html(this.renderTemplate(e, {
                            subpage: this.subpage
                        })), this.subpage == "down" ? this.showBroadcastsDownForStart() : (!this.broadcasts.length || this.subpage == "empty") && this.showBroadcastsEmpty();
                        var t = $("#grid.broadcasts"),
                            n = $(".grid-toolbar");
                        if (t.length) {
                            this.gridView && this.gridView.destroy(), t.empty(), this.gridView = new GS.Views.BroadcastGrid({
                                el: t,
                                collection: this.broadcasts,
                                header: !1
                            }), this.childViews.push(this.gridView), this.gridView.render();
                            if (n.length) {
                                if (this.gridToolbarView) {
                                    this.gridToolbarView.destroy();
                                    var r = _.indexOf(this.childViews, this.gridToolbarView);
                                    r != -1 && this.childViews.splice(r, 1)
                                }
                                this.gridToolbarView = new GS.Views.GridToolbar({
                                    el: n[0],
                                    model: this.model,
                                    gridView: this.gridView,
                                    page: "broadcasts",
                                    buttons: ["filterSearch", "tagDropdown"]
                                }), this.childViews.push(this.gridToolbarView), this.gridToolbarView.render()
                            }
                        }
                        this.indexRendered = !0, GS.trigger("page:ready", this)
                    },
                    onTopBroadcastsForTags: function(e) {
                        if (this.destroyed || !e) return;
                        var t = [],
                            n = [];
                        _.each(e, function(e, r) {
                            e && e.length && (t.push.apply(t, e), r != "bcast" && e[0].Tag && e[0].Tag.i && n.push(new GS.Models.Tag({
                                TagID: e[0].Tag.i,
                                Tag: e[0].Tag.n
                            })))
                        }), t = new GS.Models.Collections.Broadcasts(t), t.filterBestBroadcasts(), this.broadcasts.reset(t.models)
                    },
                    startTopBroadcastsCombinedLoop: function() {
                        var t = $.Deferred(),
                            r = this,
                            i = !1,
                            s = function() {
                                if (Date.now() - n.lastActive > 6e4) {
                                    i = !0;
                                    return
                                }
                                e || (e = setTimeout(o, 6e4))
                            },
                            o = function() {
                                e = null;
                                if (r.destroyed) return;
                                GS.Models.Broadcast.getTopBroadcastsCombined().done(_.bind(r.onTopBroadcastsCombined, r)).always(function() {
                                    s(), t.resolve()
                                })
                            },
                            u = function() {
                                i && (o(), i = !1)
                            };
                        return GS.on("mousemove", u, this), o(), t
                    },
                    stopTopBroadcastsCombinedLoop: function() {
                        GS.off("mousemove", null, this), e && clearTimeout(e)
                    },
                    onTopBroadcastsCombined: function(e) {
                        if (this.destroyed || !e) return;
                        var t = [];
                        _.each(e, function(e) {
                            e && (t.push(e), e.Tag && e.Tag.i && new GS.Models.Tag({
                                TagID: e.Tag.i,
                                Tag: e.Tag.n
                            }))
                        }), t = new GS.Models.Collections.Broadcasts(t), t.filterBestBroadcasts(), this.broadcasts.reset(t.models)
                    },
                    setTagList: function(e) {
                        this.tagList = e
                    },
                    onStartBroadcastingClick: function() {
                        var e = n.model.get("user");
                        e.createBroadcast()
                    },
                    onAboutBroadcastClick: function() {
                        GS.trigger("lightbox:open", "broadcastAbout")
                    },
                    showBroadcastsDownForStart: function() {
                        var e = $("#bc-capacity");
                        e.find(".empty-inner").removeClass("empty-broadcasts").addClass("create-failed"), e.find(".empty-title").data("translateText", "NO_BROADCASTS_TITLE").text(_.getString("NO_BROADCASTS_TITLE")), e.find(".empty-desc").data("translateText", "NO_BROADCASTS_BROADCASTER_DESC").text(_.getString("NO_BROADCASTS_BROADCASTER_DESC"));
                        var t = n.model.get("player").get("currentQueue");
                        t && t.get("activeSong") ? e.find(".view-popular-songs").addClass("hide") : e.find(".view-popular-songs").removeClass("hide"), e.removeClass("hide"), $("#bc-grid-container").addClass("hide"), this.emptyPageOn = !0
                    },
                    showBroadcastsEmpty: function() {
                        var e = $("#bc-capacity");
                        e.find(".empty-inner").removeClass("create-failed").addClass("empty-broadcasts"), e.find(".empty-title").data("translateText", "NO_BROADCASTS_TITLE").text(_.getString("NO_BROADCASTS_TITLE")), e.find(".empty-desc").data("translateText", "NO_BROADCASTS_DESC").text(_.getString("NO_BROADCASTS_DESC")), e.removeClass("hide"), $("#bc-grid-container").addClass("hide"), this.emptyPageOn = !0
                    },
                    onReconnectToChatClick: function() {
                        GS.trigger("manatee:initReconnect")
                    },
                    onManateeDisconnected: function() {
                        $(".start-broadcasting").addClass("hide")
                    },
                    onManateeConnected: function() {
                        $(".start-broadcasting").removeClass("hide")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Pages = t.Views.Pages || {}, t.Views.Pages.Tags = t.Views.Pages.Base.extend({
                    templatePath: "tags",
                    pageType: "tags",
                    events: {},
                    initialize: function() {
                        this.childViews = [], this.model.set(this.options.params)
                    },
                    updatePageParams: function(e) {
                        if (e.subpage !== this.model.get("subpage") || e.type !== this.model.get("type")) this.model.set(e), this.cleanupChildViews(), this.hasRendered && this.render()
                    },
                    render: function() {
                        this.hasRendered = !0;
                        var e = this.model.get("subpage"),
                            n = this.model.get("appModel").get("user"),
                            r = _.chainLoading();
                        r.push(this.fetchTemplate("index").done(r.bind(this.renderIndex, this))), r.push(t.Models.Tag.getTopLevelTags().done(r.bind(function(e) {
                            var n = new t.Models.Collections.Tags(e.models),
                                r = n.get(6994);
                            r && n.remove(r), n.comparator = _.getModelSort("DisplayName", !0), n.sort(), this.model.set("genres", n)
                        }, this))), r.done(_.bind(this.renderGenres, this)), this.setTitle("Tags")
                    },
                    renderIndex: function(e) {
                        this.$el.html(this.renderTemplate(e)), t.trigger("page:ready", this)
                    },
                    renderGenres: function() {
                        if (this.destroyed || !this.model.get("genres")) return;
                        var e = $("#grid"),
                            n;
                        e.length && (e.empty(), n = new t.Views.TagGrid({
                            el: e[0],
                            collection: this.model.get("genres")
                        }), this.childViews.push(n), n.render())
                    }
                }, {
                    lowIDFs: [2856, 10, 102, 160, 230, 424, 750, 787, 814, 898, 1411, 1704, 1748, 1749, 1750, 1755, 1933, 2412, 2563, 3502, 6928, 6994, 7517, 7614, 7621, 104, 162, 283, 645, 678, 3529]
                })
            }(), function() {
                function u() {
                    if (this.$el) {
                        var e = this.$el.find(".broadcast-disconnected");
                        e && e.addClass("hide")
                    }
                }
                function a() {
                    var e = o.get("currentQueue");
                    return e ? e.get("currentBroadcast") : null
                }
                function f() {
                    var e = a();
                    return e ? e.id : null
                }
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Pages = r.Views.Pages || {};
                var i = null,
                    s, o;
                r.Views.Pages.Broadcast = r.Views.Pages.Base.extend({
                    templatePath: "broadcast",
                    pageType: "broadcast",
                    events: {
                        "click .edit-broadcast": "onEditBroadcastClick",
                        "click .add-tag": "onEditBroadcastClick",
                        "submit .bc-chat-form": "onChatFormSubmit",
                        "click .block-user": "onClickBlockUser",
                        "click #chat-settings": "toggleChatSettingsTooltip",
                        "click .editable-title": "onEditTitleClick",
                        "click .description-more": "onDescriptionMoreClick",
                        "blur #bc-name-input": "submitNameForm",
                        "submit #bc-name-form": "onNameFormSubmit",
                        "click .editable-description": "onEditDescriptionClick",
                        "blur #bc-description-input": "submitDescriptionForm",
                        "keydown #bc-description-input": "onDescriptionKeyDown",
                        "submit #bc-description-form": "onDescriptionFormSubmit",
                        "click #bc-now-playing-module .song-row-dropdown": "onFeaturedSongDropdownClick",
                        "click .hide-change-tag-text": "onHideChangeTagText",
                        "click .show-suggestions": "showSuggestions",
                        "click .show-history": "showHistory",
                        "keydown .add-song-input": "onSearchKeydown",
                        "click .bc-chat-toggle": "onChatToggleClick",
                        "click .delete-broadcast-toggle": "onDeleteBroadcastToggleClick",
                        "click .listeners-stat": "openListenersLightbox",
                        "click .play-pause": "onPlayPauseClick",
                        "click .invite-followers": "onInviteFriendsClick",
                        "click .third-party.twitter": "onTwitterShareClick",
                        "click .third-party.facebook": "onFacebookShareClick",
                        "click .share-more": "onMoreShareClick",
                        "click .bc-chat-global-message .icon": "onClosePersistentActivity",
                        "focus .share-url": "handleInputFocus",
                        "blur .share-url": "handleInputBlur",
                        "click .recordings": "openRecordings",
                        "click #bc-reconnect": "onReconnectClick",
                        "click .reconnect-to-chat": "onReconnectClick",
                        "click #bc-leave": "onLeaveClick",
                        "click .chat-action-toggle": "toggleChatActions",
                        "click .bc-login": "onBcLoginClick",
                        "mousemove #suggestions-grid": "onSuggestionsMouseMove",
                        "click #bc-chat-privacy-btn": "onGoOnlineClick",
                        "click .go-online-warning-link": "onGoOnlineClick"
                    },
                    initialize: function(e) {
                        this.childViews = [], this.indexRendered = !1, this.subscribedToBroadcast = !1, this.activeGridView = "suggestions", this.canAnimateSuggestions = !0, o = this.model.get("appModel").get("player"), this.model.get("appModel").on("change:user", this.onAuthUserChanged, this), this.onAuthUserChanged(), r.on("manatee:disconnected", this.onManateeDisconnected, this), r.on("manatee:subscribeToBroadcastChat", this.onSubscribeToChatResult, this), r.on("manatee:broadcastDispatch:chat", this.onChatStatus, this), r.on("previewlb:songAdded previewlb:songSuggested", this.onPreviewLBAction, this);
                        var t = _.chainLoading({
                            ignoreFails: !0
                        });
                        if (e.broadcast) this.broadcastID = e.broadcast.get("BroadcastID"), this.model.set("broadcast", e.broadcast), this.subscribeToBroadcastEvents(e.broadcast), t.push(r.Models.Broadcast.fetchRealtimeBroadcast(e.broadcastID).done(t.bind(this.onRealtimeBroadcast, this)).fail(t.bind(this.onRealtimeBroadcastFailed, this)));
                        else {
                            var n = this.model.get("owner"),
                                i = n instanceof r.Models.AuthUser || n instanceof r.Models.User,
                                u = n instanceof r.Models.AuthUser || r.isLoggedInUserOwnerOfArtist(n.get("ArtistID")) && s.get("Context").type == "artist" && s.get("Context").artist === n;
                            this.model.set({
                                isUserBroadcast: i,
                                isPageOwner: u
                            });
                            if (!n) {
                                r.router.setHash("notFound");
                                return
                            }
                            n.on("change:currentBroadcastID", this.ownerBroadcastUpdate, this), n.on("change:isFavorite", this.onFavoriteOwner, this);
                            var a = n.get("currentBroadcastID"),
                                l = n.get("isOwnerOfCurrentBroadcast");
                            if (a && (!e.broadcastID || e.broadcastID === a)) if (!l) this.broadcastID = null;
                            else {
                                this.broadcastID = a;
                                var c = r.Models.Broadcast.getCached(a);
                                if (c && c.get("capacityLimitReached")) {
                                    this.model.set({
                                        broadcast: c
                                    }), this.realtimeInfoDfd.resolve(), this.render();
                                    return
                                }
                                f() != this.broadcastID && (r.Services.SWF.chatDisconnected && !r.Services.SWF.chatReconnecting ? this.renderFailed() : t.push(r.Models.Broadcast.fetchRealtimeBroadcast(this.broadcastID).done(t.bind(this.onRealtimeBroadcast, this)).fail(t.bind(this.renderFailed, this))))
                            } else e.broadcastID && (this.broadcastID = e.broadcastID, t.push(r.Models.Broadcast.get(e.broadcastID).done(t.bind(this.onGetBroadcast, this))), t.push(r.Models.Broadcast.fetchRealtimeBroadcast(e.broadcastID).done(t.bind(this.onRealtimeBroadcast, this)).fail(t.bind(this.onRealtimeBroadcastFailed, this))))
                        }
                        o.on("change:currentQueue", this.onQueueChanged, this), o.on("change:playStatus", this.onPlayStatusChange, this), this.onQueueChanged(o), r.trigger("broadcast:notifEvent", !0)
                    },
                    onDestroy: function() {
                        r.off(null, null, this), this.model.get("appModel").off(null, null, this), s && s.off(null, null, this);
                        var e = this.model.get("user");
                        e && e.off(null, null, this), o.off(null, null, this);
                        var t = o.get("currentQueue");
                        t && t.off(null, null, this);
                        var n = this.model.get("broadcast");
                        if (n) {
                            n.off(null, null, this), n.get("listenersLoaded") && n.get("listeners").off(null, null, this);
                            var i = n.get("history");
                            i && i.off(null, null, this);
                            var u = n.get("suggestions");
                            u && u.off(null, null, this);
                            var a = n.get("approvedSuggestions");
                            a && a.off(null, null, this);
                            var f = n.get("chatActivities");
                            f && f.off(null, null, this);
                            var l = n.get("persistentChatActivities");
                            l && l.off(null, null, this), n.unsubscribeFromChat("broadcastPage"), (!t || t.get("currentBroadcast") !== n) && n.cleanupOnEnd(!0)
                        }
                        if (this.broadcastID) {
                            var c = this.broadcastID;
                            r.Services.SWF.ready.done(function() {
                                r.Services.SWF.unsubscribeFromBroadcastsStatuses([c])
                            })
                        }
                        this.tutorial && this.tutorial.closeTooltip(), this.clipboardHandler && this.clipboardHandler.destroy(), this.$scrollElem && this.$scrollElem.off("scroll." + this.cid)
                    },
                    onAuthUserChanged: function() {
                        var e = this.model.get("appModel").get("user");
                        if (s) {
                            s.off(null, null, this);
                            var t = this.model.get("owner");
                            t instanceof r.Models.User && t.id == e.id || r.isLoggedInUserOwnerOfArtist(t.get("ArtistID")) && e.get("Context").type == "artist" && s.get("Context").artist === t ? this.model.set("isPageOwner", !0) : this.model.set("isPageOwner", !1)
                        }
                        s = e, s.on("change:sessionPrivacy", this.updateChatAvailability, this), this.indexRendered && (this.updateChatAvailability(), $("img", ".bc-poster-img").attr("src", s.getImageURL(30)))
                    },
                    ownerBroadcastUpdate: function(e) {
                        if (this.destroyed) return;
                        var t = e.get("currentBroadcastID"),
                            i = e.get("isOwnerOfCurrentBroadcast"),
                            s = this.model.get("broadcast"),
                            o = this.model.get("isPageOwner"),
                            u = n.model.get("player").get("currentQueue"),
                            a = u ? u.get("currentBroadcast") : null;
                        if (o && (!this.broadcastID || t === this.broadcastID)) u && u.get("isBroadcasting") && a ? (t = a.get("BroadcastID"), this.broadcastID = t, s ? this.indexRendered || this.render() : this.onRealtimeBroadcast(a, a.get("BroadcastID"))) : t && i ? (this.broadcastID = t, this.indexRendered || this.render(), r.Models.Broadcast.fetchRealtimeBroadcast(t).done(_.bind(this.onRealtimeBroadcast, this)).fail(_.bind(this.render, this))) : (this.broadcastID = null, this.render());
                        else if (!s && (!this.broadcastID || t === this.broadcastID)) i ? (this.broadcastID = t, this.indexRendered || this.render(), r.Models.Broadcast.fetchRealtimeBroadcast(t).done(_.bind(this.onRealtimeBroadcast, this)).fail(_.bind(this.renderFailed, this))) : (this.broadcastID = null, this.render());
                        else if (t && (!s || t !== s.get("BroadcastID"))) {
                            var f = s && s.get("activeStatus") === 1,
                                l = a && t === a.get("BroadcastID");
                            (l || f) && r.router.replaceHash(s.toUrl(!0));
                            if (!l && i) {
                                if (a !== s) {
                                    var c = this.model.get("isUserBroadcast") ? "userId" : "artistId",
                                        h = {
                                            broadcastId: t
                                        };
                                    h[c] = e.id, $("#bc-current-action-btn").removeClass("hide").data(h), $("#bc-action-btn").addClass("hide")
                                }
                            } else $("#bc-current-action-btn").addClass("hide")
                        }
                    },
                    onGetBroadcast: function(e) {
                        if (this.destroyed) return;
                        if (!e) return;
                        this.model.get("broadcast") !== e && (this.model.set("broadcast", e), this.subscribeToBroadcastEvents(e), e.get("historyLoaded") || e.getHistory())
                    },
                    subscribeToBroadcastEvents: function(e) {
                        function n(e, t) {
                            var n = e.previous("suggestions");
                            n && n.off("add remove reset", null, this), t && t.on("add remove reset", this.onSuggestionsChange, this), this.indexRendered && this.onSuggestionsChange()
                        }
                        function r(e, t) {
                            var n = e.previous("approvedSuggestions");
                            n && n.off("add remove reset", null, this), t && t.on("add remove reset", this.onApprovedSuggestionsChange, this), this.indexRendered && this.onApprovedSuggestionsChange()
                        }
                        function i() {
                            var e = this.model.get("history");
                            e && e.off("add remove reset", null, this);
                            var t = this.model.get("broadcast").get("history");
                            t ? (this.model.set("history", t), t.on("add remove reset", this.onHistoryChange, this)) : this.model.unset("history"), this.onHistoryChange()
                        }
                        e.off(null, null, this), e.on("change:Name", this.onNameChange, this), e.on("change:Description", this.onDescriptionChange, this), e.on("change:Image", this.onImageChange, this), e.on("change:activeStatus", this.onActiveStatusChange, this), e.on("change:ownerSubscribed", this.onOwnerSubscribedChange, this), e.on("change:suggestionsEnabled", this.onSuggestionsChange, this), e.on("change:activeSong", this.renderActiveSong, this), e.on("change:activeSongStatus", this.renderActiveSong, this), e.on("change:idle", this.renderActiveSong, this), e.on("change:listenersCount", this.onListenersCountChange, this), e.on("change:totalListens", this.onTotalListensChange, this), e.on("change:Tag", this.onTagChange, this), e.on("change:chatEnabled", this.onChatEnabled, this), e.on("change:isDeleted", this.onIsDeleted, this), e.on("change:persistentChatActivities", this.onChangePersistentChat, this), e.on("change:isFavorite", this.onIsFavorite, this), e.on("change:chatActivities", this.onChatActivityStarted, this), e.on("change:capacityLimitReached", function() {
                            this.realtimeInfoDfd.resolve(), this.render()
                        }, this);
                        var t = e.get("chatActivities");
                        t && this.onChatActivityStarted(e, t), e.on("change:suggestions", n, this), n.call(this, e, e.get("suggestions")), e.on("change:approvedSuggestions", n, this), r.call(this, e, e.get("approvedSuggestions")), e.on("change:history", i, this), i.call(this), e.get("activeSong") && this.renderActiveSong(), this.on("updateSuggestions", _.throttle(_.bind(this.animateSuggestionChanges, this), 5e3));
                        var s = e.get("persistentChatActivities");
                        s && s.on("add remove reset", _.bind(this.renderPersistentChatMessage, this, s), this)
                    },
                    onRealtimeBroadcast: function(e) {
                        var t = this.model.get("owner"),
                            n = e.get("BroadcastID");
                        if (this.destroyed || !this.broadcastID && (t.get("isOwnerOfCurrentBroadcast") === 0 || t.get("currentBroadcastID") !== n)) return;
                        if (e && e.get("activeStatus")) {
                            if (this.broadcastID && !this.subscribedToBroadcast) {
                                var i = this.model.get("appModel").get("player").get("currentQueue"),
                                    s = i ? i.get("currentBroadcast") : null;
                                e !== s && (e.get("capacityLimitReached") || r.Services.SWF.ready.done(function() {
                                    r.Services.SWF.subscribeToBroadcastsStatuses([n])
                                }), this.subscribedToBroadcast = !0), e.subscribeToChat("broadcastPage")
                            }
                            this.model.get("broadcast") !== e ? (this.model.set("broadcast", e), this.subscribeToBroadcastEvents(e)) : (this.onHistoryChange(), this.onSuggestionsChange(), this.renderActiveSong()), r.router.replaceHash(e.toUrl())
                        } else e && this.model.get("broadcast") !== e && this.model.set("broadcast", e);
                        this.render()
                    },
                    onRealtimeBroadcastFailed: function() {
                        var e = this.model.get("owner"),
                            t = this.model.get("broadcast");
                        this.broadcastID && e.get("currentBroadcastID") !== this.broadcastID ? t ? this.render() : r.router.setHash("notFound") : this.renderFailed()
                    },
                    render: function() {
                        this.chatRendered = !1, this.approvedSuggestionsGrid && (this.approvedSuggestionsGrid.destroy(), this.approvedSuggestionsGrid = null), this.indexRendered || this.fetchTemplate("/modules/songRowTall"), this.fetchTemplate("index").done(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(i) {
                        var o = this.model.get("owner"),
                            u = o.get("currentBroadcastID");
                        if (this.destroyed || !this.broadcastID && u === t) return;
                        this.historyGrid && (this.historyGrid.destroy(), this.historyGrid = null), this.nextSongGrid && (this.nextSongGrid.destroy(), this.nextSongGrid = null), this.suggestionsGrid && (this.suggestionsGrid.destroy(), this.suggestionsGrid = null), this.activeSongModule && (this.activeSongModule.destroy(), this.activeSongModule = null);
                        var a = _.orEqual(this.model.get("broadcast"), null),
                            f = !1,
                            l = !1,
                            c = n.model.get("player").get("currentQueue");
                        a && (c && c.get("currentBroadcast") === a ? (f = !0, c.get("isBroadcasting") && (l = !0)) : a.get("activeStatus") === -1 && (a = null));
                        var h = {
                            user: null,
                            artist: null,
                            broadcast: a,
                            broadcastID: _.orEqual(this.broadcastID, null),
                            userIsInBroadcast: f,
                            userIsBroadcasting: l,
                            authUser: s
                        };
                        o instanceof r.Models.AuthUser || o instanceof r.Models.User ? h.user = o : h.artist = o, this.$el.html(this.renderTemplate(i, h)), this.failedRendered = !1;
                        if (a && a.get("capacityLimitReached")) {
                            r.trigger("page:ready", this);
                            return
                        }
                        if (a) {
                            this.indexRendered = !0, this.renderTags(), this.onCurrentBroadcastChange(), this.onHistoryChange(), this.onDescriptionChange(a, a && a.get("Description"));
                            if (a.get("activeStatus") === 1) {
                                this.renderChatActivities(a.get("chatActivities")), this.onSuggestionsChange(), this.renderActiveSong();
                                var p = a.get("persistentChatActivity");
                                p && this.renderPersistentChatMessage(p), a.get("chatEnabled") ? this.$el.find(".bc-chat-toggle").addClass("active") : this.$el.find(".bc-chat-toggle").removeClass("active")
                            }
                            this.renderPersistentChatMessage(a.get("persistentChatActivities")), _.delay(_.bind(function() {
                                var e = (gsConfig.isPreview ? "http://preview.grooveshark.com/" : "http://grooveshark.com/") + o.toUrl("broadcast");
                                o.get("UserID") === 3879 && (e = "http://ballercast.com/");
                                var t = $("#share-lightbox-copy");
                                t.length && (this.clipboardHandler = _.setClipboardHandler(t, e, 0))
                            }, this)), this.$scrollElem = $("#page-wrapper"), this.$broadcastChat = $(".bc-chat-container", "#column2"), this.calculateChatOffsetPosition(), this.$scrollElem.on("scroll." + this.cid, _.animationThrottle(this.handleScroll, this)), r.on("app:resize", this.handleResize, this), this.handleScroll(), this.tagDropdown = new r.Views.Modules.TagDropdown({
                                el: this.$el.find(".module.tag-dropdown")[0],
                                model: a,
                                tooltipKey: "broadcast-tag-tooltip bc-stat-tooltip"
                            }), this.tagDropdown.render(), this.childViews.push(this.tagDropdown);
                            var d = a.get("history");
                            d && !d.length && this.$el.find(".favorite-broadcast").addClass("hide")
                        }
                        var v = this.model.get("isPageOwner"),
                            m = c ? c.get("currentBroadcast") : null,
                            g = m && u === m.get("BroadcastID");
                        if (!v && u && this.broadcastID && u !== this.broadcastID) {
                            var y = a && a.get("activeStatus") === 1;
                            a && (g || y) && r.router.replaceHash(a.toUrl(!0));
                            if (!g) {
                                var b = this.model.get("isUserBroadcast") ? "userId" : "artistId",
                                    w = {
                                        broadcastId: u
                                    };
                                w[b] = o.id, $("#bc-current-action-btn").removeClass("hide").data(w)
                            }
                        } else v && !g && $("#bc-action-btn").addClass("hide");
                        var E = o.get("pageNameData"),
                            S = (Date.now() + e.clientTimeDivergence) / 1e3;
                        E && E.LastBroadcastEmailTime && S - E.LastBroadcastEmailTime < 57600 && $(".invite-followers").addClass("disabled"), r.Services.Local.get("chatShareSize" + n.model.get("user").get("UserID")) == "closed" && ($("#bc-share").addClass("small"), $("#bc-share").find(".chat-action-toggle .icon").removeClass("icon-dau-l-gray-flat").addClass("icon-dad-l-gray-flat"), this.calculateChatDimensions()), r.Services.SWF.chatDisconnected && this.onManateeDisconnected(), this.updateChatAvailability(), r.trigger("page:ready", this), r.trigger("page:redrawUpdate")
                    },
                    renderFailed: function() {
                        if (this.failedRendered) return;
                        this.fetchTemplate("failed").done(_.bind(this.onFailedTemplate, this))
                    },
                    onFailedTemplate: function(e) {
                        if (this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this.failedRendered = !0;
                        var t = this.model.get("owner");
                        if (!t.get("isFavorite")) {
                            var n = this.model.get("isUserBroadcast") ? "userId" : "artistId",
                                r = {};
                            r[n] = t.id, this.$el.find(".follow-broadcaster").removeClass("hide").data(r)
                        } else console.log("already favorite!"), this.$el.find(".empty-desc").data("translateText", "NO_BROADCASTS_DESC").text(_.getString("NO_BROADCASTS_DESC")), this.$el.find(".follow-broadcaster .plus").removeClass("icon-plus-white-active").addClass("icon-check-white-active"), console.log(this.$el.find(".follow-broadcaster"))
                    },
                    onFavoriteOwner: function(e, t) {
                        console.log("onFavoriteOwner", t), t && this.failedRendered && (this.$el.find(".empty-desc").data("translateText", "NO_BROADCASTS_DESC").text(_.getString("NO_BROADCASTS_DESC")), this.$el.find(".follow-broadcaster").addClass("hide"))
                    },
                    calculateChatOffsetPosition: function() {
                        this.$broadcastChat._isSticky || (this.chatOffset = this.$broadcastChat.offset().top - this.$scrollElem.offset().top)
                    },
                    handleScroll: function() {
                        if (!this.chatOffset || this.destroyed) return;
                        var e = this.$scrollElem.scrollTop(),
                            t = $("#header-container"),
                            n = t.outerHeight() + t.offset().top + 30;
                        e > this.chatOffset - 30 ? (this.$el._isSticky || (this.$broadcastChat.addClass("sticky"), this.$broadcastChat._isSticky = !0), this.$broadcastChat[0].style.top = n + "px") : (this.$broadcastChat.removeClass("sticky").css("top", "auto"), this.$broadcastChat._isSticky = !1), this.handleResize()
                    },
                    handleResize: function(e, t) {
                        if (this.destroyed) return;
                        this.clipboardHandler && _.resizeClipboardHandler(!0);
                        var n = this.$broadcastChat._isSticky,
                            r = $("#stage").height(),
                            i = this.$scrollElem.scrollTop(),
                            s = $("#bc-col1"),
                            o = s.height(),
                            u = $("#theme-header:visible").length ? $("#theme-header").height() : 30,
                            a = $("#page-inner").height() + u - i - 30,
                            f = r - 60,
                            l = this.$el.find(".bc-chat-messages"),
                            c = l.parent(),
                            h = c[0],
                            p = Math.abs(h.scrollHeight - h.scrollTop - h.clientHeight) <= 2;
                        o < r - s.offset().top && !n ? f = o - 30 : n ? a < r - 30 && (f = a - 30) : f = r - this.chatOffset - 30 + i, this.$broadcastChat.css("height", f), p && c.scrollTop(h.scrollHeight)
                    },
                    startTutorial: function() {
                        var e = o && o.get("currentQueue"),
                            t = e && e.get("songs"),
                            n = "BC_TUTORIAL_ADD_MUSIC";
                        t && t.length && (n = "BC_TUTORIAL_MORE_MUSIC"), this.tutorial = new r.Views.Tooltips.Tutorial({
                            type: "default",
                            onTutorialAction: function(e) {
                                switch (e) {
                                case "editTitleClick":
                                    this.current === 0 && this.manager.$el.addClass("hide");
                                    break;
                                case "editDescriptionClick":
                                    this.current == 1 && this.manager.$el.addClass("hide");
                                    break;
                                case "editCategoryClick":
                                    this.current == 2 && this.manager.$el.addClass("hide")
                                }
                            },
                            onTutorialActionComplete: function(e) {
                                switch (e) {
                                case "editTitleComplete":
                                    this.current === 0 && this.showNextTutorialTooltip();
                                    break;
                                case "editDescriptionComplete":
                                    this.current == 1 && this.showNextTutorialTooltip();
                                    break;
                                case "editCategoryComplete":
                                    this.current == 2 && this.showNextTutorialTooltip()
                                }
                            },
                            tooltips: [{
                                name: "tutorial",
                                title: "BC_TUTORIAL_SHARE",
                                setup: function(e) {
                                    var t = $(".share-actions");
                                    e.y = -20 + t.height() / 2, e.x = "left", e.notch = "right", e.notchX = 0, e.notchY = 17, e.$attached = t, e.notchSize = 9, e.width = r.Views.Tooltip.calculateTextWidth(_.getString("BC_TUTORIAL_SHARE"), {
                                        fontSize: "13px",
                                        padding: "8px"
                                    }) + 43
                                }
                            }, {
                                name: "tutorial",
                                title: n,
                                action: function() {
                                    $(".add-song-input").trigger("focus")
                                },
                                setup: function(e) {
                                    var t = $("#bc-add-songs").find(".control");
                                    e.y = -20 + t.height() / 2, e.x = t.width() + 20, e.notch = "left", e.notchX = 0, e.notchY = 17, e.$attached = t, e.notchSize = 9, e.width = r.Views.Tooltip.calculateTextWidth(_.getString(n), {
                                        fontSize: "13px",
                                        padding: "8px"
                                    }) + 43
                                }
                            }]
                        });
                        var i = {
                            persist: !0,
                            width: 265,
                            delay: 0,
                            views: [this.tutorial],
                            tooltipKey: "tutorial",
                            fixPosition: !1,
                            scrollable: $("#page-wrapper"),
                            tooltipClass: "tooltip-tutorial"
                        };
                        r.trigger("tooltip:open", i)
                    },
                    renderTags: function() {
                        this.fetchTemplate("/shared/genreTags").done(_.bind(this.onTagsTemplate, this))
                    },
                    onTagsTemplate: function(e) {
                        if (this.destroyed || !this.indexRendered) return;
                        var t = this.model.get("broadcast"),
                            n = this.model.get("broadcast").get("Tag"),
                            i = new r.Models.Collections.Tags,
                            s = $("#page-header");
                        _.isObject(n) ? i.push({
                            tag: n.n,
                            tid: n.i
                        }) : i.push({
                            tag: _.getString("BROADCAST_DEFAULT_TAG"),
                            tid: 0
                        }), s.find(".tags").html(this.renderTemplate(e, {
                            hideSuggestTags: !0,
                            tags: i,
                            broadcast: t
                        }));
                        var o = s.find(".stat-summary"),
                            u = s.find(".genre-link"),
                            a = u.length - 1;
                        while (a > 0 && o.height() > 35) _.$one(u.get(a--)).remove();
                        r.Services.Local.get("bcast-hide-change-tag-text") || $(".change-tag-copy").removeClass("hide"), $(".tags").css("visibility", "visible")
                    },
                    onQueueChanged: function(e) {
                        if (this.destroyed) return;
                        var t = e.get("currentQueue");
                        t && t.on("change:currentBroadcast", this.onCurrentBroadcastChange, this);
                        var n = this.model.get("owner"),
                            r = this.model.get("isPageOwner");
                        if (r && !this.broadcastID && t && t.get("isBroadcasting")) {
                            var i = t.get("currentBroadcast");
                            i && (this.broadcastID = i.get("BroadcastID"), this.onRealtimeBroadcast(i, this.broadcastID))
                        } else this.onCurrentBroadcastChange()
                    },
                    onCurrentBroadcastChange: function() {
                        if (this.destroyed) return;
                        var e = this.model.get("isPageOwner"),
                            t = a(),
                            n = f(),
                            i = o.get("currentQueue"),
                            s = i ? i.get("isBroadcasting") : null;
                        if (!this.indexRendered) {
                            e && s && (!this.broadcastID || this.broadcastID == n) ? (this.broadcastID = n, this.onRealtimeBroadcast(t, this.broadcastID)) : !e && this.broadcastID && this.broadcastID == n && this.onRealtimeBroadcast(t, this.broadcastID);
                            return
                        }
                        var u = this.model.get("broadcast"),
                            l = u ? u.get("activeStatus") : 0,
                            c = $("#bc-action-btn").removeClass("hide"),
                            h = c.find(".label"),
                            p = $("#bc-add-songs"),
                            d = $("#create-audio");
                        t && s && t === u ? (c.find(".icon").removeClass("icon-note-gray").addClass("icon-ex-gray"), h.text(_.getString("STOP")).data({
                            translateText: "STOP"
                        }), p.removeClass("hide"), d.removeClass("hide")) : t && !s && t === u ? (c.find(".icon").removeClass("icon-station-gray icon-note-gray").addClass("icon-ex-gray"), h.text(_.getString("LEAVE_BROADCAST")).data({
                            translateText: "LEAVE_BROADCAST"
                        }), p.removeClass("hide"), d.addClass("hide"), this.activeGridView = "suggestions", this.onSuggestionsChange()) : u && l === 0 ? (c.addClass("hide"), p.addClass("hide"), d.addClass("hide"), this.showHistory()) : (p.addClass("hide"), d.addClass("hide"), c.find(".icon").removeClass("icon-ex-gray").addClass("icon-note-gray"), h.text(_.getString("JOIN_BROADCAST")).data({
                            translateText: "JOIN_BROADCAST"
                        }), !this.subscribedToBroadcast && u && l !== 0 && (u.get("capacityLimitReached") || (r.Services.SWF.ready.done(function() {
                            r.Services.SWF.subscribeToBroadcastsStatuses([u.get("BroadcastID")])
                        }), this.subscribedToBroadcast = !0)), $("#bc-leave").addClass("hide"), this.showHistory()), this.updateChatAvailability(), this.calculateTitleWidth(), t === u && this.subscribedToBroadcast && (r.Services.SWF.ready.done(function() {
                            r.Services.SWF.unsubscribeFromBroadcastsStatuses([t.get("BroadcastID")])
                        }), this.subscribedToBroadcast = !1), r.trigger("page:redrawUpdate")
                    },
                    calculateTitleWidth: function() {
                        var e = $("#page-header .inner"),
                            t = e.width() - e.find(".actions-primary").width() - 45;
                        $("#broadcast-title").css("width", t), $("#bc-name-input").css("width", t + 5)
                    },
                    onNameChange: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        $(".title", "#page-header").text(t).attr("title", t)
                    },
                    onDescriptionChange: function(e, n) {
                        if (this.destroyed || !this.indexRendered) return;
                        var r = $(".description-text", "#page-header");
                        if (n !== t && n !== null) {
                            var i = '<a class="description-more" data-translate-text="MORE_ELLIPSIS">' + _.getString("MORE_ELLIPSIS") + "</a>";
                            r.text(n);
                            if (n) {
                                r.css("visibility", "hidden");
                                var s = !1;
                                while (r.height() > 40) r.text(n = n.substr(0, n.lastIndexOf(" "))), r.append(" " + i), s = !0;
                                r.css("visibility", "visible"), $(".description", "#page-header").removeClass("hide"), n = _.makeSafeLinks(n), s && (n = n + " " + i)
                            }
                            r.html(n)
                        } else r.html("")
                    },
                    onDescriptionMoreClick: function(e) {
                        var t = this.model.get("broadcast"),
                            n = {
                                Bio: t.get("Description")
                            };
                        r.trigger("lightbox:open", "bio", {
                            broadcast: t,
                            profileData: n
                        })
                    },
                    onImageChange: function(e) {
                        if (this.destroyed || !this.indexRendered) return;
                        $("#bc-image").attr("src", e.getImageURL(120))
                    },
                    onActiveStatusChange: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        t || (this.render(), r.router.replaceHash(e.toUrl(!0)))
                    },
                    onOwnerSubscribedChange: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        t && e.get("activeStatus") === 1 && !this.model.get("isPageOwner") && $("#bc-action-btn").removeClass("hide")
                    },
                    renderActiveSong: function() {
                        if (this.destroyed || !this.indexRendered) return;
                        var e = this.model.get("broadcast"),
                            t = e.get("activeSong"),
                            n = e.get("idle") && !e.isLoggedInUserOwner(),
                            i = $("#bc-now-playing"),
                            s = $("#bc-now-playing-module"),
                            o = $("#bc-no-active-song"),
                            u = $("#bc-idle-suggestion"),
                            a = e.get("history"),
                            f = e.get("activeSongStatus"),
                            l = f < 6,
                            c = e.isLoggedInUserOwner() && a && a.length < 1;
                        !t || !e.get("activeStatus") || !l && !n ? (i.addClass("hide"), c && e.get("activeStatus") && o.removeClass("hide")) : n ? (i.addClass("hide"), o.addClass("hide"), s.addClass("hide"), u.removeClass("hide")) : (i.removeClass("hide"), o.addClass("hide"), s.removeClass("hide"), u.addClass("hide"), this.activeSongModule ? this.activeSongModule.model !== t && this.activeSongModule.changeModel(t, {
                            force: !0
                        }) : (this.activeSongModule = new r.Views.Modules.SongRowTall({
                            el: s[0],
                            model: t,
                            activeSong: !0,
                            redrawUpdate: !0,
                            grid: {
                                options: {
                                    isBroadcastOwner: this.model.get("isPageOwner")
                                }
                            }
                        }), this.activeSongModule.render(), this.childViews.push(this.activeSongModule)))
                    },
                    onHistoryChange: function() {
                        if (this.destroyed || !this.indexRendered || this.activeGridView != "history") return;
                        var e = this.model.get("broadcast"),
                            t = e.get("history"),
                            n = $("#no-history"),
                            i = $("#recent-plays-grid"),
                            s = new r.Models.PlayContext;
                        s.addStreamType(r.Models.PlayContext.TYPE_DEFAULT);
                        if (!this.historyGrid) {
                            i.empty();
                            var o = t && t.models || [];
                            this.historyGrid = new r.Views.BroadcastSongRowTallGrid({
                                el: i[0],
                                collection: new r.Models.Collections.Songs(o),
                                header: !1,
                                isBroadcastOwner: this.model.get("broadcast").isLoggedInUserOwner(),
                                isBroadcastHistory: !0,
                                playContext: s
                            }), this.historyGrid.render(), this.childViews.push(this.historyGrid), this.renderGridToolbar()
                        } else this.historyGrid.options.isBroadcastOwner = this.model.get("broadcast").isLoggedInUserOwner(), this.historyGrid.collection.reset(t && t.models || []);
                        this.showHistory(null, !0)
                    },
                    onSuggestionsChange: function() {
                        if (this.destroyed || !this.indexRendered || this.activeGridView != "suggestions") return;
                        var e = this.model.get("broadcast"),
                            t = _.orEqual(e.get("suggestionsEnabled"), !0),
                            n = e.get("suggestions"),
                            i = $("#no-suggestions"),
                            s = $("#suggestions-grid"),
                            o = r.isBroadcastListener(e),
                            u = r.isBroadcaster(),
                            a = r.getLoggedInUserID() > 0,
                            f = "",
                            l = "",
                            c = new r.Models.PlayContext;
                        t ? u ? (f = "NO_SUGGESTIONS_TITLE_OWNER", l = "NO_SUGGESTIONS_DESC_OWNER") : o ? (f = "NO_SUGGESTIONS_TITLE", l = a ? "NO_SUGGESTIONS_DESC" : "SUGGESTIONS_LOGIN_DESC") : (f = "NO_SUGGESTIONS_TITLE", l = "SUGGESTIONS_JOIN_DESC") : (f = "SUGGESTIONS_DISABLED", l = "SUGGESTIONS_DISABLED"), c.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), i.find(".title").attr("data-translate-text", f).text(_.getString(f)), l ? i.find(".msg").removeClass("hide").attr("data-translate-text", l).text(_.getString(l)) : i.find(".msg").addClass("hide");
                        if (!this.suggestionsGrid) {
                            s.empty();
                            var h = n && n.models || [];
                            this.suggestionsGrid = new r.Views.SongSuggestGrid({
                                el: s[0],
                                collection: new r.Models.Collections.Songs(h),
                                header: !1,
                                isBroadcastOwner: this.model.get("broadcast").isLoggedInUserOwner(),
                                playContext: c
                            }), this.suggestionsGrid.render(), this.childViews.push(this.suggestionsGrid), this.renderGridToolbar()
                        } else this.trigger("updateSuggestions");
                        e.get("activeStatus") !== 1 && (this.suggestionsGrid && (this.suggestionsGrid.destroy(), this.suggestionsGrid = null, this.renderGridToolbar()), $(".loading", "#bc-song-list").addClass("hide")), (n || !t) && this.activeGridView == "suggestions" && (this.onApprovedSuggestionsChange(), this.showSuggestions(null, !0))
                    },
                    onApprovedSuggestionsChange: function() {
                        var e = this.model.get("broadcast"),
                            t = e.get("approvedSuggestions"),
                            n = $("#approved-suggestions"),
                            i = $("#approved-suggestions-grid"),
                            s = new r.Models.PlayContext;
                        s.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), t && t.length && i.length ? (this.approvedSuggestionsGrid || (i.empty(), this.approvedSuggestionsGrid = new r.Views.SongSuggestGrid({
                            el: i[0],
                            collection: t,
                            header: !1,
                            isBroadcastOwner: this.model.get("broadcast").isLoggedInUserOwner(),
                            playContext: s
                        }), this.approvedSuggestionsGrid.render(), this.childViews.push(this.approvedSuggestionsGrid)), n.removeClass("hide")) : e.get("activeStatus") !== 1 && this.approvedSuggestionsGrid && (this.approvedSuggestionsGrid.destroy(), this.approvedSuggestionsGrid = null, this.renderGridToolbar())
                    },
                    animateSuggestionChanges: function() {
                        if (!this.canAnimateSuggestions) return;
                        var e = this.model.get("broadcast"),
                            t = e.get("suggestions"),
                            n = $();
                        if (!t) return;
                        if (this.suggestionsGrid && this.suggestionsGrid.renderers && this.suggestionsGrid.renderers[0] && this.suggestionsGrid.renderers[0].model) {
                            var i = this.suggestionsGrid.renderers[0],
                                s = this.suggestionsGrid.visibleCollection.indexOf(i.model);
                            for (var o = s, u = this.suggestionsGrid.renderers.length; o < u; o++) this.suggestionsGrid.renderers[o] && t.models[o] !== this.suggestionsGrid.renderers[o].model && (this.suggestionsGrid.renderers[o].$el.addClass("animate-hide"), n.push(this.suggestionsGrid.renderers[o].el))
                        }
                        var a = _.once(_.bind(function() {
                            if (!this.indexRendered || this.destroyed || !this.suggestionsGrid || !t) return;
                            this.suggestionsGrid.options.isBroadcastOwner = this.model.get("broadcast").isLoggedInUserOwner(), this.suggestionsGrid.collection.reset(t.models), n.delay(100).removeClass("animate-hide"), this.activeGridView == "suggestions" && this.suggestionsGrid && this.showSuggestions(), this.handleScroll(), r.trigger("page:redrawUpdate")
                        }, this));
                        $(n[n.length - 1]).on("animationend", a), setTimeout(_.bind(a, this), 400)
                    },
                    showHistory: function(e, t) {
                        this.activeGridView = "history";
                        if (!this.historyGrid && !t) {
                            this.onHistoryChange();
                            return
                        }
                        $(".show-history").addClass("active").siblings().removeClass("active"), this.gridToolbar && this.gridToolbar.clearFilter(), this.historyGrid && this.historyGrid.collection.length ? $("#recent-plays-grid").removeClass("hide").siblings().addClass("hide") : $("#no-history").removeClass("hide").siblings().addClass("hide"), this.handleScroll(), r.trigger("page:redrawUpdate")
                    },
                    showSuggestions: function(e, t) {
                        this.activeGridView = "suggestions";
                        var n = this.model.get("broadcast");
                        if (!this.suggestionsGrid && (!n || !n.get("suggestionsEnabled")) && !t) {
                            this.onSuggestionsChange();
                            return
                        }
                        $(".show-suggestions").addClass("active").siblings().removeClass("active"), this.gridToolbar && this.gridToolbar.clearFilter(), this.suggestionsGrid && this.suggestionsGrid.collection.length ? $("#suggestions-grid").removeClass("hide").siblings().addClass("hide") : $("#no-suggestions").removeClass("hide").siblings().addClass("hide"), this.approvedSuggestionsGrid && this.approvedSuggestionsGrid.collection.length ? $("#approved-suggestions").removeClass("hide") : $("#approved-suggestions").addClass("hide"), this.handleScroll(), r.trigger("page:redrawUpdate")
                    },
                    onListenersCountChange: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        $("#listener-count").text(t), $(".listeners-stat .label").text(_.getString(t === 1 ? "LISTENER" : "LISTENERS"))
                    },
                    onTotalListensChange: function(e, t) {
                        if (this.destroyed || !this.indexRendered) return;
                        t = _.toInt(t);
                        var n = _.toInt(e.previous("totalListens")),
                            r = $("#total-listens-count"),
                            i;
                        if (t > 2 + n) {
                            var s = Math.max(1, Math.ceil((t - n) / 30));
                            i = setInterval(function() {
                                n < t ? (n = Math.min(t, n + s), r.html(_.addCommaSeparators(n))) : clearInterval(i)
                            }, 16)
                        } else r.html(t);
                        $(".listens-stat .label").text(_.getString(t === 1 ? "LISTEN" : "LISTENS"))
                    },
                    onTagChange: function(e, t) {
                        r.isBroadcaster() || this.renderTags(), this.tutorial && this.tutorial.trigger("editCategoryComplete")
                    },
                    onChatFormSubmit: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = this.$el.find(".bc-chat-input"),
                            r = n.val(),
                            i = this.model.get("broadcast"),
                            s = this.$el.find(".bc-chat-messages-container");
                        return i.sendChatMessage(r), n.val(""), s.scrollTop(s[0].scrollHeight), !1
                    },
                    onChatToggleClick: function(e) {
                        var t = $(e.currentTarget),
                            n = this.model.get("broadcast"),
                            i = _.eventToGUTSCoords(e);
                        i.broadcastID = n.get("BroadcastID"), n.get("chatEnabled") ? (n.updateBroadcastPreferences(!1, n.get("suggestionsEnabled")), r.trigger("guts:log", "broadcastDisableChatClicked", i)) : (n.updateBroadcastPreferences(!0, n.get("suggestionsEnabled")), r.trigger("guts:log", "broadcastEnableChatClicked", i)), e.preventDefault()
                    },
                    onChatEnabled: function(e, t) {
                        t ? this.$el.find(".bc-chat-toggle").addClass("active") : this.$el.find(".bc-chat-toggle").removeClass("active"), this.updateChatAvailability()
                    },
                    onIsDeleted: function(e, t) {
                        var n = this.$el.find("#broadcast-title"),
                            r = this.$el.find(".delete-broadcast-toggle");
                        t ? (n.addClass("deleted"), r.data("translateText", "RESTORE").text(_.getString("RESTORE"))) : (n.removeClass("deleted"), r.data("translateText", "DELETE").text(_.getString("DELETE")))
                    },
                    onChatActivityStarted: function(e, t) {
                        if (this.destroyed) return;
                        var n = e.previous("chatActivities");
                        n && n.off(null, null, this);
                        if (!t) {
                            e && e.get("activeStatus") !== 1 && this.$el.find(".bc-chat-messages").addClass("hide");
                            return
                        }
                        t.on("add", this.onNewChatActivity, this), t.on("reset", this.renderChatActivities, this), this.renderChatActivities(t)
                    },
                    renderChatActivities: function(e) {
                        if (this.destroyed || !this.indexRendered) return;
                        var t = this.model.get("broadcast");
                        if (!e) {
                            t && t.get("activeStatus") !== 1 && this.$el.find(".bc-chat-messages").addClass("hide");
                            return
                        }
                        var n = this.$el.find(".bc-chat-messages").empty(),
                            i = t.isLoggedInUserOwner(),
                            s = [],
                            o = [],
                            u = new r.Models.Collections.ChatActivities(e.last(100)),
                            a;
                        u.each(_.bind(function(e) {
                            a = new r.Views.Modules.ChatActivity({
                                model: e,
                                showBlockUser: i
                            }), s.push(a.render()), o.push(a.$el[0]), this.childViews.push(a)
                        }, this)), n.append(o), $.after(s).always(_.bind(function() {
                            var e = this.$el.find(".bc-chat-messages-container");
                            e.length && e.scrollTop(e[0].scrollHeight)
                        }, this)), this.chatRendered = !0
                    },
                    renderGridToolbar: function() {
                        if (!this.historyGrid && !this.suggestionsGrid) return;
                        this.gridToolbar && (this.gridToolbar.destroy(!1), this.gridToolbar = null);
                        var e = [];
                        this.historyGrid && e.push(this.historyGrid), this.suggestionsGrid && e.push(this.suggestionsGrid);
                        var t = this.model.get("broadcast"),
                            n = {
                                el: $("#bc-grid-toolbar")[0],
                                model: this.model,
                                gridView: e,
                                page: "broadcast",
                                playContext: new r.Models.PlayContext(t)
                            };
                        t.get("activeStatus") > 0 ? (n.buttons = ["primaryBtnGroupNav", "filterSearch"], n.primaryBtnGroupNavInfo = {
                            pages: ["broadcastSuggestions", "broadcastHistory"],
                            labels: ["SUGGESTIONS", "HISTORY"],
                            classNames: ["show-suggestions", "show-history"]
                        }) : n.buttons = ["play", "add", "filterSearch"], this.gridToolbar = new r.Views.GridToolbar(n), this.childViews.push(this.gridToolbar), t.get("activeStatus") > 0 && this.gridToolbar.on("rendered", _.bind(function() {
                            this.activeGridView == "suggestions" ? $(".show-suggestions").addClass("active") : this.activeGridView == "history" && $(".show-history").addClass("active")
                        }, this)), this.gridToolbar.render()
                    },
                    onNewChatActivity: function(e) {
                        if (this.destroyed || !this.chatRendered) return;
                        var t = this.$el.find(".bc-chat-messages"),
                            n = t.parent(),
                            i = t.find(".module.chat-activity"),
                            s = n[0],
                            o = Math.abs(s.scrollHeight - s.scrollTop - s.clientHeight) <= 2,
                            u = new r.Views.Modules.ChatActivity({
                                model: e,
                                showBlockUser: this.model.get("broadcast").isLoggedInUserOwner()
                            }),
                            a;
                        i.length >= 100 && i.eq(0).remove(), a = u.render(), t.append(u.$el[0]), this.childViews.push(u), o && a.always(function() {
                            n.scrollTop(s.scrollHeight)
                        });
                        if (this.chatFailedToLoad) {
                            var f = this.model.get("broadcast");
                            f && f.removePersistentChatActivity("info", r.Models.ChatActivity.CHAT_FAILED), this.$el.find(".bc-chat-input-container").removeClass("hide"), this.chatFailedToLoad = !1
                        }
                    },
                    onClickBlockUser: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = _.toInt(t.data("userId")),
                            i = _.eventToGUTSCoords(e);
                        i.broadcastID = this.model.get("broadcast").get("BroadcastID"), i.userID = n, n && (r.Services.SWF.banBroadcastListenerByUserID(n), r.trigger("guts:log", "broadcastBanUserClicked", i))
                    },
                    toggleChatSettingsTooltip: function(e) {
                        var t = n.model.get("user"),
                            i = _.orEqual(t.get("settings"), {}),
                            s = _.orEqual(i.local, {}),
                            o = $("#chat-settings"),
                            u = '<i class="icon check icon-check-gray"></i> ',
                            a = "chat-settings",
                            f = {
                                delay: 0,
                                notchSize: 6,
                                width: 170,
                                notch: "bottom",
                                notchX: 150,
                                x: -135,
                                y: "top",
                                adjustY: -6,
                                $attached: o,
                                tooltipClass: "menu chat-settings",
                                tooltipKey: a,
                                dfd: $.Deferred()
                            },
                            l, c = function() {
                                r.trigger("tooltip:close", a), $.hideJJMenu(), o.removeClass("active")
                            };
                        if (this.chatSettingsTooltip && !this.chatSettingsTooltip.destroyed) {
                            c();
                            return
                        }
                        l = [{
                            title: (s.joinLeftDisabled ? "" : u) + _.getString("ENABLE_CHAT_JOIN_LEAVE"),
                            click: function() {
                                t.saveLocalChatSettings({
                                    joinLeftDisabled: !s.joinLeftDisabled
                                }), c()
                            }
                        }, {
                            title: (s.nowPlayingDisabled ? "" : u) + _.getString("ENABLE_CHAT_NOW_PLAYING"),
                            click: function() {
                                t.saveLocalChatSettings({
                                    nowPlayingDisabled: !s.nowPlayingDisabled
                                }), c()
                            }
                        }, {
                            title: (s.suggestionsDisabled ? "" : u) + _.getString("ENABLE_CHAT_SUGGESTIONS"),
                            click: function() {
                                t.saveLocalChatSettings({
                                    suggestionsDisabled: !s.suggestionsDisabled
                                }), c()
                            }
                        }], this.chatSettingsTooltip = new r.Views.Tooltips.Menu({
                            items: l
                        }), f.views = [this.chatSettingsTooltip], $.hideJJMenu(), o.addClass("active"), r.trigger("tooltip:open", f), this.chatSettingsTooltip.openDfd = f.dfd, this.chatSettingsTooltip.openDfd.always(function() {
                            o.removeClass("active")
                        })
                    },
                    onDeleteBroadcastToggleClick: function(e) {
                        e.preventDefault();
                        var t = this.model.get("broadcast"),
                            n = _.eventToGUTSCoords(e);
                        n.broadcastID = t.get("BroadcastID"), t.get("isDeleted") ? (s.restoreBroadcast(t.get("BroadcastID"), !0), r.trigger("guts:log", "restoreBroadcastButtonClicked", n)) : (s.deleteBroadcast(t.get("BroadcastID"), !0), r.trigger("guts:log", "deleteBroadcastButtonClicked", n))
                    },
                    onEditBroadcastClick: function(e) {
                        e.preventDefault();
                        var t = this.model.get("broadcast"),
                            i = n.model.get("player").get("currentQueue"),
                            s = i.get("currentBroadcast"),
                            o = i.get("isBroadcasting"),
                            u = _.eventToGUTSCoords(e);
                        u.broadcastID = t.get("BroadcastID"), s === t && o && (r.trigger("lightbox:open", "editBroadcast", {
                            broadcast: t
                        }), r.trigger("guts:log", "editBroadcastButtonClicked", u)), this.tagDropdown.closeTooltip()
                    },
                    onEditTitleClick: function(e) {
                        var t = $(e.currentTarget),
                            i = this.model.get("broadcast"),
                            s = n.model.get("player").get("currentQueue"),
                            o = s.get("currentBroadcast"),
                            u = s.get("isBroadcasting"),
                            a = _.eventToGUTSCoords(e);
                        a.broadcastID = i.get("BroadcastID"), o === i && u && (t.addClass("hide"), $("#bc-name-form").removeClass("hide").find("input").val(i.get("Name")).trigger("focus"), this.tutorial && this.tutorial.trigger("editTitleClick"), r.trigger("guts:log", "editBroadcastNameButtonClicked", a))
                    },
                    onNameFormSubmit: function(e) {
                        return e.preventDefault(), this.submitNameForm(e), !1
                    },
                    submitNameForm: function(e) {
                        var t = $("#bc-name-input"),
                            n = $("#bc-name-form"),
                            i = t.val(),
                            s = this.model.get("broadcast"),
                            o = {
                                broadcastID: s.get("BroadcastID")
                            };
                        if (i && i.length <= 50) {
                            if (i == s.get("Name")) {
                                n.addClass("hide"), $(".editable-title", "#page-header").removeClass("hide");
                                return
                            }
                            n.find(".control").removeClass("error"), this.model.get("broadcast").updateBroadcastDetails(i).done(function() {
                                n.addClass("hide"), $(".editable-title", "#page-header").removeClass("hide")
                            }).fail(function() {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_SAVE_FAILED"),
                                    type: "error",
                                    duration: 5e3
                                })
                            })
                        } else if (e) return e.preventDefault(), n.find(".control").addClass("error"), !1;
                        this.tutorial && this.tutorial.trigger("editTitleComplete")
                    },
                    onEditDescriptionClick: function(e) {
                        var t = $(e.currentTarget),
                            i = this.model.get("broadcast"),
                            s = n.model.get("player").get("currentQueue"),
                            o = s.get("currentBroadcast"),
                            u = s.get("isBroadcasting"),
                            a = _.eventToGUTSCoords(e);
                        a.broadcastID = i.get("BroadcastID");
                        if (o === i && u) {
                            t.addClass("hide");
                            var f = i.get("Description");
                            $("#bc-description-form").removeClass("hide").find("textarea").val(f ? f : "").trigger("focus"), this.tutorial && this.tutorial.trigger("editDescriptionClick"), r.trigger("guts:log", "editBroadcastDescriptionButtonClicked", a)
                        }
                    },
                    onDescriptionFormSubmit: function(e) {
                        return e.preventDefault(), this.submitDescriptionForm(e), !1
                    },
                    onDescriptionKeyDown: function(e) {
                        if (!e.which || e.which !== 13) return;
                        return e.preventDefault(), e.stopPropagation(), this.submitDescriptionForm(e), !1
                    },
                    submitDescriptionForm: function(e) {
                        var t = $("#bc-description-input"),
                            n = $("#bc-description-form"),
                            i = t.val(),
                            s = this.model.get("broadcast");
                        if (!i || i.length <= 145) {
                            var o = $(".editable-description", "#page-header");
                            if (i == s.get("Description")) {
                                n.addClass("hide"), o.removeClass("hide");
                                return
                            }
                            i || o.html(_.getString("DEFAULT_BROADCAST_DESC")), n.find(".control").removeClass("error"), this.model.get("broadcast").updateBroadcastDetails(this.model.get("Name"), this.model.get("Tag"), i).done(function() {
                                n.addClass("hide"), o.removeClass("hide")
                            }).fail(function() {
                                r.trigger("notification:add", {
                                    description: _.getString("POPUP_ERROR_BROADCAST_SAVE_FAILED"),
                                    type: "error",
                                    duration: 5e3
                                })
                            })
                        } else if (e) return e.preventDefault(), n.find(".control").addClass("error"), !1;
                        this.tutorial && this.tutorial.trigger("editDescriptionComplete")
                    },
                    onFeaturedSongDropdownClick: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("songId"),
                            i = r.Models.BroadcastSong.getCached(n),
                            s = {};
                        return i && t.jjmenu(e, i.getSingleItemContextMenu(s), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            className: "option-context-menu",
                            keepState: t
                        }), r.trigger("guts:log", "OLdropdownClick", {
                            songIDs: n
                        }), !1
                    },
                    onHideChangeTagText: function(e) {
                        $(".change-tag-copy").addClass("hide"), r.Services.Local.set("bcast-hide-change-tag-text", 1)
                    },
                    onSearchKeydown: function(e) {
                        var t, n, r = $(e.currentTarget),
                            i = $("#bc-search-ico");
                        i.addClass("searching"), this.autocompleteTooltip && (t = this.autocompleteTooltip.$el, n = $("li.selected", t));
                        switch (e.which) {
                        case _.keyboard.ENTER:
                            n = n ? n.find(".autocomplete-item-link") : null;
                            if (n && n.length) return this.onSelectedItem(n), !1;
                            return;
                        case _.keyboard.UP:
                            e.preventDefault(), t && (!n.length || n.is(":first-child") ? $("li:last", t).addClass("selected") : n.prev().addClass("selected"), n.removeClass("selected"));
                            return;
                        case _.keyboard.DOWN:
                            e.preventDefault(), t && (!n.length || n.is(":last-child") ? $("li:first", t).addClass("selected") : n.next().addClass("selected"), n.removeClass("selected"));
                            return;
                        case _.keyboard.ESC:
                            e.preventDefault(), this.clearTooltip();
                            return
                        }
                        this.doAutocompleteDebounced(r)
                    },
                    doAutocompleteDebounced: _.debounce(function(e) {
                        return this.doAutocomplete(e)
                    }, 750),
                    doAutocomplete: function(e) {
                        var t = $.trim(e.val().toLowerCase());
                        if (t.length > 1 && this.autocompleteTooltip) this.autocompleteTooltip.changeQuery(t);
                        else if (t.length > 1) {
                            var i = r.isBroadcaster() ? "ADD" : "SUGGEST",
                                s = r.Views.Tooltip.calculateTextWidth(_.getString(i), {
                                    fontSize: "12px"
                                }) + 14,
                                o = {
                                    sticky: !0,
                                    notchX: 30,
                                    notch: "top",
                                    x: 0,
                                    y: 31,
                                    $attached: $(".control", $("#bc-add-songs")),
                                    tooltipKey: "autocomplete",
                                    fixPosition: !1,
                                    width: 340 + s
                                },
                                u = n.model.get("user"),
                                a = u ? u.get("library") : null,
                                f;
                            a && a instanceof Backbone.Collection ? f = function(e) {
                                return a.filter(function(t) {
                                    return t.attributes.searchText.indexOf(e) != -1
                                })
                            } : f = function(e) {
                                return []
                            }, this.autocompleteTooltip = new r.Views.Tooltips.Autocomplete({
                                type: "broadcastSearch",
                                query: t,
                                showAllLink: !0,
                                $searchIco: $("#bc-search-ico"),
                                sections: [{
                                    type: "Songs",
                                    filterFunction: f,
                                    search: !0,
                                    searchMethod: "getResultsFromSearch",
                                    typeToSvcType: function(e) {
                                        return e
                                    }
                                }],
                                handleResultClick: _.bind(this.onSelectedItem, this)
                            }), o.views = [this.autocompleteTooltip], r.trigger("tooltip:open", o), o.dfd.done(_.bind(function() {
                                this.autocompleteTooltip = null
                            }, this))
                        } else this.clearTooltip()
                    },
                    clearTooltip: function() {
                        var e = $("#bc-search-ico");
                        this.autocompleteTooltip && (this.autocompleteTooltip = null, r.trigger("tooltip:close")), e.removeClass("searching")
                    },
                    onSelectedItem: function(e) {
                        var t = e.data("songId"),
                            n = r.Models.Song.getCached(t),
                            i = this.model.get("broadcast");
                        if (!n) return;
                        this.clearTooltip(), this.$el.find(".add-song-input").val("");
                        var s = new r.Models.PlayContext;
                        s.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), r.trigger("player:addSongs", [n], r.Services.SWF.playSpecialIndexes.LAST, !1, s)
                    },
                    onChangePersistentChat: function(e, t, n) {
                        var r = e.changedAttributes(["persistentChatActivities"]);
                        r && r.persistentChatActivities && r.persistentChatActivities.off(null, null, this), t && t.on("add remove reset", _.bind(this.renderPersistentChatMessage, this, t), this)
                    },
                    renderPersistentChatMessage: function(e) {
                        if (this.destroyed || !e || !this.indexRendered) return;
                        var t = $(".bc-chat-messages-container"),
                            n = $(".bc-chat-global-message"),
                            i = parseInt(t.css("top"), 10),
                            s = e.last(),
                            o = 0;
                        if (!s) n.addClass("hide").empty(), this.calculateChatDimensions();
                        else {
                            var u = new r.Views.Modules.ChatActivity({
                                model: s,
                                persistent: !0
                            });
                            u.render(), n.empty().append(u.$el[0]), this.childViews.push(u), n.css("top", $("#bc-share").outerHeight() + "px").removeClass("hide"), this.calculateChatDimensions(), u.renderDfd.done(_.bind(this.calculateChatDimensions, this))
                        }
                        t.scrollTop(t[0].scrollHeight)
                    },
                    onClosePersistentActivity: function() {
                        var e = this.model.get("broadcast");
                        if (!e) return;
                        var t = e.get("persistentChatActivities"),
                            n;
                        t && (n = t.last(), n && n.get("closeable") && t.remove(n)), this.calculateChatDimensions()
                    },
                    onIsFavorite: function(e, t) {
                        var n = this.$el.find(".favorite-broadcast");
                        t ? (n.addClass("btn-success"), n.find(".icon").removeClass("icon-heart-gray").addClass("icon-check-white-active"), n.find(".label").attr("DATA-TRANSLATE-TEXT", "FAVORITED").text(_.getString("FAVORITED"))) : (n.removeClass("btn-success"), n.find(".icon").removeClass("icon-check-white-active").addClass("icon-heart-gray"), n.find(".label").attr("DATA-TRANSLATE-TEXT", "FAVORITE").text(_.getString("FAVORITE")))
                    },
                    openListenersLightbox: function() {
                        var e = this.model.get("broadcast");
                        e && r.trigger("lightbox:open", "broadcastListeners", {
                            broadcast: e
                        })
                    },
                    onPlayPauseClick: function(e) {
                        var t = this.model.get("appModel").get("player").get("currentQueue");
                        !t.get("currentBroadcast") || t.get("isBroadcasting") ? r.trigger("player:togglePlay") : r.trigger("player:volumeMute")
                    },
                    onPlayStatusChange: function(e) {
                        var t = $("#bc-now-playing-module").find(".play-pause");
                        e.playStatusIsPlaying() ? t.removeClass("paused") : t.addClass("paused")
                    },
                    onPreviewLBAction: function() {
                        $(".add-song-input").val("")
                    },
                    onInviteFriendsClick: function(t) {
                        var i = $(t.currentTarget),
                            s = this.model.get("broadcast"),
                            o = s && s.get("BroadcastID"),
                            u = n.model.get("user"),
                            a = u.get("pageNameData"),
                            f = (Date.now() + e.clientTimeDivergence) / 1e3;
                        if (o && !i.hasClass("disabled") && a && (!a.LastBroadcastEmailTime || f - a.LastBroadcastEmailTime > 57600)) {
                            var l = u.get("Context");
                            r.Services.API.notifyBroadcasterFollowers(o, l).done(function(e) {
                                e && (i.addClass("disabled"), i.data("translateText", "FOLLOWERS_INVITED_EX").text(_.getString("FOLLOWERS_INVITED_EX")), a.LastBroadcastEmailTime = f)
                            })
                        }
                    },
                    openShare: function(e) {
                        var t = this.model.get("broadcast"),
                            n = {
                                type: "broadcast",
                                id: t.get("BroadcastID"),
                                excludeServices: {
                                    grooveshark: !0,
                                    embed: !0
                                },
                                service: e
                            };
                        r.trigger("lightbox:open", "share", n)
                    },
                    onTwitterShareClick: function() {
                        this.openShare("twitter")
                    },
                    onFacebookShareClick: function() {
                        this.openShare("facebook")
                    },
                    onMoreShareClick: function() {
                        this.openShare("more")
                    },
                    handleInputFocus: function(e) {
                        var t = $(e.currentTarget).select();
                        t.length && (t[0].selectionStart = -1, t[0].selectionEnd = -1), t.val() && setTimeout(function() {
                            t.select()
                        }, 50);
                        var n = "1px solid #f77f00";
                        $("body").hasClass("is-ie7") && (n = "auto"), $("#copy-background").css({
                            border: n,
                            borderLeft: "none"
                        })
                    },
                    handleInputBlur: function(e) {
                        var t = $(e.currentTarget);
                        $("#copy-background").css({
                            border: "1px solid #bbb",
                            borderLeft: "none"
                        })
                    },
                    openRecordings: function(e) {
                        r.trigger("lightbox:open", "record"), r.trigger("guts:log", "recordingsButtonClicked", _.eventToGUTSCoords(e))
                    },
                    onManateeDisconnected: function() {
                        var e = this.model.get("appModel").get("player").get("currentQueue"),
                            t = this.model.get("broadcast"),
                            n = e ? e.get("currentBroadcast") : null,
                            i = n && n === t,
                            s = this.model.get("owner"),
                            o = this.model.get("isPageOwner"),
                            u;
                        if (t && this.broadcastID && s.get("currentBroadcastID") !== this.broadcastID && !i) return;
                        if ((!this.broadcastID || s.get("currentBroadcastID") === this.broadcastID) && !i) {
                            this.renderFailed();
                            return
                        }
                        o ? u = $("#broadcast-owner-disconnected") : i ? (u = $("#broadcast-listener-disconnected"), $("#bc-leave").removeClass("hide")) : (u = $("#broadcast-listener-disconnected"), $("#bc-leave").addClass("hide")), $("#bc-reconnect").removeClass("disabled"), !o && r.Services.SWF.chatReconnecting ? (u.find(".disconnected").addClass("hide"), u.find(".connecting").removeClass("hide")) : (u.find(".disconnected").removeClass("hide"), u.find(".connecting").addClass("hide")), u.removeClass("hide"), r.off("manatee:connected", this.handleManateeReconnected, this), r.on("manatee:connected", this.handleManateeReconnected, this)
                    },
                    handleManateeReconnected: function() {
                        function a() {
                            var e = n.model.get("player").get("currentQueue"),
                                t = e ? e.get("currentBroadcast") : null;
                            return t && t === s
                        }
                        function p() {
                            return c || (h = $.Deferred(), c = setTimeout(function() {
                                h.resolve()
                            }, (10 + Math.random() * 5) * 1e3)), h.promise()
                        }
                        function d() {
                            if (!s) return;
                            s.cleanupOnEnd(), t.get("currentBroadcastID") === i && t.storeCurrentBroadcast(0, null), r.router.replaceHash(s.toUrl()), u.call(e)
                        }
                        if (this.destroyed) return;
                        var e = this,
                            t = this.model.get("owner"),
                            i = this.broadcastID,
                            s = this.model.get("broadcast"),
                            o = this.model.get("isPageOwner"),
                            f;
                        o ? (f = $("#broadcast-owner-disconnected"), f.find(".disconnected").removeClass("hide")) : (f = $("#broadcast-listener-disconnected"), f.find(".disconnected").addClass("hide"), f.find(".connecting").removeClass("hide"));
                        if (a()) {
                            var l = n.model.get("player").get("currentQueue");
                            l.on("change:currentBroadcast", function v() {
                                this.destroyed || u.call(e), l.off("change:currentBroadcast", v, this)
                            }, this), s.on("change:lastUpdated", function m() {
                                this.destroyed || u.call(e), s.off("change:lastUpdated", m, this)
                            }, this);
                            return
                        }
                        var c, h;
                        t.getCurrentStatus().done(function() {
                            (!t.get("isOwnerOfCurrentBroadcast") || t.get("currentBroadcastID") !== i) && d()
                        }), r.Services.SWF.chatReady.done(function() {
                            t.subscribeToStatus("broadcastPage")
                        }), r.Models.Broadcast.fetchRealtimeBroadcast(i, !0).done(_.bind(function(t) {
                            if (this.destroyed) return;
                            !t || !t.get("activeStatus") && !o ? d() : u.call(e)
                        }, this)), r.off("manatee:connected", this.handleManateeReconnected, this)
                    },
                    onReconnectClick: function(e) {
                        var t = $(e.currentTarget);
                        t.hasClass("disabled") || (r.trigger("manatee:initReconnect"), t.addClass("disabled"))
                    },
                    onLeaveClick: function() {
                        var e = n.model.get("user"),
                            t = n.model.get("player").get("currentQueue"),
                            r = t ? t.get("currentBroadcast") : null;
                        r === this.model.get("broadcast") && e.leaveBroadcast()
                    },
                    onSubscribeToChatResult: function(e) {
                        var t = this.model.get("broadcast");
                        if (!e || !e.success) {
                            if (this.chatFailedToLoad) {
                                t.unsubscribeFromChat("broadcastPage");
                                return
                            }
                            this.chatFailedToLoad = !0, this.$el.find(".bc-chat-input-container").addClass("hide"), t && t.addPersistentChatActivity(new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.CHAT_FAILED
                            })), setTimeout(function() {
                                t.get("capacityLimitReached") || t.subscribeToChat("broadcastPage", !0)
                            }, 3e3)
                        } else this.chatFailedToLoad && t && (t.removePersistentChatActivity("info", r.Models.ChatActivity.CHAT_FAILED), this.chatFailedToLoad = !1, this.$el.find(".bc-chat-input-container").removeClass("hide"))
                    },
                    onChatStatus: function(e) {
                        if (e && e.error === "dne") {
                            this.chatFailedToLoad = !0, this.$el.find(".bc-chat-input-container").addClass("hide");
                            var t = this.model.get("broadcast");
                            t && t.addPersistentChatActivity(new r.Models.ChatActivity({
                                type: "info",
                                infoType: r.Models.ChatActivity.CHAT_FAILED
                            })), setTimeout(function() {
                                t.get("capacityLimitReached") || t.subscribeToChat("broadcastPage", !0)
                            }, 3e3)
                        } else(!e || e.error) && r.trigger("notification:add", {
                            description: _.getString("CHAT_FAILED_SEND"),
                            type: "error",
                            duration: 5e3
                        })
                    },
                    calculateChatDimensions: function() {
                        var e = $("#bc-share"),
                            t = $(".bc-chat-messages-container"),
                            n = $(".bc-chat-global-message"),
                            r = $(".bc-chat-form-container"),
                            i = $(".bc-chat-overlay"),
                            s = n.hasClass("hide") ? 0 : n.outerHeight(),
                            o = e.outerHeight(),
                            u, a;
                        u = o + s - 1 + "px", a = r.outerHeight() - 1 + "px", n.css({
                            top: o + "px"
                        }), t.css({
                            top: u,
                            bottom: a
                        }), i.css({
                            top: u,
                            bottom: a
                        })
                    },
                    toggleChatActions: function() {
                        var e = $("#bc-share"),
                            t = e.find(".chat-action-toggle"),
                            i = n.model.get("user");
                        e.hasClass("small") ? (e.removeClass("small"), t.find(".icon").removeClass("icon-dad-l-gray-flat").addClass("icon-dau-l-gray-flat"), r.Services.Local.set("chatShareSize" + i.get("UserID"), "open")) : (e.addClass("small"), t.find(".icon").removeClass("icon-dau-l-gray-flat").addClass("icon-dad-l-gray-flat"), r.Services.Local.set("chatShareSize" + i.get("UserID"), "closed")), this.calculateChatDimensions()
                    },
                    onBcLoginClick: function() {
                        var e = this.model.get("broadcast"),
                            t = o.get("currentQueue"),
                            n = t && e ? t.get("currentBroadcast") === e : !1;
                        r.trigger("lightbox:open", "login", {
                            onLogin: _.bind(function(e) {
                                n || e.joinBroadcast(this.model.get("broadcast").get("BroadcastID"))
                            }, this),
                            destination: this.model.get("broadcast").toUrl()
                        })
                    },
                    onSuggestionsMouseMove: function() {
                        this.canAnimateSuggestions = !1, this.canAnimateSuggestionsTimer && clearTimeout(this.canAnimateSuggestionsTimer), this.canAnimateSuggestionsTimer = setTimeout(_.bind(function() {
                            this.canAnimateSuggestions = !0, this.trigger("updateSuggestions")
                        }, this), 2e3)
                    },
                    updateChatAvailability: function() {
                        var e = this.model.get("broadcast");
                        if (!e || !this.indexRendered) return;
                        var t = s.get("isLoggedIn"),
                            n = (s.get("sessionPrivacy") & 4) === 0,
                            r = o.get("currentQueue"),
                            i = r ? r.get("currentBroadcast") === e : !1,
                            u = _.orEqual(e.get("chatEnabled"), !0);
                        i && this.model.get("isPageOwner") && (!u || !n) ? (u = !0, n = !0) : u && !i && e.get("activeStatus") != 1 && (!e.chatLocks || !e.chatLocks.length) && (u = !1);
                        var a = this.$el.find(".bc-chat-container"),
                            f = this.$el.find(".bc-chat-form-container"),
                            l = $("#bc-chat-input-container"),
                            c = this.$el.find(".bc-chat-input"),
                            h = $("#bc-chat-join-btn"),
                            p = $("#chat-settings"),
                            d = $("#bc-chat-privacy-btn");
                        u && i && n && t ? (h.addClass("hide"), d.addClass("hide"), f.removeClass("hide"), l.removeClass("hide"), p.removeClass("hide"), a.removeClass("bc-loner"), c.removeAttr("disabled")) : u ? t ? i ? n || (h.addClass("hide"), a.addClass("bc-loner"), l.addClass("hide"), p.addClass("hide"), f.removeClass("hide"), d.removeClass("hide")) : (d.addClass("hide"), a.addClass("bc-loner"), l.addClass("hide"), p.addClass("hide"), f.removeClass("hide"), h.addClass("join-broadcast").removeClass("bc-login hide").data({
                            translateText: "JOIN_TO_CHAT",
                            broadcastId: e.get("BroadcastID")
                        }).text(_.getString("JOIN_TO_CHAT"))) : (d.addClass("hide"), a.addClass("bc-loner"), l.addClass("hide"), p.addClass("hide"), f.removeClass("hide"), h.addClass("bc-login").removeClass("join-broadcast hide").data({
                            translateText: "SIGN_IN_TO_CHAT",
                            broadcastId: e.get("BroadcastID")
                        }).text(_.getString("SIGN_IN_TO_CHAT"))) : (h.addClass("hide"), d.addClass("hide"), l.removeClass("hide"), p.removeClass("hide"), c.attr("disabled", "disabled"), t && i ? (f.removeClass("hide"), a.removeClass("bc-loner")) : (f.addClass("hide"), i || a.addClass("bc-loner"))), this.calculateChatDimensions()
                    },
                    onGoOnlineClick: function() {
                        var e = n.model.get("user");
                        e.savePrivacySettings(t, 0).fail(_.bind(function() {
                            r.trigger("notification:add", {
                                description: _.getString("POPUP_ERROR_BROADCAST_OWNER_VISIBILITY_FAILED"),
                                type: "error",
                                duration: 5e3
                            })
                        }, this))
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Generic = t.Views.Lightboxes.Base.extend({
                    initialize: function(e) {
                        this._super("initialize"), this.view = e.params.view
                    },
                    onDestroy: function() {
                        this.$el.off("click.generic"), this.options.params && _.isFunction(this.options.params.onDestroy) && this.options.params.onDestroy.call(this)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("generic").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        var t = this.options.params;
                        this.$el.html(this.renderTemplate(e, {
                            type: this._type || t && t.type,
                            view: this.view
                        })), this.makeButtons();
                        var n = this.$el;
                        _.forEach(this.options.params.callbacks, function(e, t) {
                            n.on("click.generic", t, e)
                        }), this._super("onTemplate")
                    },
                    makeButtons: function() {
                        var e = function(e) {
                                if (e.buttonHTML) return e.buttonHTML;
                                var t = document.createElement("a");
                                e.href && (t.href = e.href), t.className = "btn btn-large " + (e.className || "") + " " + (e.disabled || "");
                                if (e.labelHTML) t.innerHTML = e.labelHTML;
                                else {
                                    var n = document.createTextNode(_.getString(e.label));
                                    t.setAttribute("data-translate-text", e.label), t.appendChild(n)
                                }
                                return e.target && t.setAttribute("target", e.target), e.data && t.setAttribute("data-" + e.data.label, e.data.value), t
                            },
                            t = [],
                            n = [];
                        _.forEach(this.view.buttonsLeft, function(n) {
                            t.push(e(n))
                        }), _.forEach(this.view.buttonsRight, function(t) {
                            n.push(e(t))
                        }), $("div.left-btns").append(t), $("div.right-btns").append(n)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.About = t.Views.Lightboxes.Base.extend({
                    initialize: function() {
                        this._super("initialize")
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("about").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    }
                })
            }(), function() {
                function r(e, t) {
                    return e.name.toLowerCase() > t.name.toLowerCase() ? 1 : -1
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {};
                var n = [{
                    locale: "ca",
                    name: "Català"
                }, {
                    locale: "cs",
                    name: "Čeština"
                }, {
                    locale: "hr",
                    name: "hrvatski"
                }, {
                    locale: "cy",
                    name: "Cymraeg"
                }, {
                    locale: "da",
                    name: "Dansk"
                }, {
                    locale: "de",
                    name: "Deutsch"
                }, {
                    locale: "el",
                    name: "Ελληνικά"
                }, {
                    locale: "en",
                    name: "English"
                }, {
                    locale: "es",
                    name: "Español"
                }, {
                    locale: "et",
                    name: "Eesti"
                }, {
                    locale: "eu",
                    name: "Euskara"
                }, {
                    locale: "fr",
                    name: "Français"
                }, {
                    locale: "gl",
                    name: "Galego"
                }, {
                    locale: "hu",
                    name: "magyar"
                }, {
                    locale: "ko",
                    name: "한국어"
                }, {
                    locale: "nl",
                    name: "Nederlands"
                }, {
                    locale: "lv",
                    name: "Latvijas"
                }, {
                    locale: "lt",
                    name: "Lietuvių"
                }, {
                    locale: "pl",
                    name: "Polski"
                }, {
                    locale: "pt",
                    name: "Português"
                }, {
                    locale: "ru",
                    name: "Русский"
                }, {
                    locale: "sk",
                    name: "Slovenčina"
                }, {
                    locale: "fi",
                    name: "Suomi"
                }, {
                    locale: "sv",
                    name: "Svenska"
                }, {
                    locale: "tr",
                    name: "Türkçe"
                }, {
                    locale: "uk",
                    name: "Yкраї́нська"
                }, {
                    locale: "zh",
                    name: "中文"
                }, {
                    locale: "bg",
                    name: "Български"
                }, {
                    locale: "it",
                    name: "Italiano"
                }, {
                    locale: "ja",
                    name: "日本語"
                }, {
                    locale: "nb",
                    name: "Norsk "
                }, {
                    locale: "ro",
                    name: "Română"
                }, {
                    locale: "sl",
                    name: "Slovenščina"
                }];
                t.Views.Lightboxes.Locale = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click a.language": "onLanguageClick"
                    },
                    initialize: function() {
                        this._super("initialize"), this.model.set("languages", n.sort(r))
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("locale").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onLanguageClick: function(e) {
                        var n = e.currentTarget,
                            r = $(n).attr("rel");
                        t.trigger("locale:change", r), t.trigger("guts:log", "localeChangePerformed", {
                            newLocale: r,
                            navigatorLanguage: navigator.language,
                            browserLanguage: gsConfig.lang
                        }), t.trigger("guts:endcontext", "locale"), t.trigger("guts:begincontext", {
                            locale: r
                        }), t.trigger("guts:gatrack", "site", "localeChangePerformed", r), this.close()
                    }
                })
            }(), function() {
                function n(e, t) {
                    $(".signup-stage", "#lightbox-content").addClass("hide");
                    var n = $("#lightbox-footer"),
                        r = $("#lb-nav-outer").addClass("hide"),
                        i = "POPUP_SIGNUP_TITLE";
                    switch (t) {
                    case "signup":
                        n.find(".continue").addClass("hide"), n.find(".submit").removeClass("hide"), r.removeClass("hide");
                        break;
                    case "profile":
                        n.find(".submit").addClass("hide"), n.find(".continue").addClass("hide"), n.find(".finished").removeClass("hide"), i = "POPUP_SIGNUP_PROFILE_TITLE";
                        break;
                    case "complete":
                        $("#lightbox").css("width", 600), n.find(".submit").addClass("hide"), n.find(".continue").addClass("hide"), n.find(".close").removeClass("hide"), i = "POPUP_SIGNUP_COMPLETE_TITLE", $("#lightbox-error").addClass("hide"), $(".profile-url", this.$el).text("grooveshark.com" + s.get("user").toUrl().replace("#!", ""))
                    }
                    $("#signup-stage-" + t).removeClass("hide"), $(".title", "#lightbox-header").html($.localize.getString(i)).data("translate-text", i)
                }
                function r(n, r) {
                    if (!r || !r.userID) {
                        i.call(this, n, r);
                        return
                    }
                    s.onSignup(r, this.options.params.destination);
                    var o = s.get("user");
                    if (_.isFunction(this.options.params.onLogin)) {
                        var u = this.options.params.onClose,
                            a = this.options.params.onLogin;
                        this.options.params.onClose = function() {
                            _.isFunction(u) && u.apply(e, _.toArray(arguments)), a(o)
                        }
                    }
                    if (_.isFunction(this.options.params.onUpgrade)) {
                        var f = this.options.params.onClose,
                            l = this.options.params.onUpgrade;
                        this.options.params.onClose = function() {
                            _.isFunction(f) && oldClose.apply(e, _.toArray(arguments)), t.trigger("lightbox:open", "payments", {
                                onUpgrade: l
                            })
                        }
                    }
                    $("#settings-profile-picture-preview").attr("src", o.getImageURL(200)), n.resolve(o), t.trigger("guts:log", "signupSuccess", {
                        UserID: o.UserID
                    })
                }
                function i(e, n) {
                    n = _.orEqual(n, {}), this.errors = [];
                    if (n.errorCode & 1) this.errors.unshift({
                        error: "POPUP_SIGNUP_FORM_UNKNOWN_ERROR",
                        fields: []
                    });
                    else {
                        n.errorCode & 2 && ($("#signup-email").parents(".control-group").removeClass("success").addClass("field-error"), this.errors.push({
                            error: "POPUP_SIGNUP_FORM_DUPLICATE_EMAIL",
                            fields: ["signup-email"]
                        })), n.errorCode & 256 && ($("#signup-email").parents(".control-group").removeClass("success").addClass("field-error"), this.errors.push({
                            error: "POPUP_SIGNUP_FORM_INVALID_EMAIL",
                            fields: ["signup-email"]
                        }));
                        if (n.errorCode & 16 || n.errorCode & 32) $("#signup-fname").parents(".control-group").addClass("field-error"), this.errors.push({
                            error: "POPUP_SIGNUP_FORM_MISSING_NAME",
                            fields: ["signup-fname"]
                        });
                        n.errorCode & 8 && ($("#signup-password1").parents(".control-group").addClass("field-error"), this.errors.push({
                            error: "POPUP_SIGNUP_FORM_INVALID_PASSWORD",
                            fields: ["signup-password1"]
                        })), n.errorCode & 512 && this.errors.push({
                            error: "POPUP_SIGNUP_FORM_TOO_YOUNG_ACCOUNT",
                            fields: ["signup-month", "signup-year", "signup-day"]
                        }), (n.errorCode & 1024 || n.errorCode & 8192) && this.errors.unshift({
                            error: "POPUP_SIGNUP_FORM_UNKNOWN_ERROR",
                            fields: []
                        });
                        if (n.errorCode & 2048) switch (this.model.get("signupType")) {
                        case "google":
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_GOOGLE_ID_ERROR",
                                fields: []
                            });
                            break;
                        case "twitter":
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_TWITTER_ID_ERROR",
                                fields: []
                            });
                            break;
                        case "facebook":
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_FACEBOOK_ID_ERROR",
                                fields: []
                            })
                        }
                        if (n.errorCode & 4096) switch (this.model.get("signupType")) {
                        case "google":
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_GOOGLE_GENERAL_ERROR",
                                fields: []
                            });
                            break;
                        case "twitter":
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_TWITTER_GENERAL_ERROR",
                                fields: []
                            });
                            break;
                        case "facebook":
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_FACEBOOK_GENERAL_ERROR",
                                fields: []
                            })
                        }
                        n.errorCode & 16384 && this.errors.push({
                            error: "POPUP_SETTINGS_RESERVED_WORDS",
                            fields: []
                        })
                    }
                    this.showNextError(), e.reject(), t.trigger("guts:log", "signupFail", {
                        code: _.orEqual(n.errorCode, "NOCODE")
                    })
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {};
                var s, o = {},
                    u = {};
                t.Views.Lightboxes.Signup = t.Views.Lightboxes.Base.extend({
                    _priority: 5,
                    events: {
                        "change #lightbox-content select, #lightbox-content input": "onFormChanged",
                        "click #lightbox-footer .continue": "advanceStage",
                        "click #lightbox-footer .submit": "submitSignup",
                        "change #signup-email": "checkEmail",
                        "change #signup-username": "checkUsername",
                        "click .start-popular": "startPopularStation",
                        "click .popular-page": "gotoPopularPage",
                        "click .edit-profile": "gotoUserPage",
                        "click .create-artist": "openClaimArtist",
                        "click #lb-google-login": "loginWithGoogle",
                        "click #lb-twitter-login": "loginWithTwitter",
                        "click #signup-email-suggestion": "useSuggestion",
                        "click .invite-friends": "onInviteFriendsClick",
                        "click .account-type": "onAccountTypeClick",
                        "hover .signup-dob-select": "onFakeSelectHover",
                        "change .signup-dob-select": "onFakeSelectChange",
                        "mouseenter .account-type": "onAccountTypeHover"
                    },
                    initialize: function(e) {
                        this._super("initialize");
                        var t = e.params || {};
                        this.model.set({
                            signupType: _.orEqual(t.signupType, "default"),
                            defaultValues: _.orEqual(t.values, {}),
                            thirdPartyDetails: _.orEqual(t.details, {}),
                            stage: "signup",
                            fromArtist: _.orEqual(t.fromArtist, !1)
                        }), this.errors = [], this.isChangingProfile = !1, this.isSigningUp = !1, this.accountType = "user", s = this.model.get("appModel"), this.model.on("change:stage", n)
                    },
                    onDestroy: function() {
                        $("#lightbox").removeAttr("style"), _.isFunction(this.options.params.onClose) && _.defer(this.options.params.onClose)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("signup").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {
                            stage: "signup",
                            user: s.get("user"),
                            defaults: this.model.get("defaultValues"),
                            type: this.model.get("signupType"),
                            fromArtist: this.model.get("fromArtist")
                        })), s.get("user").get("isLoggedIn") && this.model.set("stage", "complete");
                        var t = $("input", this.$el);
                        for (var n = 0; n < t.length; n++) {
                            if (!t[n].value) {
                                t[n].focus(), $(t[n]).addClass("has-text");
                                break
                            }
                            $(t[n]).removeClass("has-text")
                        }
                        this._super("onTemplate")
                    },
                    advanceStage: function() {
                        if (this.accountType == "artist") {
                            t.trigger("lightbox:open", "claimArtist", {
                                fromSignup: !0,
                                stage: "name"
                            }), this.close();
                            return
                        }
                        var e = this.model,
                            n = e.get("stage"),
                            r = _.bind(function() {
                                switch (n) {
                                case "signup":
                                    e.set("stage", "profile");
                                    break;
                                case "profile":
                                    e.set("stage", "complete");
                                    break;
                                case "complete":
                                    this.close()
                                }
                            }, this);
                        typeof this["checkStage" + _.ucwords(n)] == "function" ? this["checkStage" + _.ucwords(n)]().done(r) : r()
                    },
                    onFormChanged: function(e) {
                        var t = $(e.target);
                        t.parents(".control-group").removeClass("field-error"), this.showNextError(t.attr("id"))
                    },
                    onFakeSelectHover: function(e) {
                        var t = $(e.currentTarget),
                            n = t.index(),
                            r = $("#signup-dob-buttons .btn:eq(" + n + ")");
                        r.toggleClass("hover")
                    },
                    onFakeSelectChange: function(e) {
                        var t = $(e.currentTarget),
                            n = t.index(),
                            r = $("#signup-dob-buttons .btn:eq(" + n + ")"),
                            i = r.find(".label");
                        i.text(t.find(":selected").text())
                    },
                    onAccountTypeClick: function(e) {
                        var t = $(e.currentTarget);
                        t.addClass("active").siblings().removeClass("active"), this.accountType = t.data("accountType")
                    },
                    onAccountTypeHover: function(e) {
                        var n = $(e.currentTarget),
                            r = n.is("#user-account-btn") ? "USER_ACCOUNT_HELPER" : "ARTIST_ACCOUNT_HELPER",
                            i = new t.Views.Tooltips.Helper({
                                text: _.getString(r),
                                minWidth: 138,
                                width: 138,
                                addClasses: "wrap"
                            });
                        i.tooltipOptions.scrollable = $("body"), i.tooltipOptions.notchX = 68, t.Views.Tooltips.Helper.simpleTooltip(e, i)
                    },
                    showNextError: function(e) {
                        if (e && this.errors.length) for (var t = 0, n = this.errors.length; t < n; t++) _.indexOf(this.errors[t].fields, e) > -1 && (this.errors.splice(t, 1), t--, n--);
                        this.errors.length ? $("#lightbox-error").removeClass("hide").html(_.getString(this.errors[0].error, this.errors[0].data)) : $("#lightbox-error").addClass("hide")
                    },
                    useSuggestion: function() {
                        $("#signup-email").val(this.lastSuggestion), this.lastSuggestion = !1, $("#signup-email").trigger("change")
                    },
                    checkEmail: function() {
                        var e = $("#signup-email").val(),
                            n, r;
                        return o.email === e ? (n = $.Deferred(), n.resolve({
                            email: o.result
                        })) : e ? (r = _.checkEmailMisspells(e)) && r.domain && r.domain.length && (!this.lastSuggestion || this.lastSuggestion != r.full) ? (n = $.Deferred(), $("#signup-email").parents(".control-group").removeClass("success").addClass("field-error"), this.lastSuggestion = r.full, this.errors.unshift({
                            error: "POPUP_SIGNUP_FORM_DID_YOU_MEAN_EMAIL",
                            data: {
                                suggestion: r.full
                            },
                            fields: ["signup-email"]
                        }), this.showNextError(), n.reject()) : n = t.Models.AuthUser.checkEmailUsername(e).fail(_.bind(function() {
                            this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_EMAIL_UNKNOWN_ERROR",
                                fields: ["signup-email"]
                            }), this.showNextError()
                        }, this)) : (n = $.Deferred(), $("#signup-email").parents(".control-group").removeClass("success").addClass("field-error"), this.errors.unshift({
                            error: "POPUP_SIGNUP_FORM_INVALID_EMAIL",
                            fields: ["signup-email"]
                        }), this.showNextError(), n.reject()), n.done(_.bind(function(t) {
                            o.email = e, o.result = t.email, t.email ? t.email === -1 ? ($("#signup-email").parents(".control-group").removeClass("success").addClass("field-error"), this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_INVALID_EMAIL",
                                fields: ["signup-email"]
                            }), this.showNextError()) : ($("#signup-email").parents(".control-group").addClass("success"), this.showNextError("signup-email")) : ($("#signup-email").parents(".control-group").removeClass("success").addClass("field-error"), this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_DUPLICATE_EMAIL",
                                fields: ["signup-email"]
                            }), this.showNextError())
                        }, this)), n
                    },
                    checkUsername: function() {
                        var e = $("#signup-username").val(),
                            n;
                        return u.username === e ? (n = $.Deferred(), n.resolve({
                            username: u.result
                        })) : n = t.Models.AuthUser.checkEmailUsername(null, e).done(_.bind(function(t) {
                            u.username = e, u.result = t.username, t.username ? t.username === -1 ? ($("#signup-username").parents(".control-group").removeClass("success").addClass("field-error"), e.length > 32 ? this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_USERNAME_LENGTH_ERROR",
                                fields: ["signup-username"]
                            }) : this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_INVALID_USERNAME",
                                fields: ["signup-username"]
                            }), this.showNextError()) : ($("#signup-username").parents(".control-group").addClass("success"), this.showNextError("signup-username")) : ($("#signup-username").parents(".control-group").removeClass("success").addClass("field-error"), this.errors.unshift({
                                error: "POPUP_SIGNUP_FORM_DUPLICATE_USERNAME",
                                fields: ["signup-username"]
                            }), this.showNextError())
                        }, this)), n
                    },
                    checkSignup: function() {
                        var e = $.Deferred(),
                            t = [],
                            n = $("#signup-email").val(),
                            r = $("#signup-password1").val();
                        return this.model.get("signupType") === "default" && (r.length < 5 || r.length > 32) && ($("#signup-password1").parents(".control-group").addClass("field-error"), t.push({
                            error: "POPUP_SIGNUP_FORM_INVALID_PASSWORD",
                            fields: ["signup-password1"]
                        })), this.errors = t, this.checkEmail().done(function(n) {
                            if (n.email === $("#signup-email").val() && !t.length) {
                                var i = {
                                    username: "",
                                    password: r,
                                    firstName: "New User",
                                    emailAddress: n.email,
                                    sex: null,
                                    birthDate: null,
                                    flags: 0,
                                    inviteCode: null
                                };
                                e.resolve(i)
                            } else e.reject()
                        }).fail(function() {
                            e.reject()
                        }), e.promise()
                    },
                    submitSignup: function() {
                        if (this.isSigningUp) return;
                        this.isSigningUp = !0;
                        var e = $.Deferred();
                        return e.always(_.bind(function() {
                            this.isSigningUp = !1
                        }, this)), this.checkSignup().done(_.bind(function(n) {
                            var s = t.Services.Local.get("lastInviteCode"),
                                o = null;
                            s && s.inviteCode && s.expires > $.now() && (o = s.inviteCode);
                            switch (this.model.get("signupType")) {
                            case "default":
                                t.Services.API.registerUser(n.username, n.password, n.firstName, "", n.emailAddress, n.sex, n.birthDate, n.flags, o, !1, _.bind(r, this, e), _.bind(i, this, e));
                                break;
                            case "google":
                                if (!this.model.get("thirdPartyDetails") || !t.Services.Google.profile) return i(e);
                                t.Services.API.registerGoogleUser(n.username, n.firstName, n.emailAddress, n.sex, n.birthDate, n.flags, o, t.Services.Google.profile.id, t.Services.Google.profile.email, this.model.get("thirdPartyDetails").accessToken, t.Services.Google.profile.flags, _.bind(r, this, e), _.bind(i, this, e));
                                break;
                            case "twitter":
                                if (!this.model.get("thirdPartyDetails") || !t.Services.Twitter.profile) return i(e);
                                t.Services.API.registerTwitterUser(n.username, n.firstName, n.emailAddress, n.sex, n.birthDate, n.flags, o, t.Services.Twitter.profile.id_str, this.model.get("thirdPartyDetails").oauthToken, this.model.get("thirdPartyDetails").oauthSecret, _.bind(r, this, e), _.bind(i, this, e))
                            }
                        }, this)).fail(_.bind(function() {
                            this.showNextError(), e.reject()
                        }, this)), e.done(_.bind(this.advanceStage, this)), e.promise()
                    },
                    checkStageProfile: function() {
                        if (this.isChangingProfile) return;
                        this.isChangingProfile = !0;
                        var e = $.Deferred(),
                            t = $("#signup-full-name").val(),
                            n = $("#signup-username").val(),
                            r = this.$el.find('input[name="signup-gender"]:checked').val();
                        e.always(_.bind(function() {
                            this.isChangingProfile = !1
                        }, this)), this.errors = [];
                        var i = {},
                            o = this.errors;
                        if (e.state() === "rejected") return e.promise();
                        var u = function(t) {
                                if (!t || t.statusCode !== 1 && t.statusCode !== -6) {
                                    a(t);
                                    return
                                }
                                e.resolve()
                            },
                            a = function(t) {
                                switch (t.statusCode) {
                                case -1:
                                case -15:
                                case -7:
                                case -12:
                                case -9:
                                case -8:
                                case -5:
                                case -13:
                                case -14:
                                default:
                                    o.push({
                                        error: "SAVE_PROFILE_FAILED",
                                        fields: []
                                    });
                                    break;
                                case -10:
                                    $("#signup-username").parents(".control-group").addClass("field-error"), o.push({
                                        error: "POPUP_USERNAME_INVALID_CHARACTERS",
                                        fields: ["signup-username"]
                                    });
                                    break;
                                case -11:
                                    $("#signup-username").parents(".control-group").addClass("field-error"), o.push({
                                        error: "POPUP_USERNAME_INVALID_LENGTH",
                                        fields: ["signup-username"]
                                    })
                                }
                                e.reject()
                            },
                            f = this.model.get("signupType"),
                            l = this.model.get("thirdPartyDetails"),
                            c = $("#signup-dob-year").val(),
                            h = $("#signup-dob-month").val(),
                            p = $("#signup-dob-day").val(),
                            d = (c || h || p) && !(c && h && p),
                            v, m, g;
                        return console.warn(d), d ? ($("#signup-dob-year").parents(".control-group").addClass("field-error"), o.push({
                            error: "POPUP_SIGNUP_FORM_PARTIAL_BDAY",
                            fields: ["signup-dob-year"]
                        })) : (v = new Date - new Date(_.toInt(c), _.toInt(h) - 1, _.toInt(p)), m = v / 864e5, g = Math.floor(m / 365.24), g < 13 && ($("#signup-dob-year").parents(".control-group").addClass("field-error"), o.push({
                            error: "POPUP_SIGNUP_FORM_TOO_YOUNG_ACCOUNT",
                            fields: ["signup-dob-year"]
                        }))), i.FName = t, h.length === 1 && (h = "0" + h), p.length === 1 && (p = "0" + p), i.TSDOB = d ? null : c + "-" + h + "-" + p, i.Sex = r, o.length ? e.reject() : n && s.get("user").get("PathName") !== n ? (i.PathName = n, this.checkUsername().done(function(t) {
                            if (t.username === $("#signup-username").val() && e.state() !== "rejected") if (f === "default") {
                                var n = $("#signup-password1").val();
                                if (!n) {
                                    e.reject();
                                    return
                                }
                                s.get("user").changeUserInfo(i, n).done(u).fail(a)
                            } else l.type = f, s.get("user").changeUserInfo(i, null, l).done(u).fail(a);
                            else e.reject()
                        }).fail(function() {
                            e.reject()
                        })) : s.get("user").changeUserInfo(i).done(u).fail(a), e.fail(_.bind(this.showNextError, this)), e.promise()
                    },
                    startPopularStation: function(e) {
                        var n = $(e.currentTarget);
                        if (n.hasClass("pending")) return;
                        $("#lightbox-error").addClass("hide");
                        var r = s.get("player").get("currentQueue");
                        if (r && r.get("clientRadio")) {
                            var i = r.get("clientRadio");
                            n.addClass("pending"), t.Services.API.popularGetSongs("daily").always(_.bind(function(e) {
                                if (!e || !e.Songs || !e.Songs.length) {
                                    $("#lightbox-error").removeClass("hide").html(_.getString("LB_SIGNUP_POPULAR_STATION_FAILED")), n.removeClass("pending");
                                    return
                                }
                                i.disable().reset(e.Songs).enable(), i.on("needSongs", function(e, n) {
                                    n.get("clientRadioEnabled") || (t.Services.SWF.setAutoplay(!0), t.trigger("guts:startAutoplayFallbackContext", "autoplay", 0))
                                }), i.onActiveSongChange(r, {}, {
                                    playOnAdd: !0
                                }), this.close(), t.trigger("guts:startNewAutoplayContext", "popular", 0)
                            }, this))
                        } else $("#lightbox-error").removeClass("hide").html(_.getString("LB_SIGNUP_POPULAR_STATION_FAILED"))
                    },
                    gotoPopularPage: function() {
                        this.close(), t.router.setHash("/popular")
                    },
                    gotoUserPage: function() {
                        this.close(), t.router.setHash("/settings")
                    },
                    openClaimArtist: function() {
                        this.close(), t.trigger("lightbox:open", "claimArtist", {
                            fromSignup: !0,
                            stage: "name"
                        })
                    },
                    loginWithGoogle: function(e) {
                        this.model.get("appModel").login("google").done(_.bind(this.loginSuccess, this)).fail(_.bind(this.loginFailed, this))
                    },
                    loginWithTwitter: function(e) {
                        this.model.get("appModel").login("twitter").done(_.bind(this.loginSuccess, this)).fail(_.bind(this.loginFailed, this))
                    },
                    loginSuccess: function(e) {
                        this.close(), _.isFunction(this.options.params.onLogin) && _.defer(this.options.params.onLogin, e)
                    },
                    loginFailed: function(e) {
                        $("#login-password").val(""), e.error ? this.showError(e.error) : e && e.authType == "google" ? this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR")) : e && e.authType == "twitter" ? this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR")) : e && e.userID === 0 ? this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_AUTH_ERROR")) : this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_GENERAL_ERROR"))
                    },
                    onInviteFriendsClick: function() {
                        this.close(), t.trigger("lightbox:open", "invite")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Stations = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .play-station": "playRadioStation"
                    },
                    initialize: function() {
                        this._super("initialize"), this.options.params = this.options.params || {};
                        var e = this.model.get("appModel");
                        e.get("player").get("currentQueue").get("songs").length && !this.options.params.noRecs ? this.messageKey = "LB_START_RADIO_NO_SONGS_MESSAGE" : this.messageKey = "LB_START_RADIO_NO_RECS_MESSAGE";
                        if (!e.get("stations")) {
                            var n = t.Models.Station.getStations();
                            e.set("stations", n)
                        }
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("stations").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {
                            messageKey: this.messageKey
                        }));
                        var n = new t.Views.StationGrid({
                            el: $(".lightbox-stations #grid")[0],
                            collection: this.model.get("appModel").get("stations")
                        });
                        n && n.render(), this._super("onTemplate")
                    },
                    playRadioStation: function(e) {
                        var n = $(e.currentTarget).attr("data-tagid");
                        t.trigger("player:radio", !0, n), this.close()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Rename = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmit"
                    },
                    initialize: function() {
                        this._super("initialize"), this.model.set("playlist", this.options.params.playlist)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("renamePlaylist").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onSubmit: function(e) {
                        var t = $("#name").val(),
                            n = $("#description").val();
                        return t.length ? $.when(this.model.get("playlist").rename(t), this.model.get("playlist").changeDescription(n)).done(_.bind(function() {
                            this.renameSuccess()
                        }, this)).fail(_.bind(function() {
                            this.renameFailed()
                        }, this)) : ($("div.error .message", this.element).text(_.getString("POPUP_PLAYLIST_METADATA_ENTER_NAME_ERROR")).show(), $("div.error", this.element).show()), !1
                    },
                    renameSuccess: function() {
                        this.close()
                    },
                    renameFailed: function() {
                        $("div.error .message").text(_.getString("POPUP_PLAYLIST_META_TITLE_ERROR")).show(), $("div.error").show()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Delete = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmit"
                    },
                    initialize: function() {
                        this._super("initialize"), this.model.set("playlist", this.options.params.playlist)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("deletePlaylist").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onSubmit: function(e) {
                        var t = this.model.get("appModel").get("user");
                        return t.deletePlaylist(this.model.get("playlist").get("PlaylistID"), !0).done(_.bind(function() {
                            this.close()
                        }, this)), !1
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {};
                var n = [{
                    src: gsConfig.assetHost + "/webincludes/visualizers/LineNoFourier.swf",
                    title: "Amped",
                    author: "",
                    thumbnail: gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/linenofourier_thumb.png",
                    width: 480,
                    height: 270
                }, {
                    src: gsConfig.assetHost + "/webincludes/visualizers/LineWorm.swf",
                    title: "Worms",
                    author: "",
                    thumbnail: gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/lineworm_thumb.png",
                    width: 480,
                    height: 270
                }, {
                    src: gsConfig.assetHost + "/webincludes/visualizers/Tunnel.swf",
                    title: "Tunnel",
                    author: "",
                    thumbnail: gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/tunnel_thumb.png",
                    width: 480,
                    height: 270
                }, {
                    src: gsConfig.assetHost + "/webincludes/visualizers/LineSmooth.swf",
                    title: "Linear",
                    author: "",
                    thumbnail: gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/linesmooth_thumb.png",
                    width: 480,
                    height: 270
                }, {
                    src: gsConfig.assetHost + "/webincludes/visualizers/Explosion.swf",
                    title: "Explosion",
                    author: "",
                    thumbnail: gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/explosion_thumb.png",
                    width: 480,
                    height: 270
                }];
                t.Views.Lightboxes.Visualizers = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click a.visualizer": "onLinkClick"
                    },
                    initialize: function() {
                        this._super("initialize");
                        var e = _.orEqual(this.options.params.index, 0);
                        this.model.set({
                            visualizers: n,
                            index: e
                        }), this.subs = [], this.model.get("appModel").get("player").on("change:currentStreamServer", this.loadCrossdomain, this), this.subs.push($.subscribe("gs.visualizer.player.ready", _.bind(this.onVPlayerReady, this))), this.subs.push($.subscribe("gs.visualizer.playing", _.bind(this.vPlayerIsPlaying, this)))
                    },
                    onDestroy: function() {
                        this.model.get("appModel").get("player").off("change:currentStreamServer", this.loadCrossdomain, this);
                        for (var e = 0; e < this.subs.length; e++) $.unsubscribe(this.subs[e])
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("visualizers").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), swfobject.embedSWF("/webincludes/flash/visualizerplayer.swf", "visualizer-player", "480", "270", "9.0.0", null, {
                            version: gsConfig.snapVersion
                        }, {
                            allowscriptaccess: "always",
                            allowfullscreen: !0,
                            wmode: "window"
                        }, {
                            name: "visualizerPlayer"
                        }), this._super("onTemplate")
                    },
                    onVPlayerReady: function() {
                        document.visualizerPlayer && document.visualizerPlayer.setVisualizers && document.visualizerPlayer.setVisualizers(this.model.get("visualizers")), this.setVisualizer(), this.loadCrossDomain()
                    },
                    vPlayerIsPlaying: function(e) {
                        e && e.index !== this.model.get("index") && this.setVisualizer()
                    },
                    onLinkClick: function(e) {
                        var t = parseInt($(e.currentTarget).attr("data-visualizer-index"), 10);
                        isNaN(t) || (this.model.set("index", t), this.setVisualizer())
                    },
                    setVisualizer: function() {
                        var e = this.$el.find("a.visualizer");
                        e.removeClass("active").eq(this.model.get("index")).addClass("active");
                        var t = this.model.get("index");
                        $("#visualizer-title").html(" - " + this.model.get("visualizers")[t].title), document.visualizerPlayer.setVisualizer && document.visualizerPlayer.setVisualizer(t)
                    },
                    loadCrossDomain: function() {
                        var e = this.model.get("appModel").get("player").get("currentStreamServer");
                        e && document.visualizerPlayer && document.visualizerPlayer.loadCrossdomain && document.visualizerPlayer.loadCrossdomain(e)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Login = t.Views.Lightboxes.Base.extend({
                    _priority: 5,
                    events: {
                        "click a.signup": "gotoSignup",
                        "click a.upgrade": "gotoUpgrade",
                        "click a.forgot": "gotoForgot",
                        "click .exit-preview": "exitPreview",
                        "click .submit": "onSubmitClick",
                        "submit form": "onFormSubmit",
                        "click #lb-google-login": "loginWithGoogle",
                        "click #lb-twitter-login": "loginWithTwitter",
                        "click .open-signup": "gotoSignup"
                    },
                    initialize: function() {
                        this._super("initialize"), this.model.set("canClose", this._canClose)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("login").always(_.bind(this.onTemplate, this))
                    },
                    onDestroy: function() {
                        var e = $("#lightbox-login-form", this.$el);
                        e.length || (e = $("#lightbox-login-form")), e.detach(), $("#lightbox-login-holder").append(e), _.isFunction(this.options.params.onClose) && _.defer(this.options.params.onClose)
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        var t = $("#lightbox-login-form");
                        t.detach(), this.$el.html(this.renderTemplate(e)), $("#lightbox-login-form-goes-here").append(t);
                        var n = this.options.params || {},
                            r = [];
                        n && n.username && $("#login-username").val(n.username), n.error && this.showError(n.error), n.message && r.push(n.message), n.extraMessage && r.push(n.extraMessage), n.premiumRequired ? $("#lightbox-header p.title").attr("data-translate-text", "LB_SIGNUP_LOGIN_PREMIUM_TITLE").html(_.getString("LB_SIGNUP_LOGIN_PREMIUM_TITLE")) : n.overrideTitle ? $("#lightbox-header p.title").attr("data-translate-text", n.overrideTitle).html(_.getString(n.overrideTitle)) : $("#lightbox-header p.title").attr("data-translate-text", "LB_LOGIN_TITLE").html(_.getString("LB_LOGIN_TITLE")), r.length && this.showMessages(r);
                        var i = $("#login-username");
                        $("#login-password", this.element).val(""), $("#login-username", this.element).focus(), i.val() ? i.closest(".control-group").addClass("has-text") : i.closest(".control-group").removeClass("has-text"), this._super("onTemplate")
                    },
                    showError: function(e) {
                        $("#lightbox-error").removeClass("hide").text(e)
                    },
                    showMessages: function(e) {
                        var t = [];
                        _.forEach(e, function(e) {
                            t.push("<p>", e, "</p>")
                        }), this.$el.find("div.positive div.message", this.$el).html(t.join("")), this.$el.find("div.positive", this.$el).removeClass("hide")
                    },
                    gotoSignup: function(e) {
                        var n = this.options.params.onClose;
                        n && delete this.options.params.onClose, this.close(), t.trigger("lightbox:open", "signup", {
                            onLogin: this.options.params.onLogin,
                            destination: this.options.params.destination,
                            onClose: n
                        })
                    },
                    gotoUpgrade: function(e) {
                        this.close()
                    },
                    gotoForgot: function(e) {
                        this.close(), t.trigger("lightbox:open", "forget")
                    },
                    exitPreview: function(t) {
                        return _.cookie("jpreview", null, {
                            domain: ".grooveshark.com"
                        }), setTimeout(function() {
                            e.location = "http://grooveshark.com"
                        }, 100), !1
                    },
                    onSubmitClick: function(e) {
                        $("#lightbox-login-form").submit()
                    },
                    onFormSubmit: function(e) {
                        $("#lightbox-error").addClass("hide");
                        var t = $("#login-username").val(),
                            n = $("#login-password").val(),
                            r = this.options.params && this.options.params.destination;
                        this.model.get("appModel").login("normal", t, n, r).then(_.bind(this.loginSuccess, this)).fail(_.bind(this.loginFailed, this))
                    },
                    loginWithGoogle: function(e) {
                        var t = this.options.params && this.options.params.destination;
                        this.model.get("appModel").login("google", null, null, t).done(_.bind(this.loginSuccess, this)).fail(_.bind(this.loginFailed, this))
                    },
                    loginWithTwitter: function(e) {
                        var t = this.options.params && this.options.params.destination;
                        this.model.get("appModel").login("twitter", null, null, t).done(_.bind(this.loginSuccess, this)).fail(_.bind(this.loginFailed, this))
                    },
                    loginSuccess: function(e) {
                        $("#login-password").val(""), this.close(), _.isFunction(this.options.params.onLogin) && _.defer(this.options.params.onLogin, e)
                    },
                    loginFailed: function(e) {
                        $("#login-password").val("");
                        if (e.error) {
                            var t = _.getString(e.error);
                            this.showError(t.length ? t : e.error)
                        } else e && e.authType == "google" ? this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR")) : e && e.authType == "twitter" ? this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR")) : e && e.userID === 0 ? this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_AUTH_ERROR")) : this.showError(_.getString("LB_SIGNUP_LOGIN_FORM_GENERAL_ERROR"))
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {};
                var n = 5,
                    r = 32;
                t.Views.Lightboxes.Forget = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .login": "onLoginClick",
                        "click .submit": "onSubmitClick",
                        "submit form": "onFormSubmit"
                    },
                    initialize: function() {
                        this._super("initialize"), this.model.set("reset", this.options.params.hasOwnProperty("resetCode"))
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("forget").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    showError: function(e) {
                        this.$el.find(".error-text").text(e), this.$el.find(".error").removeClass("hide")
                    },
                    onLoginClick: function(e) {
                        this.close(), t.trigger("lightbox:open", "login", {
                            premiumRequired: !1,
                            _canClose: !0
                        })
                    },
                    onSubmitClick: function(e) {
                        $("#lightbox-forget-form").submit()
                    },
                    onFormSubmit: function(e) {
                        e.preventDefault();
                        var i = $("#forget-username").val();
                        if (this.model.get("reset")) {
                            var s = $("#forget-new-password").val(),
                                o = $("#forget-confirm-password").val();
                            s == o && s.length && s.length >= n && s.length <= r ? t.Services.API.resetPassword(i, this.options.params.resetCode, s).done(_.bind(this.resetSuccess, this, i, s)).fail(_.bind(this.resetFailed, this)) : this.showError(_.getString("POPUP_SIGNUP_FORM_PASSWORD_INVALID_NO_MATCH"))
                        } else t.Services.API.userForgotPassword(i).done(_.bind(this.serviceSuccess, this)).fail(_.bind(this.serviceFailed, this));
                        return !1
                    },
                    serviceSuccess: function(e) {
                        if (!e || e && e.userID == 0) return this.serviceFailed(e);
                        this.close(), t.trigger("notification:add", {
                            title: _.getString("LB_RESET_PASSWORD_SUCCESS"),
                            type: "success"
                        })
                    },
                    serviceFailed: function(e) {
                        this.showError(_.getString("POPUP_SIGNUP_FORGOT_FORM_RESPONSE_ERROR"))
                    },
                    resetSuccess: function(e, t, n) {
                        if (!n || n.success != 1) return this.resetFailed(n);
                        this.model.get("appModel").login("normal", e, t), this.close()
                    },
                    resetFailed: function(e) {
                        _.defined(e.success) ? e.success == 0 ? this.showError(_.getString("LB_FORGET_RESET_ERROR_BADUSER")) : this.showError(_.getString("LB_FORGET_RESET_ERROR_BADCODE")) : this.showError(_.getString("LB_FORGET_RESET_ERROR_UNKNOWN"))
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.CreatePlaylist = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmit"
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("createPlaylist").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onSubmit: function(e) {
                        var t = $("#name").val(),
                            n = $("#description").val(),
                            r = this.model.get("appModel").get("user"),
                            i = _.orEqual(this.options.params.songs, []);
                        return t.length ? r.createPlaylist(t, i, n).done(_.bind(this.createSuccess, this)).fail(_.bind(this.createFailed, this)) : ($("div.error .message", this.element).text(_.getString("POPUP_PLAYLIST_METADATA_ENTER_NAME_ERROR")).show(), $("div.error", this.element).show()), !1
                    },
                    createSuccess: function() {
                        this.close()
                    },
                    createFailed: function(e) {
                        e && e.error ? $("div.error .message").text(_.getString(e.error)).show() : $("div.error .message").text(_.getString("POPUP_PLAYLIST_METADATA_ERROR")).show(), $("div.error").show()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Bio = t.Views.Lightboxes.Base.extend({
                    initialize: function() {
                        this._super("initialize")
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("bio").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, this.options.params)), this._super("onTemplate")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.HTML5Promo = t.Views.Lightboxes.Base.extend({
                    render: function() {
                        this._super("render"), this.fetchTemplate("html5Promo").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {})), this._super("onTemplate")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Invite = t.Views.Lightboxes.Base.extend({
                    templatePath: "lightbox/invite",
                    events: {
                        "click .submit, submit form": "inviteFriends",
                        "click .invite-tab": "onTabClick",
                        "focus .share-url": "handleLinkFocus",
                        "blur .share-url": "handleLinkBlur"
                    },
                    initialize: function(e) {
                        this._super("initialize"), this.tabType = e.params.type || "email", this.clipboardHandler = null
                    },
                    onDestroy: function() {
                        this.clipboardHandler && this.clipboardHandler.destroy()
                    },
                    render: function() {
                        this._super("render"), this.indexRendered = !1, this.fetchTemplate("index").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {
                            tabType: this.tabType,
                            user: this.model.get("appModel").get("user")
                        })), this.indexRendered = !0, this.renderTab(), this._super("onTemplate"), _.delay(_.bind(function() {
                            this.clipboardHandler = _.setClipboardHandler($("#invite-lightbox-copy"), "http://www.grooveshark.com/" + this.model.get("appModel").get("user").toUrl("follow"), 2)
                        }, this))
                    },
                    renderTab: function() {
                        if (!this.indexRendered) return;
                        this.fetchTemplate("services/" + this.tabType).always(_.bind(this.onTabTemplate, this, this.tabType))
                    },
                    onTabTemplate: function(e, t) {
                        if (e != this.tabType) return;
                        var n = this.model.get("appModel").get("user");
                        $("#invite-svc").html(this.renderTemplate(t, {
                            user: n
                        }));
                        switch (this.tabType) {
                        case "email":
                            $("#invite-emails").gstagging({
                                source: [],
                                width: 528,
                                allowEmails: !0
                            }), this.$el.find(".submit").data("translateText", "SEND_EMAIL").text(_.getString("SEND_EMAIL"));
                            break;
                        case "facebook":
                            this.$el.find(".submit").data("translateText", "POST_TO_PROFILE").text(_.getString("POST_TO_PROFILE"));
                            break;
                        case "twitter":
                            this.$el.find(".submit").data("translateText", "POST_TO_PROFILE").text(_.getString("POST_TO_PROFILE"))
                        }
                    },
                    inviteFriends: function(e) {
                        e.preventDefault();
                        var n;
                        switch (this.tabType) {
                        case "facebook":
                            n = "", t.Services.Facebook.shareLink("http://grooveshark.com/" + this.model.get("appModel").get("user").toUrl("follow"), "invite", n).done(_.bind(this.inviteSuccess, this)).fail(_.bind(this.inviteFail, this));
                            break;
                        case "twitter":
                            n = $("#invite-message-twitter").val(), t.Services.Twitter.shareLink("", "invite", n).done(_.bind(this.inviteSuccess, this)).fail(_.bind(this.inviteFail, this));
                            break;
                        case "email":
                            this.emails = $("#invite-emails").gstagging("vals");
                            if (!this.emails.length) {
                                this.$el.find(".error").text(_.getString("INVITE_NO_VALID_EMAILS")).removeClass("hide");
                                return
                            }
                            t.Services.API.sendInvites(this.emails).done(_.bind(this.inviteSuccess, this)).fail(_.bind(this.inviteFail, this));
                        default:
                        }
                    },
                    inviteSuccess: function() {
                        var e, n;
                        switch (this.tabType) {
                        case "facebook":
                            break;
                        case "twitter":
                            e = "FRIENDS_INVITED", n = "FRIENDS_INVITED_TW_DESC";
                            break;
                        case "email":
                            console.warn(this.emails.length), e = this.emails.length > 1 ? "FRIENDS_INVITED" : "FRIEND_INVITED", n = "FRIENDS_INVITED_EMAIL_DESC";
                        default:
                        }
                        e && n && t.trigger("notification:add", {
                            title: _.getString(e),
                            description: _.getString(n),
                            duration: 8e3
                        }), this.close()
                    },
                    inviteFail: function() {
                        this.$el.find(".error").html("<p>There was an error with inviting! :(</p>")
                    },
                    onTabClick: function(e) {
                        var t = $(e.currentTarget);
                        this.tabType = t.data("inviteType");
                        var n = $("#invite-facebook"),
                            r = $("#invite-twitter"),
                            i = $("#invite-email");
                        switch (this.tabType) {
                        case "facebook":
                            n.addClass("active"), r.removeClass("active"), i.removeClass("active");
                            break;
                        case "twitter":
                            r.addClass("active"), i.removeClass("active"), n.removeClass("active");
                            break;
                        case "email":
                            i.addClass("active"), r.removeClass("active"), n.removeClass("active")
                        }
                        this.renderTab()
                    },
                    handleLinkFocus: function(e) {
                        var t = $(e.currentTarget).select();
                        t.length && (t[0].selectionStart = -1, t[0].selectionEnd = -1), t.val() && setTimeout(function() {
                            t.select()
                        }, 50);
                        var n = "1px solid #f77f00";
                        $("body").hasClass("is-ie7") && (n = "auto"), $("#icon-background").css({
                            border: n,
                            borderRight: "none"
                        }), $("#copy-background").css({
                            border: n,
                            borderLeft: "none"
                        })
                    },
                    handleLinkBlur: function(e) {
                        var t = $(e.currentTarget);
                        $("#icon-background").css({
                            border: "1px solid #bbb",
                            borderRight: "none"
                        }), $("#copy-background").css({
                            border: "1px solid #bbb",
                            borderLeft: "none"
                        })
                    }
                })
            }(), function() {
                function u(e) {
                    var t = !1;
                    return e = e.replace(/(\s+)/g, "").replace(/(-)/g, ""), e.match(/^[^\d]$/) ? !1 : (e.match(/^4[0-9]{12}(?:[0-9]{3})?$/) ? e.match(/^(417500|4917|4913|4508|4844|4026)/) ? t = "VE" : t = "VI" : e.match(/^5[1-5][0-9]{14}$/) ? t = "MC" : e.match(/^6(?:011|5[0-9]{2}|22[1-9]|4[4-9][0-9])[0-9]{12}$/) ? t = "DI" : e.match(/^3[47][0-9]{13}$/) ? t = "AM" : e.match(/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/) ? t = "DC" : e.match(/^(?:2131|1800|35\d{3})\d{11}$/) && (t = "JC"), t)
                }
                function a(e) {
                    var t = u(e);
                    if (!t) return !1;
                    var n = 0,
                        r = e.length,
                        i = r % 2;
                    for (var s = 0; s < r; s++) {
                        var o = _.toInt(e.charAt(s));
                        s % 2 === i && (o *= 2), o > 9 && (o -= 9), n += o
                    }
                    return n % 10 > 0 ? !1 : t
                }
                function f(e) {
                    var t = /[^\d ]/;
                    return !(!e || e.length > 4 || e.length < 4 || t.test(e))
                }
                function l(e) {
                    $("#lightbox-error").text(_.getString(e)).removeClass("hide")
                }
                function c() {
                    $(".control-group", "#lightbox-content").addClass("hide"), $("#loading-container").removeClass("hide")
                }
                var n = e.GS = e.GS || {};
                n.Views = n.Views || {}, n.Views.Lightboxes = n.Views.Lightboxes || {};
                var r, i, s, o = [null, "Visa", "American Express", "MasterCard", "Discover", "JCB", "Diners Club"];
                n.Views.Lightboxes.Payments = n.Views.Lightboxes.Base.extend({
                    events: {
                        "click .lightbox-tab": "onTabChange",
                        "click .sub-plan": "onChangeSubPlan",
                        "keyup #billing-card-number": "onCardNumberChange",
                        "keyup #billing-security-code": "onSecurityCodeChange",
                        "click #lightbox-footer .submit": "onPaymentContinue",
                        "click #lightbox-footer .confirm": "onPaymentConfirm",
                        "click #lightbox-footer .back": "onBack",
                        "click .paypal-open": "openPaypal",
                        "click .support": "contactSupport",
                        "click #change-credit-card": "changeCreditCard",
                        "click #send-code": "sendCodeEmail",
                        "submit .send-to-friend-form": "sendCodeEmail"
                    },
                    initialize: function(e) {
                        this._super("initialize"), this.options = e, this.model.set({
                            action: _.orEqual(e.params.action, "subscribe"),
                            tab: _.orEqual(e.params.tab, "creditcard"),
                            interval: _.orEqual(e.params.interval, "month"),
                            plan: "anywhere",
                            redeemCode: _.orEqual(e.params.code, ""),
                            currentCard: null,
                            purchaseMonths: 1,
                            error: null
                        });
                        if (n.Services.GUTS && !n.Services.GUTS.currentTest) {
                            var t = n.Services.Local.get("paymentsPopupTest");
                            if (typeof t == "undefined") {
                                var i = Math.random();
                                i <= .15 ? t = 1 : t = 2, n.Services.Local.set("paymentsPopupTest", t)
                            }
                            t != null && t == 1 && (n.Services.GUTS.currentTest = {}, n.Services.GUTS.currentTest.name = "paymentsPopup", n.Services.GUTS.currentGroup = 1)
                        }
                        r = this.model.get("appModel").get("user"), n.trigger("guts:forcelog", "payments_open")
                    },
                    fixContinueCopy: function() {
                        var e = $(".submit", "#lightbox-footer"),
                            t = e.data();
                        t && t.translateText != "CONTINUE" && e.data({
                            translateText: "CONTINUE"
                        }).text(_.getString("CONTINUE"))
                    },
                    render: function() {
                        this._super("render");
                        var e = _.chainLoading();
                        e.push(r.loadSubscription()), e.push(this.fetchTemplate("payments").always(e.bind(this.onTemplate, this)))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.model.get("action") !== "purchase" ? this.model.set("amounts", r.get("subscription").getPrices()[this.model.get("plan")]) : this.model.set("amounts", r.get("subscription").getPrices().codes), this.$el.html(this.renderTemplate(e, {
                            tab: this.model.get("tab"),
                            interval: this.model.get("interval"),
                            plan: this.model.get("plan"),
                            amounts: this.model.get("amounts"),
                            action: this.model.get("action"),
                            subscription: r.get("subscription"),
                            redeemCode: this.model.get("redeemCode"),
                            currentCard: this.model.get("currentCard"),
                            error: this.model.get("error")
                        })), this._super("onTemplate"), this.model.get("action") !== "purchase" && $("#lightbox-header .title").before($('<i class="icon icon-lock icon-lock-l-gray-flat"></i>'))
                    },
                    onTabChange: function(e) {
                        var t = $(e.currentTarget),
                            n = t.attr("rel");
                        this.onBack();
                        switch (n) {
                        case "creditcard":
                            $("#subscription-plans").removeClass("hide"), $("#paypal-container").addClass("hide"), $("#redeem-container").addClass("hide"), $("#credit-card-container").removeClass("hide");
                            break;
                        case "paypal":
                            $("#subscription-plans").removeClass("hide"), $("#credit-card-container").addClass("hide"), $("#redeem-container").addClass("hide");
                            break;
                        case "redeem":
                            $("#subscription-plans").addClass("hide"), $("#credit-card-container").addClass("hide"), $("#paypal-container").addClass("hide"), $("#redeem-container").removeClass("hide")
                        }
                        $(".lightbox-tab", "#lb-nav").removeClass("active"), t.addClass("active"), this.model.set("tab", n), this.fixContinueCopy()
                    },
                    onChangeSubPlan: function(e) {
                        var t = $(e.currentTarget);
                        $(".sub-plan", "#lightbox").removeClass("selected"), t.hasClass("code-duration") ? this.model.set("purchaseMonths", _.toInt(t.attr("rel"))) : this.model.set("interval", t.attr("rel")), t.addClass("selected")
                    },
                    onCardNumberChange: function(e) {
                        var t = $(e.currentTarget),
                            n = t.val(),
                            r = u(n);
                        r || (r = ""), document.getElementById("credit-card-type").className = r, t.parent().removeClass("field-error")
                    },
                    onSecurityCodeChange: function(e) {
                        var t = $(e.currentTarget);
                        t.parent().removeClass("field-error")
                    },
                    onPaymentContinue: function(e, t) {
                        var n = $(e.currentTarget);
                        if (n.hasClass("disabled") && t !== !0) return;
                        this.fixContinueCopy(), $("#lightbox-error").addClass("hide");
                        if (this.model.get("action") === "subscribe" || this.model.get("action") === "extend") switch (this.model.get("tab")) {
                        case "creditcard":
                            if (r.get("subscription").isSpecial()) {
                                this.close();
                                return
                            }
                            var i = this.processCreditCard(!1);
                            if (!i) return;
                            if (r.get("subscription").hasRecurring() && this.model.get("goBackAfterCancel") !== this.model.get("action")) {
                                this.model.set({
                                    goBackAfterCancel: this.model.get("action"),
                                    action: "cancel"
                                }), l("ERROR_EXTEND_CANCEL_REQUIRED"), $("#subscription-plans").addClass("hide"), $(".control-group", this.$el).addClass("hide"), $("#message-payments").text(_.getString("PAYMENTS_CONFIRM_EXTEND_CANCEL")), $(".submit", "#lightbox-footer").data({
                                    translateText: "CANCEL_SUBSCRIPTION"
                                }).text(_.getString("CANCEL_SUBSCRIPTION")), $("#message-container").removeClass("hide"), $(".support", "#lightbox-footer").addClass("hide"), $(".back", "#lightbox-footer").removeClass("hide");
                                return
                            }
                            $("#subscription-plans").addClass("hide"), $("#credit-card-container").addClass("hide"), $("#confirm-container").removeClass("hide"), $(".submit", "#lightbox-footer").addClass("hide"), $(".confirm-payment", "#lightbox-footer").removeClass("hide disabled"), $(".title", "#lightbox-header").text(_.getString("ORDER_SUMMARY")), this.updateConfirmation(this.model.get("interval"), parseInt(_.orEqual($("#sub-recurring:checked").val(), 0), 2));
                            break;
                        case "paypal":
                            if (r.get("subscription").isSpecial()) {
                                this.close();
                                return
                            }
                            n.addClass("disabled");
                            var s = this.processPaypal();
                            s ? s.always(function() {
                                n.removeClass("disabled")
                            }) : n.removeClass("disabled");
                            break;
                        case "redeem":
                            if (r.get("subscription").isSpecial()) {
                                this.close();
                                return
                            }
                            n.addClass("disabled"), this.verifyCode().always(function() {
                                n.removeClass("disabled")
                            })
                        } else {
                            if (this.model.get("action") === "cancel") {
                                n.addClass("disabled"), this.cancelSubscription().always(function() {
                                    n.removeClass("disabled")
                                });
                                return
                            }
                            if (this.model.get("action") === "purchase") {
                                var o = this.processCreditCard(!1, !0);
                                if (!o) return;
                                $("#code-plans").addClass("hide"), $("#credit-card-container").addClass("hide"), $("#confirm-container").removeClass("hide"), $(".submit", "#lightbox-footer").addClass("hide"), $(".confirm-payment", "#lightbox-footer").removeClass("hide disabled"), $(".title", "#lightbox-header").text(_.getString("ORDER_SUMMARY")), this.updatePromoCodeConfirmation(this.model.get("purchaseMonths"))
                            }
                        }
                        $(".support", "#lightbox-footer").addClass("hide"), $(".back", "#lightbox-footer").removeClass("hide")
                    },
                    processCreditCard: function(e, t) {
                        var n = !0,
                            r = $("#billing-card-number").val();
                        $("#password-container").addClass("hide");
                        var i = $("#billing-security-code").val(),
                            s = _.toInt($("#billing-exp-month").val()),
                            o = _.toInt($("#billing-exp-year").val());
                        if (!r || !a(r)) $("#billing-card-number").parent().addClass("field-error"), n && l("VIP_ERROR_CARD_NUMBER"), n = !1;
                        if (!i || i.length < 3 || i.length > 4 || !$.isNumeric(i)) $("#billing-security-code").parent().addClass("field-error"), n && l("VIP_ERROR_CVD"), n = !1;
                        s || ($("#billing-exp-month").parent().addClass("field-error"), n = !1), o || ($("#billing-exp-year").parent().addClass("field-error"), n = !1);
                        if (!e || !n) return n;
                        var u = {
                            number: r,
                            cvc: i,
                            exp_month: s,
                            exp_year: o
                        };
                        return c(), t ? this.completePurchaseCode(u) : this.completeCreditCardSubscribe(u)
                    },
                    completeCreditCardSubscribe: function(e) {
                        var t = this.options.params ? this.options.params.onUpgrade : null,
                            i = this.model.get("interval"),
                            s = this.model.get("amounts")[i],
                            o = n.Models.Subscription.PLAN_TYPES[this.model.get("plan").toUpperCase()],
                            u = parseInt(_.orEqual($("#sub-recurring:checked").val(), 0), 2),
                            a = $.Deferred();
                        return n.Services.API.stripeSubscribe(s, o, e, i, u).done(function(e) {
                            gsConfig.runMode !== "production" && console.log("payment result:", e);
                            if (e && e.status === "SUCCESS") r.gotNewSubscription().done(_.bind(function() {
                                $("#lb-nav").addClass("hide"), $(".control-group", "#lightbox-content").addClass("hide"), $(".back", "#lightbox-footer").addClass("hide"), $(".confirm", "#lightbox-footer").addClass("hide"), $(".close", "#lightbox-footer").removeClass("hide"), $("#success-container").removeClass("hide"), $(".title", "#lightbox-header").text(_.getString("PAYMENT_SUCCESS")), _.isFunction(t) && t(r), a.resolve(), n.trigger("guts:forcelog", "payments_subscribed", {
                                    userID: r.get("UserID"),
                                    type: "cc"
                                })
                            }, this)).fail(function() {
                                $("#loading-container").addClass("hide"), $("#confirm-container").removeClass("hide"), l("REFRESH_SUB_ERROR_UNKNOWN"), a.reject()
                            });
                            else {
                                $("#loading-container").addClass("hide"), $("#confirm-container").removeClass("hide");
                                if (e.result && e.result.errorCode) {
                                    var i = "VIP_ERROR_PAYMENT_PROCESSOR";
                                    switch (e.result.errorCode) {
                                    case 3399:
                                    case "card_declined":
                                        i = "VIP_ERROR_INVALID";
                                        break;
                                    case 3310:
                                    case "invalid_cvc":
                                        i = "VIP_ERROR_CVD";
                                        break;
                                    case "expired_card":
                                    case "invalid_expiry_month":
                                    case "invalid_expiry_year":
                                        i = "VIP_ERROR_DATE";
                                        break;
                                    case "incorrect_number":
                                    case "invalid_number":
                                        i = "VIP_ERROR_CARD_NUMBER"
                                    }
                                    l(i)
                                } else l("VIP_ERROR_UNKNOWN");
                                a.reject(), n.trigger("guts:forcelog", "payments_failed", {
                                    error: e.result && e.result.errorCode || "failed",
                                    type: "cc"
                                })
                            }
                        }).fail(function() {
                            $("#loading-container").addClass("hide"), $("#confirm-container").removeClass("hide"), l("VIP_ERROR_UNKNOWN"), a.reject()
                        }), a.promise()
                    },
                    completePurchaseCode: function(e) {
                        var t = this.options.params && this.options.params.onPurchase,
                            r = this.model.get("purchaseMonths"),
                            i = this.model.get("amounts");
                        return n.Services.API.purchasePromoCode(r, i[r + "month"], e).done(_.bind(function(e) {
                            gsConfig.runMode !== "production" && console.log("payment result:", e), $("#loading-container").addClass("hide");
                            if (e && e.success) $("#success-container").removeClass("hide"), $("#promo-code-result").text(e.code), $("#promo-code-footer").html(_.getString("CODE_DETAILS_FOOTER", {
                                code: e.code
                            })), this.model.set("promoCode", e.code), $("#send-to-friend-container").removeClass("hide"), $(".back", "#lightbox-footer").addClass("hide"), $(".confirm", "#lightbox-footer").addClass("hide"), $(".close", "#lightbox-footer").removeClass("hide"), $(".title", "#lightbox-header").text(_.getString("PAYMENT_SUCCESS")), _.isFunction(t) && t(e.code);
                            else if (e && e.errorCode) {
                                $("#confirm-container").removeClass("hide");
                                switch (e.errorCode) {
                                case 1:
                                    l("UNKNOWN_PURCHASE_ERROR");
                                    break;
                                case 2:
                                    l("ERROR_PRICE_TOO_LOW");
                                    break;
                                case 3:
                                    var n = e.purchaseResult;
                                    if (n && n.result.errorCode) {
                                        var r = "VIP_ERROR_PAYMENT_PROCESSOR";
                                        switch (n.result.errorCode) {
                                        case 3399:
                                        case "card_declined":
                                            r = "VIP_ERROR_INVALID";
                                            break;
                                        case 3310:
                                        case "invalid_cvc":
                                            r = "VIP_ERROR_CVD";
                                            break;
                                        case "expired_card":
                                        case "invalid_expiry_month":
                                        case "invalid_expiry_year":
                                            r = "VIP_ERROR_DATE";
                                            break;
                                        case "incorrect_number":
                                        case "invalid_number":
                                            r = "VIP_ERROR_CARD_NUMBER"
                                        }
                                        l(r)
                                    } else l("VIP_ERROR_UNKNOWN");
                                    break;
                                case 4:
                                    l("ERROR_FAILED_TO_GENERATE_CODE"), $(".back", "#lightbox-footer").addClass("hide"), $(".confirm", "#lightbox-footer").addClass("hide"), $(".support", "#lightbox-footer").removeClass("hide"), $(".close", "#lightbox-footer").removeClass("hide")
                                }
                            } else $("#confirm-container").removeClass("hide"), l("VIP_ERROR_UNKNOWN")
                        }, this)).fail(function() {
                            $("#loading-container").addClass("hide"), $("#confirm-container").removeClass("hide"), l("VIP_ERROR_UNKNOWN")
                        })
                    },
                    onPaymentConfirm: function(e) {
                        var t = $(e.currentTarget);
                        if (t.hasClass("disabled")) return;
                        $("#lightbox-error").addClass("hide");
                        if (this.model.get("action") === "subscribe" || this.model.get("action") === "extend") switch (this.model.get("tab")) {
                        case "creditcard":
                            this.processCreditCard(!0).always(function() {
                                t.removeClass("disabled")
                            });
                            break;
                        case "paypal":
                            this.confirmPaypal().always(function() {
                                t.removeClass("disabled")
                            });
                            break;
                        case "redeem":
                            this.confirmCode().always(function() {
                                t.removeClass("disabled")
                            })
                        } else this.model.get("action") === "purchase" && this.processCreditCard(!0, !0).always(function() {
                            t.removeClass("disabled")
                        });
                        t.addClass("disabled")
                    },
                    processPaypal: function() {
                        var i = this.model.get("interval"),
                            s = this.model.get("amounts")[i],
                            o = n.Models.Subscription.PLAN_TYPES[this.model.get("plan").toUpperCase()];
                        if (r.get("subscription").hasRecurring() && this.model.get("goBackAfterCancel") !== this.model.get("action")) {
                            this.model.set({
                                goBackAfterCancel: this.model.get("action"),
                                action: "cancel"
                            }), l("ERROR_EXTEND_CANCEL_REQUIRED"), $("#subscription-plans").addClass("hide"), $(".control-group", this.$el).addClass("hide"), $("#message-payments").text(_.getString("PAYMENTS_CONFIRM_EXTEND_CANCEL")), $("#message-container").removeClass("hide"), $(".support", "#lightbox-footer").addClass("hide"), $(".back", "#lightbox-footer").removeClass("hide");
                            return
                        }
                        var u = e.location.protocol == "https:" ? "https" : t;
                        return n.Services.API.paypalInitPayment(s, 0, o, "", u).done(_.bind(function(e) {
                            e && e.result && e.result.token ? (this.model.set("paypalToken", e.result.token), this.model.set("paypalURL", e.result.redirectURL), $(".submit", "#lightbox-footer").addClass("hide"), $("#subscription-plans").addClass("hide"), $("#paypal-container").removeClass("hide")) : (this.onBack(), l("PAYPAL_INIT_ERROR_UNKNOWN"))
                        }, this)).fail(_.bind(function() {
                            this.onBack(), l("PAYPAL_INIT_ERROR_UNKNOWN")
                        }, this))
                    },
                    openPaypal: function() {
                        if (this.model.get("paypalToken")) {
                            var t = this.model.get("paypalToken"),
                                r = this.model.get("paypalURL"),
                                o = _.getCenteredCoordinates(1020, 800);
                            s = new $.Deferred, s.always(_.bind(function(e) {
                                e.success && e.payerID && e.token === t ? ($("#paypal-container").addClass("hide"), $("#confirm-container").removeClass("hide"), $(".confirm-payment", "#lightbox-footer").removeClass("hide disabled"), $(".title", "#lightbox-header").text(_.getString("ORDER_SUMMARY")), this.model.set("paypalToken", e.token), this.model.set("paypalPayerID", e.payerID), this.updateConfirmation(this.model.get("interval"), parseInt(_.orEqual($("#sub-recurring:checked").val(), 0), 2), 1)) : (console.error("Unexpected response from Paypal", e), this.onBack(), n.trigger("guts:forcelog", "payments_failed", {
                                    error: e && e.error || "failed",
                                    step: "auth",
                                    type: "pp"
                                }))
                            }, this)), i = e.open(r, "", "width=1020,height=800,status=1,location=1,resizable=yes,left=" + o[0] + ",top=" + o[1])
                        } else this.onBack()
                    },
                    confirmPaypal: function() {
                        if (!this.model.get("paypalToken") || !this.model.get("paypalPayerID")) return this.onBack(), !1;
                        var e = this.model.get("interval"),
                            t = this.model.get("amounts")[e],
                            i = n.Models.Subscription.PLAN_TYPES[this.model.get("plan").toUpperCase()],
                            s = parseInt(_.orEqual($("#sub-recurring:checked").val(), 0), 2),
                            o = this.model.get("paypalToken"),
                            u = this.model.get("paypalPayerID"),
                            a = this.options.params ? this.options.params.onUpgrade : null;
                        return $("#loading-container").removeClass("hide"), n.Services.API.paypalSubscribe(o, u, t, 0, i, e, s, "").done(function(e) {
                            console.log("payment result:", e), $("#loading-container").addClass("hide"), $("#confirm-container").removeClass("hide"), e && e.status === "SUCCESS" && r.gotNewSubscription().done(_.bind(function() {
                                $("#lb-nav").addClass("hide"), $(".control-group", "#lightbox-content").addClass("hide"), $(".back", "#lightbox-footer").addClass("hide"), $(".confirm", "#lightbox-footer").addClass("hide"), $(".close", "#lightbox-footer").removeClass("hide"), $("#success-container").removeClass("hide"), $(".title", "#lightbox-header").text(_.getString("PAYMENT_SUCCESS")), _.isFunction(a) && a(r), n.trigger("guts:forcelog", "payments_subscribed", {
                                    userID: r.get("UserID"),
                                    type: "pp"
                                })
                            }, this)).fail(function() {
                                l("REFRESH_SUB_ERROR_UNKNOWN")
                            })
                        }).fail(function() {
                            $("#loading-container").addClass("hide"), $("#confirm-container").removeClass("hide"), l("VIP_ERROR_UNKNOWN"), n.trigger("guts:forcelog", "payments_failed", {
                                error: result && result.error || "failed",
                                step: "confirm",
                                type: "pp"
                            })
                        })
                    },
                    onBack: function() {
                        $("#lightbox-error").addClass("hide"), $("#confirm-container").addClass("hide");
                        if (this.model.get("action") === "subscribe" || this.model.get("action") === "extend") switch (this.model.get("tab")) {
                        case "creditcard":
                            $("#subscription-plans").removeClass("hide"), $("#credit-card-container").removeClass("hide");
                            break;
                        case "paypal":
                            this.model.set("paypalToken", null), this.model.set("paypalPayerID", null), this.model.set("paypalToken", null), $("#subscription-plans").removeClass("hide");
                            break;
                        case "redeem":
                            $("#message-container").addClass("hide"), $("#redeem-container").removeClass("hide")
                        } else if (this.model.get("action") === "purchase") $("#code-plans").removeClass("hide"), $("#credit-card-container").removeClass("hide");
                        else if (this.model.get("action") === "cancel") {
                            this.close();
                            return
                        }
                        $(".confirm", "#lightbox-footer").addClass("hide"), $(".submit", "#lightbox-footer").removeClass("hide disabled"), $(".back", "#lightbox-footer").addClass("hide"), $(".support", "#lightbox-footer").removeClass("hide"), $(".title", "#lightbox-header").text(_.getString("BILLING_INFORMATION")), this.fixContinueCopy()
                    },
                    updateConfirmation: function(e, t, n, i) {
                        n = _.orEqual(n, 1);
                        var s = $("#confirm-container"),
                            o = "";
                        n === 1 ? o = _.getString("SINGLE_ANYWHERE_SUMMARY_LINE", {
                            period: _.getString(e.toUpperCase())
                        }) : o = _.getString("MULTI_ANYWHERE_SUMMARY_LINE", {
                            length: n,
                            period: _.getString(e.toUpperCase() + "_PLURAL")
                        }), this.model.get("action") === "extend" && r.get("subscription").hasSubscription() && (o += " " + _.getString("SUBSCRIPTION_STARTING_ON", {
                            date: r.get("subscription").getEndDate()
                        })), s.find(".product").find(".description").text(o), s.find(".total").find(".description").text(_.getString("TOTAL_WITH_TYPE_LINE", {
                            type: _.getString(t ? e === "month" ? "MONTHLY_RECURRING" : "YEARLY_RECURRING" : "ONE_TIME")
                        })), i = "$" + _.orEqual(i, this.model.get("amounts")[e]).toFixed(2), s.find(".product").find(".price").text(i), s.find(".total").find(".price").text(i)
                    },
                    updatePromoCodeConfirmation: function(e) {
                        var t = $("#confirm-container");
                        e < 12 && e > 1 ? t.find(".product").find(".description").text(_.getString("MULTI_ANYWHERE_CODE_SUMMARY_LINE", {
                            period: _.getString("MONTH_PLURAL"),
                            length: e
                        })) : t.find(".product").find(".description").text(_.getString("SINGLE_ANYWHERE_CODE_SUMMARY_LINE", {
                            period: _.getString(e === 1 ? "MONTH" : "YEAR")
                        })), t.find(".total").find(".description").text(_.getString("TOTAL_WITH_TYPE_LINE", {
                            type: _.getString("ONE_TIME")
                        }));
                        var n = "$" + this.model.get("amounts")[e + "month"].toFixed(2);
                        t.find(".product").find(".price").text(n), t.find(".total").find(".price").text(n)
                    },
                    cancelSubscription: function() {
                        var t = r.get("subscription");
                        if (!t) return;
                        var i, s = !1;
                        if (r.get("subscription").get("apiVersion") === 2) i = n.Services.API.nautilusCancelCurrentSubscription();
                        else {
                            s = !0, i = $.Deferred();
                            var o = "disableRecurring" + Math.floor(Math.random() * 1e5),
                                u = "https://vip.grooveshark.com/disableRecurring.php",
                                a = {
                                    callbackMethod: o,
                                    callbackUrl: location.protocol + "//" + location.host + "/vipCallback.php"
                                };
                            e[o] = function(t) {
                                t && t.bSuccess ? i.resolve({
                                    status: "SUCCESS"
                                }) : i.reject({});
                                try {
                                    delete e[o]
                                } catch (n) {}
                            }, n.Services.API.httpsFormSubmit(u, a, o)
                        }
                        return i.always(_.bind(function(e) {
                            console.log("cancelSub", e);
                            if (!e || e.status !== "SUCCESS") {
                                l("ERROR_CANCELLING_SUB");
                                return
                            }
                            n.trigger("guts:forcelog", "payments_cancel");
                            var t = this.model.get("goBackAfterCancel");
                            if (t) {
                                $("#message-container").addClass("hide"), t === "redeem" ? ($("#redeem-container").removeClass("hide"), this.model.set({
                                    action: "subscribe",
                                    tab: "redeem"
                                }), this.verifyCode(this.model.get("redeemCode"))) : ($("#subscription-plans").removeClass("hide"), this.model.get("tab") == "creditcard" && $("#credit-card-container").removeClass("hide"), this.model.set("action", t), this.onPaymentContinue({
                                    currentTarget: $("#lightbox-footer .submit")[0]
                                }, !0));
                                return
                            }
                            this.close(), r.gotNewSubscription(s).done(function() {
                                n.trigger("notification:add", {
                                    description: _.getString("PAYMENTS_CANCEL_SUCCESS"),
                                    type: "success"
                                })
                            }).fail(function() {
                                l("REFRESH_SUB_ERROR_UNKNOWN")
                            })
                        }, this))
                    },
                    contactSupport: function() {
                        this.close(), n.trigger("guts:forcelog", "payments_contact"), n.trigger("lightbox:open", "feedback", {
                            billing: !0
                        })
                    },
                    verifyCode: function(e) {
                        e = _.orEqual(e, $("#redeem-code-input").val());
                        if (!e) {
                            var t = $.Deferred();
                            return l("ERROR_EMPTY_REDEEM_CODE"), t.reject(), t.promise()
                        }
                        return n.Services.API.verifyPromoCode(e).done(_.bind(function(t) {
                            t = t || {}, t.valid && t.canRedeem ? ($("#lightbox-error").addClass("hide"), this.updateConfirmation(t.interval, !1, t.length, 0), $("#redeem-container").addClass("hide"), $("#confirm-container").removeClass("hide"), $(".submit", "#lightbox-footer").addClass("hide"), $(".redeem", "#lightbox-footer").removeClass("hide disabled"), $(".title", "#lightbox-header").text(_.getString("ORDER_SUMMARY")), this.model.set("redeemCode", e)) : t.errorCode == 1 ? l("ERROR_REDEEM_CODE_INVALID") : t.errorCode == 3 ? l("ERROR_REDEEM_CODE_TOO_MUCH") : t.errorCode == 2 ? (this.model.set({
                                goBackAfterCancel: "redeem",
                                action: "cancel",
                                redeemCode: e
                            }), l("ERROR_REDEEM_CANCEL_REQUIRED"), $(".control-group", this.$el).addClass("hide"), $("#message-payments").text(_.getString("PAYMENTS_CONFIRM_EXTEND_CANCEL")), $(".submit", "#lightbox-footer").data({
                                translateText: "CANCEL_SUBSCRIPTION"
                            }).text(_.getString("CANCEL_SUBSCRIPTION")), $("#message-container").removeClass("hide"), $(".back", "#lightbox-footer").removeClass("hide")) : l("ERROR_REDEEM_CODE_VERIFY_FAILED"), t.valid || n.trigger("guts:forcelog", "payments_failed", {
                                error: t.errorCode || "failed",
                                step: "verify",
                                type: "promo"
                            })
                        }, this)).fail(function() {
                            l("ERROR_REDEEM_CODE_VERIFY_FAILED"), n.trigger("guts:forcelog", "payments_failed", {
                                error: "failed",
                                step: "verify",
                                type: "promo"
                            })
                        })
                    },
                    confirmCode: function() {
                        if (!this.model.get("redeemCode")) {
                            this.onBack(), l("ERROR_EMPTY_REDEEM_CODE");
                            var e = $.Deferred();
                            return e.reject(), e.promise()
                        }
                        var t = $.Deferred();
                        return n.Services.API.promoSubscribe(this.model.get("redeemCode")).done(_.bind(function(e) {
                            e && e.status === "SUCCESS" ? r.gotNewSubscription().done(_.bind(function() {
                                $("#lb-nav").addClass("hide"), $(".control-group", "#lightbox-content").addClass("hide"), $(".back", "#lightbox-footer").addClass("hide"), $(".confirm", "#lightbox-footer").addClass("hide"), $(".close", "#lightbox-footer").removeClass("hide"), $("#success-container").removeClass("hide"), this.options.params && _.isFunction(this.options.params.onUpgrade) && this.options.params.onUpgrade(r), t.resolve(), n.trigger("guts:forcelog", "payments_subscribed", {
                                    userID: r.get("UserID"),
                                    type: "promo"
                                })
                            }, this)).fail(function() {
                                l("REFRESH_SUB_ERROR_UNKNOWN"), t.reject()
                            }) : (e.result && e.result.errorCode == 8819905 ? l("ERROR_REDEEM_FAILED_DUPLICATE") : l("ERROR_REDEEM_FAILED"), t.reject(), n.trigger("guts:forcelog", "payments_failed", {
                                error: e.result && e.result.errorCode || "failed",
                                step: "confirm",
                                type: "promo"
                            }))
                        }, this)).fail(function() {
                            l("ERROR_REDEEM_FAILED"), t.reject()
                        }), t.promise()
                    },
                    changeCreditCard: function() {
                        $("#credit-card-current").addClass("hide"), $("#credit-card-form").removeClass("hide"), this.model.set("currentCard", null)
                    },
                    sendCodeEmail: function() {
                        var e = $("#send-code-email").val();
                        $("#lightbox-error").addClass("hide");
                        if (!e) return;
                        n.Services.API.emailPromoCode(e, this.model.get("promoCode")).done(function(e) {
                            e ? $("#send-to-friend-container").empty().css("text-align", "center").append("<p>" + _.getString("SUCCESS_CODE_SENT") + "</p>") : l("ERROR_SENDING_CODE")
                        }).fail(function() {
                            l("ERROR_SENDING_CODE")
                        })
                    }
                }), e.confirmPaypalResult = function(e) {
                    console.log("paypal confirm", e), i && (i.close(), i = null);
                    if (!s) return;
                    try {
                        e = $.parseJSON(e)
                    } catch (t) {
                        s.reject({
                            success: !1,
                            error: "parseError"
                        });
                        return
                    }
                    s.resolve(e)
                }
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.SwfTimeout = t.Views.Lightboxes.Generic.extend({
                    events: {
                        "click .reload": "onReloadClick"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments)));
                        var n = swfobject.hasFlashPlayerVersion("9.0.0"),
                            r = n ? _.getString("LB_SWF_TIMEOUT_MESSAGE") : _.getString("LB_NO_FLASH_MSG"),
                            i = _.getString("LB_HTML5_MESSAGE", {
                                url: "http://html5.grooveshark.com"
                            });
                        this.view = {
                            header: "LB_SWF_TIMEOUT_TITLE",
                            messageHTML: "<p>" + r + "<br /><br />" + i + "</p>",
                            buttonsRight: [{
                                label: "LB_REFRESH_GROOVESHARK",
                                className: "reload"
                            }]
                        }, n || (this.view.buttonsLeft = [{
                            label: "LB_INSTALL_FLASH",
                            href: "http://get.adobe.com/flashplayer/",
                            className: "install",
                            target: "_blank"
                        }], t.Views.Lightbox.trackLightboxView("swfTimeout/noFlash")), t.Services.SWF.ready.done(_.bind(function() {
                            t.Views.Lightbox.trackLightboxView("swfTimeout/autoClosed"), _.defer(_.bind(this.close, this))
                        }, this))
                    },
                    onReloadClick: function(t) {
                        e.location.reload(!0)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.UnsupportedBrowser = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click a.browser-chrome-name": "onChromeClick"
                    },
                    initialize: function() {
                        this._super("initialize"), this.upgraded = !1;
                        var e = _.defaults(this.options.params, {
                            isUncertain: !1,
                            isChromeFrame: !1
                        });
                        this.model.set(e)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("unsupportedBrowser").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onChromeClick: function(t) {
                        t.preventDefault(), this.upgraded ? (this.close(), e.open(e.location.href)) : (this.upgraded = !0, e.open("http://www.google.com/chromeframe?quickenable=true"), this.$el.find("p.chrome-msg").text(_.getString("LB_CHROME_FRAME_BACK_MSG")), this.$el.find("a.browser-chrome-name").text(_.getString("LB_RELOAD_GROOVESHARK_NEW_WINDOW")))
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.VipOnlyFeature = t.Views.Lightboxes.Generic.extend({
                    events: {
                        "click .signup": "onSignupClick",
                        "click .login": "onLoginClick"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.view = {
                            header: "LB_VIP_ONLY_TITLE",
                            bigHeader: "LB_VIP_ONLY_SUBTITLE",
                            message: "LB_VIP_ONLY_MSG",
                            buttonsLeft: [{
                                label: t.getLoggedInUserID() > 0 ? "CLOSE" : "LOGIN",
                                className: t.getLoggedInUserID() > 0 ? "close" : "login"
                            }]
                        }
                    },
                    onSignupClick: function(e) {
                        this.close(), t.getLoggedInUserID() > 0 ? t.trigger("lightbox:open", "payments", {
                            onUpgrade: this.options.params.onLogin
                        }) : t.trigger("lightbox:open", "signup", {
                            onLogin: this.options.params.onLogin
                        })
                    },
                    onLoginClick: function(e) {
                        this.close(), t.trigger("lightbox:open", "login", {
                            onLogin: this.options.params.onLogin
                        })
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Video = t.Views.Lightboxes.Base.extend({
                    wasPlaying: !1,
                    player: null,
                    videos: null,
                    hideHeader: !1,
                    currentIndex: 0,
                    events: {
                        "click  .video-select": "selectVideo"
                    },
                    initialize: function(e) {
                        this._super("initialize"), t.on("gs.video.player.ready", _.bind(this.setVideos, this)), this.player = this.model.get("appModel").get("player"), this.wasPlaying = this.player.get("playStatus") == t.Models.Player.playStatuses.PLAYING, this.videos = e.params.videos, this.currentIndex = _.orEqual(e.params.index, 0), this.hideHeader = _.orEqual(e.params.hideHeader, !1), this.wasPlaying && t.trigger("player:togglePlay")
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("video").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, {
                            options: this.options
                        })), this.embedVideo(), this.buildHeader(), this._super("onTemplate")
                    },
                    buildHeader: function() {
                        if (this.hideHeader) return;
                        var e = this.model.get("appModel").get("theme");
                        e && $(".theme-component:visible").length && e.get("sections") && _.indexOf(e.get("sections"), "#theme-videoheader") >= 0 && this.fetchTemplate("themes/" + e.get("location") + "/videoheader").always(_.bind(function(n) {
                            if (this.destroyed) return;
                            setTimeout(_.bind(function() {
                                var r = $("#theme-videoheader");
                                if (r.length) {
                                    var i = {
                                        view: e.get("view"),
                                        section: "#theme-videoheader",
                                        currentTemplate: "videoheader"
                                    };
                                    r.html(this.renderTemplate(n, i))
                                }
                                t.trigger("theme:videoheader")
                            }, this), 0)
                        }, this))
                    },
                    embedVideo: function() {
                        if (this.videos && this.videos[this.currentIndex] && this.videos[this.currentIndex].type) {
                            var e = this.videos[this.currentIndex],
                                n = this.videos.length > 1 ? 480 : _.orEqual(e.width, 640),
                                r = this.videos.length > 1 ? 385 : _.orEqual(e.height, 360),
                                i = _.orEqual(e.autoplay, !0);
                            $("#lightbox .lightbox-content").html('<div id="video-player"></div>');
                            switch (e.type) {
                            case "iframe":
                                break;
                            case "vimeo":
                                t.Services.Vimeo.attachPlayer(e.id, n, r, "video-player").then(function() {});
                                break;
                            case "youtube":
                                t.Services.Youtube.attachPlayer(e.id, n, r, "video-player", i).then(function(e) {});
                                break;
                            case "flash":
                                object = swfobject.embedSWF("/webincludes/flash/videoplayer.swf", "video-player", n, r, "9.0.0", null, {
                                    version: gsConfig.snapVersion
                                }, {
                                    allowscriptaccess: "always",
                                    allowfullscreen: !0
                                }, {
                                    name: "videoPlayer"
                                });
                            default:
                            }
                            var s = $("#lightbox-header .title");
                            s.length || $("#lightbox-header").append('<h2 class="title">' + this.videos[this.currentIndex].title + "</h2>")
                        }
                    },
                    setVideos: function() {
                        if (this.videos && document.videoPlayer && document.videoPlayer.setVideos) {
                            var e = [],
                                t;
                            for (var n = 0; n < this.videos.length; n++) t = this.videos[n], e.push({
                                author: t.author,
                                height: t.height,
                                src: t.src,
                                thumbnail: t.thumbnail,
                                thumbTracking: t.thumbTracking,
                                title: t.title,
                                width: t.width,
                                duration: t.duration,
                                originalWidth: t.originalWidth,
                                originalHeight: t.originalHeight
                            });
                            document.videoPlayer.setVideos(e)
                        }
                    },
                    setNextVideo: function() {
                        if (!this.videos || !this.videos.length) return;
                        var e = this.currentIndex + 1;
                        e >= this.videos.length && (e = 0), this.currentIndex = e, $(".video-select").removeClass("active"), $($(".video-select").get(this.currentIndex)).addClass("active"), this.video = this.videos[this.currentIndex], this.embedVideo()
                    },
                    setVideo: function(e) {
                        $(".video-select").removeClass("active"), $($(".video-select").get(e.index)).addClass("active")
                    },
                    selectVideo: function(e) {
                        var t = $(e.currentTarget);
                        $(".video-select").removeClass("active"), t.addClass("active");
                        var n = _.orEqual(parseInt(t.attr("data-video-index"), 10), 0);
                        this.video = this.videos[n], this.currentIndex = n, this.embedVideo()
                    },
                    destroy: function() {
                        this.wasPlaying && t.trigger("player:togglePlay"), this._super("destroy")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.RadioClearQueue = t.Views.Lightboxes.Generic.extend({
                    events: {
                        "click .submit": "doRadioCallback"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments)));
                        var t = e.params.inBroadcast ? "LB_START_RADIO_MESSAGE_BROADCAST" : "LB_START_RADIO_MESSAGE";
                        this.view = {
                            header: "LB_START_RADIO_TITLE",
                            message: t,
                            buttonsLeft: [{
                                label: "CANCEL",
                                className: "close"
                            }],
                            buttonsRight: [{
                                label: "LB_START_RADIO_TITLE",
                                className: "btn-primary submit"
                            }]
                        }
                    },
                    doRadioCallback: function() {
                        _.isFunction(this.options.params.startRadio) && this.options.params.startRadio(), this.close()
                    }
                })
            }(), function() {
                var n = e.GS = e.GS || {};
                n.Views = n.Views || {}, n.Views.Lightboxes = n.Views.Lightboxes || {}, n.Views.Lightboxes.InteractionTimeout = n.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "resume",
                        "click .play": "onPlayClick"
                    },
                    render: function() {
                        this._super("render");
                        var e = this.model.get("appModel").get("theme");
                        e && $(".theme-component:visible").length && e.get("sections") && _.indexOf(e.get("sections"), "#theme-interactiontimeout") >= 0 ? this.fetchTemplate("themes/" + e.get("location") + "/interactiontimeout").always(_.bind(function(t) {
                            if (this.suspended || this.destroyed) return;
                            this.$el.html(this.renderTemplate(t, {
                                view: e.get("view"),
                                section: "#theme-interactiontimeout",
                                currentTemplate: "interactiontimeout"
                            })), this.$el.addClass("theme-component"), n.trigger("theme:interactiontimeout")
                        }, this)) : this.fetchTemplate("interactionTimeout").always(_.bind(this.onTemplate, this))
                    },
                    onDestroy: function() {
                        this.songGridBlock && this.songGridBlock.destroy()
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate"), this.checkStatus() && this.model.get("appModel").get("player").on("change:playStatus", this.checkStatus, this), n.Services.API.popularGetSongsPreview().done(_.bind(this.renderSongGridBlock, this))
                    },
                    renderSongGridBlock: function(e) {
                        if (this.destroyed || this.suspended) return;
                        var t = _.first(_.shuffle(e.Songs), 3),
                            r = new n.Models.Collections.Songs(t),
                            i = this.$el.find(".sample-songs");
                        i && (i.empty(), this.songGridBlock = new n.Views.SongGridBlock({
                            itemsPerRow: 1,
                            axis: "x",
                            itemWidth: 140,
                            maximumVisibleItems: 3,
                            el: i[0],
                            collection: r,
                            mediumGrid: !0
                        }), this.songGridBlock.render()), this.handleResize()
                    },
                    checkStatus: function() {
                        var e = this.model.get("appModel").get("player"),
                            t = e.get("playStatus"),
                            r = n.Models.Player.playStatuses;
                        switch (t) {
                        case r.PAUSED:
                        case r.FAILED:
                        case r.COMPLETED:
                        case r.NONE:
                            return this.$el.find("p.message").data("translateText", "LB_INTERACTION_TIME_MSG_PAUSED").text(_.getString("LB_INTERACTION_TIME_MSG_PAUSED")), this.$el.find(".submit").data("translateText", "LB_INTERACTION_TIME_RESUME").text(_.getString("LB_INTERACTION_TIME_RESUME")), e.off(null, null, this), !1;
                        default:
                            return !0
                        }
                    },
                    onPlayClick: function(e) {
                        e.preventDefault(), e.stopImmediatePropagation(), n.Services.SWF.setPauseNextSong(!1);
                        var r = $(e.currentTarget),
                            i = r.data("songId");
                        n.trigger("player:addSongs", [i], t, !0), this.close()
                    },
                    resume: function() {
                        n.Services.SWF.setPauseNextSong(!1);
                        var e = n.Models.Player.playStatuses;
                        switch (this.model.get("appModel").get("player").get("playStatus")) {
                        case e.PAUSED:
                        case e.FAILED:
                        case e.COMPLETED:
                        case e.NONE:
                            n.Services.SWF.playNextSong()
                        }
                        this.close()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.Graph = t.Views.Lightboxes.Base.extend({
                    type: "graph",
                    events: {
                        "click .modifier": "onModifierClick",
                        "click .prev-item": "onPrevItemClick",
                        "click .next-item": "onNextItemClick"
                    },
                    initialize: function(e) {
                        this._super("initialize"), this.model.set({
                            data: e.params.data,
                            modifiers: e.params.modifiers,
                            nextCallback: e.params.nextCallback,
                            prevCallback: e.params.prevCallback,
                            title: e.params.title,
                            renderFunction: e.params.renderFunction
                        })
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("graph").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate"), this.renderGraph(this.model.get("data"))
                    },
                    renderGraph: function(e) {
                        var n = $("#graph-no-available"),
                            r = $("#lightbox-graph");
                        !e[2] || e[2] === e[4] || e[2] === e[3] ? (n.removeClass("hide"), r.addClass("hide")) : (n.addClass("hide"), r.removeClass("hide"), t.Views.Pages.Artistdashboard.generateGraph.apply(this, [r].concat(e)))
                    },
                    onModifierClick: function(e) {
                        var t = $(e.currentTarget),
                            n = _.toInt(t.data("i")),
                            r = this.model.get("modifiers");
                        r[n] && r[n].menu && t.jjmenu(e, r[n].menu(_.bind(this.reRenderGraph, this), t), null, {
                            xposition: "left",
                            yposition: "auto",
                            show: "default",
                            keepState: t
                        })
                    },
                    onPrevItemClick: function() {
                        var e = this.model.get("prevCallback");
                        if (e) {
                            var t = e();
                            t && (this.reRenderGraph(), $(".title", "#lightbox-header").text(t.title))
                        }
                    },
                    onNextItemClick: function() {
                        var e = this.model.get("nextCallback");
                        if (e) {
                            var t = e();
                            t && (this.reRenderGraph(), $(".title", "#lightbox-header").text(t.title))
                        }
                    },
                    reRenderGraph: function() {
                        var e = $("#lightbox-footer-right"),
                            t = this.model.get("modifiers"),
                            n = this.model.get("renderFunction"),
                            r = [],
                            i;
                        if (!n) return;
                        for (var s = 0, o = t.length; s < o; s++) i = $(".modifier-" + s, e), r.push(i.data(t[s].name));
                        var u = n.apply(this, r);
                        if (!u) return;
                        this.renderGraph(u)
                    }
                })
            }(), function() {
                function o(e, r) {
                    if (r && r.signature) {
                        var o = s + "|" + hex_md5([1, s, i].join(""));
                        t.Services.SWF.updateInterruptionExpireTime("1", o), n.model.get("user").get("subscription").trigger("freeAdExpiresUpdate", $.now() + 1e3 * s), $("#engagement-display-text").addClass("hide"), $("#lightbox-success-blue").removeClass("hide"), $("#lightbox-content").scrollTop(0)
                    }
                }
                function u(e) {
                    var r = s + "|" + hex_md5([1, s, i].join(""));
                    t.Services.SWF.updateInterruptionExpireTime("1", r), n.model.get("user").get("subscription").trigger("freeAdExpiresUpdate", $.now() + 1e3 * s)
                }
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {};
                var r = 0,
                    i = "whereAreTheReindeer",
                    s = 14400;
                t.Views.Lightboxes.Engagement = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .upgrade-engagement": "onUpgradeClick"
                    },
                    initialize: function() {
                        this._super("initialize"), this.renderDfd = $.Deferred(), t.Models.Ad.loadSocialvibe()
                    },
                    onDestroy: function() {
                        $("#lightbox").removeAttr("style"), t.trigger("player:resumeSong")
                    },
                    render: function() {
                        this._super("render"), this.loadActivities(), this.fetchTemplate("engagement").always(_.bind(this.onTemplate, this)), t.trigger("player:pauseSong")
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate"), this.renderDfd.resolve()
                    },
                    loadActivities: function() {
                        var e = this.model.get("appModel").get("user"),
                            n = {
                                onCredit: _.bind(o, this, e),
                                onFinish: _.bind(this.close, this)
                            },
                            r = _.chainLoading();
                        r.push(this.renderDfd), r.push(t.Models.Ad.getSocialvibeActivities(e, n).always(r.bind(this.onSocialvibeActivities, this)))
                    },
                    onSocialvibeActivities: function(e) {
                        var t = this.model.get("appModel").get("user");
                        if (!e || !e.length) {
                            $("#engagement-container").addClass("hide"), $("#upgrade-message").text(_.getString("LB_ENGAGEMENT_MSG_NONE")).removeClass("hide"), u(t), setTimeout(_.bind(this.close, this), 3e3);
                            return
                        }
                        var n = e[0];
                        if (n.window_width > 570) {
                            var i = $("#lightbox");
                            i.animate({
                                width: n.window_width + 30
                            })
                        }
                        r = n.id;
                        var s = '<div id="socialvibe-activity" style="width:' + n.window_width + 'px; margin: 0 auto; display: block;"></div>';
                        $("#engagement-container").html(s), n.loadIntoContainer(document.getElementById("socialvibe-activity")), n.display_text && $("#engagement-display-text").text(n.display_text).removeClass("hide"), $("#upgrade-message").removeClass("hide"), this.handleResize()
                    },
                    onUpgradeClick: function() {
                        this.close(), t.router.setHash("/settings/subscription")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.ThemePromo = t.Views.Lightboxes.Base.extend({
                    initialize: function(e) {
                        this.options = e, this._super("initialize")
                    },
                    render: function() {
                        this._super("render"), this.theme = this.model.get("appModel").get("theme"), this.fetchTemplate("themes/" + (this.options.params.location || this.theme.get("location")) + "/promo").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        var t = this.options.params.title ? {
                            title: this.options.params.title
                        } : {
                            view: this.theme.get("view"),
                            section: "#theme-promo",
                            currentTemplate: "promo",
                            title: this.theme.get("view").currentTheme.get("promo").title
                        };
                        this.$el.html(this.renderTemplate(e, t)), this._super("onTemplate")
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.DeactivateAccount = t.Views.Lightboxes.Base.extend({
                    events: {
                        "submit form": "onSubmit",
                        "click a.submit": "submitForm",
                        "click #deactivate-other-details": "onFocusDetails",
                        "click #deactivate-reason-other": "onClickOtherReason"
                    },
                    initialize: function() {
                        this._super("initialize")
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("deactivateAccount").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onFocusDetails: function() {
                        $("#deactivate-reason-other").attr("checked", !0)
                    },
                    onClickOtherReason: function() {
                        $("#deactivate-other-details").focus()
                    },
                    submitForm: function() {
                        this.$el.find("form").submit()
                    },
                    disableFailed: function(e) {
                        this.$el.find(".error").removeClass("hide"), this.$el.find(".error").show().find(".error-text").html(_.getString("POPUP_DEACTIVATE_ERROR"))
                    },
                    disableSuccess: function(e) {
                        if (!e) {
                            this.disableFailed(e);
                            return
                        }
                        this.close(), this.model.get("appModel").logout()
                    },
                    onSubmit: function(e) {
                        e.preventDefault();
                        var n = parseInt($("input[name=deactivate-reason]:checked", "#deactivate-account-lightbox").val(), 10),
                            r = $("textarea[name=deactivate-other-details]", "#deactivate-account-lightbox").val(),
                            i = parseInt($("input[name=deactivate-contact]:checked", "#deactivate-account-lightbox").val(), 10),
                            s = $("input[name=deactivate-confirm]", "#deactivate-account-lightbox").val();
                        n && s.length ? (this.$el.find(".error").addClass("hide"), t.Services.API.userDisableAccount(s, n, r, i).done(_.bind(this.disableSuccess, this)).fail(_.bind(this.disableFailed, this))) : n ? s.length || (this.$el.find(".error").removeClass("hide"), this.$el.find(".error").show().find(".error-text").html(_.getString("POPUP_DEACTIVATE_ERROR_PASSWORD"))) : (this.$el.find(".error").removeClass("hide"), this.$el.find(".error").show().find(".error-text").html(_.getString("POPUP_DEACTIVATE_ERROR_REASON")))
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Lightboxes = r.Views.Lightboxes || {}, r.Views.Lightboxes.PreviewSong = r.Views.Lightboxes.Base.extend({
                    events: {
                        "click .play-toggle": "togglePlay",
                        "click .add-next": "onAddNextClick",
                        "click .add-last": "onAddLastClick",
                        "click .suggest-song": "onSuggestSong",
                        "click #preview-progress-bar": "onSeekClick",
                        "click .leave-broadcast": "onEndBroadcastClick",
                        "click .move-next": "onMoveNextClick"
                    },
                    initialize: function() {
                        this._super("initialize"), this.model.set({
                            song: this.options.params.songs[0],
                            index: this.options.params.index,
                            currentStatus: r.Models.Player.playStatuses.NONE,
                            broadcast: this.model.get("appModel").get("player").get("currentQueue").get("currentBroadcast"),
                            autoplay: _.orEqual(this.options.params.autoplay, !0),
                            fromQueue: _.orEqual(this.options.params.fromQueue, !1)
                        });
                        var e = this.model.get("broadcast").get("suggestions");
                        e && e.get(this.model.get("song").get("SongID")) ? this.model.set("alreadySuggested", !0) : this.model.set("alreadySuggested", !1)
                    },
                    onDestroy: function() {
                        $("#lightbox").removeAttr("style"), e.gs_preview_status && (e.gs_preview_status = t), e.gs_preview_position && (e.gs_preview_position = t), e.gs_preview_error && (e.gs_preview_error = t), this.jsPlayer && _.isFunction(this.jsPlayer.stopStream) && this.jsPlayer.stopStream(), this.$scrubber && this.$scrubber.off(null, null, this), r.Services.SWF.unlockMute("previewSong")
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("previewSong").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate"), this.setUpPlayerInterface()
                    },
                    setUpPlayerInterface: function() {
                        if (this.destroyed) return;
                        !this.playerPending && !$("#preview-player-wrapper").length && $("body").append('<div id="preview-player-wrapper"></div>');
                        var t = swfobject.getObjectById("preview-player"),
                            n = t && _.isFunction(t.playSong);
                        if (!n) {
                            if (!this.playerPending) {
                                this.playerPending = !0;
                                var i = {
                                    hostname: e.location.host,
                                    session: gsConfig.sessionID
                                },
                                    s = {
                                        scale: "noScale",
                                        salign: "lt",
                                        menu: "false",
                                        allowScriptAccess: "always",
                                        wmode: "window"
                                    },
                                    o = {
                                        id: "preview-player",
                                        name: "preview-player"
                                    };
                                swfobject.embedSWF("JSPlayer.swf?v=" + gsConfig.swfVersion, "preview-player-wrapper", "1", "1", "9.0.0", !1, i, s, o)
                            }
                            _.delay(_.bind(this.setUpPlayerInterface, this), 250)
                        } else {
                            this.jsPlayer = t, this.$timeElapsed = $("#preview-time-elapsed"), this.$timeTotal = $("#preview-time-total"), this.$progressBar = $("#preview-progress-bar"), this.$seekProgress = $("#preview-elapsed"), this.$scrubber = $("#preview-scrubber"), this.$toggleButton = this.$el.find("a.play-toggle"), this.$scrubber.on("dragstart", _.bind(this.onScrubberDragStart, this)), this.$scrubber.on("drag", _.bind(this.onScrubberDrag, this)), this.$scrubber.on("dragend", _.bind(this.onScrubberDragEnd, this)), e.gs_preview_status = _.bind(this.statusCallback, this), e.gs_preview_position = _.bind(this.positionCallback, this), e.gs_preview_error = _.bind(this.errorCallback, this), this.jsPlayer.setStatusCallback("window.gs_preview_status"), this.jsPlayer.setPositionCallback("window.gs_preview_position"), this.jsPlayer.setErrorCallback("window.gs_preview_error"), this.jsPlayer.setIsMuted(r.Services.SWF.getIsMuted()), this.jsPlayer.setVolume(r.Services.SWF.getVolume()), this.playerPending && (r.on("player:volumeChange", this.onVolumeChange, this), r.on("player:volumeMute", this.onMuteToggle, this)), this.model.set("currentStatus", 0);
                            if (!this.suspended && this.model.get("autoplay")) {
                                var u = this.model.get("song").get("SongID"),
                                    a = this.model.get("song").get("CalloutID");
                                this.togglePlayFromID(u || a, !u)
                            }
                        }
                    },
                    statusCallback: function(e) {
                        this.model.set("currentStatus", r.Models.Player.playStatuses[e.toUpperCase()]);
                        var t = !1,
                            n = r.Models.Player.playStatuses;
                        switch (this.model.get("currentStatus")) {
                        case n.INITIALIZING:
                        case n.LOADING:
                        case n.BUFFERING:
                            this.$toggleButton.addClass("buffering").removeClass("playing");
                            break;
                        default:
                            this.$toggleButton.removeClass("buffering")[(this.model.get("currentStatus") == n.PLAYING ? "add" : "remove") + "Class"]("playing")
                        }
                        e !== "failed" && this.$el.find(".error").addClass("hide")
                    },
                    positionCallback: function(e) {
                        e && (e.position || e.duration) ? (this.$timeElapsed.text(_.millisToMinutesSeconds(e.position, !0)), this.$timeTotal.text(_.millisToMinutesSeconds(e.duration, !0))) : (this.$timeElapsed.text(""), this.$timeTotal.text("")), this.model.set({
                            position: e.position,
                            duration: e.duration
                        });
                        var t = e && e.duration ? Math.min(1, e.position / e.duration) : 0,
                            n = this.$progressBar.width(),
                            r = Math.min(n, t * 100),
                            i = Math.min(n, Math.max(0, n * t));
                        this.$seekProgress.width(r + "%"), this.lockScrubber || this.$scrubber.css("left", i)
                    },
                    errorCallback: function(e) {
                        console.log("preview error", e), this.$el.find(".error").removeClass("hide").find(".message").text(_.getString("LB_PREVIEW_STREAM_ERROR"))
                    },
                    togglePlay: function(e) {
                        var t = $(e.currentTarget).data("songId"),
                            n = $(e.currentTarget).data("calloutId");
                        this.togglePlayFromID(t || n, !t), this.$el.find(".error").addClass("hide")
                    },
                    togglePlayFromID: function(e, t) {
                        if (!e) return;
                        t = _.orEqual(t, !1);
                        var i = this.model.get("currentStatus"),
                            s = r.Models.Player.playStatuses,
                            o = n.model.get("player"),
                            u = this.model.get("previewingSongID"),
                            a = this.model.get("previewingIsCallout"),
                            f = u && u === e && a === t,
                            l = t ? "playCallout" : "playSong";
                        if (this.jsPlayer) {
                            var c = !1,
                                h = u;
                            switch (i) {
                            case s.NONE:
                            case s.FAILED:
                            case s.COMPLETED:
                                c = !0, this.jsPlayer[l](e), h = e;
                                break;
                            case s.INITIALIZING:
                            case s.LOADING:
                                this.jsPlayer.stopStream(), f || (this.jsPlayer[l](e), h = e, c = !0);
                                break;
                            case s.PLAYING:
                            case s.BUFFERING:
                                f ? this.jsPlayer.pauseStream() : (this.jsPlayer.stopStream(), this.jsPlayer[l](e), h = e, c = !0);
                                break;
                            case s.PAUSED:
                                f ? (this.jsPlayer.resumeStream(), c = !0) : (this.jsPlayer.stopStream(), this.jsPlayer[l](e), h = e, c = !0)
                            }
                            this.model.set("previewingSongID", e), this.model.set("previewingIsCallout", t), c ? r.Services.SWF.lockMute("previewSong") : r.Services.SWF.unlockMute("previewSong")
                        }
                    },
                    addSong: function(e) {
                        var t = this.model.get("broadcast"),
                            n = this.model.get("song"),
                            i = _.orEqual(this.options.params.playContext, new r.Models.PlayContext);
                        i.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), t && t.isLoggedInUserOwner() ? r.trigger("player:addSongs", [n], e, !1, i, !1, !0) : (r.Services.SWF.endBroadcast(), r.trigger("player:addSongs", [n], e, !0, i, !1, !0)), r.trigger("previewlb:songAdded"), this.close()
                    },
                    onAddNextClick: function() {
                        this.addSong(r.Services.SWF.playSpecialIndexes.NEXT)
                    },
                    onAddLastClick: function() {
                        this.addSong(r.Services.SWF.playSpecialIndexes.LAST)
                    },
                    onMoveNextClick: function() {
                        var e = n.model.get("player").get("currentQueue");
                        if (e) {
                            var t = e.get("songs").indexOf(e.get("activeSong"));
                            t > -1 ? r.Services.SWF.moveSongsTo([this.model.get("song").get("queueSongID")], t + 1) : r.trigger("player:addSongs", [this.model.get("song")], r.Services.SWF.playSpecialIndexes.NEXT, !0)
                        }
                        this.close()
                    },
                    onSuggestSong: function() {
                        var e = this.model.get("song"),
                            t = this.model.get("broadcast");
                        if (!t || !e) return;
                        t.suggestSong(e), r.trigger("previewlb:songSuggested"), this.close()
                    },
                    onSeekClick: function(e) {
                        if (this.model.get("currentStatus") != r.Models.Player.playStatuses.PLAYING) return e.preventDefault(), !1;
                        var t = this.$progressBar.offset(),
                            n = e.pageX - t.left,
                            i = n / this.$progressBar.width(),
                            s = Math.min(Math.max(i, 0), 1),
                            o = this.model.get("duration") * s;
                        this.jsPlayer.seekTo(o)
                    },
                    onScrubberDragStart: function(e, t) {
                        if (this.model.get("currentStatus") != r.Models.Player.playStatuses.PLAYING) return !1;
                        this.lockScrubber = !0;
                        var n = this.$scrubber.css("left");
                        return this.scrubberLeft = _.toInt(n.substring(0, n.length - 2)), this.maxScrubberLeft = this.$progressBar.width() - 4, this.minScrubberLeft = 0, t.draggedItems = [], t.scrubber = !0, !0
                    },
                    onScrubberDrag: function(e, t) {
                        var n = this.scrubberLeft + t.deltaX;
                        if (n >= this.maxScrubberLeft) {
                            this.$scrubber.css("left", this.maxScrubberLeft);
                            return
                        }
                        if (n <= this.minScrubberLeft) {
                            this.$scrubber.css("left", this.minScrubberLeft);
                            return
                        }
                        this.$scrubber.css("left", n)
                    },
                    onScrubberDragEnd: function(e, t) {
                        t.scrubber && this.onSeekClick(e), this.lockScrubber = !1
                    },
                    onEndBroadcastClick: function(e) {
                        var t = this.model.get("song"),
                            n = _.orEqual(this.options.params.playContext, new r.Models.PlayContext);
                        n.addStreamType(r.Models.PlayContext.TYPE_DEFAULT), r.Services.SWF.endBroadcast(), r.on("manatee:broadcastEnded", function i() {
                            r.Services.SWF.addSongs([t], r.Services.SWF.playSpecialIndexes.REPLACE, !0, n), r.off("manatee:broadcastEnded", i)
                        }), this.close()
                    },
                    onVolumeChange: function(e) {
                        this.jsPlayer.setVolume(e)
                    },
                    onMuteToggle: function() {
                        this.jsPlayer.setIsMuted(!this.jsPlayer.getIsMuted())
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Lightboxes = r.Views.Lightboxes || {}, r.Views.Lightboxes.CreateBroadcast = r.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmitClick",
                        "click .visibility-online": "changeOnlineVisibility"
                    },
                    initialize: function(e) {
                        this._super("initialize"), this.model.set({
                            user: n.model.get("user"),
                            defaultName: e.params.name || "",
                            defaultTag: e.params.tag || null,
                            defaultDescription: e.params.description || ""
                        })
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("createBroadcast").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        var t = "",
                            n = !1,
                            i = this.model.get("user").get("sessionPrivacy");
                        (i & 8) > 1 ? t = "POPUP_ERROR_BROADCAST_OWNER_FRIENDS_VISIBLE" : (i & 4) > 1 && (t = "POPUP_ERROR_BROADCAST_OWNER_INVISIBLE", n = !0), this.model.set({
                            broadcastWarning: t,
                            preventBroadcastCreate: n
                        }), this.$el.html(this.renderTemplate(e)), _.inputLimitCountdown($("#broadcast-description"), 145, $(".broadcast-description-counter")), this.tagDropdown = new r.Views.Modules.TagDropdown({
                            el: this.$el.find(".module.tag-dropdown")[0],
                            model: new Backbone.Model({
                                Tag: this.model.get("defaultTag")
                            }),
                            saveOnSelection: !1,
                            tooltipKey: "broadcast-tag-tooltip bc-create-tooltip"
                        }), this.tagDropdown.render(), this.tagDropdown.model.set("Tag", this.model.get("defaultTag")), this._super("onTemplate")
                    },
                    onDestroy: function() {
                        this.tagDropdown.closeTooltip()
                    },
                    onSubmitClick: function(e) {
                        if (this.model.get("preventBroadcastCreate")) {
                            e.preventDefault();
                            return
                        }
                        var t = this.$el.find("#broadcast-name").val(),
                            n = this.$el.find("#broadcast-description").val(),
                            r = this.tagDropdown.getSelectedTag(),
                            i = {};
                        r === null && (i.ignoreLast = !0), this.model.get("user").createBroadcast(t, r, n, !0, i), this.close()
                    },
                    changeOnlineVisibility: function() {
                        function r() {
                            $("#create-bc-warning").addClass("hide"), this.model.set("preventBroadcastCreate", !1), this.$el.find(".btn-primary").removeClass("disabled")
                        }
                        var e = this.model.get("user"),
                            n = e.get("sessionPrivacy");
                        (n & 12) > 0 ? e.savePrivacySettings(t, 0).done(_.bind(r, this)).fail(_.bind(function() {
                            $("#create-bc-warning").addClass("error").html(_.getString("POPUP_ERROR_BROADCAST_OWNER_VISIBILITY_FAILED"))
                        }, this)) : r.call(this)
                    }
                })
            }(), function() {
                function i(e, t) {
                    if (!t || t.statusCode < -1 && t.statusCode !== -6) {
                        s(e, t);
                        return
                    }
                    e.resolve()
                }
                function s(e, t) {
                    t || (t = {
                        statusCode: 0
                    });
                    var n = "SAVE_USERNAME_FAILED";
                    switch (t.statusCode) {
                    case -9:
                    case -7:
                        n = "POPUP_INCORRECT_PASSWORD";
                        break;
                    case -12:
                        n = "POPUP_USERNAME_RATE_LIMIT";
                        break;
                    case -10:
                        n = "POPUP_USERNAME_INVALID_CHARACTERS";
                        break;
                    case -11:
                        n = "POPUP_USERNAME_INVALID_LENGTH";
                        break;
                    case -13:
                        n = "POPUP_USERNAME_TAKEN";
                        break;
                    case -15:
                        n = "SETTINGS_VERIFY_AUTH_NEEDED"
                    }
                    e.reject(n)
                }
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Lightboxes = r.Views.Lightboxes || {}, r.Views.Lightboxes.EditBroadcast = r.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmitClick",
                        "mousemove .button-upload-form": "uploadMousemove",
                        "change .uploader": "onNewUpload",
                        "click .entity-art-delete": "onDeleteClick",
                        "keyup #broadcast-user-username": "onChangeUsername",
                        "click .lb-nav-item": "changeSection",
                        "click .toggle": "onToggleClick",
                        "keyup #broadcast-name": "changed",
                        "keyup #broadcast-description": "changed"
                    },
                    initialize: function() {
                        this._super("initialize");
                        var e = this.options.params.broadcast,
                            t = e.get("ArtistID");
                        this.model.set({
                            broadcast: this.options.params.broadcast,
                            user: n.model.get("user"),
                            artist: t && r.Models.Artist.getCached(t)
                        })
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("editBroadcast").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), _.inputLimitCountdown($("#broadcast-description"), 145, $(".broadcast-description-counter")), this.tagDropdown = new r.Views.Modules.TagDropdown({
                            el: this.$el.find(".module.tag-dropdown")[0],
                            model: this.model.get("broadcast"),
                            saveOnSelection: !1,
                            onSelection: _.bind(this.changed, this)
                        }), this.tagDropdown.render(), this._super("onTemplate")
                    },
                    onDestroy: function() {
                        this.tagDropdown.closeTooltip()
                    },
                    changeSection: function(e) {
                        var t = $(e.currentTarget),
                            n = t.data("lbSection");
                        if (this.section === n) return;
                        this.tagDropdown.closeTooltip(), $(".lb-nav-item.active").removeClass("active"), this.$el.find(".section-container").addClass("hide"), $("#edit-broadcast-" + n + "-container").removeClass("hide"), t.addClass("active")
                    },
                    changed: function() {
                        $(".submit", "#lightbox-footer").removeClass("disabled")
                    },
                    onSubmitClick: function() {
                        var n = _.chainLoading({
                            ignoreFails: !0
                        }),
                            r = !1,
                            i = $("#broadcast-name").val(),
                            s = $.trim($("#broadcast-description").val().replace(/[\r\n]/g, " ").replace(/\s{2,}/, " ")),
                            o = this.model.get("broadcast"),
                            u = $("#broadcast-privacy").hasClass("active") ? 0 : 1,
                            a = $("#broadcast-chat-enabled").hasClass("active"),
                            f = $("#broadcast-suggestions-enabled").hasClass("active"),
                            l = this.tagDropdown.getSelectedTag();
                        n.fail(function() {
                            r = !0
                        });
                        var c = o.get("Tag");
                        i == o.get("Name") && s == o.get("Description") && u == o.get("Privacy") && (!l && !c || l && c && l.i == c.i) ? o.updateBroadcastPreferences(a, f) : o.set({
                            chatEnabled: a,
                            suggestionsEnabled: f
                        }), n.push(o.updateBroadcastDetails(i, l, s, t, u).fail(n.bind(function() {
                            $("#lightbox-content").find(".error").removeClass("hide").find(".message").text(_.getString("EDIT_BROADCAST_FAILED"))
                        }, this)));
                        var h = $("#upload-entity-art").val();
                        if (h && h.length) {
                            var p, d = new $.Deferred;
                            n.push(d);
                            var v = _.bind(function(e, t) {
                                switch (e) {
                                case "complete":
                                    o.updateImage(t.filename + "?" + (new Date).getTime()), this.$el.find(".entity-art").find("img").attr("src", o.getImageURL(120)), $("#upload-entity-art").val(""), $("#entity-art-browse").addClass("btn-success"), d.resolve();
                                    break;
                                case "error":
                                    $("#lightbox-content").find(".error").removeClass("hide").find(".message").text(_.getString("ARTIST_ART_FAILED")), d.reject()
                                }
                            }, this);
                            if (e.FormData) {
                                p = new e.XMLHttpRequest;
                                var m = new FormData;
                                m.append("broadcastPic", $("#upload-entity-art").data("file")), m.append("broadcastID", o.get("BroadcastID"));
                                var g = this.model.get("artist");
                                g && m.append("asArtistID", g.get("ArtistID")), p.addEventListener("load", function(e) {
                                    var t = e.currentTarget.response;
                                    try {
                                        t = JSON.parse(t)
                                    } catch (e) {
                                        t = null
                                    }
                                    v && t && t.filename ? v("complete", t) : v("error", t)
                                }, !1), p.addEventListener("error", function(e) {
                                    v && v("error", e)
                                }, !1), p.open("POST", "/upload.php?broadcastPic=1"), p.send(m)
                            } else {
                                var y = "uploadBroadcastArt_" + o.get("BroadcastID"),
                                    b = y + "_Frame";
                                e[y] = function(t) {
                                    v && (t && t.filename ? v("complete", t) : v("error", t), _.defer(function() {
                                        $("#" + b).remove(), delete e[y]
                                    }))
                                };
                                var w = document.createElement("iframe");
                                w.src = "empty.html", w.id = b, w.name = b, w.setAttribute("style", "visiblity: hidden; display: none;"), document.body.appendChild(w), $("#upload-art").attr("action", "/upload.php?broadcastPic=1&callback=" + y).attr("target", b).submit()
                            }
                        }
                        n.done(_.bind(function() {
                            r || this.close()
                        }, this))
                    },
                    uploadMousemove: function(e) {
                        typeof e.pageY == "undefined" && typeof e.clientX == "number" && document.documentElement && (e.pageX = e.clientX + document.documentElement.scrollLeft, e.pageY = e.clientY + document.documentElement.scrollTop);
                        var t = $(e.currentTarget),
                            n = t.offset(),
                            r = $(t).find(".uploader").removeClass("hide");
                        r.css("top", e.pageY - n.top - Math.abs(r.height() / 2) + "px"), r.css("left", e.pageX - n.left - Math.abs(r.width() - 50) + "px")
                    },
                    onNewUpload: function(t) {
                        var n = $(t.currentTarget),
                            r = t.target && t.target.files ? t.target.files : null,
                            i;
                        $("#entity-art-browse").removeClass("btn-success btn-danger");
                        if (r && r.item(0)) {
                            var s = r.item(0);
                            s.getAsDataURL ? i = s.getAsDataURL() : e.URL && e.URL.createObjectURL ? i = e.URL.createObjectURL(s) : e.webkitURL && e.webkitURL.createObjectURL && (i = e.webkitURL.createObjectURL(s)), n.data("file", s)
                        }
                        if (i) {
                            var o = this.$el.find(".entity-art").find("img").css({
                                height: "auto",
                                width: "auto",
                                left: 0,
                                top: 0
                            }),
                                u = function() {
                                    o.width() > o.height() ? (o.css("height", "80px"), o.css("left", -1 * Math.floor((o.width() - 80) / 2) + "px")) : o.css("width", "80px"), o.off("load", u), e.URL ? e.URL.revokeObjectURL(this.src) : e.webkitURL && e.webkitURL.revokeObjectURL(this.src)
                                };
                            o.attr("src", i).on("load", u)
                        }
                        var a = _.last(_.last(n.val().split("\\")).split("/"));
                        this.$el.find(".entity-art-filename").text(a), this.$el.find(".entity-art-delete").removeClass("hide"), this.$el.find(".broadcast-image-replace").val(a), this.changed()
                    },
                    onDeleteClick: function(e) {
                        $(e.currentTarget).addClass("hide");
                        var t, r;
                        (r = this.model.get("artist")) ? t = r.getImageURL(80) : t = n.model.get("user").getImageURL(80), this.$el.find(".entity-art").find("img").attr("src", t), this.$el.find(".entity-art-filename").text(""), this.$el.find(".broadcast-image-replace").val(""), this.changed()
                    },
                    onChangeUsername: function(e) {
                        return;
                        var t, n, i, s
                    },
                    submitProfileURL: function() {
                        return;
                        var e, t, n, o, u
                    },
                    onToggleClick: function(e) {
                        $(e.currentTarget).toggleClass("active"), this.changed()
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Lightboxes = r.Views.Lightboxes || {};
                var i = ["py", "n", "t", "ownerSubscribed"];
                r.Views.Lightboxes.BroadcastEnded = r.Views.Lightboxes.Base.extend({
                    events: {
                        "mouseenter .follow-owner": "showLoggedInHelper",
                        "submit .bc-chat-form": "onChatFormSubmit",
                        "click .ended-create-own-broadcast": "onCreateClick",
                        "click .start-broadcasting": "onCreateClick",
                        "click .join-broadcast": "close",
                        "click .metadata .title": "close",
                        "click .metadata .broadcaster": "close"
                    },
                    initialize: function(e) {
                        var t = e.params.broadcast,
                            i = t.getOwner(),
                            s = i.get("UserID");
                        i.on("change:isFavorite", this.onOwnerFollowed, this), i.on("change:currentBroadcastID", this.onOwnerCurrentBroadcastChange, this), t.on("change:isFavorite", this.onFavoriteBroadcast, this), t.subscribeToChat("broadcastEndedLb"), r.on("manatee:broadcastInfo", this.onOwnerBroadcastInfo, this), i.subscribeToStatus("broadcastEnded"), this.subscribedBroadcasts = new r.Models.Collections.Broadcasts, this.childViews = [], this.rendered = !1, this.model.set({
                            broadcast: t,
                            owner: i,
                            disabledChat: _.orEqual(e.params.disabledChat, !1)
                        });
                        if (t.get("chatEnabled")) {
                            var o = t.get("chatActivities");
                            o.on("add", this.onNewChatActivity, this), o.on("reset", this.renderChatActivities, this)
                        }
                        var u = n.model.get("player");
                        u.on("change:currentQueue", u, this), this.onCurrentQueueChanged(u, u.get("currentQueue")), this._super("initialize")
                    },
                    onDestroy: function() {
                        var e = this.model.get("owner"),
                            t = this.model.get("broadcast"),
                            i = this.model.get("queue");
                        e && (e.off("change:isFavorite", null, this), e.off("change:currentBroadcastID", null, this), e.unsubscribeFromStatus("broadcastEnded")), this.subscribedBroadcasts && this.subscribedBroadcasts.length && (this.subscribedBroadcasts.unsubscribe(), this.subscribedBroadcasts.reset([]), this.subscribedBroadcasts.off()), t.unsubscribeFromChat("broadcastEndedLb"), r.off("manatee:broadcastInfo", null, this), n.model.get("player").off(null, null, this), i && i.off(null, null, this)
                    },
                    onCurrentQueueChanged: function(e, t) {
                        var n = this.model.get("queue");
                        n && n.off(null, null, this), t && t.on("change:currentBroadcast", this.onCurrentBroadcastChanged, this), this.model.set("queue", t)
                    },
                    onCurrentBroadcastChanged: function(e, t) {
                        t && this.close()
                    },
                    onOwnerCurrentBroadcastChange: function(e, t) {
                        if (this.destroyed) return;
                        t && e.get("isOwnerOfCurrentBroadcast") && r.Models.Broadcast.fetchRealtimeBroadcast(t)
                    },
                    onOwnerBroadcastInfo: function(e, t) {
                        r.off("manatee:broadcastInfo", null, this);
                        var n = this.model.get("owner");
                        if (!e || (n && n.get("currentBroadcastID")) !== t) return;
                        this.subscribedBroadcasts ? this.subscribedBroadcasts.unshift(e) : this.ownerBroadcast = e
                    },
                    render: function() {
                        this._super("render");
                        var e = _.chainLoading(),
                            t = this.model.get("broadcast"),
                            n = t.getOwner();
                        !this.suspended && !t.get("chatEnabled") && $("#lightbox").addClass("chat-disabled"), e.push(this.fetchTemplate("broadcastEnded").always(e.bind(this.onTemplate, this)));
                        var i = t.get("Tag"),
                            s = ["bcast"];
                        i && i.i && s.push("bcast_genre_" + i.i), e.push(n.getPageNameData()), e.push(r.Models.Broadcast.getTopBroadcastsForTags(s).done(e.bind(this.onBroadcastsForTags, this)))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        var t = this.model.get("broadcast"),
                            r = t.getOwner(),
                            i = n.model.get("user");
                        this.$el.html(this.renderTemplate(e, {
                            broadcast: t,
                            owner: r,
                            authUser: i,
                            disabledChat: this.model.get("disabledChat")
                        })), this.rendered = !0;
                        var s = r.get("isFavorite");
                        s && this.onOwnerFollowed(r, s);
                        var o = t.get("chatActivities");
                        o ? this.renderChatActivities(o) : $("#bc-lb-chat").addClass("hide"), this._super("onTemplate")
                    },
                    onBroadcastsForTags: function(e) {
                        if (this.destroyed || !this.rendered) return;
                        var n = $("#bc-ended-suggested-broadcasts"),
                            s = $("#bc-suggested-wrapper"),
                            o = $("#bc-ended-empty-suggestions"),
                            u = new r.Models.Collections.Broadcasts,
                            a = this.model.get("broadcast"),
                            f = a.get("Tag");
                        f && f.i && e && e["bcast_genre_" + f.i] && e["bcast_genre_" + f.i].length && (u.add(e["bcast_genre_" + f.i]), u.remove(a), u.filterBestBroadcasts());
                        if (!u.length) {
                            e && e.bcast && (u.add(e.bcast), u.remove(a), u.filterBestBroadcasts());
                            if (!u.length) {
                                s.addClass("hide"), o.removeClass("hide");
                                return
                            }
                        }
                        var l = u.first(6);
                        u.remove(l), this.subscribedBroadcasts.add(l), this.ownerBroadcast && (this.subscribedBroadcasts.unshift(this.ownerBroadcast), delete this.ownerBroadcast), this.subscribedBroadcasts.on("change", _.bind(function(e) {
                            var n = e.get("activeStatus"),
                                r = e.get("isPlaying");
                            if (n !== t && n === 0 || r !== t && r === !1) {
                                this.subscribedBroadcasts.remove(e);
                                if (this.subscribedBroadcasts.length < 3) {
                                    var i = u.first(3);
                                    i && (u.remove(i), this.subscribedBroadcasts.add(i))
                                }
                            }
                        }, this)), this.subscribedBroadcasts.setSubscribedKeys(i), this.subscribedBroadcasts.subscribe();
                        if (this.subscribedBroadcasts.length) {
                            var c = n.find(".ended-suggested-broadcasts").empty();
                            this.suggestionsGrid = new r.Views.BroadcastRowTallGrid({
                                el: c[0],
                                collection: this.subscribedBroadcasts,
                                maximumVisibleItems: 3
                            }), this.suggestionsGrid.render(), this.childViews.push(this.suggestionsGrid)
                        } else s.addClass("hide"), o.removeClass("hide")
                    },
                    renderChatActivities: function(e) {
                        if (this.destroyed || !this.rendered) return;
                        var t = this.model.get("broadcast"),
                            n = this.$el.find(".bc-chat-messages").empty(),
                            i = t.isLoggedInUserOwner(),
                            s, o = new r.Models.Collections.ChatActivities(e.last(100));
                        o.each(_.bind(function(e) {
                            e.get("infoType") !== r.Models.ChatActivity.WELCOME_MESSAGE && (s = new r.Views.Modules.ChatActivity({
                                model: e,
                                showBlockUser: i
                            }), s.render(), n.append(s.$el[0]), this.childViews.push(s))
                        }, this));
                        var u = this.$el.find(".bc-chat-messages-container");
                        u.length && u.scrollTop(u[0].scrollHeight)
                    },
                    onNewChatActivity: function(e) {
                        if (this.destroyed || !this.rendered) return;
                        var t = this.$el.find(".bc-chat-messages"),
                            n = t.parent(),
                            i = t.find(".module.chat-activity"),
                            s = n[0],
                            o = Math.abs(s.scrollHeight - s.scrollTop - s.clientHeight) <= 2,
                            u = new r.Views.Modules.ChatActivity({
                                model: e,
                                showBlockUser: this.model.get("broadcast").isLoggedInUserOwner()
                            });
                        i.length >= 100 && i[0].remove(), u.render(), t.append(u.$el[0]), this.childViews.push(u), o && n.scrollTop(s.scrollHeight)
                    },
                    onChatFormSubmit: function(e) {
                        e.preventDefault();
                        var t = $(e.currentTarget),
                            n = this.$el.find(".bc-chat-input"),
                            r = n.val(),
                            i = this.model.get("broadcast"),
                            s = this.$el.find(".bc-chat-messages-container");
                        return i.sendChatMessage(r), n.val(""), s.scrollTop(s[0].scrollHeight), !1
                    },
                    onOwnerFollowed: function(e, t) {
                        var n = this.$el.find(".follow-owner");
                        t ? (n.addClass("btn-success"), n.find(".icon").removeClass("icon-plus-gray").addClass("icon-check-white-active"), n.find(".favorite-label").attr("DATA-TRANSLATE-TEXT", "FOLLOWING").text(_.getString("FOLLOWING"))) : (n.removeClass("btn-success"), n.find(".icon").removeClass("icon-check-white-active").addClass("icon-plus-gray"), n.find(".favorite-label").attr("DATA-TRANSLATE-TEXT", "FOLLOW").text(_.getString("FOLLOW")))
                    },
                    onFavoriteBroadcast: function(e, t) {
                        var n = this.$el.find(".favorite-broadcast");
                        t ? (n.addClass("btn-success"), n.find(".icon").removeClass("icon-heart-gray").addClass("icon-check-white-active"), n.find(".label").attr("DATA-TRANSLATE-TEXT", "FAVORITED").text(_.getString("FAVORITED"))) : (n.removeClass("btn-success"), n.find(".icon").removeClass("icon-check-white-active").addClass("icon-heart-gray"), n.find(".label").attr("DATA-TRANSLATE-TEXT", "FAVORITE").text(_.getString("FAVORITE")))
                    },
                    showLoggedInHelper: function(e) {
                        if (!this.destroyed || this.suspended || r.getLoggedInUserID() > 0) return;
                        var t = new r.Views.Tooltips.Helper({
                            text: _.getString("LB_TOOLTIP_MUST_CREATE_LOGIN_FIRST")
                        });
                        t.tooltipOptions.delay = 0, t.tooltipOptions.y = "top", r.Views.Tooltips.Helper.simpleTooltip(e, t)
                    },
                    onCreateClick: function() {
                        this.close(), n.model.get("user").createBroadcast()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.BroadcastForceSkip = t.Views.Lightboxes.Base.extend({
                    _priority: 1,
                    events: {
                        "click .skip": "onSkipClick",
                        "click .keep": "onKeepClick"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.seconds = this.options.params.countdown ? this.options.params.countdown : 20, this.song = this.options.params.song, this.skipped = !1
                    },
                    onDestroy: function() {
                        this.skipped || this.song.set("noSkip", !0), _.defined(this.time) && delete this.time
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("broadcastForceSkip").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate"), _.defined(this.time) || (this.time = Date.now()), $(".skip-seconds-remaining", this.$el).text(this.seconds), _.defer(_.bind(this.onTimer, this), 500)
                    },
                    onTimer: function() {
                        if (this.destroyed || this.suspended) return;
                        var e = Date.now(),
                            t = this.seconds - Math.ceil((e - this.time) / 1e3);
                        t > 0 ? ($(".skip-seconds-remaining", this.$el).text(t), _.defer(_.bind(this.onTimer, this), 500)) : this.onSkipClick()
                    },
                    onSkipClick: function(e) {
                        this.skipped = !0, t.trigger("player:nextSong", !0), this.close()
                    },
                    onKeepClick: function(e) {
                        this.song.set("noSkip", !0), this.close()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.BroadcastPauseSkip = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmitClick"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.model.set({
                            broadcast: e.params.broadcast,
                            confirmType: e.params.confirmType
                        }), this.model.get("confirmType") == "SKIP" && this.model.get("broadcast").on("change:activeSong", this.close, this)
                    },
                    onDestroy: function() {
                        this.model.get("broadcast").off(null, null, this)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("broadcastPauseSkip").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onSubmitClick: function(e) {
                        this.model.get("broadcast").set("allowPauseSkip", $("#dont-ask-again").is(":checked")), _.isFunction(this.options.params.callback) && this.options.params.callback(), this.close()
                    }
                })
            }(), function() {
                function i() {
                    var e = r.Models.Player.playStatuses,
                        t = n.model.get("player").get("playStatus");
                    switch (t) {
                    case e.NONE:
                    case e.FAILED:
                    case e.COMPLETED:
                        return !1
                    }
                    return !0
                }
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Lightboxes = r.Views.Lightboxes || {}, r.Views.Lightboxes.Record = r.Views.Lightboxes.Base.extend({
                    events: {
                        "click .play-callout": "onPlayCalloutClick",
                        "click .edit-callout": "onEditCalloutClick",
                        "click .toggle-play-callout": "togglePlay",
                        "click #preview-progress-bar": "onSeekClick",
                        "click .cancel-edit": "onCancelEditClick",
                        "click .submit-edit": "onSubmitEditClick",
                        "mouseenter .js-scrollable": "scrollbarFadeIn",
                        "mouseleave .js-scrollable": "scrollbarFadeOut"
                    },
                    initialize: function(e) {
                        this._super("initialize"), r.on("app:resize", this.handleResize, this)
                    },
                    onDestroy: function() {
                        $("#record-swf-wrapper").removeAttr("style"), $("#lightbox").removeAttr("style"), this.gridView && this.gridView.destroy(), r.off("app:resize", this.handleResize, this), e.gs_preview_status && (e.gs_preview_status = t), e.gs_preview_position && (e.gs_preview_position = t), e.gs_preview_error && (e.gs_preview_error = t), this.jsPlayer && _.isFunction(this.jsPlayer.stopStream) && this.jsPlayer.stopStream(), this.$scrubber && this.$scrubber.off(null, null, this), r.Services.SWF.unlockMute("record"), this.model.get("callouts").off("add", this.updateAudioCount, this), this.model.get("callouts").off("add", this.updateScrollbarSize, this)
                    },
                    suspend: function() {
                        $("#record-swf-wrapper").removeAttr("style"), this._super("suspend")
                    },
                    resume: function() {
                        this.handleResize(), this._super("resume")
                    },
                    render: function() {
                        this._super("render");
                        var e = this.model.get("appModel"),
                            t = e && e.get("user"),
                            n = _.chainLoading();
                        t && n.push(t.getCallouts().done(n.bind(this.onCallouts, this))), n.push(this.fetchTemplate("record").always(n.bind(this.onTemplate, this))), r.Services.SWF.lockMute("record")
                    },
                    handleResize: function() {
                        this._super("handleResize");
                        var e = $("#record-swf-placeholder"),
                            t = $("#record-swf-wrapper"),
                            n = e.offset();
                        n && t.length && !this.swfDisabled && t.css({
                            top: n.top,
                            left: n.left
                        })
                    },
                    editCallout: function(e, t) {
                        var n = $("#edit-callout-title"),
                            r = $("#preview-time-total"),
                            i = $("#preview-time-elapsed");
                        n.val(e.get("Name") || ""), r.text(_.millisToMinutesSeconds(e.get("EstimateDuration") * 1e3, !0)), i.text("00:00"), this.swfDisabled = !0, $("#record-swf-wrapper").css({
                            top: 0,
                            left: -1e4
                        }), this.$scrubber && this.$seekProgress && (this.$scrubber.css("left", 0), this.$seekProgress.width("0%")), this.$el.find(".error").removeClass("hide"), $("#record-swf-placeholder").addClass("hide"), $("#record-edit-callout").removeClass("hide"), this.model.set({
                            position: 0,
                            duration: 0,
                            callout: e,
                            autoplay: t && t.play && !0
                        }), this.setUpPlayerInterface()
                    },
                    cancelEditCallout: function() {
                        $("#record-swf-placeholder").removeClass("hide"), $("#record-edit-callout").addClass("hide"), this.swfDisabled = !1, this.handleResize(), this.jsPlayer && _.isFunction(this.jsPlayer.stopStream) && this.jsPlayer.stopStream()
                    },
                    setUpPlayerInterface: function() {
                        if (this.destroyed) return;
                        !this.playerPending && !$("#preview-player-wrapper").length && $("body").append('<div id="preview-player-wrapper"></div>');
                        var t = swfobject.getObjectById("preview-player");
                        if (!t || !_.isFunction(t.playCallout)) {
                            if (!this.playerPending) {
                                this.playerPending = !0;
                                var n = {
                                    hostname: e.location.host,
                                    session: gsConfig.sessionID
                                },
                                    r = {
                                        scale: "noScale",
                                        salign: "lt",
                                        menu: "false",
                                        allowScriptAccess: "always",
                                        wmode: "window"
                                    },
                                    i = {
                                        id: "preview-player",
                                        name: "preview-player"
                                    };
                                swfobject.embedSWF("JSPlayer.swf?v=" + gsConfig.swfVersion, "preview-player-wrapper", "1", "1", "9.0.0", !1, n, r, i)
                            }
                            _.delay(_.bind(this.setUpPlayerInterface, this), 250)
                        } else {
                            this.jsPlayer = t, this.$timeElapsed = $("#preview-time-elapsed"), this.$timeTotal = $("#preview-time-total"), this.$progressBar = $("#preview-progress-bar"), this.$seekProgress = $("#preview-elapsed"), this.$scrubber = $("#preview-scrubber"), this.$toggleButton = this.$el.find("a.toggle-play-callout"), this.$scrubber.on("dragstart", _.bind(this.onScrubberDragStart, this)), this.$scrubber.on("drag", _.bind(this.onScrubberDrag, this)), this.$scrubber.on("dragend", _.bind(this.onScrubberDragEnd, this)), e.gs_preview_status = _.bind(this.statusCallback, this), e.gs_preview_position = _.bind(this.positionCallback, this), e.gs_preview_error = _.bind(this.errorCallback, this), this.jsPlayer.setStatusCallback("window.gs_preview_status"), this.jsPlayer.setPositionCallback("window.gs_preview_position"), this.jsPlayer.setErrorCallback("window.gs_preview_error"), this.model.set("currentStatus", 0);
                            var s = this.model.get("callout");
                            !this.suspended && this.model.get("autoplay") && s && this.togglePlayFromID(s.get("CalloutID"))
                        }
                    },
                    statusCallback: function(e) {
                        this.model.set("currentStatus", r.Models.Player.playStatuses[e.toUpperCase()]);
                        var t = !1,
                            n = r.Models.Player.playStatuses;
                        switch (this.model.get("currentStatus")) {
                        case n.INITIALIZING:
                        case n.LOADING:
                        case n.BUFFERING:
                            this.$toggleButton.addClass("buffering").removeClass("playing");
                            break;
                        default:
                            this.$toggleButton.removeClass("buffering")[(this.model.get("currentStatus") == n.PLAYING ? "add" : "remove") + "Class"]("playing")
                        }
                        e !== "failed" && this.$el.find(".error").addClass("hide")
                    },
                    positionCallback: function(e) {
                        e && (e.position || e.duration) ? (this.$timeElapsed.text(_.millisToMinutesSeconds(e.position, !0)), this.$timeTotal.text(_.millisToMinutesSeconds(e.duration, !0))) : (this.$timeElapsed.text(""), this.$timeTotal.text("")), this.model.set({
                            position: e.position,
                            duration: e.duration
                        });
                        var t = e && e.duration ? Math.min(1, e.position / e.duration) : 0,
                            n = this.$progressBar.width(),
                            r = Math.min(n, t * 100),
                            i = Math.min(n, Math.max(0, n * t));
                        this.$seekProgress.width(r + "%"), this.lockScrubber || this.$scrubber.css("left", i)
                    },
                    errorCallback: function(e) {
                        console.log("preview error", e), this.$el.find(".error").removeClass("hide").find(".message").text(_.getString("LB_PREVIEW_STREAM_ERROR"))
                    },
                    togglePlay: function(e) {
                        var t = this.model.get("callout");
                        t && (this.togglePlayFromID(t.get("CalloutID")), this.$el.find(".error").addClass("hide"))
                    },
                    togglePlayFromID: function(e) {
                        var t = this.model.get("currentStatus"),
                            i = r.Models.Player.playStatuses,
                            s = n.model.get("player"),
                            o = this.model.get("previewingCalloutID");
                        if (this.jsPlayer) {
                            var u = o;
                            switch (t) {
                            case i.NONE:
                            case i.FAILED:
                            case i.COMPLETED:
                                this.jsPlayer.playCallout(e), u = e;
                                break;
                            case i.INITIALIZING:
                            case i.LOADING:
                                this.jsPlayer.stopStream(), o && o !== e && (this.jsPlayer.playCallout(e), u = e);
                                break;
                            case i.PLAYING:
                            case i.BUFFERING:
                                o && o !== e ? (this.jsPlayer.stopStream(), this.jsPlayer.playCallout(e), u = e) : this.jsPlayer.pauseStream();
                                break;
                            case i.PAUSED:
                                o && o !== e ? (this.jsPlayer.stopStream(), this.jsPlayer.playCallout(e), u = e) : this.jsPlayer.resumeStream()
                            }
                            this.model.set("previewingCalloutID", u)
                        }
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate");
                        if (!$("#record-swf").length) {
                            $("#record-swf-wrapper").length || $("body").append('<div id="record-swf-wrapper"><div id="record-swf-replaceme"></div></div>');
                            var t = {
                                readyTitle: _.getString("RECORD_READY_TITLE"),
                                recordTitle: _.getString("RECORD_RECORD_TITLE"),
                                previewTitle: _.getString("RECORD_PREVIEW_TITLE"),
                                readyCopy: _.getString("RECORD_READY_COPY"),
                                startRecord: _.getString("RECORD_START"),
                                stopRecord: _.getString("RECORD_STOP"),
                                retryBtn: _.getString("RECORD_RETRY"),
                                uploadBtn: _.getString("RECORD_UPLOAD"),
                                previewLabel: _.getString("RECORD_PREVIEW_LABEL"),
                                nameLabel: _.getString("RECORD_NAME_LABEL")
                            },
                                n = {
                                    scale: "noScale",
                                    salign: "lt",
                                    menu: "false",
                                    allowScriptAccess: "always",
                                    wmode: "window"
                                },
                                i = {
                                    id: "record-swf",
                                    name: "record-swf"
                                };
                            swfobject.embedSWF("Recorder.swf?v=" + gsConfig.swfVersion, "record-swf-replaceme", "310", "290", "10.1.0", !1, t, n, i)
                        }
                        var s = $("#recordings-grid");
                        if (s.length) {
                            s.empty();
                            var o = new r.Views.CalloutGrid({
                                el: s[0],
                                collection: this.model.get("callouts")
                            });
                            o.handleItemClick = function() {
                                console.log("handleCalloutGridClick")
                            }, this.gridView = o, o.render(), $("#recordings-lb-container").tinyscrollbar()
                        }
                        this.handleResize()
                    },
                    onCallouts: function(e) {
                        e && (this.model.set("callouts", e), this.model.get("callouts").on("add", this.updateAudioCount, this), this.model.get("callouts").on("add", this.updateScrollbarSize, this))
                    },
                    onPlayCalloutClick: function(e) {
                        var t = $(e.currentTarget).closest(".module-row"),
                            n = t.data("module");
                        if (n && n.model && n.model.id > 0 && n.model.get("transcoded")) {
                            var s = new r.Models.PlayContext;
                            s.addDefaultType();
                            var o = r.Services.SWF.playSpecialIndexes,
                                u = o.NEXT,
                                a = !1;
                            i() || (u = o.DEFAULT, a = !0), r.Services.SWF.addSongs([n.model], u, !1, s, a, !0)
                        }
                    },
                    onEditCalloutClick: function(e, t) {
                        var n = $(e.currentTarget).closest(".module-row"),
                            r = n.data("module");
                        if (r && r.model) {
                            var i = r.model;
                            this.editCallout(i, t)
                        }
                    },
                    onCancelEditClick: function(e) {
                        this.cancelEditCallout()
                    },
                    onSubmitEditClick: function(e) {
                        var t = $("#edit-callout-title"),
                            n = $(e),
                            i = this.model.get("callout"),
                            s = t.val();
                        i && (n.addClass("disabled"), r.Services.API.updateCalloutDetails(i.get("CalloutID"), s).always(function() {
                            n.removeClass("disabled")
                        }).done(_.bind(function() {
                            i.set({
                                Name: s,
                                SongName: s
                            }), this.cancelEditCallout()
                        }, this)).fail(_.bind(function() {
                            var e = this.$el.find(".error");
                            e.find(".message").text(_.getString("ERROR_SAVING_AUDIO_CLIP")), e.removeClass("hide")
                        }, this)))
                    },
                    onSeekClick: function(e) {
                        if (this.model.get("currentStatus") != r.Models.Player.playStatuses.PLAYING) return e.preventDefault(), !1;
                        var t = this.$progressBar.offset(),
                            n = e.pageX - t.left,
                            i = n / this.$progressBar.width(),
                            s = Math.min(Math.max(i, 0), 1),
                            o = this.model.get("duration") * s;
                        this.jsPlayer.seekTo(o)
                    },
                    onScrubberDragStart: function(e, t) {
                        if (this.model.get("currentStatus") != r.Models.Player.playStatuses.PLAYING) return !1;
                        this.lockScrubber = !0;
                        var n = this.$scrubber.css("left");
                        return this.scrubberLeft = _.toInt(n.substring(0, n.length - 2)), this.maxScrubberLeft = this.$progressBar.width() - 8, this.minScrubberLeft = -8, t.draggedItems = [], t.scrubber = !0, !0
                    },
                    onScrubberDrag: function(e, t) {
                        var n = this.scrubberLeft + t.deltaX;
                        if (n >= this.maxScrubberLeft) {
                            this.$scrubber.css("left", this.maxScrubberLeft);
                            return
                        }
                        if (n <= this.minScrubberLeft) {
                            this.$scrubber.css("left", this.minScrubberLeft);
                            return
                        }
                        this.$scrubber.css("left", n)
                    },
                    onScrubberDragEnd: function(e, t) {
                        t.scrubber && this.onSeekClick(e), this.lockScrubber = !1
                    },
                    scrollbarFadeIn: function(e) {
                        var t = $(e.currentTarget);
                        t.find(".scrollbar").stop().fadeTo(200, 1)
                    },
                    scrollbarFadeOut: function(e) {
                        var t = $(e.currentTarget);
                        t.find(".scrollbar").stop().fadeTo(200, 0)
                    },
                    updateAudioCount: function() {
                        var e = this.model.get("callouts"),
                            t = e && e.length || 0;
                        this.$("#lightbox-header .title").html(_.getString("YOUR_AUDIO_CLIPS", {
                            clips: t
                        }))
                    },
                    updateScrollbarSize: function() {
                        setTimeout(function() {
                            $("#recordings-lb-container").tinyscrollbar_update()
                        }, 300)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.BroadcastListeners = t.Views.Lightboxes.Base.extend({
                    events: {
                        "keyup .listener-filter": "onFilterChangeDebounced",
                        "click .end-broadcast": "onEndBroadcastClick",
                        "click .user-link": "close",
                        "mouseenter .js-scrollable": "scrollbarFadeIn",
                        "mouseleave .js-scrollable": "scrollbarFadeOut"
                    },
                    initialize: function(e) {
                        var t = e.params.broadcast;
                        this.currentFilter = "", this.childViews = [], this.endBroadcast = _.orEqual(e.params.endBroadcast, !1), this.onBroadcastEnded = _.orEqual(e.params.onBroadcastEnded, null), this.model.set({
                            broadcast: t
                        }), t.on("change:listenersCount", this.onListenersCountChanged, this), t.on("change:listeners", this.renderListeners, this), this.onFilterChangeDebounced = _.debounce(_.bind(this.onFilterChange, this), 20), this._super("initialize")
                    },
                    onDestroy: function() {
                        var e = this.model.get("broadcast"),
                            t = e.get("listeners");
                        e.off(null, null, this), t && t.off(null, null, this)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("broadcastListeners").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        var t = this.model.get("broadcast");
                        this.$el.html(this.renderTemplate(e, {
                            broadcast: t,
                            endBroadcast: this.endBroadcast
                        })), this.renderListeners(), $("#bc-listeners-lb-container").tinyscrollbar({
                            onscroll: _.bind(this.onScroll, this)
                        }), this._super("onTemplate")
                    },
                    onScroll: function(e, t, n) {
                        n = n || {};
                        if (_.isUndefined(t) || _.isNull(t)) t = this.$queueList.position().left * -1;
                        n.overrideScrollPos = t, this.listenersGrid.handleScroll(n)
                    },
                    renderListeners: function() {
                        if (this.destroyed) return;
                        var e = this.model.get("broadcast"),
                            n = e.get("listeners"),
                            r = $("#bc-listeners-lb-grid").empty();
                        n && (this.listenersGrid = new t.Views.BroadcastUserGridTall({
                            el: r[0],
                            collection: n,
                            broadcast: e,
                            showBroadcastOptions: e.isLoggedInUserOwner(),
                            endBroadcast: this.endBroadcast
                        }), this.listenersGrid.render(), this.childViews.push(this.listenersGrid), n.off(null, null, this), n.on("add remove reset", this.listenersChanged, this))
                    },
                    onFilterChange: function(e) {
                        if (this.destroyed || !this.listenersGrid) return;
                        var t = $(e.currentTarget).val();
                        this.listenersGrid.filter(t), t && !this.currentFilter && $("#bc-listeners-logged-out").addClass("hide"), this.currentFilter = t, setTimeout(function() {
                            $("#bc-listeners-lb-container").tinyscrollbar_update()
                        }, 100)
                    },
                    onFilterChangeDebounced: function() {},
                    onListenersCountChanged: function(e, t) {
                        $(".title", "#lightbox-header").text(_.getStringPluralized("ONE_LISTENER", "NUM_LISTENERS", t, {
                            num: t
                        }));
                        var n = e.get("listeners"),
                            r = n && n.length || 0,
                            i = Math.max(0, t - r),
                            s = $("#bc-listeners-logged-out");
                        i ? (s.text(_.getString(i === 1 ? "ONE_LISTENER_ANONYMOUS" : "NUM_LISTENERS_ANONYMOUS", {
                            num: i
                        })), this.currentFilter || s.removeClass("hide")) : s.addClass("hide")
                    },
                    listenersChanged: function() {
                        setTimeout(function() {
                            $("#bc-listeners-lb-container").tinyscrollbar_update("relative")
                        }, 100)
                    },
                    onEndBroadcastClick: function() {
                        t.Services.SWF.endBroadcast(), t.trigger("lightbox:close", "broadcastListeners"), this.onBroadcastEnded && this.onBroadcastEnded()
                    },
                    scrollbarFadeIn: function(e) {
                        var t = $(e.currentTarget);
                        t.find(".scrollbar").stop().fadeTo(200, 1)
                    },
                    scrollbarFadeOut: function(e) {
                        var t = $(e.currentTarget);
                        t.find(".scrollbar").stop().fadeTo(200, 0)
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.BroadcastTransferOwnership = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .invite": "onInviteClick",
                        "click .accept": "onAcceptInviteClick",
                        "click .decline": "onDeclineClick"
                    },
                    initialize: function(e) {
                        this.model.set({
                            user: e.params.user,
                            owner: e.params.owner,
                            broadcast: e.params.broadcast,
                            receivingTransfer: _.orEqual(e.params.receivingTransfer, !1)
                        }), this.endBroadcast = _.orEqual(e.params.endBroadcast, !1), this.onSuccess = _.orEqual(e.params.onSuccess, !1), this._super("initialize")
                    },
                    onDestroy: function() {
                        var e = this.model.get("broadcast");
                        e && e.off(null, null, this), t.off(null, null, this)
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("broadcastTransferOwnership").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onInviteClick: function(e) {
                        var t = $(e.currentTarget);
                        if (t.hasClass("disabled")) return;
                        $(".title", "#lightbox-header").html(_.getString("INVITING_ELLIPSIS")), $("#bc-transfer-message").removeClass("hide"), $("#bc-transfer-loading").removeClass("hide"), t.addClass("disabled"), this.model.get("broadcast").inviteUserToTransferOwnership(this.model.get("user")).progress(_.bind(this.onInviteSuccess, this)).done(_.bind(this.onInviteAccept, this)).fail(_.bind(this.onInviteFail, this))
                    },
                    onInviteSuccess: function() {
                        if (this.destroyed) return;
                        var e = this.model.get("user");
                        this.endBroadcast ? $("#bc-transfer-message").html(_.getString("LB_PASS_BROADCAST_WAITING_ACCEPT", {
                            user: e.escape("Name")
                        })) : (t.trigger("notification:add", {
                            description: _.getString("POPUP_ERROR_BROADCAST_INVITE_SUCCESS", {
                                user: e.escape("Name")
                            }),
                            type: "success",
                            duration: 5e3
                        }), this.onSuccess && this.onSuccess(), this.close())
                    },
                    onInviteAccept: function() {
                        if (this.destroyed) return;
                        this.onSuccess && this.onSuccess(), this.close()
                    },
                    onInviteFail: function(e) {
                        if (this.destroyed) return;
                        var t = !0,
                            n = "POPUP_ERROR_BROADCAST_INVITE_FAIL";
                        if (e) switch (e.error) {
                        case "invalid":
                        case "duplicate":
                            n = "POPUP_ERROR_BROADCAST_INVITE_DUPLICATE", t = !1;
                            break;
                        case "rejected":
                            n = "POPUP_ERROR_BROADCAST_INVITE_DENIED", t = !1
                        }
                        $("#bc-transfer-message").addClass("hide"), $("#bc-transfer-loading").addClass("hide"), $("#lightbox-error").removeClass("hide").html(_.getString("POPUP_ERROR_BROADCAST_INVITE_SUCCESS", {
                            user: this.model.get("user").escape("Name")
                        })), t && $(".invite", "#lightbox-footer").removeClass("disabled")
                    },
                    onAcceptInviteClick: function(e) {
                        function u() {
                            $("#lightbox-error").removeClass("hide").html(_.getString("POPUP_ERROR_BROADCAST_INVITE_ERROR_ACCEPT")), $("#bc-transfer-message").addClass("hide"), $("#bc-transfer-loading").addClass("hide"), r.removeClass("disabled"), t.off("manatee:broadcastDispatch:newBroadcasterResponse", u)
                        }
                        var r = $(e.currentTarget),
                            i = this.model.get("broadcast"),
                            s = n.model.get("user"),
                            o = i.get("ownerUserIDs");
                        if (r.hasClass("disabled")) return;
                        if (_.indexOf(o, s.get("UserID")) > -1) {
                            this.takeOverBroadcast();
                            return
                        }
                        t.on("manatee:broadcastDispatch:newBroadcasterResponse", u), i.on("change:ownerUserIDs", function a(e, n) {
                            _.indexOf(n, s.get("UserID")) > -1 && (e.off("change:ownerUserIDs", a, this), t.off("manatee:broadcastDispatch:newBroadcasterResponse", u), this.takeOverBroadcast())
                        }, this), $("#bc-transfer-message").addClass("hide"), $("#bc-transfer-loading").removeClass("hide"), $(".decline", "#lightbox-footer").addClass("disabled"), r.addClass("disabled"), t.Services.SWF.currentBroadcastPrivateDispatch("newBroadcasterResponse", {
                            accept: !0
                        })
                    },
                    onDeclineClick: function(e) {
                        var n = $(e.currentTarget);
                        if (n.hasClass("disabled")) return;
                        t.Services.SWF.currentBroadcastPrivateDispatch("newBroadcasterResponse", {
                            accept: !1
                        }), this.close()
                    },
                    takeOverBroadcast: function() {
                        function e() {
                            $("#lightbox-error").removeClass("hide").html(_.getString("POPUP_ERROR_BROADCAST_INVITE_ERROR_ACCEPT")), $("#bc-transfer-message").addClass("hide"), $("#bc-transfer-loading").addClass("hide"), $(".accept", "#lightbox-footer").removeClass("disabled"), t.off("manatee:takeOverBroadcast", e)
                        }
                        n.model.get("player").set("isTakingOverBroadcast", !0), t.on("manatee:takeOverBroadcast", e), t.on("manatee:broadcastTransferred", function() {
                            t.off("manatee:takeOverBroadcast", e), this.close()
                        }, this);
                        var r = this.model.get("broadcast");
                        t.Services.SWF.takeOverBroadcast(r.get("BroadcastID"), r.get("Name"), r.get("Tag"), r.get("Description"), r.get("Image"), r.get("Privacy"))
                    }
                })
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Views = r.Views || {}, r.Views.Lightboxes = r.Views.Lightboxes || {}, r.Views.Lightboxes.BroadcastResume = r.Views.Lightboxes.Base.extend({
                    events: {
                        "click .submit": "onSubmitClick"
                    },
                    initialize: function(e) {
                        this._super.apply(this, ["initialize"].concat(_.toArray(arguments))), this.model.set({
                            broadcastID: e.params.broadcastID,
                            broadcastName: e.params.broadcastName,
                            context: e.params.context,
                            alreadyTried: e.params.alreadyTried
                        })
                    },
                    render: function() {
                        this._super("render");
                        if (!this.model.get("alreadyTried")) {
                            var e = _.chainLoading({
                                ignoreFails: !0
                            });
                            e.push(r.Models.Broadcast.fetchRealtimeBroadcast(this.model.get("broadcastID")).always(e.bind(this.onBroadcast, this))), e.push(this.fetchTemplate("broadcastResume").always(e.bind(this.onTemplate, this)))
                        } else this.onBroadcast(), this.fetchTemplate("broadcastResume").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e)), this._super("onTemplate")
                    },
                    onBroadcast: function(e) {
                        this.model.set("broadcast", e)
                    },
                    onSubmitClick: function(e) {
                        var r = this.model.get("broadcast"),
                            i = n.model.get("user"),
                            s = this.model.get("context"),
                            o = i.get("Context");
                        if (r) {
                            function u() {
                                i.resumeBroadcast(r)
                            }
                            var a = o.artist && o.artist.id;
                            o.type !== s.type || s.type == "artist" && s.artistID !== a ? (i.setContext(s), setTimeout(u, 100)) : u()
                        } else i.createBroadcast(t, t, t, !0);
                        this.close()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {}, t.Views.Lightboxes = t.Views.Lightboxes || {}, t.Views.Lightboxes.BroadcastAbout = t.Views.Lightboxes.Base.extend({
                    events: {
                        "click .start-broadcasting": "onCreateClick"
                    },
                    initialize: function() {
                        this._super("initialize")
                    },
                    render: function() {
                        this._super("render"), this.fetchTemplate("broadcastAbout").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        if (this.suspended || this.destroyed) return;
                        this.$el.html(this.renderTemplate(e, this.options.params)), this._super("onTemplate"), setTimeout(function() {
                            $("#chat-preview-container .preview-chat").addClass("animate")
                        }, 4e3)
                    },
                    onCreateClick: function() {
                        this.close()
                    }
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Views = t.Views || {};
                var n;
                t.Views.Tooltips.Tacobell = Backbone.View.extend({
                    templatePath: "tooltip",
                    initialize: function() {
                        n = this.options.appModel, this.renderDfd = $.Deferred()
                    },
                    newNotification: function() {
                        if (!n.get("user").get("notifications")) return;
                        var e = n.get("user").get("notifications").getNormalized(n.get("user"), 1),
                            t = n.get("user").get("Context");
                        e && e.length && this.renderDfd.state() === "resolved" && this.el && (e[0].forArtistID && t.type == "artist" && e[0].forArtistID == t.artist.get("ArtistID") || !e[0].forArtistID && t.type == "user") && this.fetchTemplate("taco").always(_.bind(function(t) {
                            $("#notifications-container", this.el).prepend(this.renderTemplate(t, {
                                notif: e[0]
                            }))
                        }, this))
                    },
                    render: function() {
                        var e = _.chainLoading();
                        return e.push(n.get("user").getNotifications()), e.push(this.fetchTemplate("taco")), e.push(this.fetchTemplate("tacobell").always(e.bind(this.renderNotification, this))), this.renderDfd.promise()
                    },
                    renderNotification: function(e) {
                        this.$el.html(this.renderTemplate(e));
                        if (!n.get("user").get("notifications") || !n.get("user").get("notifications").length) {
                            this.renderDfd.resolve();
                            return
                        }
                        this.fetchTemplate("taco").always(_.bind(this.onTemplate, this))
                    },
                    onTemplate: function(e) {
                        var t = [],
                            r = this.renderTemplate,
                            i = n.get("user"),
                            s = i.get("notifications"),
                            o = s.getNormalized(n.get("user"), 4),
                            u = i.get("Context");
                        _.each(o, function(n) {
                            (n.forArtistID && u.type == "artist" && n.forArtistID == u.artist.get("ArtistID") || !n.forArtistID && u.type == "user") && t.push(r(e, {
                                notif: n
                            }))
                        }), t.length && ($("#notifications-container", this.el).html(t.join("")), $("#see-more-notifications", this.el).removeClass("hide")), this.renderDfd.resolve()
                    }
                })
            }(), function() {
                function n(e) {
                    return function() {
                        try {
                            return store[e].apply(store, arguments)
                        } catch (t) {}
                    }
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                if (!e.store) throw "store.js didn't load!";
                var r;
                t.Services.Local = {
                    init: function(e) {
                        r = e, r.on("change:user", onUserChange, this), t.Services.SWF.ready.then(_.bind(this.onUserChange, this))
                    },
                    onUserChange: function() {
                        if (!t.Services.SWF.ready.state() == "resolved") return
                    }
                };
                for (var i in e.store) store.hasOwnProperty(i) && _.isFunction(store[i]) && (t.Services.Local[i] = n(i))
            }(), function() {
                function i() {
                    this.requests = [], this.pendingRequest = null
                }
                function s(e, t) {
                    return e[e.length - 1] === t ? {} : e[e.length - 1]
                }
                function o(n) {
                    var i = [].slice.call(arguments, 1),
                        s = (new Date).valueOf(),
                        o = new this;
                    this.apply(o, i);
                    var u = 6e5;
                    if (n) {
                        typeof n == "number" && (u = n);
                        var a = o.getCacheKey(),
                            f = o.pendingCallCache[a];
                        _.defined(f) && (f.state() == "pending" || s - f.lastResolution < u) ? o = f : o.pendingCallCache[a] = o
                    }
                    if (o.options.canPreload) {
                        var l = o.method;
                        _.each(o.parameters, function(e, t) {
                            if (_.isString(e) || _.isNumber(e)) l += ":" + e
                        });
                        if (typeof e.preloadedData == "object" && e.preloadedData[l]) o.resolve(e.preloadedData[l]), delete e.preloadedData[l];
                        else if (typeof e.preloadedData == "undefined") {
                            var c = o.send,
                                h = null;
                            o.send = function() {
                                return h = _.toArray(arguments) || [], o.promise()
                            }, t.on("preloadedData", function(e) {
                                e[l] ? (o.resolve(e[l]), delete e[l]) : h && c.apply(o, h), o.send = c
                            }), r()
                        }
                    }
                    return o
                }
                function u(e, t, n, r, i) {
                    function o(e) {
                        s.isPending = !1, s.aborted || (s.lastResolution = (new Date).valueOf())
                    }
                    this.method = _.orEqual(e, ""), this.parameters = _.orEqual(t, {}), this.options = _.orEqual(n, {}), this.useHTTPS = _.orEqual(r, !1), this.useSWF = _.orEqual(i, !1), this.overrideHeaders = {}, this.type = "normal", this.failedAuth = !1, this.isPending = !1, this.numRetries = 0, this.lastFault = null, this.lastResolution = 0, this.successFilters = [], this.faultFilters = [], this._dfd = $.Deferred();
                    var s = this;
                    this._dfd.abort = function() {
                        if (s.ajaxRequest && s.state() === "pending") return s.abort = !0, s.ajaxRequest.abort()
                    }, this._dfd.always(o)
                }
                function a() {
                    return o.apply(u, arguments)
                }
                function f(e, t, n) {
                    u.call(this, e, t), this.httpMethod = _.orEqual(n, "POST"), this.type = "facebook"
                }
                function l(e) {
                    u.call(this, null, e), this.type = "lastfm"
                }
                function c(e, t, n) {
                    u.call(this, null, t), this.httpMethod = _.orEqual(n, "POST"), this.type = "flattr", this.method = e
                }
                function h() {
                    var e = String(Math.floor(Math.random() * 1e4));
                    return Z[e] ? h() : e
                }
                function p(e, t) {
                    var n;
                    _.isFunction(et) ? (n = h(), Z[n] = e, et(e.getSWFable(), t, n)) : (e.isPending = !1, Y.push(e))
                }
                function d() {
                    var e = "";
                    for (var t = 0; t < 6; t++) e += Math.floor(Math.random() * 16).toString(16);
                    return e != q ? e : d()
                }
                function v(e) {
                    e = _.orEqual(e, {});
                    var n = {
                        client: V,
                        clientRevision: J,
                        privacy: t.Services.API.privacy,
                        country: t.Services.API.country,
                        uuid: Q
                    };
                    return t.Services.API.sessionID && (n.session = t.Services.API.sessionID), t.Services.API.collectStats && (n.collectStats = t.Services.API.collectStats), $.extend(n, e)
                }
                function m(e, t) {
                    _.defined(e) || (e = {
                        fault: {
                            message: "Empty Result",
                            code: W.EMPTY_RESULT
                        }
                    }), e.header && y(e.header, t), e.fault ? b(e.fault, t) : t.resolve(e.hasOwnProperty("result") ? e.result : e)
                }
                function g() {
                    t.trigger("lightbox:open", {
                        _type: "invalidClient",
                        notCloseable: !0,
                        view: {
                            header: "LB_INVALID_CLIENT_TITLE",
                            message: "LB_INVALID_CLIENT_MSG",
                            buttonsRight: [{
                                label: "LB_REFRESH_GROOVESHARK",
                                className: "btn-primary submit"
                            }]
                        },
                        callbacks: {
                            ".submit": function(t) {
                                e.location.reload(!0)
                            }
                        }
                    })
                }
                function y(e, n) {
                    var r = e.session;
                    r && r != t.Services.API.sessionID && (t.Services.API.sessionID = r, F = !1, S()), e.expiredClient && (z = !0, t.player && t.player.expireSWFService(), g());
                    var i = e.secondsUntilDowntime;
                    if (i < 0) _.delay(C, 5e3);
                    else if (i > 0) {
                        var s = Math.floor(i / 60),
                            o = (new Date).valueOf();
                        if (s <= 60) if (U === 0 || s > 30 && o - U > 36e5 || s <= 30 && s > 15 && o - U > 18e5 || s <= 15 && s > 10 && o - U > 9e5 || s <= 10 && s > 5 && o - U > 6e5 || s <= 5 && o - U > 3e5) {
                            U = o;
                            var u = new t.Models.DataString($.localize.getString("NOTIFICATION_MAINTENANCE_WARNING"), {
                                min: s
                            });
                            $.publish("gs.notification", {
                                type: "info",
                                message: u
                            })
                        }
                    }
                    if (e.stats && n.options.logStats !== !1) {
                        var a = (+(new Date) - n.startTime) / 1e3,
                            f = _.extend({
                                methodName: n.method,
                                requestTime: a
                            }, e.stats);
                        t.trigger("api:stats", f)
                    }
                }
                function b(n, r) {
                    if (n && _.defined(n.code)) {
                        n.aborted || console.log("HANDLE FAULT CODE", n.code, r.method);
                        if (n.code == W.INVALID_TOKEN) {
                            var i = (new Date).valueOf();
                            if ((!I || i - I >= 3e5) && r.numRetries === 0) {
                                I = !1, r.isPending = !1, r.numRetries++, G.push(r), S();
                                return
                            }
                            $.publish("gs.notification", {
                                type: "error",
                                message: $.localize.getString("SERVICE_ERROR_COMMUNICATING"),
                                uniqueInstance: "errorCommunicating"
                            })
                        } else {
                            if (n.code == W.HTTP_TIMEOUT || n.code == W.EMPTY_RESULT) {
                                r.lastFault = n, r.retry(100 + r.numRetries * 100);
                                return
                            }
                            n.code == W.MAINTENANCE ? _.delay(C, 5e3) : n.code == W.INVALID_CLIENT ? g() : n.code == W.INVALID_SESSION ? t.trigger("lightbox:open", {
                                _type: "sessionBad",
                                _canClose: !1,
                                view: {
                                    header: "POPUP_SESSION_BAD_TITLE",
                                    message: "POPUP_SESSION_BAD_MSG",
                                    buttonsLeft: [{
                                        label: "LB_REFRESH_GROOVESHARK",
                                        className: "submit"
                                    }]
                                },
                                callbacks: {
                                    ".submit": function(t) {
                                        e.location.reload(!0)
                                    }
                                }
                            }) : gsConfig.runMode == "dev" && n.code == W.HTTP_ERROR && r.method == "getCommunicationToken" && (e.gsConfig.httpsFix = !0, e.location = "https://" + e.location.host + e.location.hash)
                        }
                    }
                    r.reject(n)
                }
                function w(e, t) {
                    var n = Z[t];
                    n && m(e, n), delete Z[t]
                }
                function E(e, t) {
                    var n = Z[t];
                    n && b(e, n), delete Z[t]
                }
                function S() {
                    if (F) return;
                    var e;
                    x(), F = !0;
                    if (t.Services.API.sessionID) {
                        var n = hex_md5(t.Services.API.sessionID);
                        e = a(!1, "getCommunicationToken", {
                            secretKey: n
                        }, {}, !0, !1), e.promise().then(T, function(t) {
                            N(t, e)
                        })
                    } else F = !1;
                    e && e.send()
                }
                function x() {
                    B = null, j = 0
                }
                function T(e) {
                    var n = new Date;
                    I = !1, B = e, F = !1, j = 15e5 + n.valueOf(), t.Services.SWF.ready.done(function() {
                        t.Services.SWF.setCommunicationToken(e)
                    });
                    var r;
                    while (G.length) r = G.shift(), r.send();
                    t.dispatcher.trigger("api:ready")
                }
                function N(e, t) {
                    var n = new Date;
                    F = !1, I = n.valueOf();
                    var r;
                    while (G.length) r = G.shift(), r.reject({
                        message: $.localize.getString("SERVICE_CREATE_TOKEN_FAIL"),
                        code: W.INVALID_TOKEN
                    })
                }
                function C() {
                    R || (R = !0, t.dispatcher.trigger("lightbox:open", {
                        type: "maintenance",
                        _canClose: !1,
                        view: {
                            header: "POPUP_MAINT_TITLE",
                            message: "POPUP_MAINT_MESSAGE",
                            buttonsLeft: [{
                                label: "POPUP_MAINT_TWITTER",
                                href: "http://twitter.com/sharkjanitor"
                            }]
                        }
                    }), L())
                }
                function k() {
                    R = !1, t.Views.Lightbox.close("maintenance")
                }
                function L() {
                    var e = a(!1, "getServiceStatus");
                    e.promise().then(A, O), e.send()
                }
                function A(e, t) {
                    e.status == 1 ? k() : _.delay(L, 2e4)
                }
                function O(e, t) {
                    _.delay(L, 2e4)
                }
                function M(e) {
                    et = t.Services.SWF.swfProxy, t.Services.SWF.swfServiceSuccess = w, t.Services.SWF.swfServiceFault = E;
                    var n;
                    while (Y.length) n = Y.shift(), n.send()
                }
                function D(e) {
                    return _.map(e, function(e) {
                        return e.hasOwnProperty("AlbumID") && delete e.AlbumID, e.hasOwnProperty("AlbumName") && delete e.AlbumName, e.hasOwnProperty("SongName") && delete e.SongName, e.hasOwnProperty("Flags") && delete e.Flags, e
                    })
                }
                function P() {
                    if (e.parentSandboxBridge) return !1;
                    var t = new XMLHttpRequest;
                    return "withCredentials" in t ? (gsConfig.runMode === "staging" && $.ajaxSetup({
                        xhrFields: {
                            withCredentials: !0
                        }
                    }), !0) : (typeof XDomainRequest != "undefined", !1)
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var r = _.once(function() {
                    setTimeout(function() {
                        typeof e.preloadedData == "undefined" && (e.preloadedData = {}, t.trigger("preloadedData", {}))
                    }, 1e4)
                });
                i.prototype.queue = function(e) {
                    function t() {
                        if (this.requests.length) {
                            this.pendingRequest = this.requests.shift();
                            var e = this;
                            this.pendingRequest.promise().always(function() {
                                e.pendingRequest = null, t.call(e)
                            }), this.pendingRequest.send()
                        }
                    }
                    this.requests.push(e), this.pendingRequest || t.call(this)
                }, u.createRequest = function() {
                    return o.apply(this, arguments)
                }, u.prototype = $.extend(u.prototype, {
                    promise: function() {
                        var e = this._dfd.promise();
                        return e.abort = this._dfd.abort, e
                    },
                    state: function() {
                        return this._dfd.state()
                    },
                    resolve: function(e) {
                        for (var t = 0; t < this.successFilters.length; t++) _.isFunction(this.successFilters[t]) && (e = this.successFilters[t](e));
                        this.lastResolution = (new Date).valueOf(), this._dfd.resolve(e)
                    },
                    resolveWith: function(e, t) {
                        for (var n = 0; n < this.successFilters.length; n++) _.isFunction(this.successFilters[n]) && (t = this.successFilters[n](t));
                        this.lastResolution = (new Date).valueOf(), this._dfd.resolveWith(e, t)
                    },
                    reject: function(e) {
                        for (var t = 0; t < this.faultFilters.length; t++) _.isFunction(this.faultFilters[t]) && (e = this.faultFilters[t](e));
                        this._dfd.reject(e)
                    },
                    rejectWith: function(e, t) {
                        for (var n = 0; n < this.faultFilters.length; n++) _.isFunction(this.faultFilters[n]) && (t = this.faultFilters[n](t));
                        this._dfd.rejectWith(e, t)
                    },
                    getSWFable: function() {
                        return {
                            type: this.type,
                            method: this.method,
                            parameters: this.parameters,
                            useHTTPS: this.useHTTPS,
                            overrideHeaders: this.overrideHeaders,
                            overrideKey: H
                        }
                    },
                    pendingCallCache: [],
                    cacheKeyProps: ["method", "parameters", "type"],
                    getCacheKey: function() {
                        var e, t, n = "";
                        for (e in this.cacheKeyProps) this.cacheKeyProps.hasOwnProperty(e) && (t = this[this.cacheKeyProps[e]], t instanceof String ? n += t : n += $.stringify(t));
                        return hex_md5(n)
                    },
                    send: function(e) {
                        e && e.length == 2 && this.promise().then(e[0], e[1]);
                        var r = this,
                            i = !0,
                            s = (new Date).valueOf();
                        if (this.isPending || this.state() == "resolved") return this.promise();
                        if (z) return this.reject({
                            message: $.localize.getString("POPUP_INVALID_CLIENT_MSG"),
                            code: W.INVALID_CLIENT
                        }), this.promise();
                        this.isPending = !0;
                        if (this.numRetries >= 3) return this.reject(this.lastFault), this.promise();
                        this.numRetries > 0 && (i = !1);
                        if (this.type == "facebook" || this.type == "lastfm" || this.type == "flattr") return p(this, {}), this.promise();
                        if (j > s || _.indexOf(["getCommunicationToken", "initiateSession", "getServiceStatus"], this.method) != -1) {
                            if (R && this.method != "getServiceStatus") return this.reject({
                                message: $.localize.getString("SERVICE_DOWN_MAINTENANCE"),
                                code: W.MAINTENANCE
                            }), this.promise();
                            var o = "http://" + X + "/" + K + "?" + this.method,
                                u = {
                                    header: v(this.overrideHeaders),
                                    method: this.method,
                                    parameters: this.parameters
                                };
                            if (B) {
                                q = d();
                                var a = hex_sha1(this.method + ":" + B + ":" + H + ":" + q);
                                u.header.token = q + a
                            }
                            this.startTime = +(new Date), t.Services.API.lastRequestTime = this.startTime;
                            if ((this.useSWF || this.useHTTPS && !t.Services.API.useCORS) && typeof gsConfig.neverUseSWF == "undefined") return p(this, u.header), this.promise();
                            if (this.useHTTPS || gsConfig.forceHTTPS) o = o.replace("http:", "https:");
                            this.ajaxRequest = $.ajax($.extend({}, this.options, {
                                contentType: "text/plain",
                                dataType: "json",
                                type: "POST",
                                data: $.stringify(u),
                                cache: i,
                                url: o,
                                success: function(e, t, n) {
                                    m(e, r)
                                },
                                error: function(e, t, n) {
                                    console.warn("ajax error: status: " + t + ", error: " + n, e, this);
                                    var i = {};
                                    switch (t) {
                                    case "parsererror":
                                        i.code = W.PARSE_ERROR, i.message = $.localize.getString("SERVICE_PARSE_JSON");
                                        break;
                                    case "timeout":
                                        i.code = W.HTTP_TIMEOUT, i.message = $.localize.getString("SERVICE_REQUEST_TIMEOUT");
                                        break;
                                    case "error":
                                    case "notmodified":
                                    default:
                                        i.code = W.HTTP_ERROR, i.message = $.localize.getString("SERVICE_HTTP_ERROR")
                                    }
                                    t == "abort" && (r.abort = !0, i.aborted = !0), b(i, r)
                                }
                            }))
                        } else this.isPending = !1, G.push(this), S();
                        return this.promise()
                    },
                    retry: function(e) {
                        this.isPending = !1, this.numRetries++, _.delay(_.bind(this.send, this), e)
                    },
                    queue: function(e) {
                        _.defined(u.prototype.queues) || (u.prototype.queues = {});
                        var t = u.prototype.queues[e];
                        return _.defined(t) || (t = u.prototype.queues[e] = new i), t.queue(this), this.promise()
                    }
                }), f.createRequest = function() {
                    return o.apply(this, arguments)
                }, f.prototype = $.extend(f.prototype, u.prototype, {
                    getSWFable: function() {
                        return {
                            type: this.type,
                            method: this.method,
                            parameters: this.parameters,
                            httpMethod: this.httpMethod
                        }
                    }
                }), l.createRequest = function() {
                    return o.apply(this, arguments)
                }, l.prototype = $.extend(l.prototype, u.prototype, {
                    getSWFable: function() {
                        return {
                            type: this.type,
                            parameters: this.parameters
                        }
                    }
                }), c.createRequest = function() {
                    return o.apply(this, arguments)
                }, c.prototype = $.extend(c.prototype, u.prototype, {
                    getSWFable: function() {
                        return {
                            type: this.type,
                            method: this.method,
                            parameters: this.parameters,
                            httpMethod: this.httpMethod
                        }
                    }
                });
                var H = "tastyTacos",
                    B = null,
                    j = 0,
                    F = !1,
                    I = !1,
                    q = null,
                    R = !1,
                    U = 0,
                    z = !1,
                    W = {
                        INVALID_CLIENT: 1024,
                        RATE_LIMITED: 512,
                        INVALID_TOKEN: 256,
                        INVALID_SESSION: 16,
                        MAINTENANCE: 10,
                        MUST_BE_LOGGED_IN: 8,
                        HTTP_TIMEOUT: 6,
                        PARSE_ERROR: 4,
                        HTTP_ERROR: 2,
                        EMPTY_RESULT: -256
                    },
                    X = e.location.host,
                    V = "htmlshark",
                    J = "20120830",
                    K = "more.php",
                    Q = "",
                    G = [],
                    Y = [],
                    Z = {},
                    et = null;
                t.Services.API = {
                    sessionID: null,
                    sessionPart: null,
                    collectStats: null,
                    country: null,
                    privacy: 0,
                    lastRequestTime: 0,
                    useCORS: !1,
                    init: function(e) {
                        this.sessionID = e.sessionID, this.sessionPart = hex_md5(e.sessionID).substr(0, 6), this.country = e.country, this.privacy = e.user.Privacy, this.useCORS = P(), Q = e.uuid, K = _.orEqual(K, e.defaultEndpoint), typeof e.neverUseSWF == "undefined" && t.Services.SWF.ready.then(M), t.on("swf:tokenRequired", S), this.sessionID ? S() : console.error("No SessionID! Reload!")
                    },
                    httpsFormSubmit: function(n, r, i) {
                        var s = $("#https-form"),
                            o = $("#https-iframe"),
                            u = [];
                        s.html(""), s.attr("action", n), s.attr("method", "post"), s.attr("target", "https-iframe"), s.attr("enctype", "multipart/form-data"), _.forEach(r, function(e, t) {
                            u.push('<input type="hidden" name="' + t + '" value="' + e + '" />')
                        }), s.append(u.join("")), t.airbridge && t.airbridge.isDesktop ? e.setupBridge = function() {
                            var t = {};
                            t[i] = e[i], document.getElementById("https-iframe").contentWindow.parentSandboxBridge = t
                        } : e.setupBridge = function() {}, s.submit()
                    },
                    isFirstVisit: function() {
                        var e = a(!1, "isFirstVisit", {}, {}, !1, !0);
                        return e.send()
                    },
                    makeFacebookRequest: function(e, t, n, r, i) {
                        var s = f.createRequest(!1, e, t, n);
                        s.send([r, i])
                    },
                    makeLastfmRequest: function(e, t, n) {
                        var r = l.createRequest(!1, e);
                        r.send([t, n])
                    },
                    makeFlattrRequest: function(e, t, n) {
                        var r = c.createRequest(!1, e, t, n);
                        return r.send()
                    },
                    rapleafPersonalize: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!1, "personalize", {
                                redirectURL: e
                            }, r, !1, !0);
                        i.type = "rapleaf", i.send([t, n])
                    },
                    rapleafDirect: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!1, "direct", {
                                email: e
                            }, r, !1, !0);
                        i.type = "rapleaf", i.send([t, n])
                    },
                    getAlbumByID: function(e) {
                        var t = a(!0, "getAlbumByID", {
                            albumID: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    getArtistByID: function(e) {
                        var t = a(!0, "getArtistByID", {
                            artistID: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    getPlaylistByID: function(e) {
                        var t = a(!0, "getPlaylistByID", {
                            playlistID: e
                        });
                        return t.send()
                    },
                    getQueueSongListFromSongIDs: function(e) {
                        var t = a(!0, "getQueueSongListFromSongIDs", {
                            songIDs: e
                        });
                        return t.send()
                    },
                    getSongFromToken: function(e) {
                        var t = a(!0, "getSongFromToken", {
                            token: e,
                            country: this.country
                        });
                        return t.send()
                    },
                    getTokenForSong: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!0, "getTokenForSong", {
                                songID: e,
                                country: this.country
                            }, r);
                        return i.send([t, n])
                    },
                    getUserByID: function(e) {
                        var t = a(!0, "getUserByID", {
                            userID: e
                        });
                        return t.send()
                    },
                    albumGetAllSongs: function(e) {
                        var t = a(!0, "albumGetAllSongs", {
                            albumID: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    artistGetAllSongs: function(e) {
                        var t = a(!0, "artistGetAllSongs", {
                            artistID: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    artistGetAllSongsEx: function(e, t) {
                        var n = a(!0, "artistGetAllSongsEx", {
                            artistID: e,
                            limit: t
                        });
                        return n.send()
                    },
                    artistGetArtistSongs: function(e, t) {
                        var n = a(!0, "artistGetArtistSongs", {
                            artistID: e,
                            limit: t
                        });
                        return n.send()
                    },
                    artistGetArtAttribution: function(e) {
                        var t = a(!0, "artistGetArtAttribution", {
                            artistID: e
                        });
                        return t.send()
                    },
                    artistGetAllAlbums: function(e) {
                        var t = a(!0, "artistGetAllAlbums", {
                            artistID: e
                        });
                        return t.send()
                    },
                    playlistGetSongs: function(e) {
                        var t = a(!0, "playlistGetSongs", {
                            playlistID: e
                        });
                        return t.send()
                    },
                    getArtistRecentListeners: function(e, t, n) {
                        var r = arguments[arguments.length - 1] === n ? {} : arguments[arguments.length - 1],
                            i = u.createRequest(!0, "getArtistRecentListeners", {
                                artistID: e
                            }, r);
                        i.send([t, n])
                    },
                    getAlbumRecentListeners: function(e, t, n) {
                        var r = arguments[arguments.length - 1] === n ? {} : arguments[arguments.length - 1],
                            i = u.createRequest(!0, "getAlbumRecentListeners", {
                                albumID: e
                            }, r);
                        i.send([t, n])
                    },
                    getSongRecentListeners: function(e, t, n) {
                        var r = arguments[arguments.length - 1] === n ? {} : arguments[arguments.length - 1],
                            i = u.createRequest(!0, "getSongRecentListeners", {
                                songID: e
                            }, r);
                        i.send([t, n])
                    },
                    getUserRecentListens: function(e) {
                        var t = a(!0, "getUserRecentListens", {
                            userID: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    deleteUserListens: function(e) {
                        var t = a(!0, "deleteUserListens", {
                            keys: e
                        });
                        return t.send()
                    },
                    popularGetSongs: function(e) {
                        var t = {
                            daily: !0,
                            weekly: !0,
                            monthly: !0
                        };
                        t[e] || (e = "daily");
                        var n = a(864e5, "popularGetSongs", {
                            type: e
                        }, {
                            canPreload: !0
                        });
                        return n.send()
                    },
                    popularGetSongsPreview: function() {
                        var n = this,
                            r = $.Deferred(),
                            i = function(e) {
                                var s = e.popularGetSongsPreview;
                                s ? r.resolve(s) : n.popularGetSongs("daily").done(function(e) {
                                    e || r.reject(), r.resolve({
                                        Songs: _.first(e.Songs, 30)
                                    })
                                }).fail(function() {
                                    r.reject()
                                }), t.off("preloadedData", i)
                            };
                        return e.preloadedData ? i(e.preloadedData) : t.on("preloadedData", i), r.promise()
                    },
                    trendingGetSongs: function(e) {
                        var t = a(864e5, "trendingGetSongs", {
                            tag: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    featuredGetCurrentFeatured: function(e) {
                        var t = a(!0, "featuredGetCurrentFeatured", {
                            date: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    autoplayGetSongs: function(e, t, n, r, i, o, u, f, l, c, h, p) {
                        var d = s(arguments, p),
                            v = {
                                songQueueID: e,
                                seedArtists: t,
                                frowns: n,
                                songIDsAlreadySeen: r,
                                recentArtists: i,
                                recentAlbums: o,
                                country: this.country,
                                secondaryArtistWeightModifier: u,
                                seedArtistWeightRange: f,
                                weightModifierRange: l,
                                minDuration: c,
                                maxDuration: h,
                                limit: p
                            };
                        d && d.noCountry && (v.country = null);
                        var m = a((d && d.cacheSeconds || 0) * 1e3, "autoplayGetSongs", v, d);
                        return m.send()
                    },
                    getRecommendedSongs: function(e, t) {
                        var n = a(!0, "getRecommendedSongs", {
                            artistIDs: e,
                            excludeArtistIDs: t
                        }, {});
                        return n.send()
                    },
                    albumGetFans: function(e, t) {
                        t = _.orEqual(t, 0);
                        var n = a(!0, "albumGetFans", {
                            albumID: e,
                            offset: t
                        });
                        return n.send()
                    },
                    artistGetFans: function(e, t) {
                        t = _.orEqual(t, 0);
                        var n = a(!0, "artistGetFans", {
                            artistID: e,
                            offset: t
                        });
                        return n.send()
                    },
                    playlistGetFans: function(e) {
                        var t = a(!0, "playlistGetFans", {
                            playlistID: e
                        });
                        return t.send()
                    },
                    songGetFans: function(e, t) {
                        t = _.orEqual(t, 0);
                        var n = a(!0, "songGetFans", {
                            songID: e,
                            offset: t
                        });
                        return n.send()
                    },
                    userGetFans: function(e, t) {
                        t = _.orEqual(t, 0);
                        var n = a(!0, "userGetFans", {
                            userID: e,
                            offset: t
                        });
                        return n.send()
                    },
                    authenticateUser: function(e, t) {
                        var n = a(!1, "authenticateUser", {
                            username: e,
                            password: t
                        }, null, !0, !1);
                        return n.send()
                    },
                    authenticateGoogleUser: function(e, t, n) {
                        var r = a(!1, "authenticateGoogleUserEx", {
                            googleUID: e,
                            googleEmailAddress: t,
                            accessToken: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    authenticateTwitterUser: function(e, t, n) {
                        var r = u.createRequest(!1, "authenticateTwitterUser", {
                            twitterUserID: e,
                            oauthToken: t,
                            oauthSecret: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    reportUserChange: function(e) {
                        var n = e.get("Name"),
                            r = e.get("Picture"),
                            i = e.get("Context"),
                            s = {
                                userID: e.get("UserID"),
                                email: e.get("Email"),
                                username: n,
                                userTrackingID: e.get("userTrackingID"),
                                picture: r,
                                privacy: e.get("sessionPrivacy"),
                                isPremium: e.get("subscription").isPremium(),
                                visibleToUsers: null,
                                chatInfo: {
                                    n: n,
                                    p: r
                                },
                                contextArtistID: i && i.artist instanceof t.Models.Artist && i.artist.get("ArtistID") || 0
                            };
                        t.Services.API.privacy = s.privacy, (s.privacy & 8) > 0 && (e.get("favoriteUsers") ? s.visibleToUsers = e.get("favoriteUsers").pluck("UserID") : s.visibleToUsers = []);
                        var o = a(!1, "reportUserChange", s, null, !1, !0);
                        return o.send()
                    },
                    logoutUser: function() {
                        var e = a(!1, "logoutUser");
                        return e.send()
                    },
                    userForgotPassword: function(e) {
                        var t = a(!1, "userForgotPassword", {
                            usernameOrEmail: e
                        });
                        return t.send()
                    },
                    resetPassword: function(e, t, n) {
                        var r = a(!1, "resetPassword", {
                            usernameOrEmail: e,
                            secretResetCode: t,
                            newPassword: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    changePassword: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = a(!1, "changePassword", {
                                oldPassword: e,
                                newPassword: t
                            }, i, !0, !1);
                        o.send([n, r])
                    },
                    registerUser: function(e, t, n, r, i, o, u, f, l, c, h, p) {
                        var d = s(arguments, p),
                            v = a(!1, "registerUser", {
                                username: e,
                                password: t,
                                firstName: n,
                                lastName: r,
                                emailAddress: i,
                                sex: o,
                                birthDate: u,
                                flags: f,
                                inviteID: l,
                                savePassword: c
                            }, d, !0, !1);
                        v.send([h, p])
                    },
                    userDisableAccount: function(e, t, n, r) {
                        var i = a(!1, "userDisableAccount", {
                            password: e,
                            reason: t,
                            details: n,
                            contact: r
                        }, {}, !0, !0);
                        return i.send()
                    },
                    getIsUsernameEmailAvailable: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = a(!1, "getIsUsernameEmailAvailable", {
                                username: e,
                                emailAddress: t
                            }, i);
                        o.send([n, r])
                    },
                    getUserByInviteID: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!0, "getUserByInviteID", {
                                inviteID: e
                            }, r, !0, !1);
                        i.send([t, n])
                    },
                    sendInvites: function(e) {
                        var t = a(!1, "sendInvites", {
                            emailAddresses: e
                        });
                        return t.send()
                    },
                    getUserSettings: function(e, t) {
                        var n = s(arguments, t),
                            r = a(!1, "getUserSettings", {}, n);
                        r.send([e, t])
                    },
                    getUserTopArtists: function(e) {
                        var t = a(!0, "getUserTopArtists", {
                            userID: e
                        });
                        return t.send()
                    },
                    changeUserInfoEx: function(e, t, n, r, i, o) {
                        var u = s(arguments, o),
                            f = a(!1, "changeUserInfoEx", {
                                shitToChange: e,
                                password: t,
                                thirdPartyLogin: n,
                                oldShit: r
                            }, u, !0, !1);
                        f.send([i, o])
                    },
                    changeNotificationSettings: function(e, t, n) {
                        var r = a(!1, "changeNotificationSettings", {
                            newValue: e
                        });
                        return r.send()
                    },
                    changePrivacySettings: function(e) {
                        var t = a(!1, "changePrivacySettings", {
                            newValue: e
                        });
                        return t.send()
                    },
                    changeFeedSettings: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!1, "changeFeedSettings", {
                                newValue: e
                            }, r);
                        i.send([t, n])
                    },
                    getSubscriptionDetails: function() {
                        var e = a(!1, "getSubscriptionDetails", {}, null, !0, !1);
                        return e.send()
                    },
                    userGetSongsInLibrary: function(e, t, n) {
                        t = _.orEqual(t, 0), n = _.orEqual(n, !0);
                        var r = a(n, "userGetSongsInLibrary", {
                            userID: e,
                            page: t
                        });
                        return r.send()
                    },
                    userGetLibraryTSModified: function(e) {
                        var t = a(!1, "userGetLibraryTSModified", {
                            userID: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    userAddSongsToLibrary: function(e) {
                        var t = a(!1, "userAddSongsToLibrary", {
                            songs: e
                        });
                        return t.queue("library")
                    },
                    userRemoveSongsFromLibrary: function(e, t, n, r) {
                        var i = a(!1, "userRemoveSongsFromLibrary", {
                            userID: e,
                            songIDs: t,
                            albumIDs: n,
                            artistIDs: r
                        });
                        return i.queue("library")
                    },
                    getFavorites: function(e, t, n) {
                        t = _.orEqual(t, "Songs"), n = _.orEqual(n, !0);
                        var r = {};
                        t == "Songs" && (r.canPreload = !0);
                        var i = a(n, "getFavorites", {
                            userID: e,
                            ofWhat: t
                        }, r);
                        return i.send()
                    },
                    getSubscribedPlaylistsBroadcasts: function() {
                        var e = a(!0, "getSubscribedPlaylistsBroadcasts", {});
                        return e.send()
                    },
                    favorite: function(e, t, n, r, i) {
                        var s = a(!1, "favorite", {
                            what: e,
                            ID: t,
                            details: n
                        });
                        return s.queue("library")
                    },
                    unfavorite: function(e, t) {
                        var n = a(!1, "unfavorite", {
                            what: e,
                            ID: t
                        });
                        return n.queue("library")
                    },
                    favoriteBroadcast: function(e, t, n, r) {
                        var i = a(!1, "favoriteBroadcast", {
                            broadcastID: e,
                            broadcastName: t,
                            ownerUserID: n,
                            ownerArtistID: r
                        });
                        return i.send()
                    },
                    unfavoriteBroadcast: function(e) {
                        var t = a(!1, "unfavoriteBroadcast", {
                            broadcastID: e
                        });
                        return t.send()
                    },
                    getFavoriteBroadcasts: function(e) {
                        var t = a(!0, "getFavoriteBroadcasts", {
                            userID: e
                        });
                        return t.send()
                    },
                    userGetPlaylists: function(e, t, n) {
                        var r = {
                            userID: e
                        };
                        t && (r.limit = t);
                        var i = a(n, "userGetPlaylists", r, {
                            canPreload: !0
                        });
                        return i.send()
                    },
                    createPlaylist: function(e, t, n) {
                        var r = a(!1, "createPlaylist", {
                            playlistName: e,
                            songIDs: t,
                            playlistAbout: n
                        });
                        return r.send()
                    },
                    deletePlaylist: function(e, t) {
                        var n = a(!1, "deletePlaylist", {
                            playlistID: e,
                            name: t
                        });
                        return n.queue("playlist")
                    },
                    playlistUndelete: function(e) {
                        var t = a(!1, "playlistUndelete", {
                            playlistID: e
                        });
                        return t.queue("playlist")
                    },
                    overwritePlaylist: function(e, t, n, r) {
                        var i = a(!1, "overwritePlaylist", {
                            playlistID: e,
                            playlistName: t,
                            songIDs: n,
                            songs: r
                        });
                        return i.queue("playlist")
                    },
                    playlistAddSongToExisting: function(e, t, n) {
                        var r = a(!1, "playlistAddSongToExisting", {
                            playlistID: e,
                            songID: t,
                            song: n
                        });
                        return r.queue("playlist")
                    },
                    renamePlaylist: function(e, t, n) {
                        var r = a(!1, "renamePlaylist", {
                            playlistID: e,
                            playlistName: t,
                            broadcast: n
                        });
                        return r.queue("playlist")
                    },
                    setPlaylistAbout: function(e, t, n) {
                        var r = a(!1, "setPlaylistAbout", {
                            playlistID: e,
                            about: t,
                            broadcast: n
                        });
                        return r.queue("playlist")
                    },
                    playlistSetCollaboration: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = a(!1, "playlistSetCollaboration", {
                                playlistID: e,
                                enabled: t
                            }, i);
                        o.promise().then(n, r), o.queue("playlist")
                    },
                    playlistSetUserPermissions: function(e, t, n, r, i) {
                        var o = s(arguments, i),
                            u = a(!1, "playlistSetUserPermissions", {
                                playlistID: e,
                                userID: t,
                                permissions: n
                            }, o);
                        u.promise().then(r, i), u.queue("playlist")
                    },
                    tagRadioGetAllSongs: function(e) {
                        var t = a(!1, "tagRadioGetAllSongs", {
                            tagID: e
                        });
                        return t.send()
                    },
                    getResultsFromSearch: function(e, n, r) {
                        var i = a(!0, "getResultsFromSearch", {
                            query: e,
                            type: n,
                            guts: t.guts ? t.getGuts().shouldLog : 0,
                            ppOverride: r
                        });
                        return n === "Artists" ? i.successFilters.push(function(e) {
                            return $.isArray(e.result) && (e.result = D(e.result)), e
                        }) : $.isArray(n) && i.successFilters.push(function(e) {
                            return e.result.Artists && $.isArray(e.result.Artists) && (e.result.Artists = D(e.result.Artists)), e
                        }), i.send()
                    },
                    getAutocomplete: function(e, t) {
                        var n = a(!0, "getAutocomplete", {
                            query: e,
                            type: t
                        });
                        return t === "artist" && n.successFilters.push(function(e) {
                            return $.isArray(e) && (e = D(e)), e
                        }), n.send()
                    },
                    getGoogleSuggest: function(t) {
                        t = $.trim(t);
                        var n = new $.Deferred,
                            r = "http://google.com/complete/search?output=json&q=" + t + " lyrics&client=serp";
                        return e.google || (e.google = {}), e.google.ac || (e.google.ac = {}), e.google.ac.h = function(e) {
                            var r = !1;
                            if (e[1].length > 0) {
                                e = e[1], r = e[0][0], r = r.replace(/<[^>]+>/ig, ""), r = r.substring(0, r.lastIndexOf("lyrics")), r = $.trim(r);
                                var i = document.createElement("div");
                                i.innerHTML = r, r = i.innerText || i.text || i.textContent
                            }
                            r && r.toLowerCase() !== t.toLowerCase() ? n.resolve(r) : n.reject()
                        }, $.ajax({
                            url: r,
                            dataType: "jsonp",
                            jsonp: !1,
                            jsonpCallback: "window.google.ac.h",
                            success: function(e, t, n) {},
                            error: function(e, t, r) {
                                _.delay(function() {
                                    n.state() == "pending" && n.reject()
                                }, 100)
                            }
                        }), n.promise()
                    },
                    getProfileFeedForItem: function(e, t, n) {
                        var r = a(1e4, "getProfileFeedForItem", {
                            itemID: e,
                            item: t,
                            lastTS: n
                        }, {
                            canPreload: !0
                        });
                        return r.send()
                    },
                    getUserCombinedFeedEx: function(e, t, n) {
                        var r = a(1e4, "getUserCombinedFeedEx", {
                            userID: e,
                            excludeUsers: t,
                            lastTS: n
                        }, {
                            canPreload: !0
                        });
                        return r.send()
                    },
                    getFeedEventByID: function(e) {
                        var t = a(3e4, "getFeedEventByID", {
                            eventID: e
                        });
                        return t.send()
                    },
                    getArtistFeedEventByID: function(e) {
                        var t = a(3e4, "getArtistFeedEventByID", {
                            eventID: e
                        });
                        return t.send()
                    },
                    getInterestingEvents: function(e) {
                        var t = a(3e4, "getInterestingEvents", {
                            limit: e
                        }, {
                            canPreload: !0
                        });
                        return t.send()
                    },
                    hideUserEvent: function(e, t) {
                        var n = a(!0, "hideUserEvent", {
                            eventID: e,
                            removeEvent: t
                        });
                        return n.send()
                    },
                    hideArtistEvent: function(e, t) {
                        var n = a(!0, "hideArtistEvent", {
                            eventID: t,
                            artistID: e
                        });
                        return n.send()
                    },
                    changeFollowFlags: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!1, "changeFollowFlags", {
                                userIDsFlags: e
                            }, r);
                        i.send([t, n])
                    },
                    sendFeedBroadcast: function(e, t, n, r, i) {
                        var s = a(!1, "sendFeedBroadcast", {
                            what: e,
                            ID: t,
                            people: n,
                            message: r,
                            messageParts: i
                        });
                        return s.send()
                    },
                    addEventComment: function(e, t, n) {
                        var r = a(!1, "addEventComment", {
                            eventID: e,
                            comment: t,
                            eventOwnerName: n
                        });
                        return r.send()
                    },
                    hideEventComment: function(e, t) {
                        var n = a(!1, "hideEventComment", {
                            eventID: e,
                            commentID: t
                        });
                        return n.send()
                    },
                    addArtistFeedComment: function(e, t, n, r) {
                        var i = a(!1, "addArtistFeedComment", {
                            eventID: e,
                            comment: t,
                            asArtistID: n,
                            aboutArtistID: r
                        });
                        return i.send()
                    },
                    hideArtistFeedComment: function(e, t) {
                        var n = a(!1, "hideArtistFeedComment", {
                            eventID: e,
                            commentID: t
                        });
                        return n.send()
                    },
                    getUserNotifications: function(e) {
                        var t = a(!1, "getUserNotifications", {
                            limit: e
                        });
                        return t.send()
                    },
                    logTargetedThemeImpression: function(e) {
                        var t = a(!1, "logTargetedThemeImpression", {
                            themeID: e
                        });
                        return t.send()
                    },
                    logThemeOutboundLinkClick: function(e, t) {
                        var n = a(!1, "logThemeOutboundLinkClick", {
                            themeID: e,
                            linkID: t
                        });
                        return n.send()
                    },
                    logThemeCounter: function(e, t) {
                        var n = a(!1, "logThemeCounter", {
                            name: e,
                            amount: t
                        });
                        return n.send()
                    },
                    provideSongFeedbackMessage: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = a(!1, "provideSongFeedbackMessage", {
                                songID: e,
                                message: t
                            }, i);
                        o.send([n, r])
                    },
                    provideSongFeedbackVote: function(e, t, n, r, i) {
                        var o = s(arguments, i),
                            u = a(!1, "provideSongFeedbackVote", {
                                songID: e,
                                vote: t,
                                artistID: n
                            }, o);
                        u.send([r, i])
                    },
                    sendPrivateShare: function(e, t, n, r, i, s) {
                        var o = a(!1, "sendPrivateShare", {
                            item: e,
                            what: t,
                            userIDs: n,
                            emails: r,
                            override: s,
                            message: i
                        });
                        return o.send()
                    },
                    getSongkickEventsFromArtists: function(e, t) {
                        var n = a(!0, "getSongkickEventsFromArtists", {
                            artistIDs: e,
                            names: t
                        });
                        return n.send()
                    },
                    getDetailsForBroadcast: function(e) {
                        var t = a(!0, "getDetailsForBroadcast", {
                            songID: e
                        });
                        return t.send()
                    },
                    broadcastSong: function(e, t, n, r, i, o, u, f, l) {
                        var c = s(arguments, l),
                            h = a(!1, "broadcastSong", {
                                songID: e,
                                message: t,
                                username: n,
                                password: r,
                                saveCredentials: i,
                                service: o,
                                song: u
                            }, c, !0, !1);
                        h.send([f, l])
                    },
                    getUserGoogleData: function(e, t) {
                        var n = s(arguments, t),
                            r = a(!1, "getUserGoogleData", {}, n, !0, !1);
                        r.send([e, t])
                    },
                    getUserGoogleAccessToken: function() {
                        var e = a(!1, "getUserGoogleAccessToken", {}, null, !0, !1);
                        return e.send()
                    },
                    saveUserGoogleData: function(e, t, n) {
                        var r = a(!1, "saveUserGoogleDataEx", {
                            googleUID: e,
                            googleEmailAddress: t,
                            flags: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    updateUserGoogleData: function(e, t, n) {
                        var r = a(!1, "updateUserGoogleDataEx", {
                            googleUID: e,
                            googleEmailAddress: t,
                            flags: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    removeUserGoogleData: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = a(!1, "removeUserGoogleData", {
                                googleUID: e,
                                googleEmailAddress: t
                            }, i);
                        o.send([n, r])
                    },
                    getUserTwitterData: function(e, t) {
                        var n = s(arguments, t),
                            r = u.createRequest(!1, "getUserTwitterData", {}, n, !0, !1);
                        r.send([e, t])
                    },
                    saveUserTwitterData: function(e, t, n, r, i) {
                        var s = u.createRequest(!1, "saveUserTwitterData", {
                            twitterUserID: e,
                            oauthToken: t,
                            oauthSecret: n
                        }, null, !0, !1);
                        return s.send()
                    },
                    updateUserTwitterData: function(e, t, n) {
                        var r = u.createRequest(!1, "updateUserTwitterData", {
                            twitterUserID: e,
                            oauthToken: t,
                            oauthSecret: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    removeUserTwitterData: function(e, t, n) {
                        var r = arguments[arguments.length - 1] === n ? {} : arguments[arguments.length - 1],
                            i = u.createRequest(!1, "removeUserTwitterData", {
                                twitterUserID: e
                            }, r);
                        i.send([t, n])
                    },
                    postTwitterStatus: function(e, t, n, r, i) {
                        var s = arguments[arguments.length - 1] === i ? {} : arguments[arguments.length - 1],
                            o = u.createRequest(!1, "postTwitterStatus", {
                                message: e,
                                oauthToken: t,
                                oauthSecret: n
                            }, s);
                        o.send([r, i])
                    },
                    getTwitterFriends: function(e, t, n, r, i) {
                        var s = arguments[arguments.length - 1] === i ? {} : arguments[arguments.length - 1],
                            o = u.createRequest(!1, "getTwitterFriends", {
                                twitterUserID: e,
                                oauthToken: t,
                                oauthSecret: n
                            }, s);
                        o.send([r, i])
                    },
                    getTwitterFollowers: function(e, t, n, r, i) {
                        var s = arguments[arguments.length - 1] === i ? {} : arguments[arguments.length - 1],
                            o = u.createRequest(!1, "getTwitterFollowers", {
                                twitterUserID: e,
                                oauthToken: t,
                                oauthSecret: n
                            }, s);
                        o.send([r, i])
                    },
                    getUsernameSuggestions: function(e, t, n) {
                        var r = a(!0, "getUsernameSuggestions", {
                            baseUsername: e,
                            fullName: t,
                            idOrRand: n
                        }, null);
                        return r.send()
                    },
                    getGroovesharkUsersFromTwitterUserIDs: function(e, t, n) {
                        var r = arguments[arguments.length - 1] === n ? {} : arguments[arguments.length - 1],
                            i = u.createRequest(!1, "getGroovesharkUsersFromTwitterUserIDs", {
                                twitterUserIDs: e
                            }, r);
                        i.send([t, n])
                    },
                    registerGoogleUser: function(e, t, n, r, i, o, u, f, l, c, h, p, d) {
                        var v = s(arguments, d),
                            m = a(!1, "registerGoogleUserEx", {
                                googleUID: f,
                                googleEmailAddress: l,
                                accessToken: c,
                                googleFlags: h,
                                username: e,
                                firstName: t,
                                emailAddress: n,
                                sex: r,
                                birthDate: i,
                                flags: o,
                                inviteID: u
                            }, v, !0, !1);
                        m.send([p, d])
                    },
                    registerTwitterUser: function(e, t, n, r, i, s, o, a, f, l, c, h) {
                        var p = arguments[arguments.length - 1] === h ? {} : arguments[arguments.length - 1],
                            d = u.createRequest(!1, "registerTwitterUser", {
                                username: e,
                                firstName: t,
                                emailAddress: n,
                                sex: r,
                                birthDate: i,
                                flags: s,
                                inviteID: o,
                                twitterUserID: a,
                                oauthToken: f,
                                oauthSecret: l
                            }, p, !0, !1);
                        d.send([c, h])
                    },
                    updateLastfmService: function(e, t, n, r, i, o, u) {
                        var f = s(arguments, u),
                            l = a(!1, "updateLastfmService", {
                                session: e,
                                token: t,
                                username: n,
                                flagsAdd: r,
                                flagsRemove: i
                            }, f);
                        l.send([o, u])
                    },
                    saveLastfmService: function(e, t, n, r, i, o) {
                        var u = s(arguments, o),
                            f = a(!1, "saveLastfmService", {
                                session: e,
                                token: t,
                                username: n,
                                flags: r
                            }, u);
                        f.send([i, o])
                    },
                    getLastfmService: function(e, t) {
                        var n = s(arguments, t),
                            r = a(!1, "getLastfmService", {}, n);
                        r.send([e, t])
                    },
                    removeLastfmService: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!1, "removeLastfmService", {
                                lastfmUsername: e
                            }, r);
                        i.send([t, n])
                    },
                    saveUserFlattrData: function(e, t, n) {
                        var r = u.createRequest(!1, "saveUserFlattrData", {
                            flattrUsername: t,
                            accessToken: e,
                            flags: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    updateUserFlattrData: function(e, t, n) {
                        var r = u.createRequest(!1, "updateUserFlattrData", {
                            flattrUsername: t,
                            accessToken: e,
                            flags: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    removeUserFlattrData: function() {
                        var e = u.createRequest(!1, "removeUserFlattrData", {});
                        return e.send()
                    },
                    userGetExtraData: function(e, t) {
                        var n = s(arguments, t),
                            r = a(!1, "userGetExtraData", {}, n, !0, !1);
                        r.send([e, t])
                    },
                    getAffiliateDownloadURLs: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = a(!1, "getAffiliateDownloadURLs", {
                                songName: e,
                                artistName: t
                            }, i);
                        o.send([n, r])
                    },
                    userGetRecommendedUsers: function() {
                        var e = u.createRequest(!0, "userGetRecommendedUsers", {});
                        return e.send()
                    },
                    userHideRecommendedUser: function(e) {
                        var t = u.createRequest(!0, "userHideRecommendedUser", {
                            recommendedUserID: e
                        });
                        return t.send()
                    },
                    provideVIPFeedback: function(e, t, n) {
                        var r = a(!1, "provideVIPFeedback", {
                            fromAddress: e,
                            message: t,
                            type: n
                        });
                        return r.send()
                    },
                    artistGetSimilarArtists: function(e) {
                        var t = a(!0, "artistGetSimilarArtists", {
                            artistID: e
                        });
                        return t.send()
                    },
                    getThemeFromDFP: function(e, t) {
                        var n = a(!1, "getThemeFromDFP", {
                            unitString: e,
                            paramString: t
                        }, {}, !1, !0);
                        return n.type = "dfp", n.send()
                    },
                    getNotificationFromDFP: function(e, t, n) {
                        var r = s(arguments, n),
                            i = a(!1, "getNotificationFromDFP", {
                                paramString: e
                            }, r, !1, !0);
                        i.type = "dfp", i.send([t, n])
                    },
                    getItemByPageName: function(e) {
                        var t = a(!0, "getItemByPageName", {
                            name: e
                        });
                        return t.send()
                    },
                    getPageInfoByIDType: function(n, r) {
                        var i = s(arguments, r),
                            o = a(!0, "getPageInfoByIDType", {
                                id: n,
                                type: r
                            }, i);
                        return o.promise().done(function(i) {
                            i.Name && e.GS && t.router && t.router.cachePageName(i.Name, r, n)
                        }), o.send()
                    },
                    getPageInfoByIDsType: function(n, r) {
                        var i = s(arguments, r),
                            o = a(!0, "getPageInfoByIDsType", {
                                ids: n,
                                type: r
                            }, i);
                        return o.promise().done(function(n) {
                            if (!n || !n.length) return;
                            for (var i = 0, s = n.length; i < s; i++) n[i].Name && e.GS && t.router && t.router.cachePageName(n[i].Name, r, n[i].ItemID)
                        }), o.send()
                    },
                    getPageMetaInfoByIDsType: function(n, r) {
                        var i = s(arguments, r),
                            o = a(!0, "getPageMetaInfoByIDsType", {
                                ids: n,
                                type: r
                            }, i);
                        return o.promise().done(function(n) {
                            if (!n || !n.length) return;
                            for (var i = 0, s = n.length; i < s; i++) n[i].Name && e.GS && t.router && t.router.cachePageName(n[i].Name, r, n[i].ItemID)
                        }), o.send()
                    },
                    getTopLevelTags: function() {
                        var e = a(!0, "getTopLevelTags", {}, {});
                        return e.send()
                    },
                    getTagList: function() {
                        var e = a(!0, "getTagList", {}, {});
                        return e.send()
                    },
                    userGetPoints: function() {
                        var e = a(!1, "userGetPoints", {}, {});
                        return e.send()
                    },
                    redeemPointsForAnywhere: function() {
                        var e = a(!1, "redeemPointsForAnywhere", {}, {});
                        return e.send()
                    },
                    sendAdvertisingEmail: function(e) {
                        var t = a(!1, "sendAdvertisingEmail", {
                            contents: e
                        });
                        return t.send()
                    },
                    logPerformanceTracking: function(e) {
                        var t = a(!1, "logPerformanceTracking", {
                            stats: e
                        }, {
                            logStats: !1
                        });
                        return t.send()
                    },
                    getBroadcast: function(e) {
                        var t = a(!1, "getBroadcast", {
                            broadcastID: e
                        });
                        return t.send()
                    },
                    getUserBroadcasts: function(e, t, n) {
                        var r = a(n, "getUserBroadcasts", {
                            userID: e,
                            page: t
                        });
                        return r.send()
                    },
                    getUserLastBroadcast: function() {
                        var e = a(!1, "getUserLastBroadcast", {});
                        return e.send()
                    },
                    getArtistLastBroadcast: function(e) {
                        var t = a(!1, "getArtistLastBroadcast", {
                            artistID: e
                        });
                        return t.send()
                    },
                    broadcastUpdateExtraData: function(e, t, n, r, i, s, o) {
                        var u = a(!1, "broadcastUpdateExtraData", {
                            broadcastID: e,
                            name: t,
                            tag: n,
                            description: r,
                            image: i,
                            privacy: s,
                            asArtistID: o
                        });
                        return u.send()
                    },
                    deleteBroadcast: function(e, t) {
                        var n = a(!1, "deleteBroadcast", {
                            broadcastID: e,
                            asArtistID: t
                        });
                        return n.send()
                    },
                    undeleteBroadcast: function(e, t) {
                        var n = a(!1, "undeleteBroadcast", {
                            broadcastID: e,
                            asArtistID: t
                        });
                        return n.send()
                    },
                    getTopBroadcasts: function(e) {
                        var t = a(30, "getTopBroadcasts", {
                            manateeTags: e
                        });
                        return t.send()
                    },
                    getTopBroadcastsCombined: function() {
                        var e = a(30, "getTopBroadcastsCombined", {});
                        return e.send()
                    },
                    notifyBroadcasterFollowers: function(e, t) {
                        var n = a(!1, "notifyBroadcasterFollowers", {
                            broadcastID: e,
                            context: t
                        });
                        return n.send()
                    },
                    submitPlaylistForCampaign: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = new u("submitPlaylistForCampaign", {
                                playlistID: e,
                                campaignID: t
                            }, i, !1);
                        o.send([n, r])
                    },
                    submitSongVoteForCampaign: function(e, t, n, r) {
                        var i = s(arguments, r),
                            o = new u("submitSongVoteForCampaign", {
                                songID: e,
                                campaignID: t
                            }, i, !1);
                        o.send([n, r])
                    },
                    getPlaylistsForCampaign: function(e, t, n) {
                        var r = s(arguments, n),
                            i = new u("getPlaylistsForCampaign", {
                                campaignID: e
                            }, r, !1);
                        i.send([t, n])
                    },
                    submitUserInfoForCampaign: function(e, t) {
                        var n = a(!1, "submitUserInfoForCampaign", {
                            campaignID: e,
                            campaignData: t
                        });
                        return n.send()
                    },
                    getSubscriptionHistory: function(e, t) {
                        var n = s(arguments, t),
                            r = a(!0, "getSubscriptionHistory", {}, n, !0, !1);
                        r.send([e, t])
                    },
                    suggestFlattr: function(e, t) {
                        var n = a(!1, "suggestFlattr", {
                            urls: e,
                            delay: t
                        }, options, !1, !0);
                        return n.send()
                    },
                    userGetArtistsOwned: function(e, t) {
                        var n = s(arguments, t),
                            r = a(!1, "userGetArtistsOwned", null, n);
                        r.send([e, t])
                    },
                    artistUpdateProfile: function(e, t, n) {
                        var r = a(!1, "artistUpdateProfile", {
                            artistID: e,
                            profile: t,
                            previousProfile: n
                        });
                        return r.send()
                    },
                    artistUpdatePageName: function(e, t) {
                        var n = a(!1, "artistUpdatePageName", {
                            artistID: e,
                            newPageName: t
                        });
                        return n.send()
                    },
                    artistRequestPageNameTakeover: function(e, t) {
                        var n = a(!1, "artistRequestPageNameTakeover", {
                            artistID: e,
                            newPageName: t
                        });
                        return n.send()
                    },
                    artistEditAlbum: function(e, t) {
                        var n = a(!1, "artistEditAlbum", {
                            album: e,
                            previousAlbum: t
                        });
                        return n.send()
                    },
                    artistEditSongs: function(e, t) {
                        var n = a(!1, "artistEditSongs", {
                            songs: e,
                            previousSongs: t
                        });
                        return n.send()
                    },
                    artistDisownSongs: function(e, t, n) {
                        var r = a(!1, "artistDisownSongs", {
                            songIDs: e,
                            albumIDs: t,
                            artistID: n
                        });
                        return r.send()
                    },
                    artistDeleteSongs: function(e, t, n) {
                        var r = a(!1, "artistDeleteSongs", {
                            songIDs: e,
                            artistID: n,
                            albumIDs: t
                        });
                        return r.send()
                    },
                    artistCreateAlbum: function(e) {
                        var t = a(!1, "artistCreateAlbum", {
                            album: e
                        });
                        return t.send()
                    },
                    sendArtistFansUpdate: function(e, n, r, i) {
                        var s = a(!1, "sendArtistFansUpdate", {
                            artistID: e,
                            message: n,
                            item: r,
                            type: i
                        }),
                            o = {};
                        return o.artistID = e, i && i.length && (o.itemType = i), n && n.length && (o.messageLength = n.length), i === "artist" ? o.itemID = r.artistID : i === "album" ? o.itemID = r.albumID : i === "playlist" ? o.itemID = r.playlistID : i === "song" && (o.itemID = r.songID), t.trigger("guts:log", "sendArtistFansUpdate", o), t.trigger("guts:gatrack", "site", "sendArtistFansUpdate", i + "_" + e), s.send()
                    },
                    getArtistsDailyArtistStats: function(e, t) {
                        var n = a(3600, "getArtistsDailyArtistStats", {
                            artistIDs: e,
                            dayCount: t
                        });
                        return n.send()
                    },
                    getArtistDailySongsStats: function(e, t) {
                        var n = a(3600, "getArtistDailySongsStats", {
                            artistID: e,
                            dayCount: t
                        });
                        return n.send()
                    },
                    getArtistWeeklyTopStats: function(e) {
                        var t = a(3600, "getArtistWeeklyTopStats", {
                            artistID: e
                        });
                        return t.send()
                    },
                    claimArtist: function(e, t, n, r, i, s, o, u, f, l, c) {
                        var h = a(!1, "claimArtist", {
                            artistID: e,
                            message: t,
                            phoneNumber: n,
                            phoneExt: r,
                            phoneType: i,
                            twitterToken: o,
                            twitterSecret: u,
                            facebookVerificationToken: f,
                            affiliation: s,
                            artistName: l,
                            fullName: c
                        });
                        return h.send()
                    },
                    claimSongs: function(e, t, n, r) {
                        var i = a(!1, "claimSongs", {
                            artistID: e,
                            message: r,
                            songIDs: t,
                            album: n
                        });
                        return i.send()
                    },
                    verifyFacebookURL: function(e, t) {
                        var n = a(!1, "verifyFacebookURL", {
                            facebookUsername: e,
                            gsUsername: t
                        });
                        return n.send()
                    },
                    userVerifyEmail: function(e) {
                        var t = a(!1, "userVerifyEmail", {
                            token: e
                        });
                        return t.send()
                    },
                    resendEmailToken: function() {
                        var e = a(!1, "resendEmailToken", {});
                        return e.send()
                    },
                    userGetFollowersFollowing: function() {
                        var e = a(!1, "userGetFollowersFollowing", {}, {
                            canPreload: !0
                        });
                        return e.send()
                    },
                    getCommentByID: function(e) {
                        var t = a(!1, "getCommentByID", {
                            commentID: e
                        });
                        return t.send()
                    },
                    getCommentsForItem: function(e, t, n) {
                        var r = a(!1, "getCommentsForItem", {
                            itemID: e,
                            typeID: t,
                            page: n
                        });
                        return r.send()
                    },
                    reportComment: function(e) {
                        var t = a(!1, "reportComment", {
                            commentID: e
                        });
                        return t.send()
                    },
                    deleteComment: function(e, t) {
                        var n = a(!1, "deleteComment", {
                            commentID: e,
                            fromArtistID: t
                        });
                        return n.send()
                    },
                    deleteCommentFromMyPage: function(e, t, n) {
                        var r = a(!1, "deleteCommentFromMyPage", {
                            commentID: e,
                            itemID: t,
                            typeID: n
                        });
                        return r.send()
                    },
                    storeCommentForItem: function(e, n, r, i, s) {
                        var o = a(!1, "storeCommentForItemEx", {
                            itemID: e,
                            typeID: n,
                            message: r,
                            item: i,
                            fromArtistID: s
                        });
                        return t.trigger("guts:log", "comment", {
                            itemID: e,
                            typeID: n,
                            fromArtistID: s
                        }), t.trigger("guts:gatrack", "site", "comment", n), o.send()
                    },
                    storeResponseToComment: function(e, n, r, i, s) {
                        var o = a(!1, "storeResponseToCommentEx", {
                            commentID: e,
                            itemID: n,
                            typeID: r,
                            message: i,
                            fromArtistID: s
                        });
                        return t.trigger("guts:log", "respondToComment", {
                            commentID: e,
                            itemID: n,
                            typeID: r,
                            fromArtistID: s
                        }), t.trigger("guts:gatrack", "site", "respondToComment", r), o.send()
                    },
                    reportResponseToComment: function(e, t) {
                        var n = a(!1, "reportResponseToComment", {
                            responseID: t,
                            commentID: e
                        });
                        return n.send()
                    },
                    deleteResponseToComment: function(e, t, n) {
                        var r = a(!1, "deleteResponseToComment", {
                            responseID: t,
                            commentID: e,
                            fromArtistID: n
                        });
                        return r.send()
                    },
                    deleteResponseToCommentFromMyPage: function(e, t, n, r) {
                        var i = a(!1, "deleteResponseToCommentFromMyPage", {
                            responseID: t,
                            commentID: e,
                            itemID: n,
                            typeID: r
                        });
                        return i.send()
                    },
                    updateNotificationReadTime: function() {
                        var e = a(!1, "updateNotificationReadTime", {});
                        return e.send()
                    },
                    getClaimHistory: function() {
                        var e = a(!1, "getClaimHistory", {});
                        return e.send()
                    },
                    nautilusFetchSubscriptionStatus: function() {
                        var e = a(!1, "nautilusFetchSubscriptionStatus", {}, null, !0, !1);
                        return e.send()
                    },
                    stripeSubscribe: function(e, t, n, r, i, s) {
                        var o = a(!1, "stripeSubscribe", {
                            amount: e,
                            subType: t,
                            card: n,
                            period: r,
                            currency: s,
                            isRecurring: i
                        }, null, !0, !1);
                        return o.send()
                    },
                    stripeUpgradeSubscription: function(e, t, n, r, i) {
                        var s = a(!1, "stripeUpgradeSubscription", {
                            amount: e,
                            subType: t,
                            card: n,
                            period: r,
                            currency: i
                        }, null, !0, !1);
                        return s.send()
                    },
                    paypalInitPayment: function(e, t, n, r, i) {
                        var s = a(!1, "paypalInitPayment", {
                            amount: e,
                            tax: t,
                            subType: n,
                            description: r,
                            responseProtocol: i
                        }, null, !0, !1);
                        return s.send()
                    },
                    paypalSubscribe: function(e, t, n, r, i, s, o, u) {
                        var f = a(!1, "paypalSubscribe", {
                            token: e,
                            payerID: t,
                            amount: n,
                            tax: r,
                            subType: i,
                            period: s,
                            interval: s,
                            isRecurring: o,
                            description: u,
                            startDate: Math.floor($.now() / 1e3)
                        }, null, !0, !1);
                        return f.send()
                    },
                    nautilusCancelCurrentSubscription: function() {
                        var e = a(!1, "nautilusCancelCurrentSubscription", {}, null, !0, !1);
                        return e.send()
                    },
                    reportBadAd: function(e, t, n, r, i) {
                        var s = a(!1, "reportBadAd", {
                            placement: e,
                            desc: t,
                            info: n,
                            type: r,
                            itemID: i
                        });
                        return s.send()
                    },
                    getUserSpecialPricing: function() {
                        var e = a(!1, "getUserSpecialPricing", {});
                        return e.send()
                    },
                    getUserSpecialPricingEx: function() {
                        var e = a(!1, "getUserSpecialPricingEx", {}, null, !0, !1);
                        return e.send()
                    },
                    verifyPromoCode: function(e) {
                        var t = a(!1, "verifyPromoCode", {
                            code: e
                        });
                        return t.send()
                    },
                    promoSubscribe: function(e) {
                        var t = a(!1, "promoSubscribe", {
                            promoCode: e
                        }, null, !0, !1);
                        return t.send()
                    },
                    purchasePromoCode: function(e, t, n) {
                        var r = a(!1, "purchasePromoCode", {
                            numMonths: e,
                            amount: t,
                            cardInfo: n
                        }, null, !0, !1);
                        return r.send()
                    },
                    stripeFetchUserInfo: function() {
                        var e = a(!1, "stripeFetchUserInfo", {}, null, !0, !1);
                        return e.send()
                    },
                    emailPromoCode: function(e, t) {
                        var n = a(!1, "emailPromoCode", {
                            code: t,
                            email: e
                        });
                        return n.send()
                    },
                    userSawPendingNotification: function(e) {
                        var t = a(!1, "userSawPendingNotification", {
                            notificationName: e
                        });
                        return t.send()
                    },
                    storeChatIdentity: function(e) {
                        var t = a(!1, "storeChatIdentity", {
                            channelToNotify: e
                        });
                        return t.send()
                    },
                    getCallout: function(e) {
                        var t = a(!1, "getCallout", {
                            calloutID: e
                        });
                        return t.send()
                    },
                    getUserCallouts: function(e) {
                        var t = a(!1, "getUserCallouts", {
                            userID: e
                        });
                        return t.send()
                    },
                    updateCalloutDetails: function(e, t) {
                        var n = a(!1, "updateCalloutDetails", {
                            calloutID: e,
                            name: t
                        });
                        return n.send()
                    },
                    banBroadcastListenerByUserID: function(e, t, n) {
                        var r = a(!1, "banBroadcastListenerByUserID", {
                            userID: e,
                            broadcastID: t,
                            existingBannedUserIDs: n
                        });
                        return r.send()
                    },
                    sendRealtimeBroadcastInvite: function(e, t) {
                        var n = a(!1, "sendRealtimeBroadcastInvite", {
                            recipientUserID: e,
                            broadcastID: t
                        });
                        return n.send()
                    },
                    getPastBroadcastInvites: function() {
                        var e = a(!1, "getPastBroadcastInvites");
                        return e.send()
                    }
                }
            }(), function() {
                function d() {
                    var e = u.get("user"),
                        t = a && a.id != e.id,
                        n = o.get("currentQueue"),
                        r = n ? n.get("currentBroadcast") : null;
                    a && (a.off("change:favoriteUsers", m), a.off("change:settings", g), a.off("change:sessionPrivacy", y), t && (v(), r && r.listenerLeft(a))), a = e, a.on("change:favoriteUsers", m), a.on("change:settings", g), a.on("change:sessionPrivacy", y), m(), g(), b(), y(a, a.get("sessionPrivacy"), {
                        dontReport: !0
                    }), r && t && a.get("isLoggedIn") && r.newListener(a)
                }
                function v() {
                    T.state() !== "pending" && (T = $.Deferred(), C.chatReady = T.promise())
                }
                function m() {
                    if (x.state() !== "resolved") return;
                    var e = a.get("favoriteUsers");
                    e && a.get("isLoggedIn") && (a.get("sessionPrivacy") & 8) > 0 && typeof C.setListeningReadableUsers == "function" && C.setListeningReadableUsers(e.pluck("UserID"), !1)
                }
                function g() {
                    if (x.state() !== "resolved") return;
                    var e = a.get("settings").local;
                    e.crossfadeEnabled != C.getCrossfadeEnabled() && C.setCrossfadeEnabled(e.crossfadeEnabled), e.crossfadeAmount != C.getCrossfadeAmount() && C.setCrossfadeAmount(e.crossfadeAmount), e.lowerQuality != C.getLowerQuality() && C.setLowerQuality(e.lowerQuality), !e.noPrefetch != C.getPrefetchEnabled() && C.setPrefetchEnabled(!e.noPrefetch), e.playPauseFade != C.getPlayPauseFade() && C.setPlayPauseFade(e.playPauseFade), C.setPersistShuffle(e.persistShuffle), e.persistShuffle && e.lastShuffle != C.getShuffle() && C.setShuffle(e.lastShuffle), C.setPlayerKeyShortcuts(!e.disablePlayerShortcuts)
                }
                function y(e, t, n) {
                    (!n || !n.dontReport) && r.Services.API.reportUserChange(e);
                    var i = o.get("currentQueue"),
                        s = i ? i.get("currentBroadcast") : null;
                    if (!s) return;
                    (t & 4) > 0 ? (s.removePersistentChatActivity("info", r.Models.ChatActivity.VISIBILITY_FRIENDS_WARNING), s.addPersistentChatActivity(new r.Models.ChatActivity({
                        type: "info",
                        infoType: r.Models.ChatActivity.OFFLINE_CANT_CHAT,
                        closeable: !0
                    }))) : (t & 8) > 0 ? (s.removePersistentChatActivity("info", r.Models.ChatActivity.OFFLINE_CANT_CHAT), s.addPersistentChatActivity(new r.Models.ChatActivity({
                        type: "info",
                        infoType: r.Models.ChatActivity.VISIBILITY_FRIENDS_WARNING,
                        closeable: !0
                    }))) : (s.removePersistentChatActivity("info", r.Models.ChatActivity.VISIBILITY_FRIENDS_WARNING), s.removePersistentChatActivity("info", r.Models.ChatActivity.OFFLINE_CANT_CHAT))
                }
                function b() {
                    o.off(null, w), a.get("subscription").canListenUninterrupted() || (f = Date.now(), o.on("change:playStatus", w))
                }
                function w() {
                    var e = Date.now();
                    o.get("playStatus") == 3 && e - f > l && !o.get("currentQueue").get("currentBroadcast") && !a.get("subscription").canListenUninterrupted() && (C.setPauseNextSong(!0), r.trigger("lightbox:open", "interactionTimeout", {
                        _canClose: !1
                    }))
                }
                function E() {
                    x.state() == "pending" && r.trigger("lightbox:open", "swfTimeout", {
                        _canClose: !1
                    })
                }
                function S() {
                    _.each(h, function(e) {
                        r.trigger("notification:close", e)
                    }), c = null
                }
                var r = e.GS = e.GS || {};
                r.Services = r.Services || {};
                var i = !1,
                    s = {
                        bytesLoaded: 0,
                        bytesTotal: 0,
                        duration: 0,
                        position: 0,
                        playStatus: 0,
                        currentStreamServer: ""
                    },
                    o, u, a, f, l = 36e5,
                    c = null,
                    h = [],
                    p = {},
                    x = $.Deferred(),
                    T = $.Deferred(),
                    N = 0,
                    C = r.Services.SWF = {
                        ready: x.promise(),
                        chatReady: T.promise(),
                        playSpecialIndexes: {
                            DEFAULT: -1,
                            NEXT: -2,
                            LAST: -3,
                            REPLACE: -4
                        },
                        chatDisconnected: !1,
                        chatReconnecting: !1,
                        queueSongCount: 0,
                        largeBroadcastThreshold: 49,
                        broadcastNextPreventPosition: 3e4,
                        init: function(e) {
                            u = e, o = u.get("player"), i = !0, this.muteLocks = {}, this.preLockMuteValue = !1, this.preLockVolume = 100, u.on("change:user", d), d(), r.ready.done(function() {
                                x.state() == "pending" && setTimeout(E, 1e4)
                            }), x.done(function() {
                                r.on("mousemove", function(e) {
                                    f = Date.now(), C.setLastMouseMove && C.setLastMouseMove(e)
                                })
                            })
                        },
                        flashSafeTrigger: function() {
                            r.dispatcher.trigger.apply(r.dispatcher, _.toArray(arguments))
                        },
                        exists: function() {
                            return i
                        },
                        addSwfMethods: function(e) {
                            return _.extend(this, e), !0
                        },
                        swfReady: function(t) {
                            t || (t = this.getEverything()), r.on("player:volumeChange", this.changeVolume, this);
                            try {
                                o.set({
                                    volume: t.volume,
                                    isMuted: t.isMuted,
                                    crossfadeAmount: t.crossfadeAmount,
                                    crossfadeEnabled: t.crossfadeEnabled,
                                    playPauseFade: t.playPauseFade,
                                    currentQueue: t.currentQueue ? new r.Models.Queue(t.currentQueue) : null,
                                    previousQueue: t.previousQueue
                                })
                            } catch (n) {
                                console.log(n)
                            }
                            this.setErrorCallback("GS.Services.SWF.playerError"), this.setPlaybackStatusCallback("GS.Services.SWF.playerStatus"), this.setPropertyChangeCallback("GS.Services.SWF.propertyChange"), this.setQueueChangeCallback("GS.Services.SWF.queueChange"), this.setSongPropertyChangeCallback("GS.Services.SWF.songChange"), this.setChatServers(gsConfig.chatServersWeighted ? gsConfig.chatServersWeighted : {}, e.clientTimeDivergence || 0);
                            var i = this.setZoomChangeCallback("GS.Services.SWF.onZoomChange");
                            return this.onZoomChange(i), r.on("swf:prefetchStreamKeys", this.prefetchStreamKeys, this), r.on("player:addSongs", this.addSongs, this), r.on("player:removeSongs", this.removeSongsWrapper, this), r.on("player:removeSpecific", this.removeSpecificSong, this), r.on("player:playSong", this.playSongWrapper, this), r.on("player:pauseSong", this.handlePauseSong, this), r.on("player:resumeSong", this.resumeSong, this), r.on("player:togglePlay", this.togglePlay, this), r.on("player:shuffle", this.toggleShuffle, this), r.on("player:repeat", this.toggleRepeat, this), r.on("player:volumeMute", this.toggleVolumeMute, this), r.on("player:nextSong", this.playNextSong, this), r.on("player:seekTo", this.seekTo, this), r.on("player:previousSong", this.playPreviousSong, this), r.on("player:crossfade", this.toggleCrossfade, this), r.on("player:clear", this.handleClearQueue, this), r.on("player:restore", this.restoreQueue, this), r.on("player:radio", this.toggleAutoplay, this), r.on("player:startRadioWithSongs", this.startRadioWithSongs, this), r.on("player:voteSong", this.setAutoplayVote, this), r.on("player:flagSong", this.flagQueueSong, this), r.on("player:startComputeSpectrum", this.startComputingSpectrum, this), r.on("player:stopComputeSpectrum", this.stopComputingSpectrum, this), r.on("manatee:initReconnect", this.initReconnect, this), this.getQueueIsRestorable() && o.set({
                                previousQueue: !0
                            }), u.get("user") && (r.Services.API.reportUserChange(u.get("user")), d()), x.resolve(), this.songToPlayOnReadyToken && r.Models.Song.getByToken(this.songToPlayOnReadyToken).then(_.bind(function(e) {
                                this.addSongs([e], 0, !0)
                            }, this)), t.interruptionExpireTime && $.now() < t.interruptionExpireTime && a.get("subscription").trigger("freeAdExpiresUpdate", t.interruptionExpireTime), !0
                        },
                        setPlayerKeyShortcuts: function(e) {
                            $(document).unbind(".playerShortcut");
                            var t = this;
                            e && $(document).bind("keyup.playerShortcut.playerShortcutPause", "space", function(e) {
                                if ($(e.target).is("button")) {
                                    e.preventDefault();
                                    return
                                }
                            }).bind("keydown.playerShortcut.playerShortcutPause", "space", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var t = n.lightbox;
                                if (t && t.currentLightbox && (!t.currentLightbox._showPlayerControls || t.currentLightbox instanceof r.Views.Lightboxes.Record)) return;
                                var i = o,
                                    s = i.get("currentQueue");
                                return !s.get("currentBroadcast") || s.get("isBroadcasting") ? r.trigger("player:togglePlay") : n.player.onVolumeClick(), r.trigger("guts:gatrack", "player", "playPauseShortcut"), !1
                            }).bind("keydown.playerShortcut.playerShortcutNext", "ctrl+right", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.playNextSong(), r.trigger("guts:gatrack", "player", "nextShortcut"), !1
                            }).bind("keydown.playerShortcut.playerShortcutNext", "meta+right", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.playNextSong(), r.trigger("guts:gatrack", "player", "nextShortcut"), !1
                            }).bind("keydown.playerShortcut.playerShortcutPrevious", "ctrl+left", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.playPreviousSong(), r.trigger("guts:gatrack", "player", "prevShortcut"), !1
                            }).bind("keydown.playerShortcut.playerShortcutPrevious", "meta+left", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.playPreviousSong(), r.trigger("guts:gatrack", "player", "prevShortcut"), !1
                            }).bind("keydown.playerShortcut.playerShortcutVolumeUp", "ctrl+up", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.setVolume(Math.min(100, t.getVolume() + 5)), r.trigger("player:volume:keychange"), r.trigger("guts:gatrack", "player", "volumeUpShortcut", t.getVolume()), !1
                            }).bind("keydown.playerShortcut.playerShortcutVolumeUp", "meta+up", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.setVolume(Math.min(100, t.getVolume() + 5)), r.trigger("player:volume:keychange"), r.trigger("guts:gatrack", "player", "volumeUpShortcut", t.getVolume()), !1
                            }).bind("keydown.playerShortcut.playerShortcutVolumeDown", "ctrl+down", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.setVolume(Math.max(0, t.getVolume() - 5)), r.trigger("player:volume:keychange"), r.trigger("guts:gatrack", "player", "volumeDownShortcut", t.getVolume()), !1
                            }).bind("keydown.playerShortcut.playerShortcutVolumeDown", "meta+down", function(e) {
                                if ($(e.target).is("input,textarea,select,object,embed") && $(e.target).val().length > 0) return;
                                var i = n.lightbox;
                                if (i && i.currentLightbox && !i.currentLightbox._showPlayerControls) return;
                                return t.setVolume(Math.max(0, t.getVolume() - 5)), r.trigger("player:volume:keychange"), r.trigger("guts:gatrack", "player", "volumeDownShortcut", t.getVolume()), !1
                            })
                        },
                        lockMute: function(e) {
                            var t = !_.isEmpty(this.muteLocks);
                            this.muteLocks[e] = !0, t || (this.preLockMuteValue = this.getIsMuted(), this.preLockVolume = this.getVolume()), this.setIsMuted(!0)
                        },
                        unlockMute: function(e) {
                            this.muteLocks.hasOwnProperty(e) && delete this.muteLocks[e], _.isEmpty(this.muteLocks) && (this.setIsMuted(this.preLockMuteValue), this.setVolume(this.preLockVolume))
                        },
                        playerError: function(e) {
                            function t(e) {
                                r.trigger("notification:add", {
                                    description: e
                                })
                            }
                            console.log("player.playererror", e);
                            switch (e.type) {
                            case "errorAddingSongs":
                                console.log("player. failed to add songs: ", e.details.songs, e.details.reason), e.details.reason == "tooManySongs" ? t(_.getString("ERROR_TOO_MANY_SONGS")) : t(_.getString("ERROR_ADDING_SONG") + ": " + e.details.reason);
                                break;
                            case "playbackError":
                                console.log("player. error playing song", e.details.song, e.details.reason, e.details.errorDetail), o.get("currentQueue") && o.get("currentQueue").get("currentBroadcast") && !o.get("currentQueue").get("isBroadcasting") ? t(_.getString("ERROR_PLAYING_INBROADCAST")) : e.details.reason === "unknownHasNext" ? t(_.getString("ERROR_HASNEXT_MESSAGE")) : t(_.getString("ERROR_PLAYING_SONG"));
                                break;
                            case "autoplayFailed":
                                console.log("player. error fetching autoplay song", e.details.reason), e.details.reason === "unknownHasNext" ? t(_.getString("ERROR_HASNEXT_MESSAGE")) : e.details.reason === "noRecommendations" ? r.trigger("lightbox:open", "stations", {
                                    noRecs: !0
                                }) : t(_.getString("ERROR_FETCHING_RADIO"));
                                break;
                            case "autoplayVoteError":
                                console.log("player. error voting song", e.details.song), t(_.getString("ERROR_VOTING_SONG"));
                                break;
                            case "serviceError":
                                console.log("player. service error", e.details), t(_.getString("ERROR_FETCHING_INFO"))
                            }
                            e.details.errorDetail ? r.trigger("guts:gatrack", "playerError", e.type, e.details.reason + ", " + e.details.errorDetail) : r.trigger("guts:gatrack", "playerError", e.type, e.details.reason)
                        },
                        addSongs: function(e, t, n, i, s, u) {
                            if (!e.length) return;
                            var a = [],
                                f = [],
                                l = [];
                            t = _.orEqual(t, this.playSpecialIndexes.DEFAULT), n = _.orEqual(n, !1), i = _.orEqual(i, null), _.isNull(i) && (i = new r.Models.PlayContext), s = _.orEqual(s, !1), e.models && (e = e.models);
                            if (e.length && e[0].attributes) _.each(e, function(e) {
                                var t = e.getDetailsForSwf();
                                a.push(t), t.isCallout ? l.push(e.get("CalloutID")) : f.push(e.get("SongID"))
                            });
                            else if (e.length && _.isNumber(e[0])) for (var c = 0; c < e.length; c++) {
                                var h = r.Models.Song.getCached(e[c]);
                                a.push(h.getDetailsForSwf()), f.push(h.get("SongID"))
                            } else a = e || [];
                            var p = o.get("currentQueue"),
                                d = p.get("currentBroadcast"),
                                v = p.get("isBroadcasting"),
                                m = o.get("playStatus"),
                                g = m !== r.Models.Player.playStatuses.NONE && m !== r.Models.Player.playStatuses.COMPLETED && m !== r.Models.Player.playStatuses.FAILED,
                                y = !1;
                            v && (s = !1);
                            if (!u && d && (n || !d.isLoggedInUserOwner()) && (g || !v)) {
                                r.trigger("lightbox:open", "previewSong", {
                                    index: t,
                                    songs: (new r.Models.Collections.Songs(a)).models,
                                    playContext: i,
                                    playOnAdd: n,
                                    showPlayerControls: !0,
                                    _showPlayerControls: !0
                                });
                                return
                            }
                            if (!u && v && p && p.get("isBroadcasting") && p.get("currentBroadcast").get("listenersCount") > C.largeBroadcastThreshold) {
                                var b = p.get("activeSong") && p.get("songs").lastIndexOf(p.get("activeSong")) || 0;
                                if (t === this.playSpecialIndexes.NEXT || t > 0 && t - b === 1) {
                                    var w = o.get("position"),
                                        E = o.get("duration");
                                    E && E - w < r.Services.SWF.broadcastNextPreventPosition && (r.trigger("notification:add", {
                                        description: _.getString("POPUP_ERROR_BROADCASTER_CHANGE_NEXT")
                                    }), t = b + 2)
                                }
                            }
                            p && p.get("isBroadcasting") && !p.get("activeSong") && (n = !0), t == this.playSpecialIndexes.REPLACE && (this.stopSong(), this.clearQueue(), t = this.playSpecialIndexes.DEFAULT), this.addSongsToQueueAt(a, t, n, i, s, y), n ? o.set({
                                expectManualSongChange: !0
                            }) : y && o.set({
                                expectManualSongChange: !0,
                                playSongOnDownloaded: !0
                            }), r.trigger("guts:log", "songsQueued", {
                                songIDs: f,
                                calloutIDs: l,
                                atIndex: t,
                                playOnAdd: n,
                                autoplayOnAdd: s
                            })
                        },
                        removeSongsWrapper: function(e) {
                            var t = [],
                                n = 0,
                                i = e.length;
                            for (; n < i; n++) t.push(e[n].get("queueSongID"));
                            this.removeSongs(t), r.Services.GUTS && r.trigger("guts:gatrack", "player", "removeSongs")
                        },
                        removeSpecificSong: function(e, t) {
                            o.get("currentQueue") && o.get("currentQueue").get("queueID") == t && this.removeSongs([e])
                        },
                        playSongWrapper: function(e) {
                            var t = o.get("currentQueue"),
                                n = !1;
                            if (_.isUndefined(e)) {
                                n = !0, e = t ? t.get("activeSong") : !1;
                                if (!e) return
                            }
                            var i = typeof e == "number" ? e : e.get("queueSongID");
                            n && o.get("playStatus") === r.Models.Player.playStatuses.PAUSED ? this.resumeSong() : this.playSong(i)
                        },
                        playerStatus: function(e) {
                            var t;
                            e ? t = {
                                bytesLoaded: e.bytesLoaded,
                                bytesTotal: e.bytesTotal,
                                position: e.position,
                                duration: e.duration,
                                playStatus: e.playStatus || e.status,
                                currentStreamServer: e.currentStreamServer
                            } : t = s, o.set(t)
                        },
                        propertyChange: function(e) {
                            o.set(e);
                            if (a) {
                                var t = a.get("settings").local,
                                    n = {};
                                e.hasOwnProperty("crossfadeAmount") && t.crossfadeAmount != e.crossfadeAmount && (n.crossfadeAmount = e.crossfadeAmount), e.hasOwnProperty("crossfadeEnabled") && t.crossfadeEnabled != e.crossfadeEnabled && (n.crossfadeEnabled = e.crossfadeEnabled ? 1 : 0), e.hasOwnProperty("crossfadeInOutEnabled") && t.crossfadeInOutEnabled != e.crossfadeInOutEnabled && (n.crossfadeInOutEnabled = e.crossfadeInOutEnabled ? 1 : 0), a.saveLocalSettings(n)
                            }
                        },
                        queueChange: function(e) {
                            var t = o.get("currentQueue"),
                                n = t.get("activeSong"),
                                i = t.get("nextSong"),
                                s = t.get("previousSong"),
                                u = t.get("queueID"),
                                f = t.get("songs"),
                                l = t.get("cachedSongs"),
                                c = e.details,
                                h = !1,
                                p, d, v, m = e.type == "queueReset" && (!t && e || t && !e || u != c.queueID),
                                g = function(e) {
                                    _.isArray(e) || (e = [e]);
                                    var t = [];
                                    for (var n = 0, i = e.length; n < i; n++) {
                                        var s = e[n].queueSongID,
                                            o = l.get(s);
                                        o || (o = new r.Models.QueueSong(e[n]), l.add(o)), t.push(o)
                                    }
                                    return t
                                },
                                y = function(e) {
                                    var t = g([e]);
                                    return t.length ? t[0] : null
                                };
                            !m && c && !_.isUndefined(c.previousSong) && (p = c.previousSong, !s && p || s && p && s.get("queueSongID") != p.queueSongID ? s = y(p) : p || (s = null), c.previousSong = s), !m && c && !_.isUndefined(c.activeSong) && (d = c.activeSong, !n && d || n && d && n.get("queueSongID") != d.queueSongID ? n = y(d) : d || (n = null), c.activeSong = n, n && o.get("playSongOnDownloaded") && (o.get("playSongOnDownloaded", !1), this.playSong()), a.get("Context").type === "user" && a.set("nowPlayingSong", n)), !m && c && !_.isUndefined(c.nextSong) && (v = c.nextSong, !i && v || i && v && i.get("queueSongID") != v.queueSongID ? i = y(v) : v || (i = null), e.details.nextSong = i), c && !_.isUndefined(c.shuffleEnabled) && a && a.saveLocalSettings({
                                lastShuffle: c.shuffleEnabled ? 1 : 0
                            });
                            if (e.type == "queueReset") {
                                c.lastQueueReset = +(new Date);
                                if (c && c.queueID != u) {
                                    var b = new r.Models.Queue(c),
                                        w = this.getEverything().previousQueue,
                                        E = b.get("songs"),
                                        S = c.activeSong ? c.activeSong instanceof r.Models.QueueSong ? c.activeSong.id : c.activeSong.queueSongID : !1,
                                        x = c.nextSong ? c.nextSong instanceof r.Models.QueueSong ? c.nextSong.id : c.nextSong.queueSongID : !1,
                                        T = c.previousSong ? c.previousSong instanceof r.Models.QueueSong ? c.previousSong.id : c.previousSong.queueSongID : !1;
                                    (S || x || T) && E.each(function(e) {
                                        return S && e.id == S && (e.set("active", !0), b.set("activeSong", e), S = !1), x && e.id == x && (b.set("nextSong", e), x = !1), T && e.id == T && (b.set("previousSong", e), T = !1), S || x || T
                                    }), a.get("Context").type === "user" && (b.get("activeSong") ? a.set("nowPlayingSong", b.get("activeSong")) : a.set("nowPlayingSong", null));
                                    var N = t.get("currentBroadcast");
                                    N && (b.set({
                                        currentBroadcast: N,
                                        isBroadcasting: t.get("isBroadcasting")
                                    }), N.subscribeToChat("queue")), o.set({
                                        currentQueue: b,
                                        previousQueue: w
                                    }), t = b
                                } else c.songs = g(c.songs), c.songs = f.reset(c.songs), t.set(c)
                            } else if (e.type == "contentChange") {
                                var C = e.details.index,
                                    k, L, A, O;
                                h = e.details.items && e.details.items.length > 50;
                                switch (e.details.kind) {
                                case "add":
                                    O = g(e.details.items), f.add(O, {
                                        at: C,
                                        silent: h
                                    });
                                    break;
                                case "remove":
                                    O = g(e.details.items), f.remove(O, {
                                        silent: h
                                    });
                                    break;
                                case "replace":
                                    for (L = 0, A = e.details.items.length; L < A; L++) k = f.at(C + L), f.remove(k), k = y(e.details.items[L]), f.add(k, {
                                        at: C + L,
                                        silent: h
                                    });
                                    break;
                                case "move":
                                    var M = e.details.oldIndex;
                                    k = f.at(M), f.remove(k, {
                                        silent: h
                                    }), k && f.add(k, {
                                        at: C,
                                        silent: h
                                    })
                                }
                            } else if (e.type == "propertyChange") {
                                if (c.songs) {
                                    var D = g(c.songs);
                                    c.songs = f.reset(D)
                                }
                                t.set(c)
                            }
                            h && f.trigger("reset", f, {}), console.log("got a queue event", _.extend({}, e), t)
                        },
                        songChange: function(e) {
                            var t = o.get("currentQueue"),
                                n = t && t.get("songs"),
                                i;
                            if (!t || !n) {
                                console.log("songChange fail", o, e);
                                return
                            }
                            i = n.get(e.queueSongID);
                            if (i) {
                                if (i._wrapped && !_.isUndefined(e.autoplayVote) && t.get("clientRadioEnabled") && i.get("autoplayVote") != e.autoplayVote) {
                                    var s = t.get("clientRadio");
                                    e.autoplayVote == -1 ? s.frowns.add(i._wrapped) : s.frowns.remove(i._wrapped)
                                }
                                i._wrapped && $.isArray(e.Tags) && !i.get("Tags") ? e.Tags = new r.Models.Collections.Tags(e.Tags) : e.Tags && delete e.Tags, i.set(e), i === t.get("activeSong") && r.trigger("player:openFanFeedback")
                            }
                        },
                        startComputingSpectrum: function(e, t) {
                            t = _.orEqual(t, !1), this.computeSpectrumCallback = e, this.setComputeSpectrumCallback("GS.Services.SWF.onSpectrumData", t)
                        },
                        stopComputingSpectrum: function() {
                            this.computeSpectrumCallback = null, this.setComputeSpectrumCallback("")
                        },
                        onSpectrumData: function(e) {
                            _.isFunction(this.computeSpectrumCallback) && this.computeSpectrumCallback(e)
                        },
                        onZoomChange: function(e) {
                            console.log("onZoomChange", e), this.lastZoomLevel = e
                        },
                        attemptAutoRestoreQueue: function() {
                            o.get("previousQueue") && a && a.get("settings") && a.get("settings").local.restoreQueue && this.restoreQueue()
                        },
                        swfBadHost: function() {
                            r.trigger("lightbox:open", {
                                _type: "badHost",
                                _canClose: !1,
                                view: {
                                    header: "LB_BAD_HOST_TITLE",
                                    message: "LB_BAD_HOST_MSG",
                                    buttonsLeft: [{
                                        href: "http://www.grooveshark.com",
                                        labelHTML: "http://www.grooveshark.com"
                                    }]
                                }
                            })
                        },
                        swfNeedsToken: function() {
                            r.trigger("swf:tokenRequired")
                        },
                        onChatReady: function(e) {
                            var t = a.get("UserID"),
                                n = a.get("Context"),
                                i = n.type === "artist" ? n.artist : null;
                            e && (t < 1 || e.userID == t) && (!i || i.get("ArtistID") == e.artistID) ? (T.resolve(e), N = 0, this.chatDisconnected && (this.handleManateeReconnected(), r.trigger("manatee:connected"), this.chatDisconnected = !1, this.chatReconnecting = !1), t > 0 && r.Services.API.storeChatIdentity()) : N++ < 1 ? (r.Services.API.reportUserChange(a), v()) : (r.Services.SWF.onPageUnload(), this.chatDisconnected = !0, this.chatReconnecting = !1, this.onManateeDisconnected(), v())
                        },
                        onChatData: function(e) {
                            var t = e,
                                n;
                            e = e.data;
                            if (t && t.messageType === "flattrData") {
                                r.trigger("manatee:flattrData", t);
                                return
                            }
                            switch (e.command) {
                            case "friendStatusUpdate":
                            case "friendsStatusUpdate":
                                if (e.users) {
                                    var i = (a.get("sessionPrivacy") & 4) === 0,
                                        s = [],
                                        o = [],
                                        u = [],
                                        f, l, c;
                                    _.each(e.users, function(e, t) {
                                        n = r.Models.User.getCached(_.toInt(t));
                                        if (!n) return;
                                        l = {
                                            onlineStatus: _.toInt(e.status)
                                        }, c = e.bcastOwnerInfo && e.bcastOwnerInfo.i && r.Models.User.getCached(_.toInt(e.bcastOwnerInfo.i)), c && (c instanceof r.Models.AuthUser || !c.get("isFavorite")) && (c = null), e.bcast && l.onlineStatus ? $.extend(l, n.storeCurrentBroadcast(_.toInt(e.bcastOwner), e.bcast, e.bcastName, e.bcastPic, e.bcastOwnerInfo, !0, !0)) : $.extend(l, n.storeCurrentBroadcast(0, null, null, null, null, !0, !0)), f = n.attributes.currentBroadcastOwner, f && f != l.currentBroadcastOwner && f.friendsLinked && (f.friendsLinked.remove(n), u.push(f)), l.currentBroadcastOwner && n !== a && !c && l.currentBroadcastOwner instanceof r.Models.User && (l.currentBroadcastOwner.friendsLinked ? l.currentBroadcastOwner.friendsLinked.add(n) : l.currentBroadcastOwner.friendsLinked = new r.Models.Collections.Users([n]), s.push(l.currentBroadcastOwner)), i && (e.status && e.song && e.song.SongID ? l.nowPlayingSong = new r.Models.Song(e.song) : l.nowPlayingSong = null, l.currentBroadcastOwner && l.currentBroadcastOwner.friendsLinked && (!l.currentBroadcastOwner.statusSubLocks || !l.currentBroadcastOwner.statusSubLocks[0]) ? l.currentBroadcastOwner.set({
                                            nowPlayingSong: l.nowPlayingSong
                                        }) : l.currentBroadcastOwner && (l.nowPlayingSong = l.currentBroadcastOwner.get("nowPlayingSong"))), l.onlineStatus || (l.nowPlayingSong = null), n.set(l), n.currentStatusDfd && n.currentStatusDfd.resolve(n)
                                    }), _.each(u, function(e) {
                                        e && e.friendsLinked && !e.friendsLinked.length && (!(e instanceof r.Models.AuthUser), o.push(e))
                                    }), r.trigger("manatee:friendsStatus", e.users), s && s.length && r.trigger("manatee:extraUsersStatus", s), o && o.length && r.trigger("manatee:extraUsersRemoved", o)
                                }
                                break;
                            case "artistsStatusUpdate":
                                if (e.artists) {
                                    var h;
                                    _.each(e.artists, function(e, t) {
                                        h = r.Models.Artist.getCached(_.toInt(t));
                                        if (!h) return;
                                        l = {
                                            onlineStatus: _.toInt(e.status)
                                        }, e.bcast ? $.extend(l, h.storeCurrentBroadcast(_.toInt(e.bcastOwner), e.bcast, e.bcastName, e.bcastPic, e.bcastOwnerInfo, !0, !0)) : $.extend(l, h.storeCurrentBroadcast(0, null, null, null, null, !0)), i && (e.status && e.song && e.song.SongID ? l.nowPlayingSong = new r.Models.Song(e.song) : l.nowPlayingSong = null), h.set(l), h.currentStatusDfd && h.currentStatusDfd.resolve(h)
                                    })
                                }
                                break;
                            case "pageCurrentVisitorCount":
                                r.trigger("manatee:pageCurrentVisitorCount", e.count);
                                break;
                            case "userInfoUpdate":
                                if (e && e.users) {
                                    var p = [];
                                    _.each(e.users, function(e, t) {
                                        if (!e || !e.n || e.r) return;
                                        n = new r.Models.User({
                                            UserID: t,
                                            FName: e.n,
                                            Picture: e.p
                                        }), p.push(n)
                                    }), r.trigger("manatee:getUsersChatInfo", p, e.extraData)
                                }
                                break;
                            case "push":
                                var d;
                                e.publish && e.publish.value && (e.publish.value.messageType ? r.trigger("manatee:" + e.publish.value.messageType, e.publish.value) : (d = e.publish.destination.match(/^bcast:p:([a-f0-9]+)$/)) ? this.handlePublicBroadcastPublish(e, d[1]) : _.toInt(e.publish.destination) == r.getLoggedInUserID() && e.publish.value.callout && this.handleCalloutUpdate(e.publish.value));
                                break;
                            case "broadcastGet":
                                if (e && e.broadcastID) {
                                    var v = this.handleBroadcastGet(e.broadcast, e.broadcastID);
                                    r.trigger("manatee:broadcastInfo", v || null, e.broadcastID)
                                }
                                break;
                            case "fetchBroadcastListenerCount":
                                if (e && e.broadcastID) {
                                    var v = r.Models.Broadcast.getCached(e.broadcastID);
                                    v.updateListenersCount(e.count)
                                }
                                break;
                            case "fetchBroadcastsInfo":
                                if (e && e.broadcasts) {
                                    var m = [],
                                        g = [],
                                        y, b;
                                    _.each(e.broadcasts, _.bind(function(e) {
                                        y = e.BroadcastID, b = this.handleBroadcastGet(e, y), b && g.push(b), m.push(y)
                                    }, this)), e.broadcastIDs && _.each(_.difference(e.broadcastIDs, m), _.bind(function(e) {
                                        b = this.handleBroadcastGet(null, e), b && g.push(b)
                                    }, this)), r.trigger("manatee:broadcastsInfo", g)
                                }
                                break;
                            case "fetchBroadcastsInfoFromMetaSub":
                                e && e.broadcasts && _.each(e.broadcasts, _.bind(function(e) {
                                    this.handleBroadcastGet(e)
                                }, this));
                                break;
                            case "broadcastUsers":
                                e && e.broadcastID && this.handleBroadcastUsers(e, e.broadcastID);
                                break;
                            case "userSelfMessage":
                                C.userSelfMessage(e.message);
                                break;
                            case "fetchSubsByTags":
                                r.trigger("manatee:fetchSubsByTags", e.results);
                                break;
                            case "broadcastPublicUpdate":
                                if (e.update && e.update.broadcastID) {
                                    var w = r.Models.Broadcast.getCached(e.update.broadcastID);
                                    w && e.type == "bannedIDs" && e.update.bannedIDs && w.setBannedUserIDs(e.update.bannedIDs.users)
                                }
                                break;
                            case "globalAlert":
                                this.handleGlobalAlert(e.value)
                            }
                        },
                        handleCalloutUpdate: function(e) {
                            console.log("handleCalloutUpdate", e), e.hasOwnProperty("callout") && (e.error ? r.trigger("callouts:transcodeFailed", e.callout) : r.trigger("callouts:transcodeComplete", e.callout))
                        },
                        handlePublicBroadcastPublish: function(e, t) {
                            console.log("handlePublicBroadcastPublish", e, t);
                            var n = r.Models.Broadcast.getCached(t);
                            if (!n) return;
                            var i = [],
                                s, o, u, a, f;
                            if (e.publish.type === "latestMessages") {
                                var l = n.get("chatActivities");
                                if (l && l.length) return;
                                i = e.publish.value
                            } else i = [e.publish];
                            n.set("chatEnabled", e.publish.chatEnabled);
                            for (a = 0, f = i.length; a < f; a++) {
                                s = i[a];
                                if (s.type !== "data") continue;
                                s.id && s.id.userid && (o = r.Models.User.getCached(s.id.userid)), s.id && s.id.artistid && (u = r.Models.Artist.getCached(s.id.artistid));
                                switch (s.value.type) {
                                case "chat":
                                    o && s.value.data && n.newChatActivity(new r.Models.ChatActivity({
                                        user: !u && o,
                                        artist: u,
                                        message: s.value.data,
                                        type: "message"
                                    }))
                                }
                            }
                        },
                        handleBroadcastGet: function(e, t) {
                            if (!t && (!e || !e.BroadcastID)) return;
                            t = t || e.BroadcastID;
                            var n = r.Models.Broadcast.getCached(t);
                            return e ? (e.activeStatus = e.ownerSubscribed === !1 ? 0 : 1, n ? n.updateFromSwf(e) : (e.lastUpdated = Date.now(), n = new r.Models.Broadcast(e)), r.Models.Broadcast.restoreListenersFromCache(n)) : n ? n.cleanupOnEnd() : r.Models.Broadcast.storeBroadcastNotFound(t), n
                        },
                        handleBroadcastUsers: function(e, t) {
                            var n = [],
                                i = {};
                            _.each(e.users, function(e) {
                                console.log(e);
                                if (!e || !e.userID) return;
                                n.push({
                                    FName: e.n,
                                    Picture: e.p,
                                    UserID: _.toInt(e.userID),
                                    friendsLinked: null
                                }), i[e.userID] = 1;
                                if (e.artistID) {
                                    var t = _.toInt(e.artistID);
                                    n[n.length - 1].contextArtistID = t
                                }
                            });
                            var s = r.Models.Broadcast.getCached(t);
                            if (s) {
                                s.setListeners(n), s.set("listenersCount", e.count);
                                if (p[t]) {
                                    var o = _.last(p[t], 10);
                                    _.each(o, _.bind(this.handleBroadcastChat, this, s)), delete p[t]
                                }
                            } else r.Models.Broadcast.storeListenersInCache(t, n, e.count)
                        },
                        onChatError: function(e) {
                            console.log("Got chat error, data:", e);
                            if (e && e.type) switch (e.type) {
                            case "noServersAvailable":
                            case "identifiesOverThreshold":
                            case "identifyFailed":
                                this.chatDisconnected = !0, this.chatReconnecting = !1, this.onManateeDisconnected(), v();
                                break;
                            case "connectionDrop":
                            case "connectTimeout":
                            case "ioError":
                            case "securityError":
                                this.chatDisconnected = !0, this.chatReconnecting = !0, this.onManateeDisconnected(), v()
                            }
                            if (e && e.error) switch (e.error) {
                            case "over_rate_limit":
                                var t = o.get("currentQueue"),
                                    n = t ? t.get("currentBroadcast") : null;
                                n && !n.get("rateLimited") && (n.set("rateLimited", !0), n.addPersistentChatActivity(new r.Models.ChatActivity({
                                    type: "info",
                                    infoType: r.Models.ChatActivity.RATE_LIMITED
                                })), setTimeout(function() {
                                    n.set("rateLimited", !1), n.removePersistentChatActivity("info", r.Models.ChatActivity.RATE_LIMITED)
                                }, 3e3))
                            }
                            e && e.error && e.source && r.trigger("manatee:" + e.source, {
                                success: !1,
                                error: e.error
                            })
                        },
                        onManateeDisconnected: function() {
                            r.ready.done(function() {
                                var e = o.get("isJoiningBroadcast");
                                if (e) {
                                    var t = r.Models.Broadcast.getCached(e),
                                        n = t ? t.getOwner() : null;
                                    n ? r.router.setHash(n.toUrl("broadcast")) : r.trigger("notification:add", {
                                        description: _.getString("POPUP_ERROR_BROADCAST_JOIN_ERROR"),
                                        type: "error",
                                        duration: 5e3
                                    }), o.set("isJoiningBroadcast", !1)
                                } else o.get("isCreatingBroadcast") && r.router.setHash("broadcasts?down");
                                r.trigger("manatee:disconnected")
                            })
                        },
                        onChatUserChanged: function(e) {
                            r.trigger("manatee:change:user", e)
                        },
                        onBroadcastUpdate: function(e, t, i) {
                            console.log("onBroadcastUpdate", e, t, i && i.data ? i.data : i, i);
                            var s = o.get("currentQueue");
                            if (!s) return;
                            var u = s.get("currentBroadcast");
                            switch (e) {
                            case "broadcastStart":
                                var f = u ? u.get("BroadcastID") : null;
                                if (i && i.BroadcastID) {
                                    var l = i.BroadcastID,
                                        d = r.Models.Broadcast.getCached(l),
                                        v = i.lastPublicMessages;
                                    d ? i.broadcastObject && d.set(i.broadcastObject) : d = new r.Models.Broadcast(i.broadcastObject || i), d.updateFromSwf(i);
                                    var m = t === "isBroadcasting" || t === "broadcastRestore" && s.get("isBroadcasting");
                                    s.set({
                                        isBroadcasting: m,
                                        currentBroadcast: d
                                    }), d.subscribeToChat("queue");
                                    if (m) {
                                        var g = a.get("Context");
                                        g.type == "artist" ? g.artist.storeCurrentBroadcast(1, l, d.get("Name"), d.get("Picture"), d.getOwner(), !1, !0) : a.storeCurrentBroadcast(1, l, d.get("Name"), d.get("Picture"), d.getOwner(), !1, !0), a.clearLastBroadcast(), r.trigger("guts:log", "broadcastStarted", {
                                            broadcastID: l
                                        }), r.trigger("guts:begincontext", {
                                            isBroadcasting: !0,
                                            autoplayID: l
                                        }), s && s.get("clientRadioEnabled") && s.get("clientRadio").disable()
                                    } else a.storeCurrentBroadcast(0, l, d.get("Name"), d.get("Picture"), d.getOwner(), !1, !0), r.trigger("guts:log", "broadcastJoined", {
                                        broadcastID: l
                                    }), r.trigger("guts:startNewAutoplayContext", "broadcast", l);
                                    a.storeBroadcastingLocally(), d.get("chatActivities").length || (d.get("listenersLoaded") ? (v = _.last(v, 10), _.each(v, _.bind(this.handleBroadcastChat, this, d))) : p[l] = v), r.router.setHash(d.toUrl());
                                    if (t === "joinedBroadcast") {
                                        var b = d.get("ownerUserIDs"),
                                            w = r.Models.User.getCached(b[0]),
                                            E = r.Models.Artist.getCached(d.get("ArtistID")),
                                            x = new r.Models.ChatActivity({
                                                artist: E,
                                                user: !E && w,
                                                type: "info",
                                                infoType: r.Models.ChatActivity.WELCOME_MESSAGE
                                            });
                                        d.newChatActivity(x);
                                        var T = d.getOwner();
                                        T && (T.subscribeToStatus("queue"), T.on("change:currentBroadcastID", this.onBroadcastOwnerCurrentIDChanged, this)), y(a, a.get("sessionPrivacy"), {
                                            dontReport: !0
                                        })
                                    }
                                    r.trigger("manatee:startBroadcast", {
                                        success: !0,
                                        details: t
                                    })
                                } else t === "broadcastRestore" && (!i || i.source !== "userChangeReconnect") && r.trigger("notification:add", {
                                    title: "",
                                    description: _.getString("POPUP_ERROR_BROADCAST_RESTORED")
                                });
                                S(), o.set({
                                    isJoiningBroadcast: !1,
                                    isCreatingBroadcast: !1
                                });
                                break;
                            case "broadcastUpdate":
                                this.handleBroadcastUpdateEvents(t, i, s);
                                break;
                            case "broadcastEnded":
                                console.log("Broadcast ended!", i);
                                if (u && (!i.broadcastID || u.get("BroadcastID") === i.broadcastID)) {
                                    var N = u.attributes.suggestions,
                                        k = u.get("Tag"),
                                        L = s.get("isBroadcasting");
                                    (!this.chatDisconnected || i.source !== "error") && s.set({
                                        currentBroadcast: null,
                                        isBroadcasting: !1
                                    });
                                    var A = a.get("Context");
                                    A.type == "artist" ? A.artist.storeCurrentBroadcast(0, null) : a.storeCurrentBroadcast(0, null);
                                    var O = u.getOwner();
                                    O && (O.unsubscribeFromStatus("queue"), O.off("change:currentBroadcastID", this.onBroadcastOwnerCurrentIDChanged, this));
                                    if (L) {
                                        if (i.source === "error" || i.source === "unknown") {
                                            u.cleanupOnEnd(!0), S();
                                            if (this.chatDisconnected) {
                                                r.trigger("notification:add", {
                                                    title: _.getString("POPUP_BROADCAST_ENDED"),
                                                    description: _.getString("POPUP_ERROR_BROADCAST_RETRY"),
                                                    type: "error",
                                                    duration: 0,
                                                    initFunc: function(e) {
                                                        h.push(e)
                                                    }
                                                });
                                                var M;
                                                M = setInterval(_.bind(function() {
                                                    if (!this.chatDisconnected) clearInterval(M);
                                                    else {
                                                        var e = o.get("currentQueue");
                                                        !e || e.get("currentBroadcast") !== u ? clearInterval(M) : (this.chatReconnecting = !0, this.reconnectToChat())
                                                    }
                                                }, this), (4 + Math.random() * 4) * 1e3)
                                            } else r.trigger("notification:add", {
                                                title: _.getString("POPUP_BROADCAST_ENDED"),
                                                description: _.getString("POPUP_ERROR_BROADCAST_UNKNOWN_ENDED"),
                                                type: "error",
                                                duration: 0,
                                                initFunc: function(e) {
                                                    h.push(e)
                                                }
                                            })
                                        } else u.unsubscribeAllFromChat(), u.cleanupOnEnd(), a.storeBroadcastingLocally();
                                        r.trigger("guts:log", "broadcastEnded", {
                                            broadcastID: i.broadcastID
                                        }), r.trigger("guts:endcontext", "isBroadcasting"), r.trigger("guts:endcontext", "autoplayID")
                                    } else if (i.source === "user") u.unsubscribeFromChat("queue"), u.listenerLeft(a), u.cleanupOnEnd(u.get("ownerSubscribed")), r.Services.SWF.clearQueue(), r.trigger("guts:log", "broadcastLeft", {
                                        broadcastID: i.broadcastID
                                    }), r.trigger("guts:clearAllAutoplayContexts");
                                    else if (i.source === "joinedAnother") u.unsubscribeAllFromChat(), u.listenerLeft(a), u.cleanupOnEnd(u.get("ownerSubscribed")), r.trigger("guts:log", "broadcastLeft", {
                                        broadcastID: i.broadcastID
                                    }), r.trigger("guts:clearAllAutoplayContexts");
                                    else if (i.source === "error" || i.source === "unknown") S(), this.chatDisconnected ? r.trigger("notification:add", {
                                        title: _.getString("POPUP_BROADCAST_ENDED"),
                                        description: _.getString("POPUP_ERROR_BROADCAST_SERVER"),
                                        type: "error",
                                        duration: 0,
                                        initFunc: function(e) {
                                            h.push(e)
                                        }
                                    }) : (u.unsubscribeAllFromChat(), u.listenerLeft(a), u.cleanupOnEnd(!0), r.trigger("notification:add", {
                                        title: _.getString("POPUP_BROADCAST_ENDED"),
                                        description: _.getString("POPUP_ERROR_BROADCAST_SERVER"),
                                        type: "error",
                                        duration: 0,
                                        initFunc: function(e) {
                                            h.push(e)
                                        }
                                    }), C.getBroadcastInfo(u.get("BroadcastID")), r.trigger("guts:log", "broadcastLeft", {
                                        broadcastID: i.broadcastID,
                                        reason: i.source
                                    }), r.trigger("guts:clearAllAutoplayContexts"));
                                    else {
                                        u.cleanupOnEnd();
                                        if (i.broadcastID) {
                                            r.trigger("lightbox:open", "broadcastEnded", {
                                                broadcast: u
                                            });
                                            var D = i.extra && i.extra.s ? i.extra.s : [],
                                                P;
                                            D && D.length ? P = new r.Models.Collections.Songs(D) : P = new r.Models.Collections.Songs([]), P = r.Models.Queue.shuffleSongsForRadio(P), N.length && (N = r.Models.Queue.shuffleSongsForRadio(N), P.add(N.models));
                                            if (P.length) {
                                                var H = s.get("clientRadio"),
                                                    B = !1;
                                                console.log("songs for client radio", P), H.extraStreamFlags = r.Models.PlayContext.TYPE_BROADCAST, H.reset(P.models).enable(), H.onActiveSongChange(s, s.get("activeSong"), {}), H.on("needSongs", function(e, t) {
                                                    function n() {
                                                        e.switchToAutoplay({
                                                            secondaryArtistWeightModifier: .7,
                                                            seedArtistWeightRange: [75, 100],
                                                            weightModifierRange: [-14, 9]
                                                        }), r.trigger("guts:startAutoplayFallbackContext", "autoplay", 0)
                                                    }
                                                    B || !k || !k.i ? n() : (B = !0, r.Models.Tag.get(k.i).done(_.bind(function(t) {
                                                        t.getSongs().done(function(t) {
                                                            t && t.length ? (t = r.Models.Queue.shuffleSongsForRadio(t), e.extraStreamFlags = 0, e.add(t.models), r.trigger("guts:startAutoplayFallbackContext", "tag", k.i)) : n()
                                                        })
                                                    }, this)))
                                                }), r.trigger("guts:startAutoplayFallbackContext", "broadcast", i.broadcastID, "song", P.pluck("SongID").toString())
                                            }
                                            var j = n.page.currentPageView;
                                            j && j.broadcastView && j.broadcastView.broadcastID === i.broadcastID && r.router.setHash("broadcasts")
                                        }
                                        p[i.broadcastID] && delete p[i.broadcastID]
                                    }
                                    r.trigger("manatee:broadcastEnded", {
                                        success: !0,
                                        broadcastID: i.broadcastID
                                    })
                                }
                                break;
                            case "broadcastError":
                                console.warn("broadcastError!!", t, i), o.set({
                                    isJoiningBroadcast: !1,
                                    isCreatingBroadcast: !1
                                });
                                var F = "POPUP_ERROR_BROADCAST_UNKNOWN",
                                    I = 0,
                                    q = null;
                                if (t === "broadcastIDFailed") F = "POPUP_ERROR_BROADCAST_ID_FAILED";
                                else if (t === "broadcastBadSuggestion") {
                                    F = "POPUP_ERROR_BROADCAST_SUGGESTION_BAD";
                                    if (i.realSong) {
                                        var R = r.Models.Song.getCached(i.realSong.SongID);
                                        if (R) {
                                            r.Models.Song.replaceCacheAttributes(R, i.realSong);
                                            var U = u.get("suggestions").get(R.get("SongID"));
                                            U && U.set("approvalStatus", 0)
                                        }
                                    }
                                    I = 5e3
                                } else if (t === "broadcastServerDrop") F = "POPUP_ERROR_BROADCAST_RETRY";
                                else if (t === "broadcastServerLost") F = "POPUP_ERROR_BROADCAST_SERVER", this.chatDisconnected = !0;
                                else if (t == "broadcastNextSongFail") if (i.permanent && i.song) {
                                    F = "POPUP_ERROR_BROADCAST_NEXT_SONG_FAIL";
                                    var z = i.song.b || {};
                                    q = {
                                        song: z.sN || "-",
                                        artist: z.arN || "-"
                                    }, I = 12e4, c = null
                                } else F = "POPUP_ERROR_BROADCAST_NEXT_SONG_FAIL_PERMANENTLY";
                                else {
                                    if (t === "broadcastCacheFailed") return;
                                    if (t === "broadcastAssertError") return;
                                    t === "retryLastBroadcastCommand" ? F = "POPUP_ERROR_BROADCAST_FAIL_RETRYING" : t === "broadcastSongStopListener" ? F = "POPUP_ERROR_BROADCASTER_SONG_FAILED_LISTENER" : t === "broadcastSongBufferStop" && (I = 15e3, F = "POPUP_ERROR_BROADCASTER_SONG_BUFFER_STOP")
                                }
                                if (c && c === t) return;
                                c = t, r.trigger("notification:add", {
                                    description: _.getString(F, q),
                                    type: "error",
                                    duration: I,
                                    initFunc: function(e) {
                                        e.errorDetails = t, h.push(e)
                                    }
                                })
                            }
                        },
                        handleBroadcastUpdateEvents: function(e, t, n) {
                            var i = t.broadcastID ? r.Models.Broadcast.getCached(t.broadcastID) : null;
                            switch (e) {
                            case "update":
                                if (t && t.data) if (i) if (t.data.BroadcastID) {
                                    var s = t.data.BroadcastID,
                                        u = new r.Models.Broadcast({
                                            BroadcastID: s
                                        }),
                                        f = o.get("isTakingOverBroadcast"),
                                        l = i.get("pendingOwnerUserID"),
                                        p = i.getOwner();
                                    p && (p.unsubscribeFromStatus("queue"), p.off("change:currentBroadcastID", this.onBroadcastOwnerCurrentIDChanged, this)), u.transferFromOldBroadcast(i, l), i.unsubscribeFromChat("queue"), u.subscribeToChat("queue");
                                    if (f) n.set({
                                        currentBroadcast: u,
                                        isBroadcasting: !0
                                    }), a.storeCurrentBroadcast(0, s, i.get("Name"), i.get("Picture"), null, !1, !0), r.router.setHash(u.toUrl());
                                    else {
                                        n.set({
                                            currentBroadcast: u,
                                            isBroadcasting: !1
                                        });
                                        var d = r.Models.User.getCached(l);
                                        a.storeCurrentBroadcast(0, s, i.get("Name"), i.get("Picture"), d, !1, !0), d && (d.storeCurrentBroadcast(1, s, i.get("Name"), i.get("Picture"), null, !1, !0), C.updateCurrentBroadcastOwnerInfo(l, d.get("Name"), d.get("Picture"), !0), u.addPersistentChatActivity(new r.Models.ChatActivity({
                                            type: "info",
                                            infoType: r.Models.ChatActivity.NEW_BROADCAST_OWNER,
                                            owner: d,
                                            closeable: !0
                                        })), d.subscribeToStatus("queue"), d.on("change:currentBroadcastID", this.onBroadcastOwnerCurrentIDChanged, this))
                                    }
                                    r.trigger("manatee:broadcastTransferred", u, i)
                                } else {
                                    var v = n.get("currentBroadcast") && i.get("BroadcastID") === n.get("currentBroadcast").get("BroadcastID"),
                                        m = i.get("activeSong");
                                    v ? t.data.ownerSubscribed === !1 ? i.startOwnerLeftTimer() : t.data.ownerSubscribed === !0 && i.stopOwnerLeftTimer(!0) : t.data.ownerSubscribed === !1 && (t.data.activeStatus = 0);
                                    var g = v && t.data.suggestions && t.data.suggestions.lastAction && t.data.suggestions.lastAction.songID,
                                        y;
                                    g && (y = i.get("cachedBroadcastSuggestions")[t.data.suggestions.lastAction.songID]), i.updateFromSwf($.extend(!0, {}, t.data)), v && g && this.handleSuggestionsChanged(i, t, y);
                                    var b = i.get("activeSong");
                                    if (b) {
                                        (!m || b !== m) && i.newChatActivity(new r.Models.ChatActivity({
                                            type: "info",
                                            infoType: "songChange",
                                            song: b
                                        }));
                                        var w = i.get("activeSongStatus");
                                        if (w > r.Models.Player.playStatuses.NONE && w < r.Models.Player.playStatuses.FAILED && h.length) for (var E = 0; E < h.length; E++) if (h[E] && h[E].errorDetails && h[E].errorDetails === "broadcastSongStopListener") {
                                            h.splice(E, 1);
                                            break
                                        }
                                    }
                                } else console.log("Failed to update broadcast " + t.broadcastID + " with ", t.data);
                                break;
                            case "chat":
                                t && t.data && t.broadcastID && this.handleBroadcastChat(i, t);
                                break;
                            case "subAlert":
                                if (t && t.data && t.broadcastID) {
                                    var x;
                                    if (i) if (t.data.joined) t.data.userID && t.data.user && (x = new r.Models.User({
                                        FName: t.data.user.n,
                                        Picture: t.data.user.p,
                                        UserID: _.toInt(t.data.userID)
                                    })), i.newListener(x);
                                    else {
                                        var T = _.toInt(t.data.userID);
                                        T && (x = r.Models.User.getCached(T)), i.listenerLeft(x)
                                    }
                                }
                                break;
                            case "activeSongVote":
                                if (t && t.data && t.userID && i) {
                                    var N = i.get("activeSong"),
                                        k = _.toInt(t.userID);
                                    if (a && N && N.get("queueSongID") === t.data.queueSongID) {
                                        var L = t.data.vote,
                                            A = N.get("upVotes"),
                                            O = N.get("downVotes"),
                                            M;
                                        L > 0 ? (M = _.indexOf(A, k), M === -1 && (M = _.indexOf(O, k), M > -1 && O.splice(M, 1), A.push(k))) : t.data.vote < 0 ? (M = _.indexOf(O, k), M === -1 && (M = _.indexOf(A, k), M > -1 && A.splice(M, 1), O.push(k))) : (M = _.indexOf(A, k), M > -1 && A.splice(M, 1), M = _.indexOf(O, k), M > -1 && O.splice(M, 1)), N.trigger("change"), t.userID == r.getLoggedInUserID() && N.set("userVote", L), i.activeVotesChanged()
                                    }
                                }
                                break;
                            case "inviteNewBroadcaster":
                                if (t && t.toUserID) if (t.toUserID == a.get("UserID")) {
                                    var D = i.getOwner();
                                    r.trigger("lightbox:open", "broadcastTransferOwnership", {
                                        owner: D,
                                        broadcast: i,
                                        receivingTransfer: !0
                                    })
                                } else n.get("isBroadcasting") && r.trigger("manatee:broadcastDispatch:inviteNewBroadcaster", {
                                    success: !0
                                });
                                break;
                            case "newBroadcasterResponse":
                                t && t.userID && n.get("isBroadcasting") && (t.data && t.data.accept && i.set("pendingOwnerUserID", t.userID), r.trigger("manatee:newBroadcasterResponse", t));
                                break;
                            case "songListens":
                                t && t.data && t.data.songID && t.data.listens && i.addHistoryListenCount(t.data.songID, _.toInt(t.data.listens));
                                break;
                            case "suggestionResult":
                            case "broadcastAddPublisher":
                                t && t && t.source && r.trigger("manatee:" + t.source, t);
                                break;
                            case "broadcastRestore":
                                S();
                                break;
                            case "userInfoUpdate":
                                t.data && t.data.users && _.each(t.data.users, function(e, t) {
                                    if (!e || !e.n || e.r) return;
                                    new r.Models.User({
                                        UserID: t,
                                        FName: e.n,
                                        Picture: e.p
                                    })
                                });
                                break;
                            case "initialBuffer":
                                if (i && n && !n.get("isBroadcasting")) {
                                    if (c && c === "initialBuffer") return;
                                    c = "initialBuffer", r.trigger("notification:add", {
                                        description: _.getString("POPUP_ERROR_BROADCASTER_SONG_INITIAL_BUFFER"),
                                        type: "error",
                                        duration: 5e3,
                                        initFunc: function(t) {
                                            t.errorDetails = e, h.push(t)
                                        }
                                    })
                                }
                            }
                        },
                        handleBroadcastChat: function(e, t) {
                            var i = _.orEqual(t.userID, t.id ? t.id.userid : 0),
                                s = _.orEqual(t.artistID, t.id ? t.id.artistid : 0);
                            if (i < 1) return;
                            !t.data && t.value && (t = t.value);
                            if (e) {
                                var o = s ? r.Models.Artist.getCached(s) : null,
                                    u = !o && r.Models.User.getCached(i);
                                (u || o) && e.newChatActivity(new r.Models.ChatActivity({
                                    user: u,
                                    artist: o,
                                    message: t.data,
                                    type: "message"
                                }));
                                var a = n.page.currentPageView;
                                (!a || !a.broadcastView || a.broadcastView.model.get("broadcast") !== e) && r.trigger("broadcast:notifEvent")
                            }
                            r.trigger("manatee:broadcastChat", t)
                        },
                        handleSuggestionsChanged: function(e, t, i) {
                            if (!e || !t.data.suggestions || !t.data.suggestions.lastAction) return;
                            var s = t.data.suggestions.lastAction,
                                o = r.Models.Song.getCached(s.songID),
                                u = _.toInt(s.userID) === a.get("UserID");
                            i || (i = e.get("cachedBroadcastSuggestions")[s.songID]);
                            switch (s.type) {
                            case -2:
                                u && o && r.trigger("notification:add", {
                                    description: _.getString("POPUP_BROADCAST_SUGGESTION_ALREADY_VOTED", {
                                        song: o.escape("SongName")
                                    }),
                                    type: "error",
                                    url: e.toUrl(),
                                    duration: 5e3
                                });
                                break;
                            case -1:
                            case 5:
                                o && ((i && i.get("userVote") && _.indexOf(i.get("upVotes"), r.getLoggedInUserID()) === 0 || s.type === 5 && u) && r.trigger("notification:add", {
                                    type: "error",
                                    description: _.getString("POPUP_BROADCAST_SUGGESTION_REJECTED", {
                                        song: o.escape("SongName")
                                    }),
                                    url: e.toUrl(),
                                    duration: 5e3
                                }), i && i.set("userVote", 0));
                                break;
                            case 0:
                                i && (u ? i.set("userVote", 1) : i.get("userVote") && _.indexOf(i.get("upVotes"), r.getLoggedInUserID()) === 0 && r.trigger("notification:add", {
                                    type: "success",
                                    description: _.getString("POPUP_BROADCAST_SUGGESTION_VOTED", {
                                        song: i.escape("SongName")
                                    }),
                                    url: e.toUrl(),
                                    duration: 5e3
                                }));
                                break;
                            case 4:
                                u && i && i.set("userVote", 0);
                                break;
                            case 1:
                                i ? s.approvedSong && r.Models.Song.replaceCacheAttributes(i, s.approvedSong) : (i = o, i ? s.approvedSong && r.Models.Song.replaceCacheAttributes(i, s.approvedSong) : i = new r.Models.Song(s.approvedSong)), i && e.suggestionApproved(i);
                                break;
                            case 2:
                                if (i) {
                                    u && (r.trigger("notification:add", {
                                        type: "success",
                                        description: _.getString("POPUP_BROADCAST_SUGGESTION_ADDED"),
                                        url: e.toUrl(),
                                        duration: 5e3
                                    }), i.set("userVote", 1)), e.suggestionAdded(i, r.Models.User.getCached(s.userID));
                                    var f = n.page.currentPageView;
                                    (!f || !f.broadcastView || f.broadcastView.model.get("broadcast") !== e) && !u && r.trigger("broadcast:notifEvent")
                                }
                                break;
                            case 3:
                            case 7:
                                if (u) {
                                    var l = s.type == 3 ? "POPUP_BROADCAST_SUGGESTION_REJECTED_PLAYED" : "POPUP_BROADCAST_SUGGESTION_REJECTED_PLAY_LATER";
                                    r.trigger("notification:add", {
                                        description: _.getString(l),
                                        type: "error",
                                        url: e.toUrl(),
                                        duration: 5e3
                                    }), i && i.set("userVote", 0)
                                }
                                break;
                            case 6:
                                u && r.trigger("notification:add", {
                                    description: _.getString("POPUP_BROADCAST_SUGGESTION_REJECTED_FULL"),
                                    type: "error",
                                    url: e.toUrl(),
                                    duration: 5e3
                                })
                            }
                        },
                        onBroadcastOwnerCurrentIDChanged: function(e, t) {
                            var n = o.get("currentQueue"),
                                r = n ? n.get("currentBroadcast") : null;
                            n && t && r && e.get("isOwnerOfCurrentBroadcast") && n.get("currentBroadcast") && r.get("BroadcastID") !== t && a.joinBroadcast(t, e)
                        },
                        userSelfMessage: function(e) {
                            if (!e || !e.type) return;
                            switch (e.type) {
                            case "logout":
                                e.sessionPart == r.Services.API.sessionPart && r.getLoggedInUserID() > 0 && n.model.logout(!0)
                            }
                        },
                        handleGlobalAlert: function(e) {
                            if (!e || !e.type) return;
                            switch (e.type) {
                            case "message":
                                e.id
                            }
                        },
                        togglePlay: function(e) {
                            var t = r.Models.Player.playStatuses,
                                n = o.get("playStatus"),
                                i = o.get("currentQueue"),
                                s = i ? i.get("activeSong") : !1,
                                u = i ? i.get("isBroadcasting") : !1;
                            if (e && (!s || e !== s.get("queueSongID"))) {
                                if (u) {
                                    var a = i.get("songs").get(e),
                                        f = i.get("songs");
                                    if (s && f.indexOf(a) != f.indexOf(s) + 1) {
                                        r.trigger("lightbox:open", "previewSong", {
                                            index: this.playSpecialIndexes.NEXT,
                                            fromQueue: !0,
                                            songs: [a],
                                            _showPlayerControls: !0
                                        });
                                        return
                                    }
                                }
                                this.playSong(e)
                            } else switch (n) {
                            case t.PAUSED:
                                this.resumeSong();
                                break;
                            case t.INITIALIZING:
                            case t.LOADING:
                            case t.BUFFERING:
                            case t.PLAYING:
                                this.handlePauseSong();
                                break;
                            default:
                                this.playSong()
                            }
                        },
                        handlePauseSong: function() {
                            var e = o.get("currentQueue");
                            if (e && e.get("isBroadcasting")) {
                                var t = e.get("currentBroadcast");
                                if (t && t.get("listenersCount") > 1 && !t.get("allowPauseSkip")) {
                                    r.trigger("lightbox:open", "broadcastPauseSkip", {
                                        broadcast: t,
                                        confirmType: "PAUSE",
                                        callback: _.bind(this.pauseSong, this)
                                    });
                                    return
                                }
                            }
                            this.pauseSong()
                        },
                        toggleVolumeMute: function(e) {
                            _.isEmpty(this.muteLocks) && this.setIsMuted(_.isUndefined(e) ? !this.getIsMuted() : e)
                        },
                        toggleShuffle: function() {
                            this.setShuffle(!this.getShuffle())
                        },
                        toggleRepeat: function() {
                            var e = o.get("currentQueue"),
                                t = r.Models.Player.repeatModes,
                                n = e ? o.get("currentQueue").get("repeatMode") : null;
                            n == t.NONE ? this.setRepeat(t.ALL) : n == t.ALL ? this.setRepeat(t.ONE) : this.setRepeat(t.NONE)
                        },
                        toggleCrossfade: function(e) {
                            var t = typeof e == "undefined" ? !this.getCrossfadeEnabled() : !! e;
                            t ? a.get("subscription").canUsePlayerBonuses() ? this.setCrossfadeEnabled(!0) : r.trigger("lightbox:open", "vipOnlyFeature", {
                                onLogin: function() {
                                    r.trigger("player:crossfade", !0)
                                }
                            }) : this.setCrossfadeEnabled(!1)
                        },
                        changeVolume: function(e) {
                            e = _.orEqual(e, 0), this.preLockVolume = e, _.isEmpty(this.muteLocks) && this.setVolume(e)
                        },
                        playNextSong: function(e) {
                            e = _.orEqual(e, !1);
                            var t = _.bind(function() {
                                this.nextSong(), o.set({
                                    expectManualSongChange: !0
                                })
                            }, this),
                                n = o.get("currentQueue");
                            if (n && n.get("isBroadcasting")) {
                                var i = n.get("currentBroadcast");
                                if (i && i.get("listenersCount") > 1 && !i.get("allowPauseSkip") && !e) {
                                    r.trigger("lightbox:open", "broadcastPauseSkip", {
                                        broadcast: i,
                                        confirmType: "SKIP",
                                        callback: t
                                    });
                                    return
                                }
                            }
                            t()
                        },
                        playPreviousSong: function() {
                            this.previousSong(), o.set({
                                expectManualSongChange: !0
                            })
                        },
                        radioClearQueue: function(e) {
                            var t = o.get("currentQueue"),
                                n = !1,
                                i = function() {
                                    var i = function() {
                                            if (n) return;
                                            n = !0, o.off("change:currentQueue", i), t.off("change", i), e()
                                        };
                                    r.Services.SWF.stopSong(), r.Services.SWF.clearQueue(), o.on("change:currentQueue", i), t.on("change", i)
                                };
                            r.trigger("lightbox:open", "radioClearQueue", {
                                startRadio: i,
                                inBroadcast: !! t.get("currentBroadcast")
                            })
                        },
                        toggleAutoplay: function(e, n, i, s) {
                            function a() {
                                this.setAutoplay(!0, n, i, s);
                                var e = u.get("songs").pluck("SongID").toString(),
                                    o = n ? "oldTag" : "autoplay",
                                    a = n ? n : 0,
                                    f = i && i.seeds ? "artist" : n ? t : "song",
                                    l = i && i.seeds ? i.seeds.toString() : n ? t : e;
                                r.trigger("guts:startAutoplayFallbackContext", o, a, f, l), r.trigger("guts:gatrack", "player", "autoplayOn", "queue", u.get("songs").length), n ? r.trigger("guts:forcelog", "autoplayOn", {
                                    tagID: a,
                                    autoplayType: "oldTag"
                                }) : r.trigger("guts:forcelog", "autoplayOn", {
                                    tagID: 0,
                                    autoplayType: "autoplay",
                                    autoplaySeedSongs: e
                                })
                            }
                            var u = o.get("currentQueue");
                            if (r.isBroadcaster()) {
                                r.trigger("notification:add", {
                                    title: _.getString("POPUP_NO_RADIO_WHILE_BROADCASTING"),
                                    type: "error"
                                });
                                return
                            }
                            e = _.orEqual(e, !u.get("autoplayEnabled")), n = _.orEqual(n, 0), i = _.orEqual(i, null), s = _.orEqual(s, null);
                            if (e)(n > 0 || i) && u.get("songs") && u.get("songs").length ? this.radioClearQueue(_.bind(a, this)) : u.get("currentBroadcast") ? this.radioClearQueue(_.bind(a, this)) : a.call(this);
                            else {
                                this.setAutoplay(!1);
                                var f = u.get("clientRadio");
                                f && f.disable(), r.trigger("guts:gatrack", "player", "autoplayOff"), r.trigger("guts:forcelog", "autoplayOff", {}), r.trigger("guts:clearAllAutoplayContexts")
                            }
                        },
                        startRadioWithSongs: function(e, t) {
                            function i() {
                                r.Services.SWF.addSongs(e, r.Services.SWF.playSpecialIndexes.REPLACE, !0, t, !0);
                                var n = "autoplay",
                                    i = 0,
                                    s = "song",
                                    o = e[0].hasOwnProperty("attributes") ? (new Backbone.Collection(e)).pluck("SongID").toString() : e.toString();
                                r.trigger("guts:startAutoplayFallbackContext", n, i, s, o), r.trigger("guts:gatrack", "player", "autoplayOn", "queue", e.length), r.trigger("guts:forcelog", "autoplayOn", {
                                    tagID: 0,
                                    autoplayType: "autoplay",
                                    autoplaySeedSongs: o
                                })
                            }
                            t = t || {};
                            var n = o.get("currentQueue");
                            if (r.isBroadcaster()) {
                                r.trigger("notification:add", {
                                    title: _.getString("POPUP_NO_RADIO_WHILE_BROADCASTING"),
                                    type: "error"
                                });
                                return
                            }
                            n && (n.get("songs") && n.get("songs").length || n.get("currentBroadcast")) ? this.radioClearQueue(_.bind(i, this)) : i.call(this)
                        },
                        setAutoplayVote: function(e, t) {
                            var n = o.get("currentQueue");
                            if (n) {
                                var i = n.get("clientRadioEnabled");
                                if (i || n.get("autoplayEnabled")) this.voteSong(e, t), i && n.get("clientRadio").voteSong(e, t)
                            }
                            t < 0 ? (r.trigger("guts:gatrack", "player", "frown", "queueSongID", e), r.trigger("guts:log", "songDownVoted", {
                                queueSongID: e,
                                songID: n.get("songs").models[e - 1].get("SongID")
                            })) : t > 0 && (r.trigger("guts:gatrack", "player", "smile", "queueSongID", e), r.trigger("guts:log", "songUpVoted", {
                                queueSongID: e,
                                songID: n.get("songs").models[e - 1].get("SongID")
                            }))
                        },
                        flagQueueSong: function(e, t) {
                            this.flagSong(e, t), r.trigger("notification:add", {
                                title: "",
                                description: _.getString("SUCCESS_FLAG_SONG"),
                                url: ""
                            })
                        },
                        handleClearQueue: function() {
                            var e = o.get("currentQueue");
                            r.trigger("guts:gatrack", "player", "clearQueue"), r.trigger("guts:log", "clearQueue"), (!e || !e.get("isBroadcasting")) && r.trigger("guts:clearAllAutoplayContexts"), e && e.get("clientRadioEnabled") && e.get("clientRadio").disable(), this.clearQueue()
                        },
                        initReconnect: function() {
                            this.chatDisconnected && !this.chatReconnecting && (r.Services.SWF.reconnectToChat(), this.chatReconnecting = !0)
                        },
                        handleManateeReconnected: function() {
                            function h() {
                                return u || (f = $.Deferred(), u = setTimeout(function() {
                                    f.resolve()
                                }, (10 + Math.random() * 5) * 1e3)), f.promise()
                            }
                            function p() {
                                var e = o.get("currentQueue");
                                return e ? e.get("currentBroadcast") : null
                            }
                            function d() {
                                if (!i) return;
                                i.cleanupOnEnd();
                                var e = i.getOwner();
                                e.get("currentBroadcastID") === i.get("BroadcastID") && e.storeCurrentBroadcast(0, null)
                            }
                            var e = o.get("currentQueue"),
                                i = e ? e.get("currentBroadcast") : null,
                                s = e ? e.get("isBroadcasting") : null,
                                u, f;
                            if (!i) {
                                var l = o.get("isCreatingBroadcast");
                                l && _.isArray(l) && l.length ? r.Services.SWF.chatReady.done(function() {
                                    r.Services.SWF.startBroadcast.apply(r.Services.SWF, l)
                                }) : l && a.createBroadcast();
                                return
                            }
                            var c = i.get("BroadcastID");
                            if (!s) {
                                var v = i.getOwner();
                                if (v) {
                                    v.getCurrentStatus().done(function() {
                                        var e = v.get("currentBroadcastID");
                                        e && e !== c ? d() : (!v.get("onlineStatus") || !v.get("currentBroadcastID")) && h().done(function() {
                                            if (i !== p()) return;
                                            e = v.get("currentBroadcastID"), e !== c && (e && v.get("isOwnerOfCurrentBroadcast") && a.joinBroadcast(e, v), d())
                                        })
                                    });
                                    var m = v.id;
                                    r.Services.SWF.chatReady.done(function() {
                                        v.subscribeToStatus("queue")
                                    })
                                }
                            }
                            r.Models.Broadcast.fetchRealtimeBroadcast(c, !0).always(_.bind(function(e) {
                                var o = i === p();
                                !e || !e.get("activeStatus") && !s ? s ? o ? a.createBroadcast(t, t, t, !0) : d() : o ? (d(), h().done(function() {
                                    if (i !== p()) return;
                                    queue.set({
                                        currentBroadcast: null,
                                        isBroadcasting: !1
                                    }), r.trigger("lightbox:open", "broadcastEnded", {
                                        broadcast: i,
                                        disabledChat: !0
                                    });
                                    var e = n.page.currentPageView;
                                    e && e.broadcastView && e.broadcastView.broadcastID === i.get("BroadcastID") && r.router.setHash("broadcasts")
                                })) : d() : o ? s ? a.resumeBroadcast(e) : a.joinBroadcast(c, e.getOwner()).done(function() {}).fail(function() {
                                    var e = "POPUP_ERROR_BROADCAST_JOIN_ERROR";
                                    error === 2 && (e = "POPUP_ERROR_BROADCAST_JOIN_ARTIST"), r.trigger("notification:add", {
                                        description: _.getString(e),
                                        type: "error",
                                        duration: 5e3
                                    })
                                }) : d(), S()
                            }, this))
                        }
                    }
            }(), function() {
                var r = e.GS = e.GS || {};
                r.Services = r.Services || {};
                var i = [{
                    targetRange: [0, .1],
                    dateRange: ["2013-01-23", "2013-01-29"],
                    name: "Interleaving_HTP4PopArtist_HTP4",
                    groups: ["0"]
                }, {
                    targetRange: [.4, .9],
                    dateRange: ["2013-03-05", "2013-03-13"],
                    name: "paymentsPopup",
                    groups: [0, 1]
                }],
                    s = 6048e5,
                    o;
                r.Services.GUTS = {
                    shouldLog: !1,
                    server: "/guts",
                    appID: "html",
                    context: !1,
                    debug: !1,
                    abTest: null,
                    bufferLength: 10,
                    localLogs: [],
                    canLogStats: Math.random() >= .5,
                    localStats: [],
                    statsTimer: 0,
                    lastStatsTime: 0,
                    lastUserChangeTime: 0,
                    searchClickLpid: "searchClick",
                    loggedNormally: !1,
                    eligibleForABTest: !1,
                    abTestBucket: null,
                    currentTest: null,
                    currentGroup: null,
                    loggingStatusExpirationDate: null,
                    init: function(e) {
                        o = e, this.context = {}, this.server = _.orEqual(gsConfig.gutsServer, !1), this.setLoggingStatus(), this.debug = gsConfig.runMode !== "production", this.createdAt = Date.now(), this.debug && (this.bufferLength = 1, this.shouldLog = !0), this.currentPage = {}, this.currentPage.pageType = "home", this.currentPage.section = "", this.currentPage.subpage = "", this.currentPage.id = "", gsConfig.isPreview && (this.appID = "preview", this.shouldLog = !0);
                        var t = _.browserDetect();
                        this.beginContext({
                            version: "jawharp"
                        }), this.gaSetCustomVariable(4, "misc", "V:JH02"), this.beginContext({
                            sessionID: gsConfig.sessionID
                        }), this.beginContext({
                            initTime: (new Date).getTime()
                        }), this.beginContext({
                            country: gsConfig.country.ID
                        }), o.get("user").id > 0 && (this.beginContext({
                            userID: o.get("user").id,
                            subscription: o.get("user").get("subscription").getTypeString().length ? o.get("user").get("subscription").getTypeString() : !1
                        }), o.get("user").get("Flags") & r.Models.User.FLAG_OWNS_ARTIST && this.beginContext({
                            hasArtists: !0
                        })), this.gaSetCustomVariable(1, "User", o.get("user").getUserStringForAnalytics()), o.on("change:user", this.onUserChange, this), this.logEvent("init", {
                            browser: t.browser,
                            browserVersion: t.version,
                            os: navigator.platform,
                            ip: gsConfig.remoteAddr,
                            locale: o.get("locale")
                        }), r.on("change:page", this.handlePageLoad, this), r.on("player:restore", this.handlePlayerRestoreQueue, this), r.on("api:stats", this.handleAPIStats, this), $(document).click(_.bind(function(e) {
                            if (Math.random() < .001) {
                                var t = $(e.target.outerHTML).html("").get(0).outerHTML;
                                this.logEvent("globalClick", {
                                    outerHTML: t
                                })
                            }
                        }, this)), this.onShouldLogChange(), r.on("guts:log", this.onLog, this), r.on("guts:gatrack", this.onGaTrack, this), r.on("guts:logsearch", this.onLogSearch, this), r.on("guts:forcelog", this.onForceLog, this), r.on("guts:begincontext", this.onBeginContext, this), r.on("guts:endcontext", this.onEndContext, this), r.on("guts:startNewAutoplayContext", this.onStartNewAutoplayContext, this), r.on("guts:startAutoplayFallbackContext", this.onStartAutoplayFallbackContext, this), r.on("guts:clearAllAutoplayContexts", this.onClearAllAutoplayContexts, this), r.on("guts:handleFieldClick", this.onHandleFieldClick, this), r.on("guts:gaSetCustomVariable", this.onGaSetCustomVariable, this)
                    },
                    onShouldLogChange: function() {
                        if (!r.Services.API || !this.canLogStats) return;
                        this.shouldLog ? (r.Services.API.collectStats = !0, this.statsTimer || (this.statsTimer = setInterval(_.bind(this.sendStats, this), 1e4))) : (this.localStats = [], r.Services.API.collectStats = null, clearTimeout(this.statsTimer), this.statsTimer = 0)
                    },
                    onUserChange: function() {
                        var e = _.defined(this.context.userID),
                            t = _.defined(this.context.subscription),
                            n = _.defined(this.context.hasArtists),
                            i = o.get("user").get("subscription").getTypeString().length ? o.get("user").get("subscription").getTypeString() : !1,
                            s = o.get("user").id,
                            u = o.get("user");
                        e && this.endContext("userID"), t && this.endContext("subscription"), n && this.endContext("hasArtists");
                        if (s > 0) {
                            var a = _.browserDetect();
                            this.logEvent("login", {
                                userID: s,
                                subscription: i,
                                browser: a.browser,
                                browserVersion: a.version,
                                os: navigator.platform,
                                ip: gsConfig.remoteAddr
                            }), this.beginContext({
                                userID: s,
                                subscription: i
                            }), o.get("user").get("Flags") & r.Models.User.FLAG_OWNS_ARTIST && this.beginContext({
                                hasArtists: !0
                            })
                        } else e && this.logEvent("logout", {});
                        this.gaSetCustomVariable(1, "User", u.getUserStringForAnalytics()), this.lastUserChangeTime = (new Date).getTime()
                    },
                    setLoggingStatus: function() {
                        var e = new Date,
                            t = r.Services.Local,
                            n, o, u, a, f = t.get("currentTest"),
                            l = t.get("currentGroup");
                        if (f) {
                            n = t.get("abTestBucket"), o = t.get("eligibleForABTest"), u = t.get("loggedNormally");
                            if (typeof n == "number" && n >= 0 && n <= 1 && o && u === !1 && f.name && typeof l == "number") for (var c = 0; c < i.length; c++) if (i[c].name === f.name && f.dateRange) {
                                var h = new Date(f.dateRange[0]),
                                    p = new Date(f.dateRange[1]);
                                if (e >= h && e < p) {
                                    this.eligibleForABTest = o, this.loggedNormally = u, this.currentTest = f, this.currentGroup = l, this.beginContext({
                                        abtest: this.currentTest.name,
                                        group: this.currentGroup
                                    }), this.shouldLog = !0, this.gaSetCustomVariable(2, "GUTSLoggingStatus", this.currentTest.name + "_" + this.currentGroup, 2), this.onShouldLogChange();
                                    return
                                }
                                break
                            }
                            this.clearLoggingStatus()
                        }
                        n = t.get("abTestBucket"), o = t.get("eligibleForABTest"), u = t.get("loggedNormally"), a = t.get("loggingStatusExpirationDate"), a && (a = new Date(a));
                        var d = Math.random();
                        a && e > a && (this.clearLoggingStatus(), u = t.get("loggedNormally"), o = t.get("eligibleForABTest"), n = t.get("abTestBucket"), f = t.get("currentTest"), l = t.get("currentGroup"));
                        if (n && o && u === !1) {
                            this.abTestBucket = n, this.setCurrentTest();
                            return
                        }
                        _.defined(u) || (u = d <= .1, t.set("loggedNormally", u)), this.loggedNormally = u, this.loggedNormally ? (this.eligibleForABTest = !1, this.shouldLog = !0, t.set("eligibleForABTest", !1), this.gaSetCustomVariable(2, "GUTSLoggingStatus", "normal", 2), this.onShouldLogChange()) : _.defined(o) ? this.eligibleForABTest = o : (this.eligibleForABTest = d > .1 && d <= .2, t.set("eligibleForABTest", this.eligibleForABTest)), this.eligibleForABTest ? (this.abTestBucket = Math.random(), t.set("abTestBucket", this.abTestBucket)) : (this.abTestBucket = null, t.set("abTestBucket", this.abTestBucket)), this.loggingStatusExpirationDate = new Date(e.getTime() + s), t.set("loggingStatusExpirationDate", this.loggingStatusExpirationDate), this.abTestBucket && this.setCurrentTest()
                    },
                    forceABTest: function(e, t) {
                        e && typeof t == "number" && (this.currentTest = {}, this.currentTest.name = e, this.currentGroup = t, this.shouldLog = !0, this.debug = !0, this.loggedNormally = !1, this.eligibleForABTest = !0, this.onShouldLogChange())
                    },
                    forceExistingABTest: function(e, t, n) {
                        if (e && typeof t == "number") for (var s = 0; s < i.length; s++) {
                            var o = i[s];
                            if (o.name === e) {
                                this.currentTest = o, this.currentGroup = t, this.shouldLog = !0, this.debug = !0, this.loggedNormally = !1, this.eligibleForABTest = !0, this.abTestBucket = (o.targetRange[0] + o.targetRange[1]) / 2;
                                if (n) {
                                    var u = r.Services.Local;
                                    u.set("loggedNormally", !1), u.set("eligibleForABTest", !0), u.set("abTestBucket", this.abTestBucket), u.set("currentTest", this.currentTest), u.set("currentGroup", this.currentGroup)
                                }
                                this.onShouldLogChange();
                                break
                            }
                        }
                    },
                    clearLoggingStatus: function() {
                        var e = r.Services.Local;
                        e.set("loggedNormally", null), e.set("eligibleForABTest", null), e.set("abTestBucket", null), e.set("currentTest", null), e.set("currentGroup", null), e.set("loggingStatusExpirationDate", null), this.shouldLog = !1, this.loggedNormally = null, this.eligibleForABTest = null, this.abTestBucket = null, this.currentTest = null, this.currentGroup = null, _gaq.push(["_deleteCustomVar", 2]), this.onShouldLogChange()
                    },
                    setCurrentTest: function() {
                        if (this.abTestBucket) {
                            var e, t, n, s = new Date,
                                o = r.Services.Local;
                            for (var u = 0; u < i.length; u++) {
                                e = i[u], t = new Date(e.dateRange[0]), n = new Date(e.dateRange[1]);
                                if (e.targetRange[0] <= this.abTestBucket && e.targetRange[1] >= this.abTestBucket && t <= s && n >= s) {
                                    this.currentTest = e, o.set("currentTest", e);
                                    var a = (e.targetRange[1] - e.targetRange[0]) / e.groups.length;
                                    return this.currentGroup = Math.min(Math.floor((this.abTestBucket - e.targetRange[0]) / a), e.groups.length - 1), o.set("currentGroup", this.currentGroup), this.beginContext({
                                        abtest: e.name,
                                        group: this.currentGroup
                                    }), this.shouldLog = !0, this.gaSetCustomVariable(2, "GUTSLoggingStatus", e.name + "_" + this.currentGroup, 2), this.onShouldLogChange(), e
                                }
                            }
                        }
                        return null
                    },
                    beginContext: function(e) {
                        _.forEach(e, function(t, n) {
                            e.hasOwnProperty(n) && (this.context[n] = e[n])
                        }, this)
                    },
                    endContext: function(e) {
                        _.defined(this.context[e]) && delete this.context[e]
                    },
                    doLogEvent: function(e, t) {
                        var n = this.currentTest;
                        if (n && n.dateRange && n.dateRange.length == 2) {
                            var r = new Date,
                                i = new Date(n.dateRange[1]);
                            if (r > i) {
                                this.clearLoggingStatus(), this.setLoggingStatus();
                                if (!this.shouldLog) return
                            }
                        }
                        var s = (new Date).getTime(),
                            o = {
                                time: s,
                                lpID: e,
                                state: {},
                                context: {}
                            };
                        currentContext = this.context, _.forEach(currentContext, function(e, t) {
                            currentContext.hasOwnProperty(t) && ($.isArray(currentContext[t]) ? (this.context[t] = [], _.forEach(currentContext[t], function(e, t) {
                                this.push(t)
                            }, this.context[t])) : this.context[t] = _.orEqual(currentContext[t], "").toString())
                        }, o), _.forEach(t, function(e, n) {
                            t.hasOwnProperty(n) && (o.state[n] = _.orEqual(e, "").toString())
                        }, o), this.localLogs.push(o), (this.debug || this.checkSendCondition()) && this.sendLogs()
                    },
                    logEvent: function(e, t) {
                        this.shouldLog && this.doLogEvent(e, t)
                    },
                    onBeginContext: function(e) {
                        this.beginContext(e)
                    },
                    onEndContext: function(e) {
                        this.endContext(e)
                    },
                    onStartNewAutoplayContext: function(e, t, n, r) {
                        this.startNewAutoplayContext(e, t, n, r)
                    },
                    onStartAutoplayFallbackContext: function(e, t, n, r) {
                        this.startAutoplayFallbackContext(e, t, n, r)
                    },
                    onGaTrack: function(e, t, n, r) {
                        this.gaTrackEvent(e, t, n, r)
                    },
                    onLogSearch: function(e, t, n, r) {
                        this.logSearchEvent(e, t, n, r)
                    },
                    onClearAllAutoplayContexts: function() {
                        this.clearAllAutoplayContexts()
                    },
                    onForceLog: function(e, t) {
                        var n = this.checkLogForErrors(e, t);
                        n && this.forceLogEvent(n.lpID, n.state)
                    },
                    onHandleFieldClick: function(e, t, n, r) {
                        this.handleFieldClick(e, t, n, r)
                    },
                    onGaSetCustomVariable: function(e, t, n, r) {
                        this.gaSetCustomVariable(e, t, n, r)
                    },
                    checkLogForErrors: function(e, t) {
                        var n = {
                            lpID: e,
                            state: t
                        };
                        if (!this.shouldLog) return !1;
                        try {
                            if (_.isNull(e) || _.isUndefined(e)) throw {
                                msg: "missing lpID in log event",
                                cause: n
                            };
                            if (typeof e != "string") throw {
                                msg: "invalid param type of lpID, expected string:",
                                cause: n
                            };
                            if (_.isNull(t) || _.isUndefined(t)) n.state = {};
                            else {
                                if (typeof t != "object") throw {
                                    msg: "invalid param type of state, expected object:",
                                    cause: n
                                };
                                var r = _.keys(t),
                                    i = r.length;
                                for (var s = 0; s < i; s++) {
                                    var o = r[s];
                                    if (typeof t[o] == "object") throw {
                                        msg: "state property in log function cannot contain objects:",
                                        cause: n
                                    }
                                }
                            }
                            return n
                        } catch (u) {
                            return console.log("GUTS logging error -", u.msg, u.cause), !1
                        }
                    },
                    onLog: function(e, t) {
                        var n = this.checkLogForErrors(e, t);
                        n && this.doLogEvent(n.lpID, n.state)
                    },
                    forceLogEvent: function(e, t) {
                        t || (t = {}), t.forceLogged = !0, this.doLogEvent(e, t)
                    },
                    logSearchEvent: function(e, i, s, o) {
                        try {
                            var u = "",
                                a = {},
                                f = n.model.get("searchVersion"),
                                l = new r.Models.Collections.Songs,
                                c = s ? jQuery.data(s.currentTarget, "module") : null,
                                h;
                            switch (e) {
                            case "OLlibraryClick":
                            case "OLfavoriteClick":
                            case "OLartistPageLoad":
                            case "OLalbumPageLoad":
                            case "OLsongPageLoad":
                            case "OLshareClick":
                            case "OLplayButton":
                            case "OLaddButton":
                                u = e;
                                break;
                            case "dblClick":
                                u = "handleItemDblclick";
                                break;
                            default:
                                u = "searchClick", a.clickType = e
                            }
                            if (u != "searchClick" && s && c && c.model) h = c.model, l.push(h);
                            else {
                                if (!i.selectedItems.length) {
                                    console.log("No items for logSearchEvent");
                                    return
                                }
                                l.reset(i.selectedItems.models)
                            }
                            if (h) a.rank = i.collection.indexOf(h) + 1, h.get("ppVersion") && n.page.currentPageView instanceof r.Views.Pages.Search && (a.ppVersion = h.get("ppVersion"));
                            else {
                                var p = Infinity,
                                    d = [];
                                l.each(function(e) {
                                    var t = i.collection.indexOf(e) + 1;
                                    p = Math.min(p, t), d[t] = e.get("ppVersion")
                                }), p != Infinity && (a.rank = p), d = _.without(d, t), d.length && (a.ppVersions = d.join(","))
                            }
                            l.length == 1 ? a.songID = l.models[0].get("SongID") : a.songIDs = l.pluck("SongID"), o && (a = _.extend(a, o)), this.logEvent(u, a)
                        } catch (v) {
                            console.log(v)
                        }
                    },
                    checkSendCondition: function() {
                        return this.localLogs.length >= this.bufferLength && (new Date).getTime() - this.lastUserChangeTime > 1e4
                    },
                    forceSend: function() {
                        this.sendLogs(!0)
                    },
                    sendLogsTimeout: !1,
                    sendLogsWait: function() {
                        var e = (new Date).getTime() - this.lastUserChangeTime;
                        return e >= 1e4 ? 1e3 : 1e4 - e
                    },
                    sendLogs: function(e) {
                        var t = this.debug ? 0 : this.sendLogsWait();
                        e ? this._internalSend(!1) : this._internalSend(!0, t)
                    },
                    sendStats: function(e) {
                        var t = +(new Date);
                        e = e || (t - r.Services.API.lastRequestTime) / 1e3 >= 20 || (t - this.lastStatsTime) / 1e3 >= 300 || this.localStats.length > 100, e && this.lastStatsTime && this.localStats && this.localStats.length ? (this.lastStatsTime = 0, r.Services.API.logPerformanceTracking(this.localStats).always(_.bind(function() {
                            this.lastStatsTime = t
                        }, this)), this.localStats = []) : this.lastStatsTime || (this.lastStatsTime = t)
                    },
                    _internalSend: function(e, t) {
                        clearTimeout(this.sendLogsTimeout), t = t || 500, e = _.orEqual(e, !0);
                        var n = 0,
                            r = 0,
                            i = _.bind(function() {
                                var s = Date.now() - this.createdAt;
                                n += t, r++;
                                if (e && $.active && s > 1e4 && (n <= 2e3 || r <= 2)) {
                                    this.sendLogsTimeout = setTimeout(i, t);
                                    return
                                }
                                var o = this.toTransmissionFormat(this.localLogs);
                                if (this.localLogs.length > 0) {
                                    this.debug && console.log(o);
                                    var u = this;
                                    this.currentTest ? $.ajax({
                                        contentType: "text/xml",
                                        type: "POST",
                                        data: o,
                                        url: "/guts-ab.php",
                                        cache: !1,
                                        async: e,
                                        success: function(e, t, n) {},
                                        error: function(e, t, n) {}
                                    }) : $.ajax({
                                        contentType: "text/xml",
                                        type: "POST",
                                        data: o,
                                        url: this.server,
                                        cache: !1,
                                        async: e,
                                        success: function(e, t, n) {},
                                        error: function(e, t, n) {}
                                    }), this.localLogs = []
                                }
                            }, this);
                        e ? this.sendLogsTimeout = setTimeout(i, t) : i()
                    },
                    toTransmissionFormat: function(e) {
                        var t = (new Date).getTime() + "\n",
                            n = {
                                result: t,
                                appID: this.appID
                            };
                        return _.forEach(e, function(t, n) {
                            var r = /\:/g,
                                i = /\\/g,
                                s = e[n];
                            this.result += this.appID + "	", this.result += s.lpID + "	";
                            var o = s.context;
                            _.forEach(o, function(e, t) {
                                o.hasOwnProperty(t) && (this.result += t + ":" + o[t].replace(i, "\\\\").replace(r, "\\:") + "	")
                            }, this);
                            var u = s.state;
                            _.forEach(u, function(e, t) {
                                u.hasOwnProperty(t) && (this.result += t + ":" + u[t].replace(i, "\\\\").replace(r, "\\:") + "	")
                            }, this), this.result += s.time + "\n"
                        }, n), n.result
                    },
                    gaSetCustomVariable: function(t, n, r, i) {
                        if (_.notDefined(t) || _.notDefined(n) || _.notDefined(r)) return console.warn("guts.gaSetCustomVariable: nonexistant slot, key, or value"), !1;
                        t = Number(t);
                        if (isNaN(t) || t < 1) return console.warn("guts.gaSetCustomVariable: invalid slot"), !1;
                        i = _.orEqual(i, 3), e._gaq && e._gaq.push && e._gaq.push(["_setCustomVar", t, n, r, i])
                    },
                    gaTrackEvent: function(t, n, r, i) {
                        if (_.notDefined(t) || _.notDefined(n)) {
                            console.warn("guts.gaTrackEvent: bad category or action", t, n);
                            return
                        }
                        r = "" + _.orEqual(r, ""), i = parseFloat("" + _.orEqual(i, ""), 10);
                        if (isNaN(i) || i === "") i = null;
                        e._gaq && e._gaq.push && (r && i ? e._gaq.push(["_trackEvent", t, n, r, i]) : r ? e._gaq.push(["_trackEvent", t, n, r]) : i ? e._gaq.push(["_trackEvent", t, n, null, i]) : e._gaq.push(["_trackEvent", t, n]))
                    },
                    handlePageLoad: function(e, t) {
                        var n = {};
                        n.destinationPageType = e;
                        switch (e) {
                        case "home":
                            t && t.redeemingPromoCard && (n.reason = "redeem"), t.notFound && (n.reason = "pageNotFound", this.logEvent("pageNotFound", {}));
                            break;
                        case "user":
                            n.destinationPageType = "user", n.destinationPageID = t.id, n.destinationSubpageType = t.section && !t.subpage ? t.section : t.subpage, n.destinationSubpageType = _.orEqual(n.destinationSubpageType, "profile");
                            break;
                        case "playlist":
                        case "album":
                        case "artist":
                            n.destinationPageID = t.id, n.destinationSubpageType = t.subpage, n.destinationSubpageType || (e == "album" ? n.destinationSubpageType = "tracklist" : e == "artist" && (n.destinationSubpageType = "overview"));
                            break;
                        case "search":
                            n.destinationSubpageType = t.type;
                            break;
                        case "song":
                            n.destinationPageID = t.id, n.destinationSubpageType = t.subpage;
                            break;
                        case "settings":
                            n.destinationSubpageType = _.orEqual(t.subpage, "profile");
                            break;
                        case "surveys":
                        case "popular":
                        case "explore":
                        case "trending":
                            t.subpage && (n.destinationSubpageType = t.subpage);
                        case "artistDashboard":
                            t.subpage && (n.destinationSubpageType = t.subpage), t.id && (n.destinationPageID = t.id);
                        case "static":
                            t.section && (n.destinationSubpageType = t.section)
                        }
                        this.pageParamsAreDifferent(n) && (this.logEvent("loadPage", n), this.beginContext({
                            currentPageType: n.destinationPageType
                        }), n.destinationSubpageType ? this.beginContext({
                            currentSubpage: n.destinationSubpageType
                        }) : this.endContext("currentSubpage"), n.destinationPageID ? this.beginContext({
                            currentPageID: n.destinationPageID
                        }) : this.endContext("currentPageID"))
                    },
                    startNewAutoplayContext: function(e, t, n, r) {
                        console.log("startNewAutoplayContext", arguments), this.clearAllAutoplayContexts(), this.beginContext({
                            autoplay: !0,
                            autoplayType: e,
                            autoplayID: t
                        }), n && r && this.beginContext({
                            autoplaySeedType: n,
                            autoplaySeedIDs: r
                        })
                    },
                    startAutoplayFallbackContext: function(e, t, n, r) {
                        console.log("startAutoplayFallbackContext", arguments), this.clearAutoplayFallbackContexts(), this.beginContext({
                            autoplayFallbackType: e,
                            autoplayFallbackID: t
                        }), n && r && this.beginContext({
                            autoplayFallbackSeedType: n,
                            autoplayFallbackSeedIDs: r
                        })
                    },
                    clearAllAutoplayContexts: function() {
                        console.log("clearAllAutoplayContexts"), this.endContext("autoplay"), this.endContext("autoplayType"), this.endContext("autoplayID"), this.endContext("autoplaySeedType"), this.endContext("autoplaySeedIDs"), this.clearAutoplayFallbackContexts()
                    },
                    clearAutoplayFallbackContexts: function() {
                        this.endContext("autoplayFallbackType"), this.endContext("autoplayFallbackID"), this.endContext("autoplayFallbackSeedType"), this.endContext("autoplayFallbackSeedIDs")
                    },
                    handlePlayerRestoreQueue: function() {
                        this.gaTrackEvent("player", "restoreQueue"), this.logEvent("restoreQueue")
                    },
                    handleAPIStats: function(e) {
                        this.shouldLog && (this.localStats.push(e), this.sendStats())
                    },
                    pageParamsAreDifferent: function(e) {
                        return !this.context.currentPageType || !this.context.currentSubpage || !this.context.currentPageID ? !0 : e && e.destinationPageType && e.destinationSubpageType && e.destinationPageID ? this.context.currentPageType != e.destinationPageType ? !0 : this.context.currentSubpage != e.destinationSubpageType ? !0 : this.context.currentPageID != e.destinationPageID ? !0 : !1 : !0
                    },
                    handleFieldClick: function(e, t, n, r) {
                        var i = {
                            songID: n,
                            rank: t
                        };
                        r !== null && r.length > 0 && (i.ppVersion = r);
                        var s = "";
                        e.indexOf("artist") > -1 ? s = "OLartistPageLoad" : e.indexOf("album") > -1 ? s = "OLalbumPageLoad" : s = "OLsongPageLoad", this.logEvent(s, i)
                    },
                    handleFeedEventClick: function(e, t) {
                        var n = {},
                            r = $(e)[0].tagName;
                        switch (r) {
                        case "A":
                            feedEvent = $(e).parents(".event");
                            if ($(e).attr("href")) {
                                var i = $(e).attr("href"),
                                    s = i.split("/");
                                n.clickedType = s[1], n.clickedID = s[3]
                            } else n.clickedType = $(e).attr("class");
                            break;
                        case "LI":
                            feedEvent = $(e).parents(".event");
                            var o = $(e).attr("class").split(" "),
                                u = o[o.length - 1];
                            u == "option" ? n.clickedType = "playSongs" : u == "show" && (n.clickedType = "showSongs");
                            break;
                        default:
                        }
                        n.rank = $(feedEvent).index() + 1;
                        var a = $(feedEvent).attr("class"),
                            s = a.split(" ");
                        n.whoseFeed = s[2].split("user")[1], _.forEach(s, function(e, t) {
                            s[t].indexOf("type") > -1 && (n.eventType = s[t].substring(4, s[t].length))
                        }, n);
                        var f = {},
                            l;
                        $('.what>a[class!="showSongs"]', feedEvent).each(function(e, t) {
                            var r = $(this).attr("href");
                            if (_.defined(r)) {
                                var i = r.split("/"),
                                    s = i[1];
                                f[s] ? f[s] += 1 : f[s] = 1;
                                var o = i[3];
                                n[s + f[s]] = o
                            }
                        });
                        var c = {};
                        $("#feed>li").each(function() {
                            a = $(this).attr("class"), s = a.split(" ");
                            var e = s[1].substring(4, s[1].length);
                            c[e] ? c[e] += 1 : c[e] = 1
                        });
                        var h = "";
                        _.forEach(c, function(e, t) {
                            h = h + t + ";" + e + ","
                        }, h), h = h.slice(0, h.length - 1), n.counts = h, this.logEvent("feedEventClick", n)
                    },
                    objectListPlayAdd: function(e, t, n) {
                        var r, i;
                        switch (n) {
                        case "play":
                            r = "OLPlayClick";
                            break;
                        case "add":
                            r = "OLAddClick";
                            break;
                        default:
                        }
                        var s, o = $("#grid .slick-row.selected", t);
                        o.length > 0 ? (i = "", $(o).each(function() {
                            s = parseInt($(this).attr("row"), 10), isNaN(s) || (i = i + (s + 1) + ",")
                        }), i = i.slice(0, i.length - 1), this.logEvent(r, {
                            songIDs: e,
                            ranks: i
                        })) : (i = "all", this.logEvent(r, {
                            songIDs: e,
                            ranks: i
                        }))
                    },
                    songItemLibraryClick: function(e) {
                        this.logEvent("OLlibraryClick", e)
                    },
                    songItemFavoriteClick: function(e) {
                        this.logEvent("OLfavoriteClick", e)
                    }
                }
            }(), function() {
                function s(t) {
                    e._gaq && e._gaq.push && e._gaq.push(["_trackSocial", "facebook", "like", t])
                }
                function o(t) {
                    e._gaq && e._gaq.push && e._gaq.push(["_trackSocial", "facebook", "unlike", t])
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var n = 0,
                    r = !1,
                    i;
                t.Services.Facebook = {
                    lastError: null,
                    loadFacebookJS: function() {
                        if (typeof e.FB == "object") {
                            r || this.onFacebookJSLoaded();
                            return
                        }
                        if ($.browser.msie && $.browser.version <= 6) return;
                        var t = null,
                            i = this;
                        n++;
                        try {
                            if ($("#facebook-js script").length) $("#facebook-js").empty(), $("#fb-root").empty(), e.FB = null;
                            else if (!document.getElementById("facebook-js")) {
                                var s = document.createElement("div");
                                s.id = "facebook-js", document.body.appendChild(s)
                            }
                            if (!document.getElementById("facebook-root")) {
                                var o = document.createElement("div");
                                o.id = "fb-root", document.body.appendChild(o)
                            }
                            var u = document.createElement("script");
                            u.async = !0, u.src = document.location.protocol + "//connect.facebook.net/en_US/all.js", e.fbAsyncInit = _.bind(this.onFacebookJSLoaded, this), document.getElementById("facebook-js").appendChild(u)
                        } catch (u) {
                            console.error("Could not load Facebook JS. Fatal Error: ", u)
                        }
                        t = setTimeout(function() {
                            !e.FB && n < 3 ? i.loadFacebookJS() : !e.FB && n >= 3
                        }, 2e4)
                    },
                    onFacebookJSLoaded: function() {
                        if (typeof e.FB != "object" || !e.FB) return;
                        r || e.FB.init({
                            appId: "111132365592157",
                            status: !1,
                            cookie: !1,
                            xfbml: !1,
                            oauth: !0,
                            channelUrl: "//" + e.location.hostname + "/channel.html"
                        }), r = !0, e.FB.Event.subscribe("edge.create", s), e.FB.Event.subscribe("edge.remove", o), this.parseWidgets()
                    },
                    parseWidgets: function(t) {
                        if (typeof e.FB != "object" || !e.FB) {
                            this.loadFacebookJS();
                            return
                        }
                        var n = $.Deferred();
                        return e.FB.XFBML.parse(t, function() {
                            n.resolve()
                        }), n.promise()
                    },
                    SERVICE_ID: 4,
                    FACEBOOK_ONLY_SERVICE_ID: 16,
                    loginDeferred: null,
                    APPLICATION_ID: "111132365592157",
                    PERMISSIONS: "offline_access,publish_stream,email,user_about_me,user_likes,user_interests,user_location,user_birthday,publish_actions",
                    REQUIRED_PERMISSIONS: "offline_access,publish_stream,email,user_about_me,user_location,user_birthday",
                    PUBLISH_PERMISSION: "publish_stream",
                    USER_ACTIONS: "publish_actions",
                    WALL_FAVORITES: 8,
                    WALL_PLAYLIST_CREATE: 16,
                    SCROBBLING_OFF_FLAG: 32,
                    AUTO_RATE_LIMIT: 18e6,
                    MINIMUM_DURATION: 15,
                    connected: !1,
                    userID: -1,
                    registeredWithFacebook: !1,
                    profile: {},
                    init: function(n) {
                        i = n, t.ready.done(_.bind(this.appReady, this)), this.LISTEN_APPLICATION_ID = "111132365592157";
                        if (e.location.host.indexOf("grooveshark.com") > -1 && this.APPLICATION_ID !== this.LISTEN_APPLICATION_ID || !this.APPLICATION_ID) this.APPLICATION_ID = this.LISTEN_APPLICATION_ID
                    },
                    appReady: function() {},
                    shareLink: function(t, n, r) {
                        var i = $.Deferred(),
                            s = _.getCenteredCoordinates(660, 360);
                        return e.open("http://facebook.com/share.php?u=" + encodeURIComponent(t) + "&ref=" + n + "Share", "", "width=660,height=360,left=" + s[0] + ",top=" + s[1]), i.resolve(null, !0), i.promise()
                    },
                    verifyFacebookUsername: function(e, n) {
                        return t.Services.API.verifyFacebookURL(e, n)
                    }
                }
            }(), function() {
                function m(e) {
                    e = _.orEqual(e, 3600), f = (new Date).getTime() + e * 1e3
                }
                function g(t) {
                    var n = !1,
                        r = "414496129962.apps.googleusercontent.com",
                        i = {
                            window: e.name,
                            flags: 0
                        };
                    t ? n = !0 : t = [], _.indexOf(t, "https://www.googleapis.com/auth/plus.moments.write") === -1 && (t.push("https://www.googleapis.com/auth/userinfo.profile"), t.push("https://www.googleapis.com/auth/userinfo.email"));
                    var s = "online",
                        o = "token",
                        u = "auto";
                    n && (s = "offline", o = "code", i.flags |= p, u = "force");
                    for (var a = 0; a < t.length; a++) i.flags |= v[t[a]];
                    return "https://accounts.google.com/o/oauth2/auth?response_type=" + o + "&client_id=" + r + "&redirect_uri=" + encodeURIComponent(e.location.protocol + "//" + e.location.hostname + "/googleCallback.php") + "&access_type=" + s + "&approval_prompt=" + u + "&scope=" + encodeURIComponent(t.join(" ")) + "&state=" + encodeURIComponent(JSON.stringify(i))
                }
                function y(e, t) {
                    var n = {
                        type: "http://schemas.google.com/ListenActivity",
                        target: {
                            url: t
                        }
                    };
                    b(e, n)
                }
                function b(n, r) {
                    (typeof e.gapi != "object" || !e.gapi || typeof e.gapi.client != "object") && t.Services.Google.loadGoogleAPIJS(), i.done(function() {
                        x().done(function() {
                            e.gapi.auth.setToken({
                                access_token: a,
                                expires_in: 3600
                            });
                            var t = {
                                path: "/plus/v1moments/people/me/moments/vault?debug=true",
                                method: "POST",
                                body: JSON.stringify(r),
                                callback: _.bind(w, this, n)
                            };
                            e.gapi.client.request(t)
                        })
                    })
                }
                function w(e, t) {
                    console.log("Moment write response", t), e && e.resolve(t)
                }
                function x() {
                    return S ? S.promise() : (S = $.Deferred(), !a || f < (new Date).getTime() ? ++E > 3 ? S.reject() : t.Services.API.getUserGoogleAccessToken().always(function(e) {
                        e && e.access_token ? (E = 0, a = e.access_token, m(), S.resolve()) : S.reject()
                    }) : S.resolve(), S.promise())
                }
                function T() {
                    (typeof e.gapi != "object" || !e.gapi || typeof e.gapi.client != "object") && t.Services.Google.loadGoogleAPIJS();
                    var n = new $.Deferred,
                        r = this;
                    return i.done(function() {
                        x().done(function() {
                            e.gapi.auth.setToken({
                                access_token: a,
                                expires_in: 3600
                            });
                            var t = {
                                path: "/oauth2/v2/userinfo",
                                method: "GET",
                                callback: _.bind(N, r, n)
                            };
                            e.gapi.client.request(t)
                        }).fail(_.bind(n.reject, n))
                    }).fail(_.bind(n.reject, n)), n.promise()
                }
                function N(e, n) {
                    n && n.name ? e.resolve(n) : (t.Services.Google.reset(), e.reject())
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var n = 0,
                    r = !1,
                    i = new $.Deferred,
                    s, o, u, a, f, l, c = !1,
                    h, p = 1,
                    d = 97,
                    v = {
                        "https://www.googleapis.com/auth/userinfo.profile": 0,
                        "https://www.googleapis.com/auth/userinfo.email": 0,
                        "https://apps-apis.google.com/a/feeds/alias/": 0,
                        "https://www.google.com/m8/feeds/": 8,
                        "https://www.googleapis.com/auth/plus.me": 16,
                        "https://www.googleapis.com/auth/plus.moments.write": 32
                    },
                    E = 0,
                    S = null;
                t.Services.Google = {
                    loadGooglePlusJS: function() {
                        if (typeof e.gapi == "object" && e.gapi && typeof e.gapi.plusone == "object") {
                            r || this.onGooglePlusJSLoaded();
                            return
                        }
                        if ($.browser.msie && $.browser.version <= 6) return;
                        var t = null,
                            i = this;
                        n++;
                        try {
                            if ($("#google-plus-js script").length) $("#google-plus-js").empty(), e.gapi = null;
                            else if (!document.getElementById("google-plus-js")) {
                                var s = document.createElement("div");
                                s.id = "google-plus-js", document.body.appendChild(s)
                            }
                            var o = document.createElement("script");
                            o.async = !0, o.src = document.location.protocol + "//apis.google.com/js/plusone.js?onload=onGAPIPlus", o.text = "{parsetags: 'explicit'}", e.onGAPIPlus = function() {
                                setTimeout(function() {
                                    if (e.gapi && e.gapi.plusone) {
                                        clearTimeout(t), i.onGooglePlusJSLoaded();
                                        try {
                                            delete e.onGAPIPlus
                                        } catch (n) {}
                                    }
                                }, 100)
                            }, document.getElementById("google-plus-js").appendChild(o)
                        } catch (o) {
                            console.error("Could not load Google Plus JS. Fatal Error: ", o)
                        }
                        t = setTimeout(function() {
                            !e.gapi && n < 3 ? i.loadGooglePlusJS() : (!e.gapi || !e.gapi.plusone) && n >= 3
                        }, 2e4)
                    },
                    onGooglePlusJSLoaded: function() {
                        if (typeof e.gapi != "object" || !e.gapi || typeof e.gapi.plusone != "object") return;
                        r = !0, this.parseWidgets()
                    },
                    parseWidgets: function(t) {
                        if (typeof e.gapi != "object" || !e.gapi || typeof e.gapi.plusone != "object") {
                            this.loadGooglePlusJS();
                            return
                        }
                        try {
                            e.gapi.plusone.go(t ? t : document.body)
                        } catch (n) {}
                    },
                    loadGoogleAPIJS: function() {
                        if (typeof e.gapi == "object" && e.gapi && typeof e.gapi.client == "object") {
                            i.state() === "pending" && this.onGoogleAPIJSLoaded();
                            return
                        }
                        if ($.browser.msie && $.browser.version <= 6) return;
                        var t = null,
                            r = this;
                        n++;
                        try {
                            if ($("#google-api-js script").length) $("#google-api-js").empty(), e.gapi = null;
                            else if (!document.getElementById("google-api-js")) {
                                var s = document.createElement("div");
                                s.id = "google-api-js", document.body.appendChild(s)
                            }
                            var o = document.createElement("script");
                            o.async = !0, o.src = document.location.protocol + "//apis.google.com/js/client.js?onload=onGAPIClient", e.onGAPIClient = function() {
                                setTimeout(function() {
                                    if (e.gapi && e.gapi.client) {
                                        clearTimeout(t), r.onGoogleAPIJSLoaded();
                                        try {
                                            delete e.onGAPIClient
                                        } catch (n) {}
                                    }
                                }, 100)
                            }, document.getElementById("google-api-js").appendChild(o)
                        } catch (o) {
                            console.error("Could not load Google+ API JS. Fatal Error: ", o)
                        }
                        t = setTimeout(function() {
                            (!e.gapi || !e.gapi.client) && n < 3 ? r.loadGoogleAPIJS() : (!e.gapi || !e.gapi.client) && n >= 3
                        }, 2e4)
                    },
                    onGoogleAPIJSLoaded: function() {
                        if (typeof e.gapi != "object" || !e.gapi || typeof e.gapi.client != "object") return;
                        i.resolve()
                    },
                    SERVICE_ID: 64,
                    GOOGLE_ONLY_SERVICE_ID: 32,
                    MINIMUM_DURATION: 120,
                    GOOGLE_PLUS_FLAG: 16,
                    connected: !1,
                    registeredWithGoogle: !1,
                    profile: {},
                    loginDeferred: null,
                    lastError: "",
                    onLoginSaveData: null,
                    init: function(e) {
                        o = e, o.model.on("change:user", this.onUserChange, this), l = o.model.get("player"), t.ready.done(_.bind(this.appReady, this))
                    },
                    appReady: function() {
                        this.onUserChange()
                    },
                    reset: function() {
                        this.connected = !1, this.profile = {}, this.registeredWithGoogle = !1, a = null, f = null, i.state() === "resolved" && e.gapi.auth.setToken(null), this.suspendScrobbling(), h = null, S = null, t.trigger("google:profile:update")
                    },
                    onUserChange: function() {
                        u && u.off("change:extraData", this.onUserDataChange, this), u = o.model.get("user"), this.reset(), typeof u.get("extraData") == "undefined" ? u.on("change:extraData", this.onUserDataChange, this) : this.onUserDataChange()
                    },
                    onUserDataChange: function() {
                        if (u && u.get("isLoggedIn") && (u.get("Flags") & this.SERVICE_ID || u.get("Flags") & this.GOOGLE_ONLY_SERVICE_ID)) {
                            this.registeredWithGoogle = (u.get("Flags") & this.GOOGLE_ONLY_SERVICE_ID) > 0;
                            var e = u.get("extraData");
                            e && e.Google ? this.onUserGoogleData(e.Google) : gsConfig.runMode !== "production" && console.error("Supposed to have Google data for auth user but undefined!!", u, e)
                        }
                    },
                    onUserGoogleData: function(e) {
                        var n = $.Deferred();
                        try {
                            e && (e.GoogleUID || e.GoogleEmailAddress) ? (S = null, this.profile = {}, this.profile.email = _.orEqual(e.GoogleEmailAddress, null), this.profile.flags = parseInt(e.Flags, 10), this.profile.id = _.orEqual(e.GoogleUID, null), this.profile.flags & this.SCROBBLING_FLAG && this.enableScrobbling(), this.connected = !0, n.resolve(), t.trigger("google:profile:update")) : (gsConfig.runMode !== "production" && console.error("onUserGoogleData returned invalid resp:", e), this.onAuthError("onUserGoogleData returned invalid resp", n), n.reject({
                                error: "GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"
                            }));
                            return
                        } catch (r) {
                            gsConfig.runMode !== "production" && console.error("onUserGoogleData exception thrown:", r)
                        }
                        return this.reset(), n.reject({
                            error: "GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"
                        }), n.promise()
                    },
                    removeFromUser: function() {
                        var e = $.Deferred();
                        return this.profile && this.profile.googleUID && this.profile.email ? t.Services.API.removeUserGoogleData(this.profile.id, this.profile.email, _.bind(this.onRemovedFromUser, this, e)) : this.profile && this.profile.email ? t.Services.API.removeUserGoogleData(null, this.profile.email, _.bind(this.onRemovedFromUser, this, e)) : t.Services.API.removeUserGoogleData(null, _.bind(this.onRemovedFromUser, this, e)), e.promise()
                    },
                    onRemovedFromUser: function(e, t) {
                        if (!t || !t.success) {
                            e.reject();
                            return
                        }
                        var n = u.get("Flags");
                        u.set("Flags", (n | this.SERVICE_ID) - this.SERVICE_ID), this.reset(), e.resolve()
                    },
                    login: function() {
                        var n = $.Deferred(),
                            r = _.getCenteredCoordinates(430, 560);
                        return s = e.open(g(), "", "width=430,height=560,status=1,location=1,resizable=yes,left=" + r[0] + ",top=" + r[1]), this.loginDeferred = $.Deferred(), this.loginDeferred.always(_.bind(this.onLogin, this, n)), t.airbridge && t.airbridge.isDesktop && (s.parentSandboxBridge = {
                            confirmGoogleConnection: e.confirmGoogleConnection
                        }), n.promise()
                    },
                    loginWithGooglePlus: function(n) {
                        var r = $.Deferred(),
                            i = _.getCenteredCoordinates(430, 600),
                            o = ["https://www.googleapis.com/auth/plus.me"];
                        return n && o.push("https://www.googleapis.com/auth/plus.moments.write"), s = e.open(g(o), "", "width=430,height=600,status=1,location=1,resizable=yes,left=" + i[0] + ",top=" + i[1]), this.loginDeferred = $.Deferred(), this.loginDeferred.always(_.bind(this.onLogin, this, r)), t.airbridge && t.airbridge.isDesktop && (s.parentSandboxBridge = {
                            confirmGoogleConnection: e.confirmGoogleConnection
                        }), r.promise()
                    },
                    onLogin: function(e, n) {
                        if (n.error || !n.email) e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"
                        });
                        else {
                            if (!n.id || !n.email || !n.access_token) {
                                e.reject({
                                    error: "LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"
                                });
                                return
                            }
                            var r = 0;
                            this.profile && this.profile.flags && (r = this.profile.flags), S = null, this.profile = n, this.profile.flags = r, n.state && n.state.flags && (this.profile.flags |= n.state.flags), this.profile.flags & this.SCROBBLING_FLAG && this.enableScrobbling(), a = n.access_token, m(n.expires_in), delete this.profile.access_token, delete this.profile.expires_in, u.get("isLoggedIn") ? n.stored ? this.onSaveUserGoogleData(e, 1) : u.get("Flags") & this.SERVICE_ID || u.get("Flags") & this.GOOGLE_ONLY_SERVICE_ID ? t.Services.API.updateUserGoogleData(n.id, n.email, this.profile.flags).done(_.bind(this.onSaveUserGoogleData, this, e)).fail(_.bind(e, reject, e)) : t.Services.API.saveUserGoogleData(n.id, n.email, this.profile.flags).done(_.bind(this.onSaveUserGoogleData, this, e)).fail(_.bind(e, reject, e)) : t.Services.API.authenticateGoogleUser(n.id, n.email, a).done(_.bind(this.onAuthGoogleUser, this, e)).fail(_.bind(e, reject, e))
                        }
                    },
                    onAuthGoogleUser: function(e, n) {
                        n ? n.userID <= 0 ? this.register(e) : (n.accessToken = a, e.resolve(n), t.trigger("google:profile:update")) : e.reject({
                            error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"
                        })
                    },
                    onSaveUserGoogleData: function(e, n) {
                        if (n == 1) {
                            this.connected = !0, t.trigger("google:profile:update"), n = {
                                result: n
                            }, n.accessToken = a, e.resolve(n);
                            var r = u.get("Flags");
                            u.set("Flags", r | this.SERVICE_ID)
                        } else n === -1 ? e.reject({
                            error: "GOOGLE_DUPLICATE_ACCOUNT_ERROR_MSG",
                            signupError: 4096
                        }) : n === -2 ? e.reject({
                            error: "GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"
                        }) : e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"
                        })
                    },
                    connectionLogout: function() {
                        var t = _.getCenteredCoordinates(890, 600);
                        e.open("https://www.google.com/accounts/Logout", "", "width=890,height=600,status=1,location=1,resizable=yes,left=" + t[0] + ",top=" + t[1])
                    },
                    getGoogleUserInfo: function(e, t) {
                        if (t && t.access_token) {
                            var n = "https://www.googleapis.com/oauth2/v2/userinfo?access_token=" + t.access_token;
                            $.ajax({
                                url: n,
                                success: function(n) {
                                    $.extend(t, n), e.resolve(t)
                                },
                                error: _.bind(function(t) {
                                    e.reject(t)
                                }),
                                dataType: "jsonp",
                                cache: !0
                            })
                        } else e.reject(t)
                    },
                    loadGoogleProfile: function() {
                        var e = new $.Deferred;
                        return this.connected ? this.profile.name ? e.resolve(this.profile) : T().done(_.bind(function(n) {
                            $.extend(this.profile, n), e.resolve(this.profile), t.trigger("google:profile:update")
                        }, this)).fail(_.bind(e.reject, e)) : e.reject(), e.promise()
                    },
                    register: function(e) {
                        if (!this.profile || !this.profile.email) {
                            e.reject({
                                error: "LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"
                            });
                            return
                        }
                        var n = this.profile.email.split("@"),
                            r = n[0];
                        r && (r = r.replace(/^[\.\-_]|[^a-zA-Z0-9\.\-_]|[\.\-_]$/g, ""), r = r.replace(/([\.\-_]){2,}/g, "$1"));
                        var i = this.profile.name,
                            s = this.profile.id || Math.floor(Math.random() * 997508) + 1005;
                        i || r ? t.Services.API.getUsernameSuggestions(r, i, s).done(_.bind(this.openRegisterLightbox, this, e)).fail(_.bind(function(t) {
                            e.reject({
                                error: "LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"
                            })
                        }, this, e)) : e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"
                        })
                    },
                    openRegisterLightbox: function(e, n) {
                        var r = "";
                        this.profile.gender === "male" ? r = "M" : this.profile.gender === "female" && (r = "F");
                        var i = 0,
                            s = 0,
                            o = 0;
                        if (this.profile.birthday) {
                            var u = this.profile.birthday.split("-");
                            s = parseInt(u[0], 10), i = parseInt(u[1], 10), o = parseInt(u[2], 10)
                        }
                        var f = {
                            signupType: "google",
                            details: {
                                accessToken: a,
                                googleEmailAddress: this.profile.email,
                                googleUID: this.profile.id
                            },
                            values: {
                                username: _.orEqual(n[0], ""),
                                email: this.profile.email,
                                name: this.profile.name,
                                gender: r,
                                month: i,
                                day: o,
                                year: s
                            }
                        };
                        t.trigger("lightbox:close"), t.trigger("lightbox:open", "signup", f)
                    },
                    shareLink: function(t, n, r) {
                        var i = $.Deferred(),
                            s = _.getCenteredCoordinates(720, 420);
                        return e.open("https://plus.google.com/share?url=" + encodeURIComponent(t), "", "width=720,height=420,left=" + s[0] + ",top=" + s[1]), i.resolve(null, !0), i.promise()
                    },
                    suspendScrobbling: function() {
                        this.profile && (this.profile.scrobblingEnabled = !1), c && (l.off("change:playStatus", this.onPlayStatusChange, this), l.off("change:position", this.onPositionChange, this), c = !1)
                    },
                    enableScrobbling: function() {
                        this.profile.scrobblingEnabled = !0, l && !c && (l.on("change:playStatus", this.onPlayStatusChange, this), l.on("change:position", this.onPositionChange, this), c = !0, this.onPlayStatusChange())
                    },
                    shouldScrobble: function() {
                        return this.profile && this.profile.flags & d && this.profile.scrobblingEnabled
                    },
                    onPlayStatusChange: function() {
                        if (!this.shouldScrobble() || !a || l.get("playStatus") !== t.Models.Player.playStatuses.PLAYING) return;
                        var e = l.get("currentQueue").get("activeSong");
                        if (!e || typeof e.get("queueSongID") != "number") {
                            h = null;
                            return
                        }
                        if ( !! h && e.get("queueSongID") === h.queueSongID && e.get("SongID") === h.songID) return;
                        h = {
                            songID: e.get("SongID"),
                            queueSongID: e.get("queueSongID"),
                            secondsListened: 0,
                            scrobbled: !1
                        }
                    },
                    onPositionChange: function() {
                        if (!this.shouldScrobble() || !a || l.get("playStatus") !== t.Models.Player.playStatuses.PLAYING) return;
                        var e = l.get("currentQueue").get("activeSong");
                        if (!e || typeof e.get("queueSongID") != "number") {
                            h = null;
                            return
                        }
                        if (!h || e.get("queueSongID") !== h.queueSongID || e.get("SongID") !== h.songID) return;
                        h.secondsListened += .5;
                        if (l.get("duration") > this.MINIMUM_DURATION * 1e3 && h.secondsListened > 30 && !h.scrobbled) {
                            h.scrobbled = !0;
                            var n = e.toUrl();
                            if (n.toLowerCase().indexOf("notfound") > -1) return;
                            n = n.replace("#!/", "http://grooveshark.com/"), y(null, n)
                        }
                    }
                }, e.confirmGoogleConnection || (e.confirmGoogleConnection = function(n) {
                    s && (s.close(), s = null);
                    var r = t.Services.Google.loginDeferred;
                    if (!r) return;
                    try {
                        n = $.parseJSON(n)
                    } catch (i) {
                        r.reject({
                            error: "parseError"
                        });
                        return
                    }
                    n.mode === "cancel" || n.error === "cancel" ? r.reject({
                        error: "cancel"
                    }) : t.airbridge && t.airbridge.isDesktop ? e.setTimeout(function() {
                        r.resolve(n)
                    }, 300) : t.Services.Google.getGoogleUserInfo(r, n)
                })
            }(), function() {
                function l(e, t, n) {
                    gsConfig.runMode !== "production" && console.log("onPostTweet", t, n), n.success && n.response.id ? e.resolve(n.response.id, !1) : c(e, n)
                }
                function c(e, t) {
                    var n = {
                        error: "POPUP_SHARE_TWITTER_ERROR"
                    };
                    t.response && t.response.error && t.response.error.indexOf("Status is over 140 characters.") > -1 ? n.error = "POPUP_SHARE_TWITTER_TOO_LONG" : gsConfig.runMode !== "production" && console.error("postTwitterStatus returned unexpected resp:", t), e.reject(n)
                }
                var n = e.GS = e.GS || {};
                n.Services = n.Services || {};
                var r = 0,
                    i = !1,
                    s = null,
                    o = null,
                    u, a, f;
                n.Services.Twitter = {
                    lastError: null,
                    loadTwitterJS: function() {
                        if (typeof e.twttr == "object") {
                            i || this.onTwitterJSLoaded();
                            return
                        }
                        if ($.browser.msie && $.browser.version <= 6) return;
                        var t = null,
                            n = this;
                        r++;
                        try {
                            if ($("#twitter-js script").length) $("#twitter-js").empty(), e.twttr = null;
                            else if (!document.getElementById("twitter-js")) {
                                var s = document.createElement("div");
                                s.id = "twitter-js", document.body.appendChild(s)
                            }
                            var o = document.createElement("script");
                            o.async = !0, o.src = document.location.protocol + "//platform.twitter.com/widgets.js";
                            var u = function() {
                                    if ($.browser.msie && this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") return;
                                    this.onload = this.onreadystatechange = null, setTimeout(function() {
                                        e.twttr && (clearTimeout(t), n.onTwitterJSLoaded())
                                    }, 100)
                                };
                            o.onload = o.onreadystatechange = u, document.getElementById("twitter-js").appendChild(o)
                        } catch (o) {
                            console.error("Could not load Twitter JS. Fatal Error: ", o)
                        }
                        t = setTimeout(function() {
                            !e.twttr && r < 3 ? n.loadTwitterJS() : !e.twttr && r >= 3
                        }, 2e4)
                    },
                    onTwitterJSLoaded: function() {
                        if (typeof e.twttr != "object" || !e.twttr) return;
                        i = !0, e.twttr.events.bind("tweet", function(t) {
                            if (t) {
                                var n;
                                if (t.target && t.target.nodeName === "IFRAME" && t.target.src) {
                                    var r = decodeURI(t.target.src),
                                        i = r.split("&");
                                    for (var s = 0, o; o = i[s]; ++s) o.indexOf("url=") === 0 && (n = unescape(o.split("=")[1]))
                                }
                                e._gaq && e._gaq.push && e._gaq.push(["_trackSocial", "twitter", "tweet", n])
                            }
                        }), this.parseWidgets()
                    },
                    parseWidgets: function() {
                        if (typeof e.twttr != "object" || !e.twttr) {
                            this.loadTwitterJS();
                            return
                        }
                        e.twttr.widgets.load()
                    },
                    getTwitterShareMessage: function(e, t, n, r) {
                        var i = $.Deferred(),
                            s = "",
                            o = "",
                            u = n && n.length ? 25 : 0;
                        switch (e) {
                        case "song":
                            s = t.get("SongName"), s.length > 40 && (s = s.substr(0, 40) + "..."), o = _.getString("SHARE_TWITTER_SONG", {
                                SongName: s,
                                ArtistName: t.get("ArtistName")
                            });
                            break;
                        case "artist":
                            s = t.get("ArtistName"), s.length > 60 && (s = s.substr(0, 60) + "..."), o = _.getString("SHARE_TWITTER_ARTIST", {
                                ArtistName: s
                            });
                            break;
                        case "album":
                            s = t.get("AlbumName"), s.length > 40 && (s = s.substr(0, 40) + "..."), o = _.getString("SHARE_TWITTER_ALBUM", {
                                AlbumName: s,
                                ArtistName: t.get("ArtistName")
                            });
                            break;
                        case "playlist":
                            s = t.get("PlaylistName"), s.length > 40 && (s = s.substr(0, 40) + "..."), o = _.getString("SHARE_TWITTER_PLAYLIST", {
                                PlaylistName: s,
                                UserName: t.get("UserName")
                            });
                            break;
                        case "broadcast":
                            s = t.get("Name");
                            if (t.isLoggedInUserOwner()) {
                                o = _.getString("SHARE_TWITTER_BROADCAST", {
                                    BroadcastName: s
                                });
                                if (o > 140 - u - 18) {
                                    var a = _.getString("SHARE_TWITTER_BROADCAST", {
                                        BroadcastName: ""
                                    }),
                                        f;
                                    s > 140 - u - 1 && (f = s.substr(0, 140 - u - 3 - a.length) + "..."), o = _.getString("SHARE_TWITTER_BROADCAST", {
                                        BroadcastName: f
                                    })
                                }
                            } else o = _.getString("SHARE_TWITTER_BROADCAST_OTHER");
                            break;
                        case "user":
                            s = t.get("Name"), s.length > 40 && (s = s.substr(0, 40) + "..."), o = _.getString("SHARE_TWITTER_USER", {
                                UserName: t.get("Name")
                            })
                        }
                        return o.length < 128 - u - 18 ? o += " #nowplaying" : o.length < 137 - u - 18 && (o += " #np"), o.length < 127 - u - 18 && (new Date).format("D") === "Mon" && (o += " #musicmonday"), o.length < 130 - u - 18 && (new Date).format("D") === "Tue" && (o += " #tunesday"), i.resolve(o, n), i.promise()
                    },
                    SERVICE_ID: 4096,
                    TWITTER_ONLY_SERVICE_ID: 8192,
                    loginDeferred: null,
                    connected: !1,
                    registeredWithTwitter: !1,
                    profile: {},
                    friendIDs: [],
                    friends: {},
                    followerIDs: [],
                    followers: {},
                    init: function(e) {
                        a = e, a.model.on("change:user", this.onUserChange, this), n.ready.done(_.bind(this.appReady, this))
                    },
                    appReady: function() {
                        this.onUserChange()
                    },
                    reset: function() {
                        this.connected = !1, s = null, o = null, this.profile = {}, this.registeredWithTwitter = !1, this.friendIDs = [], this.friends = {}, this.friendCount = 0, this.followers = {}, this.followerIDs = [], this.followerCount = 0, n.trigger("twitter:profile:update")
                    },
                    onUserChange: function() {
                        f && f.off("change:extraData", this.onUserDataChange, this), f = a.model.get("user"), this.reset(), typeof f.get("extraData") == "undefined" ? f.on("change:extraData", this.onUserDataChange, this) : this.onUserDataChange()
                    },
                    onUserDataChange: function() {
                        if (f && f.get("isLoggedIn") && (f.get("Flags") & this.SERVICE_ID || f.get("Flags") & this.TWITTER_ONLY_SERVICE_ID)) {
                            this.registeredWithTwitter = (f.get("Flags") & this.TWITTER_ONLY_SERVICE_ID) > 0;
                            var e = f.get("extraData");
                            e && e.Twitter ? this.onUserTwitterData(e.Twitter) : gsConfig.runMode !== "production" && console.error("Supposed to have Twitter data for auth user but undefined!!", f, e)
                        }
                    },
                    onUserTwitterData: function(e) {
                        var t = $.Deferred();
                        try {
                            if (e) {
                                e.TwitterUserID && e.OAuthToken && e.OAuthSecret && e.twitterProfileURL ? (this.profile = {
                                    id_str: e.TwitterUserID
                                }, s = e.OAuthToken, o = e.OAuthSecret, this.loadUserProfile(e.twitterProfileURL, e.twitterProfileCallback, t)) : (gsConfig.runMode !== "production" && console.error("onUserTwitterData returned invalid resp:", e), this.onAuthError(t, "onUserTwitterData returned invalid resp"), t.reject({
                                    error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"
                                }));
                                return
                            }
                        } catch (n) {
                            gsConfig.runMode !== "production" && console.error("onUserTwitterData exception thrown:", n)
                        }
                        return this.reset(), t.reject({
                            error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"
                        }), t.promise()
                    },
                    onAuthError: function(e, t) {
                        console.log("onAuthError", t, e), e && e.reject()
                    },
                    removeFromUser: function() {
                        var e = $.Deferred();
                        return this.profile && this.profile.id_str ? n.Services.API.removeUserTwitterData(this.profile.id_str, _.bind(this.onRemovedFromUser, this, e)) : n.Services.API.removeUserTwitterData(null, _.bind(this.onRemovedFromUser, this, e)), e.promise()
                    },
                    onRemovedFromUser: function(e, t) {
                        if (!t || !t.success) {
                            e.reject();
                            return
                        }
                        var n = f.get("Flags");
                        f.set("Flags", (n | this.SERVICE_ID) - this.SERVICE_ID), this.reset(), e.resolve()
                    },
                    loadUserProfile: function(e, t, n) {
                        var r = !1;
                        n || (n = $.Deferred(), r = !0), $.ajax({
                            url: e,
                            success: _.bind(this.onUserProfile, this, n),
                            error: _.bind(this.onAuthError, this, n),
                            dataType: "jsonp",
                            jsonp: !1,
                            jsonpCallback: t,
                            cache: !0
                        });
                        if (r) return n.promise()
                    },
                    onUserProfile: function(e, r) {
                        r.id_str && r.profile_image_url ? (this.profile = r, this.connected = !0, n.trigger("twitter:profile:update"), e.resolve()) : (gsConfig.runMode !== "production" && console.error("onUserProfile returned unexpected resp:", r), this.onAuthError(t, "onUserProfile returned unexpected resp"), e.reject({
                            error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"
                        }))
                    },
                    login: function(t) {
                        var r = $.Deferred(),
                            i = _.getCenteredCoordinates(650, 600);
                        return u = e.open("http://" + e.location.host + "/twitterCallback.php?window=" + e.name, "", "width=650,height=600,left=" + i[0] + ",top=" + i[1]), this.loginDeferred = $.Deferred(), this.loginDeferred.always(_.bind(this.onLogin, this, r, t)), n.airbridge && n.airbridge.isDesktop && (u.parentSandboxBridge = {
                            confirmTwitterConnection: e.confirmTwitterConnection
                        }), r.promise()
                    },
                    onLogin: function(e, t, r) {
                        console.log("Twitter:onLogin", r);
                        if (r.error) e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR"
                        });
                        else {
                            if (!r.oauth_token || !r.oauth_token_secret) {
                                e.reject({
                                    error: "LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR"
                                });
                                return
                            }
                            if (t) {
                                e.resolve(r);
                                return
                            }
                            s = r.oauth_token, o = r.oauth_token_secret, delete r.oauth_token, delete r.oauth_token_secret, this.profile = r, f.get("isLoggedIn") ? f.get("Flags") & this.SERVICE_ID || f.get("Flags") & this.TWITTER_ONLY_SERVICE_ID ? n.Services.API.updateUserTwitterData(this.profile.id_str, s, o).done(_.bind(this.onSaveUserTwitterData, this, e)).fail(_.bind(e, reject, e)) : n.Services.API.saveUserTwitterData(this.profile.id_str, s, o).done(_.bind(this.onSaveUserTwitterData, this, e)).fail(_.bind(e, reject, e)) : n.Services.API.authenticateTwitterUser(this.profile.id_str, s, o).done(_.bind(this.onAuthTwitterUser, this, e)).fail(_.bind(e, reject, e))
                        }
                    },
                    onAuthTwitterUser: function(e, t) {
                        console.log("onAuthTwitterUser", t), t && t.TwitterProfile && t.TwitterProfile.name ? (this.profile = t.TwitterProfile, t.userID <= 0 ? this.register(e) : (t.oauthToken = s, t.oauthSecret = o, e.resolve(t), n.trigger("twitter:profile:update"))) : e.reject({
                            error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"
                        })
                    },
                    onSaveUserTwitterData: function(e, t) {
                        console.log("onSaveUserTwitterData", t);
                        if (t.result == 1 && t.twitterProfileURL && t.twitterProfileCallback) {
                            this.loadUserProfile(t.twitterProfileURL, t.twitterProfileCallback), t.oauthToken = s, t.oauthSecret = o, e.resolve(t);
                            var n = f.get("Flags");
                            !(n & this.SERVICE_ID) && !(n & this.TWITTER_ONLY_SERVICE_ID), f.set("Flags", n | this.SERVICE_ID)
                        } else t.result === -1 ? e.reject({
                            error: "TWITTER_DUPLICATE_ACCOUNT_ERROR_MSG"
                        }) : t.result === -2 ? e.reject({
                            error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"
                        }) : e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR"
                        })
                    },
                    connectionLogout: function() {
                        var t = _.getCenteredCoordinates(1e3, 580);
                        e.open("https://twitter.com/logout", "", "width=1000,height=580,status=1,location=1,resizable=yes,left=" + t[0] + ",top=" + t[1])
                    },
                    register: function(e) {
                        if (!this.profile || !this.profile.screen_name) {
                            e.reject({
                                error: "LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR"
                            });
                            return
                        }
                        var t = this.profile.screen_name,
                            r = _.orEqual(this.profile.name, ""),
                            i = this.profile.id_str || Math.floor(Math.random() * 997508) + 1005;
                        r || t ? n.Services.API.getUsernameSuggestions(t, r, i).done(_.bind(this.openRegisterLightbox, this, e)).fail(_.bind(function(t) {
                            e.reject({
                                error: "LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR"
                            })
                        }, this, e)) : e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_TWITTER_ERROR"
                        })
                    },
                    openRegisterLightbox: function(e, t) {
                        var r = {
                            signupType: "twitter",
                            details: {
                                oauthToken: s,
                                oauthSecret: o,
                                twitterUserID: this.profile.id
                            },
                            values: {
                                username: _.orEqual(t[0], ""),
                                name: this.profile.name
                            }
                        };
                        n.trigger("lightbox:close"), n.trigger("lightbox:open", "signup", r)
                    },
                    shareLink: function(t, n, r) {
                        if (r.lastIndexOf(t) < 0) return $.Deferred().reject().promise();
                        if (s && o) return this.postTweet(r, n);
                        var i = $.Deferred(),
                            u = _.getCenteredCoordinates(700, 280);
                        return r = r.replace(t, ""), e.open("http://twitter.com/share?related=grooveshark&via=grooveshark&url=" + encodeURIComponent(t) + "&text=" + encodeURIComponent(r), "", "width=700,height=280,left=" + u[0] + ",top=" + u[1]), i.resolve(null, !0), i.promise()
                    },
                    postTweet: function(e, t) {
                        var r = $.Deferred();
                        return s && o ? (e.length < 123 && (e += " via @grooveshark"), n.Services.API.postTwitterStatus(e, s, o, _.bind(l, this, r, t), _.bind(c, this, r, t))) : r.reject(), r.promise()
                    },
                    getFollowers: function() {
                        var e = $.Deferred();
                        if (this.followerIDs.length && this.followers) e.resolve(this.followerIDs, this.followers);
                        else if (s && o) {
                            var t = this;
                            n.Services.API.getTwitterFollowers(this.profile.id_str, s, o, function(n) {
                                t.followerIDs = [], t.followers = {};
                                if (n.requests.length && n.ids.length) {
                                    var r = {
                                        remaining: n.requests.length,
                                        total: n.requests.length,
                                        errors: 0
                                    };
                                    for (var i = 0, s = n.requests.length; i < s; i++) $.ajax({
                                        url: n.requests[i].url,
                                        dataType: "jsonp",
                                        jsonp: !1,
                                        jsonpCallback: n.requests[i].callback,
                                        cache: !0
                                    }).always(_.bind(t.onGetFollowers, t, e, n.ids, r))
                                } else e.resolve(n.ids, t.followers)
                            }, function(t) {
                                e.reject()
                            })
                        } else e.reject();
                        return e.promise()
                    },
                    onGetFollowers: function(e, t, n, r, i) {
                        if (i === "success" && r && r.length) {
                            var s = {};
                            _.forEach(r, _.bind(function(e) {
                                this.followers[e.id_str] = e, s[e.id_str] = e
                            }, this)), e.notify(s, this.followers)
                        } else n.errors++;
                        n.remaining--;
                        if (!n.remaining) {
                            if (n.errors === n.total) {
                                e.reject();
                                return
                            }
                            this.followerIDs = t, e.resolve(t, this.followers)
                        }
                    },
                    getFriends: function() {
                        var e = $.Deferred();
                        if (this.friendIDs.length && this.friends) e.resolve(this.friendIDs, this.friends);
                        else if (s && o) {
                            var t = this;
                            n.Services.API.getTwitterFriends(this.profile.id_str, s, o, function(n) {
                                t.friendIDs = [], t.friends = {};
                                if (n.requests.length && n.ids.length) {
                                    var r = {
                                        remaining: n.requests.length,
                                        total: n.requests.length,
                                        errors: 0
                                    };
                                    for (var i = 0, s = n.requests.length; i < s; i++) $.ajax({
                                        url: n.requests[i].url,
                                        dataType: "jsonp",
                                        jsonp: !1,
                                        jsonpCallback: n.requests[i].callback,
                                        cache: !0
                                    }).always(_.bind(t.onGetFriends, t, e, n.ids, r))
                                } else e.resolve(n.ids, t.friends)
                            }, function(t) {
                                e.reject()
                            })
                        } else e.reject();
                        return e.promise()
                    },
                    onGetFriends: function(e, t, n, r, i) {
                        if (i === "success" && r && r.length) {
                            r = $.parseJSON(r);
                            var s = {};
                            _.forEach(r, _.bind(function(e) {
                                this.friends[e.id_str] = e, s[e.id_str] = e
                            }, this)), e.notify(s, this.friends)
                        } else n.errors++;
                        n.remaining--;
                        if (!n.remaining) {
                            if (n.errors === n.total) {
                                e.reject();
                                return
                            }
                            this.friendIDs = t, e.resolve(t, this.friends)
                        }
                    },
                    getGroovesharkUsersFromFollowing: function() {
                        var e = $.Deferred();
                        return this.getFollowing(this.callback(function(t) {
                            t ? n.Services.API.getGroovesharkUsersFromTwitterUserIDs(t, _.bind(this.onGetGroovesharkUsers, this, e), function() {
                                $.publish("gs.notification", {
                                    type: "error",
                                    message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")
                                }), e.reject()
                            }) : ($.publish("gs.notification", {
                                type: "error",
                                message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")
                            }), e.reject())
                        }), function() {
                            $.publish("gs.notification", {
                                type: "error",
                                message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")
                            }), e.reject()
                        }), e.promise()
                    },
                    onGetGroovesharkUsers: function(e, t) {
                        var r = [],
                            i = !1;
                        if (t) {
                            $.each(t, function(e, t) {
                                t && t.UserID && t.TwitterUserID && f.get("favorites").users && !f.get("favorites").users[t.UserID] ? (t.TwitterProfile = n.getTwitter().friends[t.TwitterUserID], r.push(t)) : f.get("favorites").users && f.get("favorites").users[t.UserID] && (i = !0)
                            }), r && r.length > 0 ? e.resolve(r, "twitter") : i;
                            return
                        }
                        e.reject()
                    }
                }, e.confirmTwitterConnection || (e.confirmTwitterConnection = function(t) {
                    console.log("twitter confirm connection", t), u && (u.close(), u = null);
                    var r = n.Services.Twitter.loginDeferred;
                    if (!r) return;
                    try {
                        t = $.parseJSON(t)
                    } catch (i) {
                        r.reject({
                            error: "parseError"
                        });
                        return
                    }
                    t.mode === "cancel" || t.error === "cancel" ? r.reject({
                        error: "cancel"
                    }) : n.airbridge && n.airbridge.isDesktop ? e.setTimeout(function() {
                        r.resolve(t)
                    }, 300) : r.resolve(t)
                })
            }(), function() {
                function l(e, n) {
                    var r = new $.Deferred;
                    return e ? (n.format = "json", $.ajax({
                        url: e,
                        data: n,
                        success: _.bind(c, this, r),
                        error: _.bind(h, this, r),
                        dataType: "jsonp",
                        cache: !0
                    })) : t.Services.API.makeLastfmRequest(n, _.bind(c, this, r), _.bind(h, this, r)), r.promise()
                }
                function c(e, t) {
                    if (typeof t != "object") try {
                        t = $.parseJSON(t)
                    } catch (n) {}
                    if (t && t.error) {
                        h(e, t);
                        return
                    }
                    e && e.resolve(t)
                }
                function h(e, t) {
                    if (typeof t != "object") try {
                        t = $.parseJSON(t)
                    } catch (n) {}
                    e && e.reject(t)
                }
                function p(e) {
                    e.user ? ($.extend(this.profile, e.user), this.connected = !0, t.trigger("lastfm:profile:update")) : d(e)
                }
                function d(e) {
                    this.reset()
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var n, r, i, s, o, u, a = !1,
                    f;
                t.Services.Lastfm = {
                    SERVICE_ID: 2,
                    API_KEY: "b1ecfd8a5f8ec4dbb4cdacb8f3638f6d",
                    loginDeferred: null,
                    P_VERSION: "1.2.1",
                    URL_USER_AUTH: "http://www.last.fm/api/auth",
                    URL_AUDIOSCROBBLER: "http://ws.audioscrobbler.com/2.0/",
                    CLIENT_ID: "gvs",
                    CLIENT_VERSION: "1",
                    MINIMUM_DURATION: 120,
                    SCROBBLING_FLAG: 1,
                    DEFAULT_FLAGS: 1,
                    connected: !1,
                    profile: {},
                    scrobblingEnabled: !1,
                    init: function(e) {
                        i = e, i.model.on("change:user", this.onUserChange, this), o = i.model.get("player"), u = o.get("currentQueue"), o.on("change:currentQueue", this.onQueueChange, this), t.ready.done(_.bind(this.appReady, this))
                    },
                    appReady: function() {
                        this.onUserChange()
                    },
                    reset: function() {
                        this.connected = !1, this.profile = {}, n = null, this.suspendScrobbling(), f = null, t.trigger("lastfm:profile:update")
                    },
                    onUserChange: function() {
                        s && s.off("change:extraData", this.onUserDataChange, this), s = i.model.get("user"), this.reset(), typeof s.get("extraData") == "undefined" ? s.on("change:extraData", this.onUserDataChange, this) : this.onUserDataChange()
                    },
                    onUserDataChange: function() {
                        if (s && s.get("isLoggedIn") && s.get("Flags") & this.SERVICE_ID) {
                            var e = s.get("extraData");
                            e && e.Lastfm ? this.onUserLastfmData(e.Lastfm) : gsConfig.runMode !== "production" && console.error("Supposed to have Lastfm data for auth user but undefined!!", s, e)
                        }
                    },
                    onUserLastfmData: function(e) {
                        try {
                            e && e.Session && e.LastfmUsername ? (this.profile = {
                                username: e.LastfmUsername,
                                flags: 0
                            }, n = {
                                session: e.Session
                            }, typeof e.FlagScrb == "undefined" && typeof e.FlagFav == "undefined" ? this.profile.flags = 1 : (e.FlagScrb && (this.profile.flags = this.profile.flags | this.SCROBBLING_FLAG), e.FlagFav && (this.profile.flags = this.profile.flags | this.FAVORITES_FLAG)), this.profile.flags & this.SCROBBLING_FLAG && this.enableScrobbling(), this.loadProfile()) : (gsConfig.runMode !== "production" && console.error("onUserLastfmData returned invalid resp:", e), this.onAuthError("onUserLastfmData returned invalid resp"));
                            return
                        } catch (t) {
                            gsConfig.runMode !== "production" && console.error("onUserLastfmData exception thrown:", t)
                        }
                        this.reset()
                    },
                    onAuthError: function(e, t) {
                        this.showReAuthLightbox(), t && t.reject()
                    },
                    removeFromUser: function() {
                        var e = $.Deferred();
                        return this.profile && this.profile.username ? t.Services.API.removeLastfmService(this.profile.username, _.bind(this.onRemovedFromUser, this, e)) : t.Services.API.removeLastfmService(null, _.bind(this.onRemovedFromUser, this, e)), e.promise()
                    },
                    onRemovedFromUser: function(e, t) {
                        if (!t || !t.success) {
                            e.reject();
                            return
                        }
                        var n = s.get("Flags");
                        s.set("Flags", (n | this.SERVICE_ID) - this.SERVICE_ID), this.reset(), e.resolve()
                    },
                    login: function() {
                        var n = $.Deferred(),
                            i = _.getCenteredCoordinates(950, 700),
                            s = "http://" + e.location.host + "/lastfmCallback.php?window=" + e.name;
                        return r = e.open(this.URL_USER_AUTH + "?api_key=" + this.API_KEY + "&cb=" + encodeURIComponent(s), "", "width=950,height=700,left=" + i[0] + ",top=" + i[1]), this.loginDeferred = $.Deferred(), this.loginDeferred.always(_.bind(this.onLogin, this, n)), t.airbridge && t.airbridge.isDesktop && (r.parentSandboxBridge = {
                            confirmLastfmConnection: e.confirmLastfmConnection
                        }), n.promise()
                    },
                    onLogin: function(e, n) {
                        console.log("Lastfm:onLogin", n);
                        if (n.error) e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_LASTFM_ERROR"
                        });
                        else {
                            if (!n.token) {
                                e.reject({
                                    error: "LB_SIGNUP_LOGIN_FORM_LASTFM_ERROR"
                                });
                                return
                            }
                            s.get("Flags") & this.SERVICE_ID ? t.Services.API.updateLastfmService("", n.token, "", 0, 0, _.bind(this.onSaveUserLastfmData, this, e)) : (typeof this.profile.flags == "undefined" && (this.profile.flags = this.DEFAULT_FLAGS), t.Services.API.saveLastfmService("", n.token, "", this.profile.flags, _.bind(this.onSaveUserLastfmData, this, e)), this.enableScrobbling())
                        }
                    },
                    onSaveUserLastfmData: function(e, t) {
                        console.log("onSaveUserLastfmData", t);
                        if (t.result > 0 && t.lastfmData && t.lastfmData.user) {
                            this.profile.username = t.lastfmData.user, n = {
                                session: t.lastfmData.session
                            }, this.connected = !0, this.loadProfile().done(function() {
                                e.resolve()
                            }).fail(function() {
                                e.reject({
                                    error: "LASTFM_PROBLEM_CONNECTING_ERROR_MSG"
                                })
                            });
                            var r = s.get("Flags");
                            s.set("Flags", r | this.SERVICE_ID)
                        } else t.result === -1 ? e.reject({
                            error: "LASTFM_DUPLICATE_ACCOUNT_ERROR_MSG"
                        }) : t.result === -3 ? e.reject({
                            error: "LASTFM_PROBLEM_CONNECTING_ERROR_MSG"
                        }) : e.reject({
                            error: "LB_SIGNUP_LOGIN_FORM_LASTFM_ERROR"
                        })
                    },
                    saveFlags: function(e) {
                        var r = $.Deferred(),
                            i = 0,
                            s = 0;
                        return e & this.SCROBBLING_FLAG ? (i |= this.SCROBBLING_FLAG, this.enableScrobbling()) : (s |= this.SCROBBLING_FLAG, this.suspendScrobbling()), e & this.FAVORITES_FLAG ? i |= this.FAVORITES_FLAG : s |= this.FAVORITES_FLAG, this.profile.flags = this.profile.flags & ~s | i, t.service.updateLastfmService(n.session, "", this.profile.username, i, s, _.bind(this.onSaveUserLastfmData, this, r, null)), r.promise()
                    },
                    loadProfile: function() {
                        if (!n || !n.session) return !1;
                        var e = new $.Deferred,
                            t = {
                                method: "user.getinfo",
                                sk: n.session,
                                api_key: this.API_KEY
                            };
                        l(this.URL_AUDIOSCROBBLER, t).done(_.bind(p, this)).fail(_.bind(d, this))
                    },
                    getPicture: function() {
                        if (this.connected && this.profile.image) for (var e = Math.min(2, this.profile.image.length); e >= 0; e--) if (this.profile.image[e]["#text"]) return this.profile.image[e]["#text"];
                        return "http://cdn.last.fm/flatness/catalogue/noimage/2/default_user_large.png"
                    },
                    onQueueChange: function() {
                        u && u.off(null, null, this), u = o.get("currentQueue"), u.on("change:activeSong", this.onPlayStatusChange, this)
                    },
                    suspendScrobbling: function() {
                        this.scrobblingEnabled = !1, a && (o.off("change:playStatus", this.onPlayStatusChange, this), o.off("change:position", this.onPositionChange, this), a = !1)
                    },
                    enableScrobbling: function() {
                        this.scrobblingEnabled = !0, o && !a && (o.on("change:playStatus", this.onPlayStatusChange, this), o.on("change:position", this.onPositionChange, this), a = !0, this.onPlayStatusChange())
                    },
                    shouldScrobble: function() {
                        return this.profile && this.profile.flags & this.SCROBBLING_FLAG && this.scrobblingEnabled
                    },
                    onPlayStatusChange: function() {
                        if (!this.shouldScrobble() || !n || o.get("playStatus") !== t.Models.Player.playStatuses.PLAYING) return;
                        var e = u.get("activeSong");
                        if (!e || typeof e.get("queueSongID") != "number") {
                            f = null;
                            return
                        }
                        if (!f || e.get("queueSongID") !== f.queueSongID || e.get("SongID") !== f.songID) f = {
                            songID: e.get("SongID"),
                            queueSongID: e.get("queueSongID"),
                            secondsListened: 0,
                            scrobbled: !1
                        };
                        else {
                            if (u.get("repeatMode") !== t.Models.Player.repeatModes.ONE || e.get("queueSongID") !== f.queueSongID) return;
                            f.scrobbled = !1, f.secondsListened = 0
                        }
                        var r = {
                            album: e.get("AlbumName"),
                            artist: e.get("ArtistName"),
                            method: "track.updateNowPlaying",
                            track: e.get("SongName"),
                            sk: n.session,
                            api_key: this.API_KEY
                        };
                        e.get("TrackNum") && typeof e.get("TrackNum") == "number" && (r.trackNumber = String(e.get("TrackNum"))), typeof e.get("EstimateDuration") == "number" && (r.duration = Math.round(e.get("EstimateDuration"))), l(null, r)
                    },
                    onPositionChange: function() {
                        if (!this.shouldScrobble() || !n || o.get("playStatus") !== t.Models.Player.playStatuses.PLAYING) return;
                        var e = o.get("currentQueue").get("activeSong");
                        if (!e || typeof e.get("queueSongID") != "number") {
                            f = null;
                            return
                        }
                        if (!f || e.get("queueSongID") !== f.queueSongID || e.get("SongID") !== f.songID) return;
                        f.secondsListened += .5;
                        if (o.get("duration") > this.MINIMUM_DURATION * 1e3 && f.secondsListened > 30 && !f.scrobbled) {
                            var r = new Date,
                                i = Math.round(r.getTime() / 1e3),
                                s = {
                                    album: e.get("AlbumName"),
                                    artist: e.get("ArtistName"),
                                    track: e.get("SongName"),
                                    timestamp: i,
                                    duration: Math.round(o.get("duration") / 1e3),
                                    method: "track.scrobble",
                                    sk: n.session,
                                    api_key: this.API_KEY
                                };
                            e.get("TrackNum") && typeof e.get("TrackNum") == "number" && (s.trackNumber = String(e.get("TrackNum")));
                            if (e && e.get("context")) {
                                switch (e.get("context").streamType) {
                                case t.Models.PlayContext.TYPE_STATION:
                                case t.Models.PlayContext.TYPE_RADIO:
                                case t.Models.PlayContext.TYPE_DMCA_RADIO:
                                case t.Models.PlayContext.TYPE_BROADCAST:
                                    s.chosenByUser = 0;
                                    break;
                                default:
                                    s.chosenByUser = 1
                                }
                                e.get("context").type == "radio" && (s.chosenByUser = 0)
                            }
                            f.scrobbled = !0, f.timestamp = i, l(null, s)
                        }
                    },
                    deleteLastScrobble: function() {
                        var e = o.get("currentQueue").get("activeSong");
                        if (!e || !n || !f || !f.scrobbled) return;
                        var t = {
                            album: e.get("AlbumName"),
                            artist: e.get("ArtistName"),
                            track: e.get("SongName"),
                            timestamp: f.timestamp,
                            method: "library.removeScrobble",
                            sk: n.session,
                            api_key: this.API_KEY
                        };
                        f = null, l(null, t)
                    }
                }, e.confirmLastfmConnection || (e.confirmLastfmConnection = function(n) {
                    console.log("lastfm confirm connection", n), r && (r.close(), r = null);
                    var i = t.Services.Lastfm.loginDeferred;
                    if (!i) return;
                    try {
                        n = $.parseJSON(n)
                    } catch (s) {
                        i.reject({
                            error: "parseError"
                        });
                        return
                    }
                    t.airbridge && t.airbridge.isDesktop ? e.setTimeout(function() {
                        i.resolve(n)
                    }, 300) : i.resolve(n)
                })
            }(), function() {
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var n = 0,
                    r = !1,
                    i, s, o, u, a, f;
                t.Services.Flattr = {
                    loadFlattrJS: function() {
                        if (typeof e.FlattrLoader == "object") {
                            r || this.onFlattrJSLoaded();
                            return
                        }
                        if ($.browser.msie && $.browser.version <= 6) return;
                        var t = null,
                            i = this;
                        n++;
                        try {
                            if ($("#flattr-js script").length) $("#flattr-js").empty(), e.FlattrLoader = null;
                            else if (!document.getElementById("flattr-js")) {
                                var s = document.createElement("div");
                                s.id = "flattr-js", document.body.appendChild(s)
                            }
                            var o = document.createElement("script");
                            o.async = !0, o.src = document.location.protocol + "//api.flattr.com/js/0.6/load.js?mode=manual&popout=0&revsharekey=" + this.REV_SHARE_KEY;
                            var u = function() {
                                    if ($.browser.msie && this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") return;
                                    this.onload = this.onreadystatechange = null, setTimeout(function() {
                                        e.FlattrLoader && (clearTimeout(t), i.onFlattrJSLoaded())
                                    }, 100)
                                };
                            o.onload = o.onreadystatechange = u, document.getElementById("flattr-js").appendChild(o)
                        } catch (o) {
                            console.error("Could not load Flattr JS. Fatal Error: ", o)
                        }
                        t = setTimeout(function() {
                            !e.FlattrLoader && n < 3 ? i.loadFlattrJS() : !e.FlattrLoader && n >= 3
                        }, 2e4)
                    },
                    onFlattrJSLoaded: function() {
                        if (typeof e.FlattrLoader != "object" || !e.FlattrLoader) return;
                        r = !0, this.parseWidgets()
                    },
                    parseWidgets: function() {
                        if (typeof e.FlattrLoader != "object" || !e.FlattrLoader) {
                            this.loadFlattrJS();
                            return
                        }
                        try {
                            e.FlattrLoader.setup()
                        } catch (t) {}
                    },
                    SERVICE_ID: 131072,
                    CLIENT_ID: "QAzyxeB9yS0VqfQ3e0l6AQef5VIVnbW3CmsZqTYPCPBSUhLY8XVyDZEyKcjXe6RG",
                    REV_SHARE_KEY: "05e1a1",
                    URL_USER_AUTH: "https://flattr.com/oauth/authorize",
                    musicBrainzArtistURL: "http://musicbrainz.org/artist/",
                    URL_REST_API: "https://api.flattr.com/rest/v2/",
                    connected: !1,
                    profile: {},
                    loginDeferred: null,
                    throttle: {
                        lastChanged: null,
                        artistIDs: []
                    },
                    canFlattrCurrentArtist: !1,
                    tmpAutoOff: !1,
                    flags: 0,
                    DEFAULT_FLAGS: 0,
                    FLATTR_AUTO_PER_MONTH_FLAG: 1,
                    FLATTR_AUTO_PER_STREAM_FLAG: 2,
                    FLATTR_AUTO_PER_FAVORITE_FLAG: 4,
                    lastError: "",
                    init: function(e) {
                        u = e, u.model.on("change:user", this.onUserChange, this), t.on("manatee:flattrData", _.bind(this.onAutoFlattr, this)), t.on("flattr:flattrCount", _.bind(this.onAutoSubmitThingLookup, this)), t.on("flattr:renderEmbed", _.bind(this.renderEmbedButton, this)), t.Services.SWF.ready.then(_.bind(function() {
                            t.Services.SWF.setFlattr(this.canFlattrCurrentArtist)
                        }, this)), o = u.model.get("player"), o.on("change:currentQueue", function() {
                            o.get("currentQueue").on("change:activeSong", this.onActiveSongChange, this)
                        }, this), t.ready.done(_.bind(this.appReady, this))
                    },
                    appReady: function() {
                        this.onUserChange()
                    },
                    reset: function() {
                        this.connected = !1, this.profile = {}, f = null, t.Services.SWF && _.isFunction(t.Services.SWF.setFlattr) && (this.canFlattrCurrentArtist = !1, t.Services.SWF.setFlattr(this.canFlattrCurrentArtist)), t.trigger("flattr:profile:update")
                    },
                    onUserChange: function() {
                        a && a.off("change:extraData", this.onUserDataChange, this), a = u.model.get("user"), this.reset(), typeof a.get("extraData") == "undefined" ? a.on("change:extraData", this.onUserDataChange, this) : this.onUserDataChange()
                    },
                    onUserDataChange: function() {
                        if (a && a.get("isLoggedIn") && a.get("Flags") & this.SERVICE_ID) {
                            var e = a.get("extraData");
                            e && e.Flattr ? this.onUserFlattrData(e.Flattr) : gsConfig.runMode !== "production" && console.error("Supposed to have Flattr data for auth user but undefined!!", a, e)
                        }
                    },
                    onUserFlattrData: function(e) {
                        var t = $.Deferred();
                        try {
                            e && e.AccessToken && e.FlattrUsername ? (s = e.AccessToken, this.profile = {}, this.profile.username = e.FlattrUsername, this.profile.flags = 0, this.profile.autoPerMonth = !1, this.profile.autoPerStream = !1, this.profile.autoPerFavorite = !1, e.Flags && (this.profile.flags = e.Flags, e.Flags & this.FLATTR_AUTO_PER_MONTH_FLAG ? (this.profile.autoPerMonth = !0, o.on("change:position", this.onPositionChange, this)) : e.Flags & this.FLATTR_AUTO_PER_STREAM_FLAG && (this.profile.autoPerStream = !0), e.Flags & this.FLATTR_AUTO_PER_FAVORITE_FLAG && (this.profile.autoPerFavorite = !0)), this.loadUserProfile(t)) : (gsConfig.runMode !== "production" && console.error("onUserFlattrData returned invalid resp:", e), this.onFlattrError("FLATTR_MISSING_LOGIN_INFO_ERROR_MSG"), t.reject());
                            return
                        } catch (n) {
                            gsConfig.runMode !== "production" && console.error("onUserFlattrData exception thrown:", n)
                        }
                        return this.reset(), t.reject(), this.onFlattrError("FLATTR_MISSING_LOGIN_INFO_ERROR_MSG"), t.promise()
                    },
                    loadUserProfile: function(e) {
                        var n = !1;
                        e || (e = $.Deferred(), n = !0);
                        var r = {
                            access_token: s
                        };
                        t.Services.API.makeFlattrRequest("user?compat-errors", r, "GET").always(_.bind(this.onUserProfile, this, e));
                        if (n) return e.promise()
                    },
                    onUserProfile: function(e, n) {
                        try {
                            n = $.parseJSON(n)
                        } catch (r) {
                            e.reject(), this.onFlattrError("FLATTR_MISSING_LOGIN_INFO_ERROR_MSG");
                            return
                        }
                        n && !n.error && n.username ? (n.avatar ? this.profile.avatar = n.avatar : this.profile.avatar = gsConfig.assetHost + "webincludes/css/images/services/flattr-small.png", this.profile.link = n.link, this.profile.username = n.username, this.profile.firstname = n.firstname, this.profile.lastname = n.lastname, this.connected = !0, t.trigger("flattr:profile:update"), e.resolve()) : (gsConfig.runMode !== "production" && console.error("flattr::onUserProfile returned unexpected resp:", n), e.reject())
                    },
                    removeFromUser: function() {
                        var e = $.Deferred();
                        return t.Services.API.removeUserFlattrData().always(_.bind(this.onRemovedFromUser, this, e)), e.promise()
                    },
                    onRemovedFromUser: function(e, t) {
                        if (!t) {
                            this.onFlattrError("FLATTR_PROBLEM_REMOVING_MSG"), e.reject();
                            return
                        }
                        var n = a.get("Flags");
                        a.set("Flags", (n | this.SERVICE_ID) - this.SERVICE_ID), this.reset(), e.resolve()
                    },
                    login: function() {
                        var n = $.Deferred(),
                            r = _.getCenteredCoordinates(850, 600),
                            s = "http://" + e.location.host + "/flattrCallback.html",
                            o = "window-" + e.name;
                        return i = e.open(this.URL_USER_AUTH + "?response_type=token&scope=flattr&client_id=" + this.CLIENT_ID + "&redirect_uri=" + encodeURIComponent(s) + "&state=" + encodeURIComponent(o), "", "width=850,height=600,left=" + r[0] + ",top=" + r[1]), this.loginDeferred = $.Deferred(), this.loginDeferred.always(_.bind(this.onLogin, this, n)), t.airbridge && t.airbridge.isDesktop && (i.parentSandboxBridge = {
                            confirmFlattrConnection: e.confirmFlattrConnection
                        }), n.promise()
                    },
                    onLogin: function(e, n) {
                        console.log("Flattr:onLogin", n);
                        if (n.error) e.reject(), this.onFlattrError("FLATTR_MISSING_LOGIN_INFO_ERROR_MSG");
                        else {
                            if (!n.accessToken) {
                                e.reject(), this.onFlattrError("FLATTR_MISSING_LOGIN_INFO_ERROR_MSG");
                                return
                            }
                            console.log("Flattr:onLogin got access token:", n.accessToken), s = n.accessToken, this.loadUserProfile().done(_.bind(function() {
                                console.log("Flattr:onloadUserProfile"), typeof this.profile.flags == "undefined" && (this.profile.flags = this.DEFAULT_FLAGS), a.get("Flags") & this.SERVICE_ID ? t.Services.API.updateUserFlattrData(s, this.profile.username, this.profile.flags).always(_.bind(this.onSaveUserFlattrData, this, e)) : t.Services.API.saveUserFlattrData(s, this.profile.username, this.profile.flags).always(_.bind(this.onSaveUserFlattrData, this, e))
                            }, this))
                        }
                    },
                    onSaveUserFlattrData: function(e, t) {
                        if (t == 1) {
                            this.connected = !0, e.resolve();
                            var n = a.get("Flags");
                            a.set("Flags", n | this.SERVICE_ID)
                        } else t === -1 ? (e.reject(), this.onFlattrError("FLATTR_NAME_ALREADY_IN_USE")) : (e.reject(), this.onFlattrError("FLATTR_MISSING_LOGIN_INFO_ERROR_MSG"))
                    },
                    enableListenAndFlattr: function() {
                        var e = $.Deferred(),
                            n = this.profile.flags | this.FLATTR_AUTO_PER_MONTH_FLAG;
                        return t.Services.API.updateUserFlattrData(s, this.profile.username, n).then(_.bind(function(e, t) {
                            this.profile.flags = n, this.profile.autoPerMonth = !0, o.on("change:position", this.onPositionChange, this), e.resolve()
                        }, this, e)).fail(_.bind(function(e) {
                            this.onFlattrError("FLATTR_PROBLEM_UPDATING_MSG"), e.reject()
                        })), e.promise()
                    },
                    disableListenAndFlattr: function() {
                        var e = $.Deferred(),
                            n = this.profile.flags & ~this.FLATTR_AUTO_PER_MONTH_FLAG;
                        return t.Services.API.updateUserFlattrData(s, this.profile.username, n).then(_.bind(function(e, t) {
                            this.profile.flags = n, this.profile.autoPerMonth = !1, o.off("change:position", this.onPositionChange, this), e.resolve()
                        }, this, e)).fail(_.bind(function(e) {
                            this.onFlattrError("FLATTR_PROBLEM_UPDATING_MSG"), e.reject()
                        })), e.promise()
                    },
                    enableFavoriteAndFlattr: function() {
                        var e = $.Deferred(),
                            n = this.profile.flags | this.FLATTR_AUTO_PER_FAVORITE_FLAG;
                        return t.Services.API.updateUserFlattrData(s, this.profile.username, n).then(_.bind(function(e, t) {
                            this.profile.flags = n, this.profile.autoPerFavorite = !0, e.resolve()
                        }, this, e)).fail(_.bind(function(e) {
                            this.onFlattrError("FLATTR_PROBLEM_UPDATING_MSG"), e.reject()
                        })), e.promise()
                    },
                    disableFavoriteAndFlattr: function() {
                        var e = $.Deferred(),
                            n = this.profile.flags & ~this.FLATTR_AUTO_PER_FAVORITE_FLAG;
                        return t.Services.API.updateUserFlattrData(s, this.profile.username, n).then(_.bind(function(e, t) {
                            this.profile.flags = n, this.profile.autoPerFavorite = !1, e.resolve()
                        }, this, e)).fail(_.bind(function(e) {
                            this.onFlattrError("FLATTR_PROBLEM_UPDATING_MSG"), e.reject()
                        })), e.promise()
                    },
                    connectionLogout: function() {
                        var t = _.getCenteredCoordinates(800, 720);
                        e.open("https://flattr.com/session/logout", "", "width=800,height=720,status=1,location=1,resizable=yes,left=" + t[0] + ",top=" + t[1])
                    },
                    onActiveSongChange: function() {
                        var e = u.model.get("player").get("currentQueue");
                        if (!e) return;
                        var n = e.get("activeSong");
                        if (!n || typeof n.get("queueSongID") != "number") {
                            f = null;
                            return
                        }
                        if (!f || n.get("queueSongID") !== f.queueSongID || n.get("SongID") !== f.songID) f = {
                            songID: n.get("SongID"),
                            queueSongID: n.get("queueSongID"),
                            secondsListened: 0,
                            flattrd: !1,
                            MusicBrainzID: null,
                            artistID: n.get("ArtistID")
                        };
                        else {
                            if (e.get("repeatMode") !== t.Models.Player.repeatModes.ONE || n.get("queueSongID") !== f.queueSongID) return;
                            f.flattrd = !1, f.secondsListened = 0
                        }
                        n && this.connected && this.profile.autoPerMonth && (this.canFlattrCurrentArtist = this.canFlattr(n.get("ArtistID")), t.Services.SWF.setFlattr(this.canFlattrCurrentArtist))
                    },
                    onPositionChange: function() {
                        if (!this.connected || this.tmpAutoOff || o.get("playStatus") !== t.Models.Player.playStatuses.PLAYING) return;
                        var e = u.model.get("player").get("currentQueue");
                        if (!e) return;
                        var n = e.get("activeSong");
                        if (!n || typeof n.get("queueSongID") != "number") {
                            f = null;
                            return
                        }
                        if (!f || n.get("queueSongID") !== f.queueSongID || n.get("SongID") !== f.songID) return;
                        f.secondsListened += .5;
                        if (f.secondsListened * 1e3 / o.get("duration") >= .8 && f.MusicBrainzID && !f.flattrd) {
                            var r = new Date,
                                i = Math.round(r.getTime() / 1e3);
                            f.flattrd = !0, this.flattrURL(f.MusicBrainzID, {
                                artistID: f.artistID
                            })
                        }
                    },
                    onAutoFlattr: function(e) {
                        e && e.Data && e.Data.MusicBrainzID && f && (f.MusicBrainzID = e.Data.MusicBrainzID)
                    },
                    flattrURL: function(e, n) {
                        var r = {
                            access_token: s,
                            url: "http://flattr.com/submit/auto?url=" + this.musicBrainzArtistURL + e + "&category=audio&tags=music"
                        };
                        t.Services.API.makeFlattrRequest("flattr?compat-errors", r, "POST").always(_.bind(this.onFlattrURLComplete, this, n))
                    },
                    onFlattrURLComplete: function(e, t) {
                        var n = e.artistID;
                        try {
                            t = JSON.parse(t)
                        } catch (r) {
                            console.log("onFlattrURLComplete - bad json"), this.onFlattrError();
                            return
                        }
                        if (t.message && t.message == "ok") e && e.notify && this.onFlattrSuccess();
                        else if (t.error) switch (t.error) {
                        case "flattr_once":
                            break;
                        case "flattr_owner":
                            break;
                        case "no_means":
                            this.onFlattrError("FLATTR_SERVICE_TEMP_OFF"), this.tmpAutoOff = !0;
                            break;
                        case "not_found":
                        case "invalid_request":
                        case "unauthorized":
                        default:
                            this.onFlattrError()
                        }
                    },
                    onFavoriteAndFlattr: function(e) {
                        if (!this.canFlattr(e)) return;
                        var n = new $.Deferred;
                        t.Services.API.getPageInfoByIDType(e, "artist").done(_.bind(function(e, t) {
                            t && t.Data && t.Data.MusicBrainzID && this.flattrURL(t.Data.MusicBrainzID, {
                                artistID: t.ItemID,
                                notify: !0
                            })
                        }, this, n)).fail(_.bind(this.onFlattrError, this, n))
                    },
                    onFlattrError: function(e) {
                        if (!e || !e.length) e = "FLATTR_SERVICE_DEFAULT_ERROR";
                        var n = _.getString(e);
                        t.trigger("notification:add", {
                            title: "Flattr",
                            description: n,
                            type: "error"
                        })
                    },
                    onFlattrSuccess: function(e) {
                        if (!e || !e.length) e = "FLATTR_SERVICE_DEFAULT_SUCCESS_FLATTR";
                        var n = _.getString(e);
                        t.trigger("notification:add", {
                            title: "Flattr",
                            description: n,
                            type: "success"
                        })
                    },
                    canFlattr: function(e) {
                        if (this.tmpAutoOff) return !1;
                        var t = new Date,
                            n = t.getDate() + t.getMonth() + t.getYear();
                        return this.throttle.lastChanged < n && (this.throttle.artistIDs = []), _.indexOf(this.throttle.artistIDs, e) >= 0 ? !1 : this.connected
                    },
                    setFlattrThrottle: function(e) {
                        this.throttle.artistIDs.push(e)
                    },
                    onAutoSubmitThingLookup: function(e) {
                        var n = $.Deferred(),
                            r = {};
                        return e.url = this.musicBrainzArtistURL + e.mbID, t.Services.API.makeFlattrRequest("things/lookup/?compat-errors&url=http://flattr.com/submit/auto?url=" + encodeURIComponent(e.url), r, "POST").always(_.bind(function(e, t) {
                            try {
                                t = JSON.parse(t), e.resolve(t)
                            } catch (n) {
                                this.onFlattrError(), e.reject()
                            }
                        }, this, n)), n.promise()
                    },
                    getFlattrList: function(e) {
                        var n = $.Deferred(),
                            r = {
                                count: 30
                            };
                        return t.Services.API.makeFlattrRequest("things/" + e + "/flattrs", r, "GET").always(_.bind(function(e, t) {
                            try {
                                t = JSON.parse(t), e.resolve(t)
                            } catch (n) {
                                this.onFlattrError(), e.reject()
                            }
                        }, this, n)), n.promise()
                    },
                    parseButtons: function() {
                        e.FlattrLoader && $.each($("a.FlattrButton"), function(t, n) {
                            e.FlattrLoader.loadButton(n)
                        })
                    },
                    renderEmbedButton: function(e, t, n) {
                        var r = "flattr;popout:0;category:audio;tags:music";
                        n && (r = "flattr;button:compact;popout:0;category:audio;tags:music");
                        var i = $('<a class="FlattrButton" style="display:none;" rev="' + r + '" href="' + this.musicBrainzArtistURL + t + '"></a>');
                        e.append(i), this.parseWidgets()
                    },
                    isUserConnected: function() {
                        return a && a.get("isLoggedIn") && a.get("Flags") & this.SERVICE_ID
                    },
                    isUserListenAndFlattr: function() {
                        return this.profile.autoPerMonth
                    },
                    isUserFavoriteAndFlattr: function() {
                        return this.profile.autoPerFavorite
                    }
                }, e.confirmFlattrConnection || (e.confirmFlattrConnection = function(n) {
                    console.log("flattr confirm connection", n), i && (i.close(), i = null);
                    var r = t.Services.Flattr.loginDeferred;
                    if (!r) return;
                    try {
                        n = $.parseJSON(n)
                    } catch (s) {
                        r.reject({
                            error: "parseError"
                        });
                        return
                    }
                    if (!n.hash) {
                        r.reject({
                            error: "invalid"
                        });
                        return
                    }
                    var o = {
                        accessToken: null
                    },
                        u = n.hash.match(/access\_token\=([a-zA-Z0-9\-\_]+)/);
                    u && u[1] && (o.accessToken = u[1]), t.airbridge && t.airbridge.isDesktop ? e.setTimeout(function() {
                        r.resolve(n)
                    }, 300) : r.resolve(o)
                })
            }(), function() {
                function a(e, n, r, i, s) {
                    if (s.feed && s.feed.entry) {
                        var o = s.feed.entry,
                            a = [],
                            c = {};
                        _.forEach(o, function(e) {
                            if (!e.media$group || !e.media$group.media$thumbnail) return;
                            c = {
                                Author: "",
                                Description: "",
                                Duration: 0,
                                Rating: 0,
                                LikeRatio: 0,
                                VideoID: "",
                                Plays: 0,
                                URL: "",
                                Title: "",
                                Thumbnails: []
                            }, e.author && e.author[0] && e.author[0].name && e.author[0].name.$t ? c.Author = e.author[0].name.$t : e.media$group.media$credit && e.media$group.media$credit.$t && (c.Author = e.media$group.media$credit.$t), e.media$group.media$description && e.media$group.media$description.$t && (c.Description = e.media$group.media$description.$t), e.media$group.yt$duration && e.media$group.yt$duration.seconds && (c.Duration = parseInt(e.media$group.yt$duration.seconds, 10)), e.gd$rating && e.gd$rating.average && (c.Rating = parseFloat(e.gd$rating.average)), e.yt$rating && e.yt$rating.numLikes && e.yt$rating.numDislikes && (c.LikeRatio = parseInt(e.yt$rating.numLikes, 10) / parseInt(e.yt$rating.numDislikes, 10));
                            if (e.media$group.yt$videoid && e.media$group.yt$videoid.$t) c.VideoID = e.media$group.yt$videoid.$t;
                            else if (e.id) {
                                var n = e.id.split(":");
                                c.VideoID = n[n.length - 1]
                            }
                            e.yt$statistics && e.yt$statistics.viewCount && (c.Plays = parseInt(e.yt$statistics.viewCount, 10)), e.title && e.title.$t && (c.Title = e.title.$t), e.link && e.link[0] && e.link.href && (c.URL = e.link.href), _.forEach(e.media$group.media$thumbnail, function(e) {
                                if (e.yt$name) switch (e.yt$name) {
                                case "default":
                                    c.Thumbnails.unshift(e);
                                    return;
                                case "hqdefault":
                                    c.Thumbnails.length && c.Thumbnails[0].yt$name === "default" ? c.Thumbnails.splice(1, 0, e) : c.Thumbnails.unshift(e);
                                    return
                                }
                                c.Thumbnails.push(e)
                            }), c.type = "youtube", c = new t.Models.Video(c), a.push(c)
                        }), n && (a = l(n, a)), u[r] = a, e.resolve(a.slice(0, i))
                    } else f(e, s)
                }
                function f(e, t) {
                    e.reject(t)
                }
                function l(e, t) {
                    var n = [],
                        r = "";
                    e && e.get("ArtistName") && (r = e.get("ArtistName").match(/[a-z0-9]/gi).join("").toLowerCase());
                    var i = 9.7,
                        s = 8.98,
                        o = 4.209,
                        u = 4.01,
                        a = 2.41,
                        f = 2.101,
                        l = 1.201,
                        c = .82,
                        h = .203;
                    return _.forEach(t, function(e, p) {
                        if (e.get("VideoID") && e.get("Author") && e.get("durationSecs") > 60) {
                            e.weight = Math.floor(u * (t.length - p));
                            var d = e.get("Author").toLowerCase();
                            d.lastIndexOf("vevo") > -1 ? e.weight *= i : d.lastIndexOf("emimusic") > -1 ? e.weight *= s : d.lastIndexOf("warnerbrosrecords") > -1 ? e.weight *= s : d.lastIndexOf("hollywoodrecords") > -1 ? e.weight *= s : d.lastIndexOf("records") > -1 && (e.weight *= o), r && d.indexOf(r) > -1 && (e.weight *= f);
                            var v = e.get("Title").toLowerCase();
                            v.lastIndexOf("parody") > -1 ? e.weight *= h : v.lastIndexOf("official") > -1 ? e.weight *= a : v.lastIndexOf("cover") > -1 ? e.weight *= l : v.lastIndexOf("live") > -1 && (e.weight *= c);
                            for (var m = 0; m < n.length; m++) if (n[m].weight < e.weight) {
                                n.splice(m, 0, e);
                                return
                            }
                            n.push(e)
                        }
                    }), n
                }
                function c(t, n) {
                    var r = {
                        callbacks: [],
                        addEvent: function(r, i) {
                            if (_.isFunction(i)) {
                                var s = "yt" + r + n + Math.floor(Math.random() * 1001);
                                e[s] = i, i = s, this.callbacks.push(s)
                            }
                            t.addEventListener(r, i)
                        },
                        play: function() {
                            t.playVideo()
                        },
                        playVideoAt: function(e) {
                            t.playVideoAt(e)
                        },
                        pause: function() {
                            t.pauseVideo()
                        },
                        isPaused: function() {
                            var e = this.getState();
                            return e != 1 && e != 3
                        },
                        getState: function() {
                            return t.getPlayerState()
                        },
                        stop: function() {
                            t.stopVideo()
                        },
                        getCurrentTime: function() {
                            return t.getCurrentTime()
                        },
                        getDuration: function() {
                            return t.getDuration()
                        },
                        getVideoUrl: function() {
                            return t.getVideoUrl()
                        },
                        getVolume: function() {
                            return t.getVolume() / 100
                        },
                        setVolume: function(e) {
                            t.setVolume(e * 100)
                        },
                        loadVideoById: function(e) {
                            t.loadVideoById(e)
                        },
                        loadVideoByUrl: function(e) {
                            t.loadVideoByUrl(e)
                        }
                    };
                    return $(t).parent().bind("remove", function() {
                        try {
                            r.callbacks && r.callbacks.length && _.forEach(r.callbacks, function(t) {
                                e[t] = null
                            })
                        } catch (t) {}
                    }), r
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var n = [],
                    r = "http://gdata.youtube.com/feeds/api/videos",
                    i = "AI39si6SJVyxgw9MFbAdbXE-wbtZFdTl8qnY2UWX3dFA97c9PrcfAYDpqUh0iLeVEkurJsjUvDmObBWvLX-wmsy_kW8KHAgN-Q",
                    s = "Grooveshark",
                    o, u = {};
                t.Services.Youtube = {
                    init: function(t) {
                        o = t, e.onYouTubePlayerReady = function(e) {
                            var t = c($("#" + e)[0], e);
                            n[e] && (n[e](t), delete n[e])
                        }
                    },
                    searchViaSong: function(e) {
                        var t = "",
                            n = '"' + e.get("SongName").replace(/[\(\[][a-zA-Z0-9\s]+[\]\)]/g, "") + '"';
                        return e.get("ArtistName").toLowerCase() != "unknown" && e.get("ArtistName").toLowerCase() != "unknown artist" ? t = ['"' + e.get("ArtistName") + '"' || "", n || ""].join(" ") : t = n, t = $.trim(t), this.search(t, 5, e)
                    },
                    search: function(e, t, n) {
                        var o = $.Deferred();
                        e = $.trim(_.orEqual(e, "")), t = _.orEqual(t, 5);
                        if (!e) o.reject();
                        else if (u[e]) o.resolve(u[e].splice(0, t));
                        else {
                            var l = "jQueryYoutube" + OAuth.nonce(10),
                                c = {
                                    "max-results": Math.min(t, 15),
                                    orderBy: "relevance",
                                    safeSearch: "none",
                                    alt: "json-in-script",
                                    time: "all_time",
                                    "start-index": 1,
                                    q: e,
                                    callback: l,
                                    key: i,
                                    v: 2,
                                    category: "music|Music|EMI|VEVO|official|Official",
                                    restriction: gsConfig.remoteAddr,
                                    format: 5
                                },
                                h = r;
                            OAuth.completeRequest({
                                method: "GET",
                                action: h,
                                parameters: c
                            }, {
                                consumerKey: s,
                                consumerSecret: i
                            });
                            var p = OAuth.getParameterMap(c);
                            h = h + "?" + $.param(p), $.ajax({
                                url: h,
                                success: _.bind(a, this, o, n, e, t),
                                error: _.bind(f, this, o),
                                dataType: "jsonp",
                                jsonp: !1,
                                jsonpCallback: l,
                                cache: !0
                            })
                        }
                        return o.promise()
                    },
                    attachPlayer: function(e, r, i, s, o) {
                        var u = new $.Deferred,
                            a = "videoYTObj" + s;
                        if (!e || _.notDefined(e)) u.reject();
                        else {
                            var f = "http://www.youtube.com/v/" + e + "?version=3&enablejsapi=1&version=3&fs=1&playerapiid=" + a,
                                l = {},
                                c = {
                                    allowScriptAccess: "always",
                                    allowFullScreen: "true"
                                },
                                h = {
                                    id: a,
                                    name: a,
                                    allowFullScreen: "true"
                                };
                            r = r || 480, i = i || 385, o = _.orEqual(o, !0), n[a] = function(e) {
                                return u.resolve(e), o && e.play(), !0
                            }, swfobject.embedSWF(f, s, r, i, "8", null, l, c, h), t.trigger("guts:log", "youtubeLoadVideoById", {
                                youtubeVideoID: e
                            }), t.trigger("guts:gatrack", "youtube", "loadVideoById", e)
                        }
                        return u.promise()
                    }
                }
            }(), function() {
                function o(e) {
                    var t = {
                        callbacks: [],
                        addEvent: _.bind(e.addEvent, e),
                        play: _.bind(e.play, e),
                        pause: _.bind(e.pause, e),
                        stop: function() {
                            e.unload()
                        },
                        isPaused: _.bind(e.paused, e),
                        getCurrentTime: _.bind(e.getCurrentTime, e),
                        getDuration: _.bind(e.getDuration, e),
                        getVideoUrl: _.bind(e.getVideoUrl, e),
                        getVolume: function() {
                            return e.getVolume() * 100
                        },
                        setVolume: function(t) {
                            e.setVolume(t / 100)
                        },
                        loadVideoById: function(t) {
                            var n = new $.Deferred,
                                r = $(e.element);
                            return e.unload(), r.attr("src", "http://player.vimeo.com/video/" + t + "?api=1&player_id=" + r.attr("id")), e = $f(r), e.addEvent("ready", _.bind(u, this, n, e)), n.promise()
                        }
                    };
                    return t
                }
                function u(e, t) {
                    t = o(t), e.resolve(t)
                }
                var t = e.GS = e.GS || {};
                t.Services = t.Services || {};
                var n = [],
                    r, i = new $.Deferred,
                    s = 0;
                t.Services.Vimeo = {
                    init: function(e) {
                        r = e
                    },
                    loadPlayerJS: function() {
                        if (typeof e.Froogaloop == "function") {
                            i.state() === "pending" && this.onPlayerJSLoaded();
                            return
                        }
                        var t = null,
                            n = this;
                        s++;
                        try {
                            if ($("#froogaloop-js script").length) $("#froogaloop-js").empty(), e.Froogaloop = null;
                            else if (!document.getElementById("froogaloop-js")) {
                                var r = document.createElement("div");
                                r.id = "froogaloop-js", document.body.appendChild(r)
                            }
                            var o = document.createElement("script");
                            o.async = !0, o.src = "/gs/resources/froogaloop.min.js";
                            var u = function() {
                                    if ($.browser.msie && this.readyState && this.readyState !== "complete" && this.readyState !== "loaded") return;
                                    this.onload = this.onreadystatechange = null, setTimeout(function() {
                                        e.Froogaloop && (clearTimeout(t), n.onPlayerJSLoaded())
                                    }, 300)
                                };
                            o.onload = o.onreadystatechange = u, document.getElementById("froogaloop-js").appendChild(o)
                        } catch (o) {
                            console.error("Could not load Froogaloop JS. Fatal Error: ", o)
                        }
                        t = setTimeout(function() {
                            !e.Froogaloop && s < 3 && n.loadPlayerJS()
                        }, 2e4)
                    },
                    onPlayerJSLoaded: function() {
                        if (typeof e.Froogaloop != "function") return;
                        i.resolve()
                    },
                    attachPlayer: function(e, n, r, s) {
                        this.loadPlayerJS();
                        var o = new $.Deferred,
                            a = "videoVObj" + s;
                        return i.done(_.bind(function() {
                            if (!e || _.notDefined(e)) o.reject();
                            else {
                                var i = "http://player.vimeo.com/video/" + e + "?api=1&player_id=videoVObj" + s + "&autoplay=1";
                                n = n || 480, r = r || 385;
                                var f = document.createElement("iframe");
                                f.className = "vimeo", f.src = i, f.id = a, f.width = n, f.height = r;
                                if (!document.getElementById(s)) {
                                    o.reject();
                                    return
                                }
                                document.getElementById(s).appendChild(f);
                                var l = $f(f);
                                l.addEvent("ready", _.bind(u, this, o, l)), t.trigger("guts:log", "vimeoLoadVideoById", {
                                    youtubeVideoID: e
                                }), t.trigger("guts:gatrack", "vimeo", "loadVideoById", e)
                            }
                        }, this)), o.promise()
                    }
                }
            }(), function() {
                var t = e.GS = e.GS || {};
                t.External = t.External || {};
                var n, r, i, s, o, u, a;
                e.parentSandboxBridge && (u = e.parentSandboxBridge, e.console.error = u.consoleError, t.Services && t.Services.Local && (t.Services.Local.set = u.storeSet, t.Services.Local.get = u.storeGet, t.Services.Local.remove = u.storeRemove, t.Services.Local.clear = u.storeClear), e.gsConfig.assetHost = "http://" + e.location.host);
                var f = _.throttle(function() {
                    var e = r.get("currentQueue");
                    e !== i && (i && i.off(null, null, this), i = e, i && i.on("change:activeSong", f, this));
                    var t = i ? i.get("activeSong") : null;
                    t !== s && (s && s.off(null, null, this), s = t, s && s.on("change:smile change:frown change:isFavorite change:fromLibrary", f, this));
                    var n = this.getQueueStatus(),
                        u = !1;
                    for (var a in n) if (n.hasOwnProperty(a) && n[a] !== o[a]) {
                        u = !0;
                        break
                    }
                    o = n, l()
                }, 500),
                    l = _.throttle(function() {
                        u && u.playerChange()
                    }, 500);
                t.External.AIRBridge = {
                    isDesktop: !1,
                    init: function(l) {
                        e.parentSandboxBridge && (this.isDesktop = !0, e.childSandboxBridge = this, n = l, r = n.get("player"), r.on("change:playStatus change:currentQueue", f, this), i = r.get("currentQueue"), i && (i.on("change:activeSong", f, this), s = i.get("activeSong"), s && s.on("change:smile change:frown change:isFavorite change:fromLibrary", f, this)), o = this.getQueueStatus(), $("body").delegate('a[target="_blank"]', "click", function(e) {
                            if ($(e.target).closest("a").hasClass("airNoFollow")) return;
                            e.preventDefault();
                            var t = $(e.target).closest("a").attr("href");
                            return u.consoleWarn(t), t && u.navigateToUrl(t, "_blank"), !1
                        }), a = e.open, e.open = function(t, n, r) {
                            return r = _.orEqual(r, "width=800,height=600"), n == "_blank" ? u.navigateToUrl(t, n) : a.call(e, t, n, r)
                        }), t.ready.then(function() {
                            u && (u.ready(), $("body").addClass("airbridge"))
                        })
                    },
                    getDesktopPreferences: function() {
                        return u ? u.getDesktopPreferences() : null
                    },
                    setDesktopPreferences: function(e) {
                        u && u.setDesktopPreferences(e)
                    },
                    displayNotification: function(e, n) {
                        t.trigger("notification:add", {
                            title: "",
                            description: getString(n),
                            url: ""
                        })
                    },
                    buildSong: function(e, n) {
                        if (!e || !e instanceof t.Models.QueueSong) return null;
                        var r = e._wrapped,
                            i = {
                                SongID: r.attributes.SongID,
                                SongName: r.attributes.SongName,
                                ArtistID: r.get("ArtistID"),
                                ArtistName: r.get("ArtistName"),
                                AlbumID: r.get("AlbumID"),
                                AlbumName: r.get("AlbumName"),
                                queueSongID: e.attributes.queueSongID
                            };
                        return n && (i.url = r.get("token") ? "http://grooveshark.com/" + r.toUrl().replace("#!/", "") : "", i.imageUrl = r.getImageURL()), i
                    },
                    getQueueStatus: function() {
                        var e = {
                            activeSong: this.buildSong(s, !0),
                            autoplayEnabled: i ? i.attributes.autoplayEnabled : !1,
                            currentAutoplayTagID: i ? i.attributes.currentAutoplayTagID : 0,
                            hasRestoreQueue: r.attributes.previousQueue && (!i || !i.attributes.songs || !i.attributes.songs.length),
                            nextSong: i ? this.buildSong(i.attributes.nextSong) : null,
                            playStatus: r.attributes.playStatus,
                            previousSong: i ? this.buildSong(i.attributes.previousSong) : null,
                            queueID: i ? i.attributes.queueID : "",
                            repeatMode: i ? i.attributes.repeatMode : 0,
                            shuffleEnabled: i ? i.attributes.shuffleEnabled : !1
                        };
                        return s || (e.playStatus = 0), e
                    },
                    setHash: function(e) {
                        t.router.setHash(e)
                    },
                    safeToClose: function() {
                        return e.onbeforeunload()
                    },
                    addSongsToQueueAt: function() {
                        return t.Services.SWF.addSongsToQueueAt.apply(t.Services.SWF, arguments)
                    },
                    playSong: function() {
                        return t.Services.SWF.playSong.apply(t.Services.SWF, arguments)
                    },
                    pauseSong: function() {
                        return t.Services.SWF.pauseSong.apply(t.Services.SWF, arguments)
                    },
                    resumeSong: function() {
                        return t.Services.SWF.resumeSong.apply(t.Services.SWF, arguments)
                    },
                    stopSong: function() {
                        return t.Services.SWF.stopSong.apply(t.Services.SWF, arguments)
                    },
                    previousSong: function() {
                        return t.Services.SWF.previousSong.apply(t.Services.SWF, arguments)
                    },
                    nextSong: function() {
                        return t.Services.SWF.nextSong.apply(t.Services.SWF, arguments)
                    },
                    flagSong: function() {
                        return t.Services.SWF.flagSong.apply(t.Services.SWF, arguments)
                    },
                    voteSong: function() {
                        return t.Services.SWF.voteSong.apply(t.Services.SWF, arguments)
                    },
                    getIsMuted: function() {
                        return t.Services.SWF.getIsMuted.apply(t.Services.SWF, arguments)
                    },
                    setIsMuted: function() {
                        return t.Services.SWF.setIsMuted.apply(t.Services.SWF, arguments)
                    },
                    getVolume: function() {
                        return t.Services.SWF.getVolume.apply(t.Services.SWF, arguments)
                    },
                    setVolume: function() {
                        return t.Services.SWF.setVolume.apply(t.Services.SWF, arguments)
                    },
                    getShuffle: function() {
                        return t.Services.SWF.getShuffle.apply(t.Services.SWF, arguments)
                    },
                    setShuffle: function() {
                        return t.Services.SWF.setShuffle.apply(t.Services.SWF, arguments)
                    },
                    setAutoplay: function() {
                        return t.Services.SWF.setAutoplay.apply(t.Services.SWF, arguments)
                    },
                    clearQueue: function() {
                        return t.Services.SWF.clearQueue.apply(t.Services.SWF, arguments)
                    },
                    getRepeat: function() {
                        return t.Services.SWF.getRepeat.apply(t.Services.SWF, arguments)
                    },
                    setRepeat: function() {
                        return t.Services.SWF.setRepeat.apply(t.Services.SWF, arguments)
                    },
                    addPlaylist: function(e, n, r) {
                        t.Models.Playlist.get(e).then(function(e) {
                            t.trigger("player:addSongs", e.get("songs").toArray(), n, r, new t.Models.PlayContext(e))
                        })
                    },
                    addSongFromToken: function(e, n, r) {
                        t.Models.Song.getByToken(e).then(function(e) {
                            t.trigger("player:addSongs", [e], n, r)
                        })
                    },
                    favoriteSong: function(e) {
                        t.Models.Song.get(e).then(function(t) {
                            n.get("user").favorite("Songs", e)
                        })
                    },
                    unfavoriteSong: function(e) {
                        t.Models.Song.get(e).then(function(t) {
                            n.get("user").unfavorite("Songs", e)
                        })
                    },
                    addSongToLibrary: function(e) {
                        t.Models.Song.get(e).then(function(t) {
                            n.get("user").addSongsToLibrary([e])
                        })
                    },
                    removeSongFromLibrary: function(e) {
                        t.Models.Song.get(e).then(function(t) {
                            n.get("user").removeSongsFromLibrary([e])
                        })
                    },
                    executeProtocol: function(e) {
                        t.External.PluginAPI.executeProtocol(e)
                    }
                }
            }(), function() {
                function h(e, t) {
                    var n = t.shift(),
                        r = e[n];
                    return r ? t.length ? h(r, t) : r : null
                }
                var t = e.GS = e.GS || {};
                t.External = t.External || {};
                var n, r, i, s, o, u, a = [],
                    f = !1,
                    l = {
                        0: "none",
                        1: "loading",
                        2: "loading",
                        3: "playing",
                        4: "paused",
                        5: "buffering",
                        6: "failed",
                        7: "completed"
                    },
                    c = ["play", "add", "next"];
                t.External.PluginAPI = {
                    init: function(r) {
                        n = r, i = n.get("player"), i.on("change:playStatus change:currentQueue", this._onPlayerChange, this), s = i.get("currentQueue"), s && (s.on("change:activeSong", this._onPlayerChange, this), o = s.get("activeSong"), o && o.on("change:smile change:frown change:isFavorite change:fromLibrary", this._onPlayerChange, this)), t.ready.then(_.bind(function() {
                            e.Grooveshark = this;
                            if (e.postMessage && e.addEventListener) {
                                var t = this.getAPIVersion(),
                                    n = this.getApplicationVersion();
                                e.addEventListener("message", _.bind(this._onReceiveMessage, this), !1), setTimeout(function() {
                                    var r = {
                                        Grooveshark: n,
                                        GroovesharkAPIReady: t
                                    };
                                    e.postMessage($.stringify(r), "*")
                                }, 1e3)
                            }
                        }, this))
                    },
                    _onReceiveMessage: function(t) {
                        var n = this.getApplicationVersion();
                        try {
                            t = $.parseJSON(t.data)
                        } catch (r) {
                            f && console.log("API: processing failed", r)
                        }
                        if (!t || typeof t != "object" || t.Grooveshark || !t.groovesharkAPI) return;
                        var i = t.id,
                            s = t.method || "",
                            o = t.parameters,
                            u;
                        if (!f && s != "enablePostMessage") return;
                        if (typeof i != "number" && typeof i != "string") {
                            console.log("API: postMessage id required", t);
                            return
                        }
                        if (!s || typeof s != "string") {
                            console.log("API: postMessage method required", t);
                            return
                        }
                        if (s.indexOf("_") === 0 || s == "init") {
                            console.log("API: disabled " + s);
                            return
                        }
                        _.isArray(o) || (o = []);
                        switch (s) {
                        case "setSongStatusCallback":
                            u = _.bind(this[s], this)(function(t) {
                                var r = $.stringify({
                                    Grooveshark: n,
                                    id: i,
                                    method: s,
                                    result: t
                                });
                                e.postMessage(r, "*")
                            });
                            return;
                        default:
                            this[s] && (u = this[s].apply(this, o))
                        }
                        var a = $.stringify({
                            Grooveshark: n,
                            id: i,
                            method: s,
                            result: u
                        });
                        e.postMessage(a, "*")
                    },
                    _onPlayerChange: function(e, t) {
                        var n = e.changedAttributes(),
                            r = !1;
                        if (!_.isEmpty(n)) {
                            n.currentQueue && (r = !0, s && s.off(null, null, this), s = i.get("currentQueue"), s && s.on("change:activeSong", this._onPlayerChange, this));
                            if (r || n.activeSong) o && o.off(null, null, this), s ? (o = s.get("activeSong"), o && o.on("change:smile change:frown change:isFavorite change:fromLibrary", this._onPlayerChange, this)) : o = null
                        }
                        a.length && _.each(a, _.bind(function(e) {
                            _.isFunction(e) && e(this._buildCurrentPlayStatus())
                        }, this))
                    },
                    getApplicationVersion: function() {
                        return gsConfig.snapVersion
                    },
                    getAPIVersion: function() {
                        return 1.6
                    },
                    executeProtocol: function(e) {
                        var n = e.toLowerCase();
                        n.indexOf("gs://") != -1 && (e = e.substring(5), n = n.substring(5)), e.charAt(e.length - 1) == "/" && (e = e.substring(0, e.length - 1), n = n.substring(0, n.length - 1));
                        var r = n.split("/"),
                            i = r.pop();
                        _.indexOf(c, i) == -1 && (r.push(i), i = "");
                        if (r[0] == "themes") {
                            t.trigger("lightbox:open", "themes");
                            return
                        }
                        if (i) {
                            e = e.substring(0, e.length - i.length - 1);
                            var s = t.Services.SWF.playSpecialIndexes.DEFAULT,
                                o = !1;
                            switch (i) {
                            case "play":
                                o = !0;
                                break;
                            case "next":
                                s = t.Services.SWF.playSpecialIndexes.NEXT
                            }
                            switch (r[0]) {
                            case "s":
                                t.Models.Song.get(r[2]).then(function(e) {
                                    t.trigger("player:addSongs", [e], s, o)
                                });
                                break;
                            case "song":
                                t.Models.Song.getByToken(r[2]).then(function(e) {
                                    t.trigger("player:addSongs", [e], s, o)
                                });
                                break;
                            case "album":
                                t.Models.Album.get(r[2]).then(function(e) {
                                    t.trigger("player:addSongs", e.get("songs").toArray(), s, o, new t.Models.PlayContext(e))
                                });
                                break;
                            case "playlist":
                                t.Models.Playlist.get(r[2]).then(function(e) {
                                    t.trigger("player:addSongs", e.get("songs").toArray(), s, o, new t.Models.PlayContext(e))
                                })
                            }
                        }
                        if (r[0] == "search") {
                            var u = r[r.length - 1];
                            e = e.substring(0, e.length - u.length), e += "?q=" + u
                        }
                        t.router.setHash("/" + e)
                    },
                    getCurrentSongStatus: function() {
                        return this._buildCurrentPlayStatus()
                    },
                    setSongStatusCallback: function(t) {
                        if (_.isFunction(t)) a.push(t);
                        else if (_.isString(t)) {
                            var n = t.split("."),
                                r = h(e, n);
                            _.isFunction(r) && a.push(t)
                        }
                        return this._buildCurrentPlayStatus()
                    },
                    _buildCurrentPlayStatus: function() {
                        var e = {
                            song: null,
                            status: "none"
                        };
                        return o && (e.song = {
                            songID: o.get("SongID"),
                            songName: o.get("SongName"),
                            artistID: o.get("ArtistID"),
                            artistName: o.get("ArtistName"),
                            albumID: o.get("AlbumID"),
                            albumName: o.get("AlbumName"),
                            trackNum: o.get("TrackNum"),
                            estimateDuration: o.get("EstimateDuration") * 1e3,
                            artURL: o.getImageURL(),
                            calculatedDuration: i.get("duration"),
                            position: i.get("position"),
                            vote: o.get("smile") ? 1 : o.get("frown") ? -1 : 0,
                            isFavorite: !! o.get("isFavorite"),
                            isInLibrary: !! o.get("fromLibrary")
                        }), e.status = l[i.get("playStatus")], e
                    },
                    getPreviousSong: function() {
                        var e = null;
                        if (s) {
                            var t = s.get("previousSong");
                            t && (e = {
                                songID: t.get("SongID"),
                                songName: t.get("SongName"),
                                artistID: t.get("ArtistID"),
                                artistName: t.get("ArtistName"),
                                albumID: t.get("AlbumID"),
                                albumName: t.get("AlbumName"),
                                trackNum: t.get("TrackNum"),
                                estimateDuration: t.get("EstimateDuration") * 1e3,
                                artURL: t.getImageURL(),
                                vote: t.get("smile") ? 1 : t.get("frown") ? -1 : 0
                            })
                        }
                        return e
                    },
                    getNextSong: function() {
                        var e = null;
                        if (s) {
                            var t = s.get("nextSong");
                            t && (e = {
                                songID: t.get("SongID"),
                                songName: t.get("SongName"),
                                artistID: t.get("ArtistID"),
                                artistName: t.get("ArtistName"),
                                albumID: t.get("AlbumID"),
                                albumName: t.get("AlbumName"),
                                trackNum: t.get("TrackNum"),
                                estimateDuration: t.get("EstimateDuration") * 1e3,
                                artURL: t.getImageURL(),
                                vote: t.get("smile") ? 1 : t.get("frown") ? -1 : 0
                            })
                        }
                        return e
                    },
                    addSongsByID: function(e, n) {
                        var r = [],
                            i = [];
                        _.forEach(e, function(e) {
                            var n = t.Models.Song.get(e);
                            n.then(function(e) {
                                i.push(e)
                            }), r.push(n)
                        }), $.when.apply($, r).then(function() {
                            t.trigger("player:addSongs", i, t.Services.SWF.playSpecialIndexes.DEFAULT, n)
                        })
                    },
                    addSongByToken: function(e, n) {
                        t.Models.Song.getByToken(e).done(function(e) {
                            t.trigger("player:addSongs", [e], t.Services.SWF.playSpecialIndexes.DEFAULT, n)
                        })
                    },
                    addAlbumByID: function(e, n) {
                        t.Models.Album.get(e).done(function(e) {
                            e.getSongs().done(function(r) {
                                r = r && r.toArray() || [], t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.LAST, n, new t.Models.PlayContext(e))
                            })
                        })
                    },
                    addPlaylistByID: function(e, n) {
                        t.Models.Playlist.get(e).done(function(e) {
                            e.getSongs().done(function(r) {
                                r = r && r.toArray() || [], t.trigger("player:addSongs", r, t.Services.SWF.playSpecialIndexes.LAST, n, new t.Models.PlayContext(e))
                            })
                        })
                    },
                    play: function() {
                        !s.get("currentBroadcast") || s.get("isBroadcasting") ? t.trigger("player:playSong") : t.trigger("player:volumeMute", !1)
                    },
                    pause: function() {
                        !s.get("currentBroadcast") || s.get("isBroadcasting") ? t.trigger("player:pauseSong") : t.trigger("player:volumeMute", !0)
                    },
                    seekToPosition: function(e) {
                        t.trigger("player:seekTo", e)
                    },
                    togglePlayPause: function() {
                        !s.get("currentBroadcast") || s.get("isBroadcasting") ? t.trigger("player:togglePlay") : t.trigger("player:volumeMute")
                    },
                    previous: function() {
                        t.trigger("player:previousSong")
                    },
                    next: function() {
                        t.trigger("player:nextSong")
                    },
                    setVolume: function(e) {
                        t.trigger("player:volumeChange", e)
                    },
                    getVolume: function() {
                        return i.get("volume")
                    },
                    setIsMuted: function(e) {
                        t.trigger("player:volumeMute", e)
                    },
                    getIsMuted: function() {
                        return i.get("isMuted")
                    },
                    voteCurrentSong: function(e) {
                        t.trigger("player:voteSong", o.get("queueSongID"), e)
                    },
                    getVoteForCurrentSong: function() {
                        return o ? o.get("smile") ? 1 : o.get("frown") ? -1 : 0 : 0
                    },
                    favoriteCurrentSong: function() {
                        o && n.get("user").favorite("Songs", o.get("SongID"))
                    },
                    setPlaylistsUpdateCallback: function(t) {
                        var i = function(t) {
                                r && r.getPlaylists().done(_.bind(function(e) {
                                    e.off("add remove reset", null, this)
                                }, this)), r = t, u ? t.getPlaylists().done(_.bind(function(t) {
                                    t.on("add remove reset", function() {
                                        var n = $.stringify({
                                            Grooveshark: this.getApplicationVersion(),
                                            method: "setPlaylistsUpdateCallback",
                                            type: "generic",
                                            result: t
                                        });
                                        e.postMessage(n, "*")
                                    }, this);
                                    var n = $.stringify({
                                        Grooveshark: this.getApplicationVersion(),
                                        method: "setPlaylistsUpdateCallback",
                                        type: "generic",
                                        result: t
                                    });
                                    e.postMessage(n, "*")
                                }, this)) : t.getPlaylists().done(_.bind(function(t) {
                                    t.on("add", function(t) {
                                        var n = $.stringify({
                                            Grooveshark: this.getApplicationVersion(),
                                            method: "setPlaylistsUpdateCallback",
                                            type: "add",
                                            result: t
                                        });
                                        e.postMessage(n, "*")
                                    }, this), t.on("remove", function(t) {
                                        var n = $.stringify({
                                            Grooveshark: this.getApplicationVersion(),
                                            method: "setPlaylistsUpdateCallback",
                                            type: "remove",
                                            result: t
                                        });
                                        e.postMessage(n, "*")
                                    }, this), t.on("reset", function() {
                                        var n = $.stringify({
                                            Grooveshark: this.getApplicationVersion(),
                                            method: "setPlaylistsUpdateCallback",
                                            type: "reset",
                                            result: t
                                        });
                                        e.postMessage(n, "*")
                                    }, this);
                                    var n = $.stringify({
                                        Grooveshark: this.getApplicationVersion(),
                                        method: "setPlaylistsUpdateCallback",
                                        type: "generic",
                                        result: t
                                    });
                                    e.postMessage(n, "*")
                                }, this))
                            };
                        u = t, n.on("change:user", i, this), i.call(this, n.get("user"))
                    },
                    addCurrentSongToLibrary: function() {
                        o && n.get("user").addSongsToLibrary([o.get("SongID")])
                    },
                    removeCurrentSongFromQueue: function() {
                        o && t.on("player:removeSongs", [o])
                    },
                    enablePostMessage: function() {
                        f = !0
                    },
                    searchAlbums: function(e) {},
                    searchSongs: function(e) {},
                    toggleRadio: function() {
                        t.trigger("player:radio")
                    },
                    getRadioStatus: function() {
                        var e = i.get("currentQueue");
                        return e && (e.get("autoplayEnabled") || e.get("clientRadioEnabled"))
                    }
                }
            }(), function(n) {
                function i(e) {
                    s(e), o(e), u(e)
                }
                function s(t) {
                    e._gaq && _gaq.push && _gaq.push(["_trackPageview", t])
                }
                function o(t) {
                    var n = {
                        c1: 2,
                        c2: "8187464",
                        c4: (location.protocol + "//" + location.host + "/" + t).replace("#!/", "")
                    };
                    e.COMSCORE && COMSCORE.beacon ? COMSCORE.beacon(n) : e._comscore.push(n)
                }
                function u(e) {}
                function a(t, i) {
                    if (_.defined(t.inviteCode)) {
                        gsConfig.inviteCode = t.inviteCode;
                        var s = new Date,
                            o = s.valueOf() + 12096e5;
                        try {
                            GS.Services.Local.set("lastInviteCode", {
                                inviteCode: t.inviteCode,
                                expires: o
                            })
                        } catch (u) {}
                    }
                    if (t.hasOwnProperty("password")) {
                        var a = {};
                        t.hasOwnProperty("code") && (a.resetCode = t.code), GS.trigger("lightbox:open", "forget", a)
                    }
                    t.hasOwnProperty("invite") && GS.trigger("lightbox:open", "invite"), t.hasOwnProperty("signup") && GS.trigger("lightbox:open", "signup"), t.hasOwnProperty("login") && (!GS.user || !GS.user.isLoggedIn) && (i ? GS.trigger("lightbox:open", "login", {
                        onLogin: function() {
                            setTimeout(function() {
                                GS.router.setHash(i)
                            }, 0)
                        }
                    }) : GS.trigger("lightbox:open", "login")), t.hasOwnProperty("testAds") && (GS.Models.Ad.useTestAds = !0);
                    if (t.hasOwnProperty("measurePerformance")) {
                        var f = 1,
                            l = !1,
                            c = function() {
                                n("#grid ul.options").length ? (top.hasLoaded("search"), GS.player.addSongsToQueueAt([n("#grid ul.options:first").attr("rel")], -1, !0), setTimeout(h, f)) : setTimeout(c, f)
                            },
                            h = function() {
                                GS.player.isPlaying && !GS.player.isLoading && !l ? (l = !0, top.hasLoaded("play")) : setTimeout(h, f)
                            };
                        e.top && e != top && _.isFunction(top.hasLoaded) && (top.hasLoaded("page"), setTimeout(c, f), GS.router.setHash("/search?q=quiet+company"))
                    }
                    if (t.hasOwnProperty("emailVerifySucceeded")) n.localize.ready.done(function() {
                        GS.trigger("notification:add", {
                            type: "success",
                            duration: 1e4,
                            description: _.getString("POPUP_EMAIL_VERIFIED_ARTIST_CLAIM")
                        })
                    }), GS.router.setHash("/");
                    else if (t.hasOwnProperty("emailVerifyFailed")) n.localize.ready.done(function() {
                        GS.trigger("notification:add", {
                            type: "error",
                            duration: 1e4,
                            description: _.getString("POPUP_EMAIL_VERIFY_FAILED")
                        })
                    }), GS.router.setHash("/");
                    else if (t.hasOwnProperty("emailVerifyMismatch")) n.localize.ready.done(function() {
                        GS.trigger("notification:add", {
                            type: "error",
                            duration: 0,
                            description: _.getString("POPUP_EMAIL_VERIFY_MISMATCH")
                        })
                    }), GS.router.setHash("/");
                    else if (t.hasOwnProperty("emailVerifyExpired")) n.localize.ready.done(function() {
                        GS.trigger("notification:add", {
                            type: "error",
                            duration: 0,
                            click: function() {
                                GS.Services.API.resendEmailToken().done(function() {
                                    GS.trigger("notification:add", {
                                        type: "success",
                                        description: _.getString("ARTIST_CLAIM_FAILED_RESENT_EMAIL")
                                    })
                                })
                            },
                            description: _.getString("POPUP_EMAIL_VERIFY_EXPIRED")
                        })
                    }), GS.router.setHash("/");
                    else if (t.hasOwnProperty("artistEmailToken")) {
                        var p = t.artistEmailToken,
                            d = function() {
                                GS.Services.API.userVerifyEmail(p).done(function() {
                                    GS.trigger("notification:add", {
                                        type: "success",
                                        duration: 1e4,
                                        description: _.getString("POPUP_EMAIL_VERIFIED_ARTIST_CLAIM")
                                    })
                                }).fail(function() {
                                    GS.trigger("notification:add", {
                                        type: "error",
                                        duration: 1e4,
                                        description: _.getString("POPUP_EMAIL_VERIFY_FAILED")
                                    })
                                }), GS.router.setHash("/"), r.model.off("change:user", d)
                            };
                        GS.getLoggedInUserID() < 1 ? (n.localize.ready.done(function() {
                            GS.trigger("lightbox:open", "login", {
                                message: _.getString("POPUP_EMAIL_VERIFY_LOGIN_REQUIRED")
                            })
                        }), r.model.on("change:user", d)) : d()
                    }
                }
                function c(e, t) {
                    extraGutsParams = _.orEqual(t, !1);
                    var n = _.defined(e.search),
                        i = _.defined(e.notFound);
                    r.model.get("user").get("Context").type == "user" ? r.page.setPage("home", {
                        id: 0,
                        focusSearch: n,
                        notFound: i
                    }) : r.page.setPage("artistDashboard", {
                        id: r.model.get("user").get("Context").artist.get("ArtistID"),
                        asHome: !0
                    })
                }
                function h(e) {
                    var t = new w(e.splat, "login", "id", "section", "subpage", "objType");
                    r.page.setPage("user", {
                        id: t.id,
                        subpage: t.subpage,
                        section: t.section
                    })
                }
                function p(e) {
                    var t = e.splat.shift(),
                        n = new w(e.splat, "name", "id", "subpage", "subpageData");
                    n.subpageData && (n.subpage === "comment" || n.subpage === "activity") && (n.subpage += "/" + n.subpageData), t === "artist" && n.subpage === "dashboard" ? r.page.setPage("artistDashboard", {
                        id: n.id,
                        subpage: n.subpageData
                    }) : r.page.setPage(t, {
                        id: n.id,
                        subpage: _.orEqual(n.subpage, "profile"),
                        subpageData: n.subpageData,
                        playOnLoad: e.play
                    })
                }
                function d(e) {
                    var t = e.splat.shift(),
                        n = new w(e.splat, "subpage");
                    n.section = t, r.page.setPage("static", {
                        subpage: _.orEqual(n.subpage, ""),
                        section: _.orEqual(n.section, "")
                    })
                }
                function v(e, t) {
                    var n = e.indexOf("/");
                    return n !== -1 ? e.substring(0, n) + "/" + t + e.substring(n) : e + "/" + t
                }
                function m(e) {
                    var n = new w(e.splat, "subpage", "type");
                    n.subpage == "popular" && (n.subpage = "songs"), r.page.setPage("popular", {
                        subpage: n.subpage || t,
                        type: n.type || t
                    })
                }
                function g(e) {
                    var n = new w(e.splat, "name", "subpage");
                    r.page.setPage("broadcasts", {
                        subpage: n.subpage || t,
                        getParams: e
                    })
                }
                function b() {
                    var t = this;
                    this._routes = [], this._lastHash = "", this._history = [], this._wasReplace = null, this._historyIndex = 0, this._nextHashShift = 0, this._pageNameCache = {}, this.hasBack = !1, this.hasForward = !1, this.setHash = function(t) {
                        t === null && (t = "notFound"), t = _.cleanHash(t), e.location.hash = t
                    }, this.replaceHash = function(t) {
                        t === null && (t = "notFound"), t = _.cleanHash(t), this._wasReplace = [e.location.hash, t], e.location.replace(e.location.protocol + "//" + e.location.hostname + "/" + t)
                    }, this.get = function(e, t, n) {
                        n = _.orEqual(n, this);
                        if (!(e instanceof RegExp) && !_.isString(e)) {
                            console.error("invalid route, must be String or RegExp");
                            return
                        }
                        _.isString(e) && (e = new RegExp("^" + e + "$")), this._routes.push({
                            path: e,
                            callback: t,
                            context: n
                        })
                    }, this.notFound = function() {
                        this.replaceHash("notFound")
                    }, this.back = function() {
                        this.navHistory(-1)
                    }, this.forward = function() {
                        this.navHistory(1)
                    }, this.navHistory = function(e) {
                        var t = this._historyIndex + e;
                        t >= 0 && t < this._history.length && (this._nextHashShift = e, this.setHash(this._history[t]))
                    }, this.performSearch = function(e, t) {
                        t = t.toString();
                        if (t.indexOf("http://") === 0 && t.indexOf("tinysong") == -1) {
                            t = t.substring(7), this.setHash(t);
                            return
                        }
                        e = e.toLowerCase(), t = encodeURIComponent(t), t = t.replace(/%20/g, "+"), e ? this.setHash("/search/" + e + "?q=" + t) : this.setHash("/search?q=" + t)
                    }, this.cachePageName = function(e, t, n) {
                        this._pageNameCache[e] = {
                            type: t,
                            id: n
                        }
                    }, this.uncachePageName = function(e) {
                        this._pageNameCache.hasOwnProperty(e) && delete this._pageNameCache[e]
                    }, this.run = function(i) {
                        r = i, r.render(), this.page = {
                            activate: function() {},
                            getPageClass: function() {
                                return n.Deferred()
                            }
                        }, n(e).hashchange(function(e) {
                            var n = location.hash;
                            n && n.length && (n = location.href.substring(location.href.indexOf("#"))), t._onHashChange(n)
                        }), n(e).trigger("hashchange")
                    }, this._onHashChange = function(e) {
                        if (e !== this._lastHash) {
                            var t = r.page.currentPageView ? r.page.currentPageView.blockPageChange() : !1;
                            if (t && !confirm(t)) {
                                this.replaceHash(this._lastHash);
                                return
                            }
                        }
                        e = e || "#!/", this._lastHash = e, i(e);
                        if (this._nextHashShift !== 0) {
                            var n = this._historyIndex + this._nextHashShift;
                            n >= 0 && n < this._history.length && this._history[n] == e ? this._historyIndex = n : this._nextHashShift = 0
                        }
                        this._nextHashShift === 0 && (this._history = this._history.slice(0, this._historyIndex + 1), e && (this._wasReplace && this._history.length && this._wasReplace[0] === this._history[this._history.length - 1] && this._wasReplace[1] === e && this._history.pop(), this._history.push(e)), this._historyIndex = this._history.length - 1), this._nextHashShift = 0, this._wasReplace = null;
                        var s = this._parseQueryString(e),
                            o = e.replace(y, ""),
                            u = this._getRouteForPath(o);
                        if (!u) {
                            this.notFound();
                            return
                        }
                        var f = o.match(u.path);
                        f.shift(), s.splat = f, _.isFunction(u.callback) && (u.callback.call(u.context, s), a(s, o)), this.hasBack = this._history.length && this._historyIndex > 0, this.hasForward = this._history.length && this._historyIndex < this._history.length - 1, GS.trigger("router:change")
                    }, this._getRouteForPath = function(e) {
                        var t, n, r;
                        for (n = 0, r = this._routes.length; n < r; n++) if (this._routes[n].path.test(e)) {
                            t = this._routes[n];
                            break
                        }
                        return t
                    }, this._parseQueryString = function(e) {
                        var t = {},
                            n = /\+/g,
                            r, i, s, o, u;
                        r = e.match(y);
                        if (r) {
                            i = r[1].split("&");
                            for (o = 0, u = i.length; o < u; o++) {
                                s = i[o].split("=");
                                if (s[0] === "q" || s[0] === "query") s[1] = s[1].replace(n, "%20");
                                t = this._parseParamPair(t, decodeURIComponent(s[0]), decodeURIComponent(s[1]))
                            }
                        }
                        return t
                    }, this._parseParamPair = function(e, t, n) {
                        return e[t] ? _isArray(e[t]) ? e[t].push(n) : e[t] = [e[t], n] : e[t] = n, e
                    }, this._getTypeIDForPageName = function(e) {
                        var r = n.Deferred(),
                            i, s, o;
                        return _.defined(this._pageNameCache[e]) ? r.resolve(this._pageNameCache[e]) : GS.Services.API.getItemByPageName(e).done(function(n) {
                            if (n && n.type) {
                                o = n[n.type];
                                if (!o) {
                                    r.reject(n);
                                    return
                                }
                                o.PathName = e, o.pageNameData = n.data;
                                switch (n.type) {
                                case "user":
                                    i = new GS.Models.User(o), s = i.id, s < 1 && (s = 0);
                                    break;
                                case "artist":
                                    i = new GS.Models.Artist(o), i._gotExtraDetails = !0, s = i.id;
                                    break;
                                case "album":
                                    i = new GS.Models.Album(o), s = i.id;
                                    break;
                                case "theme":
                                    i = o, s = o.themeID;
                                    break;
                                default:
                                    console.log("unknown type for PageName", n.type, e), r.reject(n);
                                    return
                                }
                                if (!s) {
                                    r.reject(n);
                                    return
                                }
                                t._pageNameCache[e] = {
                                    type: n.type,
                                    id: s,
                                    item: i
                                }, r.resolve(t._pageNameCache[e])
                            } else r.reject(n)
                        }).fail(function(e) {
                            r.reject(e)
                        }), r.promise()
                    }
                }
                function w() {
                    var e = n.makeArray(arguments),
                        t = e.shift()[0],
                        r = this;
                    if (_.isEmpty(t)) {
                        r.length = 0;
                        return
                    }
                    var i = t.replace(/\/$/, "").split("/");
                    r.length = i.length;
                    var s;
                    _.forEach(i, function(t, n) {
                        s = e[n], r[s] = t
                    })
                }
                var r;
                typeof e._comscore != "object" && (e._comscore = []), GS.router = new b;
                var f = "",
                    l = null;
                GS.router.get("", function(e) {
                    c(e)
                }), GS.router.get(/^#!?\/$/, function(e) {
                    c(e)
                }), GS.router.get(/^#!?\/notFound\/?$/, function(e) {
                    e.notFound = !0, c(e)
                }), GS.router.get(/^#!?\/whatisbroadcast\/?$/, function(e) {
                    GS.trigger("lightbox:open", "broadcastAbout"), c({})
                }), GS.router.get(/^#!?\/user\/(.*)\/?$/, h), GS.router.get(/^#!?\/playlist\/(.*)\/?/, function(e) {
                    var t = new w(e.splat, "name", "id", "subpage", "subpageData");
                    if (t.subpage === "comment" || t.subpage === "activity") t.subpage += "/" + t.subpageData;
                    r.page.setPage("playlist", {
                        id: t.id,
                        subpage: _.orEqual(t.subpage, "profile"),
                        playOnLoad: e.play
                    })
                }), GS.router.get(/^#!?\/s(?:ong)?\/(.*)\/?/, function(e) {
                    var t = new w(e.splat, "name", "token", "subpage", "subpageData");
                    if (t.subpage === "comment" || t.subpage === "activity") t.subpage += "/" + t.subpageData;
                    r.page.setPage("song", {
                        id: t.token,
                        subpage: _.orEqual(t.subpage, ""),
                        fbComment: e.fbComment
                    })
                }), GS.router.get(/^#!?\/(album|artist|promotion)\/(.*)\/?/, p), GS.router.get(/^#!?\/(about|legal|contact|press|logo|artists|careers)(?:\/?|\/(.*))$/, d), GS.router.get(/^#!\/redeem\/?(.*)\/?/, function(e) {
                    var t = new w(e.splat, "type", "code");
                    !t.code && t.type && (t.code = t.type), c(t);
                    var r = function() {
                            GS.trigger("lightbox:open", "payments", {
                                code: t.code,
                                tab: "redeem"
                            }), GS.router.setHash("/")
                        };
                    GS.getLoggedInUserID() < 1 ? n.localize.ready.done(function() {
                        GS.trigger("lightbox:open", "login", {
                            message: _.getString("POPUP_EREDEEM_CODE_LOGIN_REQUIRED"),
                            onLogin: r
                        })
                    }) : r()
                }), GS.router.get(/^#!?\/login(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "type");
                    c(t), GS.trigger("lightbox:open", "login", {
                        type: t.type
                    })
                }), GS.router.get(/^#!?\/themes(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "type");
                    c(t), GS.trigger("lightbox:open", "themes", {
                        type: t.type
                    })
                }), GS.router.get(/^#!?\/(theme)\/(.*)\/?/, function(e) {
                    var t = e.splat.shift(),
                        n = new w(e.splat, "name", "themeid", "type");
                    GS.trigger("theme:set", {
                        temporary: !0,
                        manual: !0,
                        themeID: n.themeid,
                        name: n.name
                    }), c(n)
                }), GS.router.get(/^#!?\/boxee(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "type");
                    c(t), GS.trigger("lightbox:open", "feature", {
                        feature: "boxee"
                    })
                }), GS.router.get(/^#!?\/perks(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "type");
                    c(t), GS.theme.setCurrentTheme(163, !0), GS.trigger("lightbox:open", "vipPerks")
                }), GS.router.get(/^#!?\/gift(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "type");
                    c(t);
                    var i = new Date;
                    i.getMonth() >= 10 && r.theme.setCurrentTheme(945);
                    var s = function() {
                            GS.trigger("lightbox:open", "payments", {
                                action: "purchase"
                            }), GS.router.setHash("/")
                        };
                    GS.getLoggedInUserID() < 1 ? n.localize.ready.done(function() {
                        GS.trigger("lightbox:open", "login", {
                            message: _.getString("POPUP_BUY_CODE_LOGIN_REQUIRED"),
                            onLogin: s
                        })
                    }) : s()
                }), GS.router.get(/^#!?\/upgrade(?:$|\/(.*)\/?)/, function(e) {
                    function i(e) {
                        e.loadSubscription().done(function(e) {
                            r.page.setPage("settings", {
                                subpage: "subscriptions"
                            }), e.hasSubscription() || GS.trigger("lightbox:open", "payments")
                        })
                    }
                    var t = new w(e.splat, "type"),
                        n = new Date;
                    n.getMonth() >= 10 && r.theme.setCurrentTheme(945);
                    var s = r.model.get("user");
                    s && s.get("isLoggedIn") ? i(s) : GS.trigger("lightbox:open", "login", {
                        message: _.getString("LB_LOGIN_MUST_LOGIN_TO_UPGRADE"),
                        onLogin: i
                    })
                }), GS.router.get(/^#!?\/(sessions)/, function(e) {
                    GS.theme.setCurrentTheme(247, !0), c({})
                }), GS.router.get(/^#!?\/search(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "type"),
                        n, i;
                    r.page.setPage("search", {
                        id: e.q || e.query,
                        type: t.type,
                        query: e.q || e.query
                    })
                }), GS.router.get(/^#!?\/surveys(?:$|\/(.*)\/?|\/(.*)\/(.*)\/?)/, function(e) {
                    r.page.setPage("surveys", {})
                }), GS.router.get(/^#!?\/now_playing(?:$|\/(.*)\/?)/, function(e) {
                    r.page.setPage("nowPlaying", {
                        id: 0
                    })
                }), GS.router.get(/^#!?\/popular(?:$|\/(.*)\/?)/, m), GS.router.get(/^#!?\/broadcasts(?:$|\/(.*)\/?)/, g), GS.router.get(/^#!?\/signup(?:$|\/(.*)\/?)/, function() {
                    GS.router.replaceHash("/"), GS.trigger("lightbox:open", "signup")
                }), GS.router.get(/^#!\/recommended(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "subpage", "type");
                    r.page.setPage("recommended", {
                        subpage: t.subpage || "",
                        type: t.type || ""
                    })
                }), GS.router.get(/^#!\/(?:music|explore)(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "subpage", "type");
                    t.subpage == "popular" ? m(e) : c(e)
                }), GS.router.get(/^#!\/(?:tag|genre)(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "tagName", "tagID", "subpage");
                    t.tagName === "" ? self.notFound() : r.page.setPage("tag", {
                        tagName: t.tagName || "",
                        tagID: t.tagID || "",
                        subpage: t.subpage || ""
                    })
                }), GS.router.get(/^#!\/(?:tags|genres)(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "subpage", "type");
                    r.page.setPage("tags", {
                        subpage: t.subpage || "",
                        type: t.type || ""
                    })
                }), GS.router.get(/^#!\/(?:community)(?:$|\/(.*)\/?)/, function(e) {
                    var t = new w(e.splat, "subpage", "type");
                    r.page.setPage("community", {
                        subpage: t.subpage || "",
                        type: t.type || ""
                    })
                }), GS.router.get(/^#!?\/(.*)\/?$/, function(e) {
                    var t = new w(e.splat, "page", "subpage", "type"),
                        n, i, s, o = this;
                    n = t.page;
                    if (t.page == "anywhere" || t.page == "subscription") {
                        GS.router.replaceHash("/settings/subscription");
                        return
                    }
                    t.page == "popular" && m(), t.page == "genres" && (n = t.page = "tags");
                    var u = r.page.setPage(n, t);
                    u.fail(_.bind(function() {
                        this._getTypeIDForPageName(t.page).done(function(t) {
                            switch (t.type) {
                            case "user":
                                e.splat[0] = v(e.splat[0], t.id), h(e);
                                break;
                            case "artist":
                            case "album":
                                e.splat[1] = v(e.splat[0], t.id), e.splat[0] = t.type, p(e);
                                break;
                            case "theme":
                                var n = t.item.themeName ? t.item.themeName : "x",
                                    r = t.id;
                                t.item.pageNameData.isPromo ? o.setHash("/promotion/" + n + "/" + r) : o.setHash("/theme/" + n + "/" + r);
                                break;
                            default:
                                console.log("cant handle pageName type", t), o.notFound()
                            }
                        }).fail(function(e) {
                            o.notFound()
                        })
                    }, this))
                }), GS.router.get(/^#!?(?:[a-z0-9A-Z])/, function(e) {
                    if (GS.page.activePage && GS.page.activePage) {
                        var t = GS.page.activePage.url;
                        t = t.replace(/(&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/, "$1fbComment");
                        var n = GS.page.activePage.element.controller();
                        n.scrollToFBComment && n.scrollToFBComment(), location.replace(t)
                    }
                });
                var y = /\?([^#]*)$/
            }(jQuery);
            var n;
            (function() {
                function i() {
                    requireDeferred("tier2");
                    if (e.parentSandboxBridge) return;
                    if (e.gsProduction && e.gsProduction.LB_CSSURI) {
                        var t = _.isUndefined(e.dataURISupport) || dataURISupport ? gsProduction.LB_CSSURI : gsProduction.LB_CSS;
                        t && t.assetPath && $.getStylesheet(t.assetPath)
                    }
                }
                function s() {
                    var e = document.title || "";
                    e.indexOf("#") != -1 && (e = e.substring(0, e.indexOf("#"))), document.title != e && e !== "" && (document.title = e)
                }
                function o() {
                    var e = !0,
                        t = _.browserDetect(),
                        n = {
                            browser: t
                        };
                    switch (t.browser) {
                    case "chrome":
                        t.version >= 6 && (e = !1), Boolean(navigator.userAgent.match(/GoogleTV/i)) && (n.isUncertain = !0, e = !0);
                        break;
                    case "safari":
                        t.version >= 5 && (e = !1), Boolean(navigator.userAgent.match(/luakit/i)) && (n.isUncertain = !0, e = !0);
                        break;
                    case "msie":
                        t.version >= 7 && t.version <= 10 && (e = !1), t.version <= 6 && (n.isChromeFrame = !0, e = !0);
                        break;
                    case "firefox":
                        t.version >= 3 && (e = !1);
                        break;
                    case "mozilla":
                        t.version >= 1.9 && (e = !1);
                        break;
                    case "opera":
                        t.version >= 11 && (e = !1);
                        break;
                    case "adobeair":
                        e = !1
                    }
                    e && r.trigger("lightbox:open", "unsupportedBrowser", n)
                }
                var r = e.GS = e.GS || {};
                r.External = r.External || {}, r.Models = r.Models || {}, r.Services = r.Services || {}, r.Views = r.Views || {}, r.Views.Modules = r.Views.Modules || {}, r.Views.Pages = r.Views.Pages || {}, r.Views.Lightboxes = r.Views.Lightboxes || {}, r.Views.Tooltips = r.Views.Tooltips || {}, typeof define == "function" && typeof define.amd == "object" && define.amd && gsConfig.runMode != "dev" && gsConfig.runMode != "themes" ? (define("tier2").path = "/gs/tier2.js", define("settingsPage").path = "/gs/tier2.js", define("nowPlayingPage").path = "/gs/tier2.js", define("communityPage").path = "/gs/tier2.js", define("promotionPage").path = "/gs/tier2.js", define("surveysPage").path = "/gs/tier2.js", define("tagPage").path = "/gs/tier2.js", define("shareLightbox").path = "/gs/tier2.js", define("suggestTagsLightbox").path = "/gs/tier2.js", define("feedbackLightbox").path = "/gs/tier2.js", define("artistDashboardPage").path = "/gs/artists.js", define("claimArtistLightbox").path = "/gs/artists.js", define("claimArtistLightbox").path = "/gs/artists.js", define("claimSongsLightbox").path = "/gs/artists.js", define("editArtistLightbox").path = "/gs/artists.js", define("editAlbumLightbox").path = "/gs/artists.js", define("editSongsLightbox").path = "/gs/artists.js", define("uploadLightbox").path = "/gs/artists.js", define("id3").path = "/gs/artists.js") : (define("settingsPage").path = "/gs/views/pages/settings.js", define("nowPlayingPage").path = "/gs/views/pages/nowPlaying.js", define("communityPage").path = "/gs/views/pages/community.js", define("promotionPage").path = "/gs/views/pages/promotion.js", define("surveysPage").path = "/gs/views/pages/surveys.js", define("tagPage").path = "/gs/views/pages/tag.js", define("shareLightbox").path = "/gs/views/lightboxes/share.js", define("suggestTagsLightbox").path = "/gs/views/lightboxes/suggestTags.js", define("feedbackLightbox").path = "/gs/views/lightboxes/feedback.js", define("artistDashboardPage").path = "/gs/views/pages/artistDashboard.js", define("claimArtistLightbox").path = "/gs/views/lightboxes/claimArtist.js", define("claimSongsLightbox").path = "/gs/views/lightboxes/claimSongs.js", define("editArtistLightbox").path = "/gs/views/lightboxes/editArtist.js", define("editAlbumLightbox").path = "/gs/views/lightboxes/editAlbum.js", define("editSongsLightbox").path = "/gs/views/lightboxes/editSongs.js", define("uploadLightbox").path = "/gs/views/lightboxes/upload.js", define("id3").path = "/gs/resources/id3.js"), $.drop({
                    mode: "mouse"
                }), jQuery.event.special.drag.defaults.distance = 10, r.Views = r.Views || {}, r.Views.viewBundles = e.gsViewBundles || {}, r.Views.templateCache = {};
                if (e.gsPageBundle && $.isPlainObject(gsPageBundle)) for (var u in gsPageBundle) gsPageBundle.hasOwnProperty(u) && (r.Views.templateCache[u] = gsPageBundle[u]);
                r.dispatcher = _.extend({}, Backbone.Events), r.trigger = _.bind(r.dispatcher.trigger, r.dispatcher), r.on = _.bind(r.dispatcher.on, r.dispatcher), r.off = _.bind(r.dispatcher.off, r.dispatcher);
                var a = new $.Deferred;
                r.ready = a.promise();
                var f = new r.Models.Model({
                    gsConfig: gsConfig
                });
                r.getCurrentBroadcastID = function() {
                    var e = f.get("player"),
                        t = e && e.get("currentQueue"),
                        n = t && t.get("currentBroadcast");
                    return n ? n.get("BroadcastID") : !1
                }, r.getCurrentBroadcast = function() {
                    var e = f.get("player"),
                        t = e && e.get("currentQueue"),
                        n = t && t.get("currentBroadcast");
                    return n ? n : !1
                }, gsConfig.windowName && (e.name = gsConfig.windowName), r.getLoggedInUserID = function() {
                    return f.get("user").id
                }, r.getLoggedInUserPicture = function(e) {
                    return f.get("user").getImageURL(e)
                }, r.isLoggedInUserOwnerOfArtist = function(e) {
                    if (!e) return !1;
                    var n = f.get("user").get("artistsOwned");
                    if (n) {
                        if (e) return n.get(e) ? !0 : !1;
                        if (e === t) return n.length > 0
                    }
                    return !1
                }, r.isBroadcastListener = function(e) {
                    var t = f.get("player"),
                        n = t && t.get("currentQueue"),
                        r = n && n.get("currentBroadcast");
                    return r ? e ? r === e && !n.get("isBroadcasting") : !n.get("isBroadcasting") : !1
                }, r.isBroadcaster = function() {
                    var e = f.get("player"),
                        t = e && e.get("currentQueue");
                    return t && !! t.get("isBroadcasting")
                }, r.getCurrentPlayStatus = function() {
                    return f.get("player").get("playStatus")
                }, n = new r.Views.Application({
                    model: f
                }), gsConfig.runMode === "dev" && (e.debugApp = n), r.Services.SWF.init(f), r.Services.API.init(gsConfig), r.Services.GUTS.init(f), r.Services.Facebook.init(n), r.Services.Twitter.init(n), r.Services.Google.init(n), r.Services.Lastfm.init(n), r.Services.Flattr.init(n), r.Services.Youtube.init(n), r.Services.Vimeo.init(n), r.External.AIRBridge.init(f), r.External.PluginAPI.init(f), r.Models.Callout.setupCalloutListeners(), $(document).ready(function() {
                    a.notify();
                    var e = $("body,#main,#page_wrapper,#mainContainer");
                    e.scrollTop(0), document.body.scroll = "no", e.scroll(function(e) {
                        return $(this).scrollTop() > 0 && $(this).scrollTop(0), !1
                    }), $.browser.msie && ($(document).bind("propertychange", function() {
                        event.propertyName == "title" && s()
                    }), s()), $.drop({
                        mode: "mouse"
                    }), a.resolve(), r.router.run(n), o(), setTimeout(i, 1e4)
                });
                var l = Date.now();
                e.onbeforeunload = function() {
                    var e = f.get("user");
                    e && e.id > 0 && e.storeLibrary(), r.Services.SWF && r.Services.SWF.hasOwnProperty("storeQueue") && r.Services.SWF.storeQueue(), r.Services.GUTS && r.Services.GUTS.forceSend();
                    if (Date.now() - l < 3e4 && !gsConfig.httpsFix && !r.External.AIRBridge.isDesktop) return _.getString("ONCLOSE_JUST_LOADED");
                    var t = n.page.currentPageView ? n.page.currentPageView.blockPageChange() : !1;
                    if (t) return t;
                    var i = swfobject.getObjectById("record-swf");
                    if (i && _.isFunction(i.numPendingUploads) && i.numPendingUploads() > 0) return _.getString("ONCLOSE_PENDING_UPLOADS");
                    if (f.get("player").playStatusIsPlaying()) return _.getString("ONCLOSE_PLAYING")
                }, e.onunload = function() {
                    r.Services.SWF && r.Services.SWF.hasOwnProperty("onPageUnload") && r.Services.SWF.onPageUnload()
                }
            })()
        };
    (function() {
        var t = 0,
            n = 0,
            r = 5,
            i = 1e3,
            s = 6e4,
            o = !1,
            u = +(new Date),
            a = function(f) {
                n++;
                var l = this.readyState;
                if (o || l && l !== "complete" && l !== "loaded") return;
                f || (t += r, n >= 8 && t > r * 5 && r < i && (r *= 2));
                var c = window.jQuery && window.Backbone;
                if (c || t >= s) {
                    if (!c && confirm("Failed to load some files, retry?")) {
                        window.location.refresh();
                        return
                    }
                    o = !0, console.log("running", +(new Date) - u), e(window), console.log("ran", +(new Date) - u);
                    return
                }
                setTimeout(a, r)
            },
            f = document.getElementById("coreJS");
        f && (f.onload = f.onreadystatechange = a), setTimeout(a, r)
    })()
})()
